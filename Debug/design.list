
design.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d854  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002450  0800d968  0800d968  0001d968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fdb8  0800fdb8  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  0800fdb8  0800fdb8  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fdb8  0800fdb8  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fdb8  0800fdb8  0001fdb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fdbc  0800fdbc  0001fdbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800fdc0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e0  20000200  0800ffc0  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009e0  0800ffc0  000209e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020229  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012fb7  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000305a  00000000  00000000  00033223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d8  00000000  00000000  00036280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000df0  00000000  00000000  00037458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a16c  00000000  00000000  00038248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016be9  00000000  00000000  000523b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f791  00000000  00000000  00068f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060b4  00000000  00000000  000f8730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000fe7e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d94c 	.word	0x0800d94c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	0800d94c 	.word	0x0800d94c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <aht20_init>:
#define AHT20_ADDRESS 0x70

uint8_t readbuffer[6] = {0};
float temperature, humidity;
void aht20_init()
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af02      	add	r7, sp, #8
    uint8_t read_buffer;
    HAL_Delay(40);
 8000bde:	2028      	movs	r0, #40	; 0x28
 8000be0:	f001 fd7c 	bl	80026dc <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c1, AHT20_ADDRESS, &read_buffer, 1, HAL_MAX_DELAY);
 8000be4:	1dfa      	adds	r2, r7, #7
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	2301      	movs	r3, #1
 8000bee:	2170      	movs	r1, #112	; 0x70
 8000bf0:	480e      	ldr	r0, [pc, #56]	; (8000c2c <aht20_init+0x54>)
 8000bf2:	f002 fd67 	bl	80036c4 <HAL_I2C_Master_Receive>
    if ((read_buffer & 0x08) == 0)
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	f003 0308 	and.w	r3, r3, #8
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d110      	bne.n	8000c22 <aht20_init+0x4a>
    {
        uint8_t sendbuffer[3] = {0xbe, 0x08, 0x00};
 8000c00:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <aht20_init+0x58>)
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	6812      	ldr	r2, [r2, #0]
 8000c06:	4611      	mov	r1, r2
 8000c08:	8019      	strh	r1, [r3, #0]
 8000c0a:	3302      	adds	r3, #2
 8000c0c:	0c12      	lsrs	r2, r2, #16
 8000c0e:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDRESS, sendbuffer, 3, HAL_MAX_DELAY);
 8000c10:	1d3a      	adds	r2, r7, #4
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	2303      	movs	r3, #3
 8000c1a:	2170      	movs	r1, #112	; 0x70
 8000c1c:	4803      	ldr	r0, [pc, #12]	; (8000c2c <aht20_init+0x54>)
 8000c1e:	f002 fc53 	bl	80034c8 <HAL_I2C_Master_Transmit>
    }
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	2000022c 	.word	0x2000022c
 8000c30:	0800d968 	.word	0x0800d968

08000c34 <aht20_measure>:

void aht20_measure()
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af02      	add	r7, sp, #8
    static uint8_t sendbuffer[3] = {0xac, 0x33, 0x00};
    HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDRESS, sendbuffer, 3, HAL_MAX_DELAY);
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	2303      	movs	r3, #3
 8000c42:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <aht20_measure+0x20>)
 8000c44:	2170      	movs	r1, #112	; 0x70
 8000c46:	4804      	ldr	r0, [pc, #16]	; (8000c58 <aht20_measure+0x24>)
 8000c48:	f002 fc3e 	bl	80034c8 <HAL_I2C_Master_Transmit>
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000000 	.word	0x20000000
 8000c58:	2000022c 	.word	0x2000022c

08000c5c <aht20_get>:

void aht20_get()
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af02      	add	r7, sp, #8
    HAL_I2C_Master_Receive(&hi2c1, AHT20_ADDRESS, readbuffer, 6, HAL_MAX_DELAY);
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	2306      	movs	r3, #6
 8000c6a:	4a33      	ldr	r2, [pc, #204]	; (8000d38 <aht20_get+0xdc>)
 8000c6c:	2170      	movs	r1, #112	; 0x70
 8000c6e:	4833      	ldr	r0, [pc, #204]	; (8000d3c <aht20_get+0xe0>)
 8000c70:	f002 fd28 	bl	80036c4 <HAL_I2C_Master_Receive>
    if ((readbuffer[0] & 0x80) == 0x00)
 8000c74:	4b30      	ldr	r3, [pc, #192]	; (8000d38 <aht20_get+0xdc>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	b25b      	sxtb	r3, r3
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	db57      	blt.n	8000d2e <aht20_get+0xd2>
    {
        uint32_t data = ((uint32_t)readbuffer[3] >> 4) + ((uint32_t)readbuffer[2] << 4) + ((uint32_t)readbuffer[1] << 12);
 8000c7e:	4b2e      	ldr	r3, [pc, #184]	; (8000d38 <aht20_get+0xdc>)
 8000c80:	78db      	ldrb	r3, [r3, #3]
 8000c82:	091b      	lsrs	r3, r3, #4
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	461a      	mov	r2, r3
 8000c88:	4b2b      	ldr	r3, [pc, #172]	; (8000d38 <aht20_get+0xdc>)
 8000c8a:	789b      	ldrb	r3, [r3, #2]
 8000c8c:	011b      	lsls	r3, r3, #4
 8000c8e:	441a      	add	r2, r3
 8000c90:	4b29      	ldr	r3, [pc, #164]	; (8000d38 <aht20_get+0xdc>)
 8000c92:	785b      	ldrb	r3, [r3, #1]
 8000c94:	031b      	lsls	r3, r3, #12
 8000c96:	4413      	add	r3, r2
 8000c98:	607b      	str	r3, [r7, #4]
        humidity = data * 100.0 / (1 << 20);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff fba2 	bl	80003e4 <__aeabi_ui2d>
 8000ca0:	f04f 0200 	mov.w	r2, #0
 8000ca4:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <aht20_get+0xe4>)
 8000ca6:	f7ff fc17 	bl	80004d8 <__aeabi_dmul>
 8000caa:	4602      	mov	r2, r0
 8000cac:	460b      	mov	r3, r1
 8000cae:	4610      	mov	r0, r2
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f04f 0200 	mov.w	r2, #0
 8000cb6:	4b23      	ldr	r3, [pc, #140]	; (8000d44 <aht20_get+0xe8>)
 8000cb8:	f7ff fd38 	bl	800072c <__aeabi_ddiv>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4610      	mov	r0, r2
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f7ff ff00 	bl	8000ac8 <__aeabi_d2f>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	4a1f      	ldr	r2, [pc, #124]	; (8000d48 <aht20_get+0xec>)
 8000ccc:	6013      	str	r3, [r2, #0]
        data = ((uint32_t)(readbuffer[3] & 0x07) << 16) + ((uint32_t)readbuffer[4] << 8) + readbuffer[5];
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <aht20_get+0xdc>)
 8000cd0:	78db      	ldrb	r3, [r3, #3]
 8000cd2:	041b      	lsls	r3, r3, #16
 8000cd4:	f403 22e0 	and.w	r2, r3, #458752	; 0x70000
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <aht20_get+0xdc>)
 8000cda:	791b      	ldrb	r3, [r3, #4]
 8000cdc:	021b      	lsls	r3, r3, #8
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a15      	ldr	r2, [pc, #84]	; (8000d38 <aht20_get+0xdc>)
 8000ce2:	7952      	ldrb	r2, [r2, #5]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	607b      	str	r3, [r7, #4]
        temperature = data * 200.0 / (1 << 20) - 50;
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff fb7b 	bl	80003e4 <__aeabi_ui2d>
 8000cee:	f04f 0200 	mov.w	r2, #0
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <aht20_get+0xf0>)
 8000cf4:	f7ff fbf0 	bl	80004d8 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f04f 0200 	mov.w	r2, #0
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <aht20_get+0xe8>)
 8000d06:	f7ff fd11 	bl	800072c <__aeabi_ddiv>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	4610      	mov	r0, r2
 8000d10:	4619      	mov	r1, r3
 8000d12:	f04f 0200 	mov.w	r2, #0
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <aht20_get+0xf4>)
 8000d18:	f7ff fa26 	bl	8000168 <__aeabi_dsub>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	4610      	mov	r0, r2
 8000d22:	4619      	mov	r1, r3
 8000d24:	f7ff fed0 	bl	8000ac8 <__aeabi_d2f>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <aht20_get+0xf8>)
 8000d2c:	6013      	str	r3, [r2, #0]
    }
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	2000021c 	.word	0x2000021c
 8000d3c:	2000022c 	.word	0x2000022c
 8000d40:	40590000 	.word	0x40590000
 8000d44:	41300000 	.word	0x41300000
 8000d48:	20000228 	.word	0x20000228
 8000d4c:	40690000 	.word	0x40690000
 8000d50:	40490000 	.word	0x40490000
 8000d54:	20000224 	.word	0x20000224

08000d58 <aht20_getTemperature>:

float aht20_getTemperature()
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
    return temperature;
 8000d5c:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <aht20_getTemperature+0x10>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	20000224 	.word	0x20000224

08000d6c <aht20_getHumidity>:

float aht20_getHumidity()
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
    return humidity;
 8000d70:	4b02      	ldr	r3, [pc, #8]	; (8000d7c <aht20_getHumidity+0x10>)
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	20000228 	.word	0x20000228

08000d80 <oled_display_mainPage>:
#include "usart.h"
#include "display.h"
uint8_t mesu_x = 48, mesu_y = 16;
// 显示温湿度信息
void oled_display_mainPage()
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
    OLED_NewFrame();
 8000d84:	f000 fcf4 	bl	8001770 <OLED_NewFrame>
    OLED_DrawImage(mesu_x, mesu_y, &main_pageImg, OLED_COLOR_NORMAL);
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <oled_display_mainPage+0x20>)
 8000d8a:	7818      	ldrb	r0, [r3, #0]
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <oled_display_mainPage+0x24>)
 8000d8e:	7819      	ldrb	r1, [r3, #0]
 8000d90:	2300      	movs	r3, #0
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <oled_display_mainPage+0x28>)
 8000d94:	f000 feb9 	bl	8001b0a <OLED_DrawImage>
    OLED_ShowFrame();
 8000d98:	f000 fcf6 	bl	8001788 <OLED_ShowFrame>
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000003 	.word	0x20000003
 8000da4:	20000004 	.word	0x20000004
 8000da8:	0800f5b8 	.word	0x0800f5b8

08000dac <oled_display_authorInfo>:
// 显示作者信息
void oled_display_authorInfo()
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
    OLED_NewFrame();
 8000db0:	f000 fcde 	bl	8001770 <OLED_NewFrame>
    OLED_DrawImage(mesu_x, mesu_y, &authorImg, OLED_COLOR_NORMAL);
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <oled_display_authorInfo+0x20>)
 8000db6:	7818      	ldrb	r0, [r3, #0]
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <oled_display_authorInfo+0x24>)
 8000dba:	7819      	ldrb	r1, [r3, #0]
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <oled_display_authorInfo+0x28>)
 8000dc0:	f000 fea3 	bl	8001b0a <OLED_DrawImage>
    OLED_ShowFrame();
 8000dc4:	f000 fce0 	bl	8001788 <OLED_ShowFrame>
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000003 	.word	0x20000003
 8000dd0:	20000004 	.word	0x20000004
 8000dd4:	0800f6c8 	.word	0x0800f6c8

08000dd8 <oled_display_timer>:
// 显示计时器
void oled_display_timer()
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
    OLED_NewFrame();
 8000ddc:	f000 fcc8 	bl	8001770 <OLED_NewFrame>
    OLED_DrawImage(mesu_x, mesu_y, &timerImg, OLED_COLOR_NORMAL);
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <oled_display_timer+0x20>)
 8000de2:	7818      	ldrb	r0, [r3, #0]
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <oled_display_timer+0x24>)
 8000de6:	7819      	ldrb	r1, [r3, #0]
 8000de8:	2300      	movs	r3, #0
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <oled_display_timer+0x28>)
 8000dec:	f000 fe8d 	bl	8001b0a <OLED_DrawImage>
    OLED_ShowFrame();
 8000df0:	f000 fcca 	bl	8001788 <OLED_ShowFrame>
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000003 	.word	0x20000003
 8000dfc:	20000004 	.word	0x20000004
 8000e00:	0800f640 	.word	0x0800f640

08000e04 <oled_display_curTime>:
// 显示当前时间
void oled_display_curTime()
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
    OLED_NewFrame();
 8000e08:	f000 fcb2 	bl	8001770 <OLED_NewFrame>
    OLED_DrawImage(mesu_x, mesu_y, &cur_timeImg, OLED_COLOR_NORMAL);
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <oled_display_curTime+0x20>)
 8000e0e:	7818      	ldrb	r0, [r3, #0]
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <oled_display_curTime+0x24>)
 8000e12:	7819      	ldrb	r1, [r3, #0]
 8000e14:	2300      	movs	r3, #0
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <oled_display_curTime+0x28>)
 8000e18:	f000 fe77 	bl	8001b0a <OLED_DrawImage>
    OLED_ShowFrame();
 8000e1c:	f000 fcb4 	bl	8001788 <OLED_ShowFrame>
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000003 	.word	0x20000003
 8000e28:	20000004 	.word	0x20000004
 8000e2c:	0800f750 	.word	0x0800f750

08000e30 <oled_disfunc_time>:

// 功能函数
void oled_disfunc_time(uint8_t flag, uint8_t *x, uint8_t *y, uint8_t *z)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08e      	sub	sp, #56	; 0x38
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	73fb      	strb	r3, [r7, #15]
    char title[10];
    if (flag == CUR_TIME)
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d106      	bne.n	8000e54 <oled_disfunc_time+0x24>
    {
        strcpy(title, "CUR TIME");
 8000e46:	f107 0320 	add.w	r3, r7, #32
 8000e4a:	4a24      	ldr	r2, [pc, #144]	; (8000edc <oled_disfunc_time+0xac>)
 8000e4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e4e:	c303      	stmia	r3!, {r0, r1}
 8000e50:	701a      	strb	r2, [r3, #0]
 8000e52:	e009      	b.n	8000e68 <oled_disfunc_time+0x38>
    }
    else if (flag == TIMER)
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d106      	bne.n	8000e68 <oled_disfunc_time+0x38>
    {
        strcpy(title, " *TIMER");
 8000e5a:	f107 0320 	add.w	r3, r7, #32
 8000e5e:	4a20      	ldr	r2, [pc, #128]	; (8000ee0 <oled_disfunc_time+0xb0>)
 8000e60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e64:	e883 0003 	stmia.w	r3, {r0, r1}
    }
    uint8_t font_x1 = 16;
 8000e68:	2310      	movs	r3, #16
 8000e6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t font_x2 = 16;
 8000e6e:	2310      	movs	r3, #16
 8000e70:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t font_y1 = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t font_y2 = 32;
 8000e7a:	2320      	movs	r3, #32
 8000e7c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    OLED_NewFrame();
 8000e80:	f000 fc76 	bl	8001770 <OLED_NewFrame>
    char message[15];
    sprintf(message, "%02d:%02d:%02d", *x, *y, *z);
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	f107 0010 	add.w	r0, r7, #16
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	4911      	ldr	r1, [pc, #68]	; (8000ee4 <oled_disfunc_time+0xb4>)
 8000e9e:	f008 f9b3 	bl	8009208 <siprintf>
    OLED_PrintASCIIString(font_x1, font_y1, title, &afont24x12, OLED_COLOR_NORMAL);
 8000ea2:	f107 0220 	add.w	r2, r7, #32
 8000ea6:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8000eaa:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 8000eae:	2300      	movs	r3, #0
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <oled_disfunc_time+0xb8>)
 8000eb4:	f000 fe76 	bl	8001ba4 <OLED_PrintASCIIString>
    OLED_PrintASCIIString(font_x2, font_y2, message, &afont24x12, OLED_COLOR_NORMAL);
 8000eb8:	f107 0210 	add.w	r2, r7, #16
 8000ebc:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8000ec0:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <oled_disfunc_time+0xb8>)
 8000eca:	f000 fe6b 	bl	8001ba4 <OLED_PrintASCIIString>
    OLED_ShowFrame();
 8000ece:	f000 fc5b 	bl	8001788 <OLED_ShowFrame>
}
 8000ed2:	bf00      	nop
 8000ed4:	3730      	adds	r7, #48	; 0x30
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	0800d96c 	.word	0x0800d96c
 8000ee0:	0800d978 	.word	0x0800d978
 8000ee4:	0800d980 	.word	0x0800d980
 8000ee8:	0800ed20 	.word	0x0800ed20

08000eec <oled_disfunc_authorInfo>:
void oled_disfunc_authorInfo()
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
    OLED_NewFrame();
 8000ef0:	f000 fc3e 	bl	8001770 <OLED_NewFrame>
    OLED_DrawImage(0, 0, &author_infoImg, OLED_COLOR_NORMAL);
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <oled_disfunc_authorInfo+0x1c>)
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 fe05 	bl	8001b0a <OLED_DrawImage>
    OLED_ShowFrame();
 8000f00:	f000 fc42 	bl	8001788 <OLED_ShowFrame>
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	0800f128 	.word	0x0800f128

08000f0c <oled_disfunc_temperatureANDhumidity>:

void oled_disfunc_temperatureANDhumidity()
{
 8000f0c:	b5b0      	push	{r4, r5, r7, lr}
 8000f0e:	b096      	sub	sp, #88	; 0x58
 8000f10:	af02      	add	r7, sp, #8
    aht20_measure();
 8000f12:	f7ff fe8f 	bl	8000c34 <aht20_measure>
    HAL_Delay(75);
 8000f16:	204b      	movs	r0, #75	; 0x4b
 8000f18:	f001 fbe0 	bl	80026dc <HAL_Delay>
    aht20_get();
 8000f1c:	f7ff fe9e 	bl	8000c5c <aht20_get>
    float temperature, humidity;
    temperature = aht20_getTemperature();
 8000f20:	f7ff ff1a 	bl	8000d58 <aht20_getTemperature>
 8000f24:	64f8      	str	r0, [r7, #76]	; 0x4c
    humidity = aht20_getHumidity();
 8000f26:	f7ff ff21 	bl	8000d6c <aht20_getHumidity>
 8000f2a:	64b8      	str	r0, [r7, #72]	; 0x48
    if (A_isopen)
 8000f2c:	4b39      	ldr	r3, [pc, #228]	; (8001014 <oled_disfunc_temperatureANDhumidity+0x108>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d034      	beq.n	8000f9e <oled_disfunc_temperatureANDhumidity+0x92>
    {
        A_count++;
 8000f34:	4b38      	ldr	r3, [pc, #224]	; (8001018 <oled_disfunc_temperatureANDhumidity+0x10c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b36      	ldr	r3, [pc, #216]	; (8001018 <oled_disfunc_temperatureANDhumidity+0x10c>)
 8000f3e:	701a      	strb	r2, [r3, #0]
        if (A_count == 5)
 8000f40:	4b35      	ldr	r3, [pc, #212]	; (8001018 <oled_disfunc_temperatureANDhumidity+0x10c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b05      	cmp	r3, #5
 8000f46:	d12a      	bne.n	8000f9e <oled_disfunc_temperatureANDhumidity+0x92>
        {
            A_count = 0;
 8000f48:	4b33      	ldr	r3, [pc, #204]	; (8001018 <oled_disfunc_temperatureANDhumidity+0x10c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
            char info[50];
            sprintf(info, "温度：%.1f度,湿度：%.1f%%", temperature, humidity);
 8000f4e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000f50:	f7ff fa6a 	bl	8000428 <__aeabi_f2d>
 8000f54:	4604      	mov	r4, r0
 8000f56:	460d      	mov	r5, r1
 8000f58:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000f5a:	f7ff fa65 	bl	8000428 <__aeabi_f2d>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	4638      	mov	r0, r7
 8000f64:	e9cd 2300 	strd	r2, r3, [sp]
 8000f68:	4622      	mov	r2, r4
 8000f6a:	462b      	mov	r3, r5
 8000f6c:	492b      	ldr	r1, [pc, #172]	; (800101c <oled_disfunc_temperatureANDhumidity+0x110>)
 8000f6e:	f008 f94b 	bl	8009208 <siprintf>
            HAL_UART_Transmit_DMA(&huart1, (uint8_t *)info, strlen(info));
 8000f72:	463b      	mov	r3, r7
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff f8eb 	bl	8000150 <strlen>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	463b      	mov	r3, r7
 8000f80:	4619      	mov	r1, r3
 8000f82:	4827      	ldr	r0, [pc, #156]	; (8001020 <oled_disfunc_temperatureANDhumidity+0x114>)
 8000f84:	f006 fa42 	bl	800740c <HAL_UART_Transmit_DMA>
            HAL_UART_Transmit_IT(&huart1,(uint8_t *)info, strlen(info));
 8000f88:	463b      	mov	r3, r7
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff f8e0 	bl	8000150 <strlen>
 8000f90:	4603      	mov	r3, r0
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	463b      	mov	r3, r7
 8000f96:	4619      	mov	r1, r3
 8000f98:	4821      	ldr	r0, [pc, #132]	; (8001020 <oled_disfunc_temperatureANDhumidity+0x114>)
 8000f9a:	f006 fa01 	bl	80073a0 <HAL_UART_Transmit_IT>
        }
    }
    OLED_NewFrame();
 8000f9e:	f000 fbe7 	bl	8001770 <OLED_NewFrame>
    char message[20];
    OLED_DrawImage(16, 0, &temperatureImg, OLED_COLOR_NORMAL);
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	4a1f      	ldr	r2, [pc, #124]	; (8001024 <oled_disfunc_temperatureANDhumidity+0x118>)
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	2010      	movs	r0, #16
 8000faa:	f000 fdae 	bl	8001b0a <OLED_DrawImage>
    OLED_DrawImage(21, 40, &humidityImg, OLED_COLOR_NORMAL);
 8000fae:	2300      	movs	r3, #0
 8000fb0:	4a1d      	ldr	r2, [pc, #116]	; (8001028 <oled_disfunc_temperatureANDhumidity+0x11c>)
 8000fb2:	2128      	movs	r1, #40	; 0x28
 8000fb4:	2015      	movs	r0, #21
 8000fb6:	f000 fda8 	bl	8001b0a <OLED_DrawImage>
    sprintf(message, "%4.1f °", temperature);
 8000fba:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000fbc:	f7ff fa34 	bl	8000428 <__aeabi_f2d>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000fc8:	4918      	ldr	r1, [pc, #96]	; (800102c <oled_disfunc_temperatureANDhumidity+0x120>)
 8000fca:	f008 f91d 	bl	8009208 <siprintf>
    OLED_PrintString(52, 11, message, &ZH_ATH, OLED_COLOR_NORMAL);
 8000fce:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <oled_disfunc_temperatureANDhumidity+0x124>)
 8000fd8:	210b      	movs	r1, #11
 8000fda:	2034      	movs	r0, #52	; 0x34
 8000fdc:	f000 fe32 	bl	8001c44 <OLED_PrintString>
    sprintf(message, "%4.1f %%", humidity);
 8000fe0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000fe2:	f7ff fa21 	bl	8000428 <__aeabi_f2d>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000fee:	4911      	ldr	r1, [pc, #68]	; (8001034 <oled_disfunc_temperatureANDhumidity+0x128>)
 8000ff0:	f008 f90a 	bl	8009208 <siprintf>
    OLED_PrintString(52, 42, message, &ZH_ATH, OLED_COLOR_NORMAL);
 8000ff4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <oled_disfunc_temperatureANDhumidity+0x124>)
 8000ffe:	212a      	movs	r1, #42	; 0x2a
 8001000:	2034      	movs	r0, #52	; 0x34
 8001002:	f000 fe1f 	bl	8001c44 <OLED_PrintString>
    OLED_ShowFrame();
 8001006:	f000 fbbf 	bl	8001788 <OLED_ShowFrame>
}
 800100a:	bf00      	nop
 800100c:	3750      	adds	r7, #80	; 0x50
 800100e:	46bd      	mov	sp, r7
 8001010:	bdb0      	pop	{r4, r5, r7, pc}
 8001012:	bf00      	nop
 8001014:	20000289 	.word	0x20000289
 8001018:	2000028a 	.word	0x2000028a
 800101c:	0800d990 	.word	0x0800d990
 8001020:	200007c0 	.word	0x200007c0
 8001024:	0800f7d8 	.word	0x0800f7d8
 8001028:	0800f820 	.word	0x0800f820
 800102c:	0800d9b4 	.word	0x0800d9b4
 8001030:	0800f924 	.word	0x0800f924
 8001034:	0800d9c0 	.word	0x0800d9c0

08001038 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <MX_DMA_Init+0x48>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	4a0f      	ldr	r2, [pc, #60]	; (8001080 <MX_DMA_Init+0x48>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6153      	str	r3, [r2, #20]
 800104a:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <MX_DMA_Init+0x48>)
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	200e      	movs	r0, #14
 800105c:	f001 fc39 	bl	80028d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001060:	200e      	movs	r0, #14
 8001062:	f001 fc52 	bl	800290a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	200f      	movs	r0, #15
 800106c:	f001 fc31 	bl	80028d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001070:	200f      	movs	r0, #15
 8001072:	f001 fc4a 	bl	800290a <HAL_NVIC_EnableIRQ>

}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000

08001084 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	f107 0310 	add.w	r3, r7, #16
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001098:	4b21      	ldr	r3, [pc, #132]	; (8001120 <MX_GPIO_Init+0x9c>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a20      	ldr	r2, [pc, #128]	; (8001120 <MX_GPIO_Init+0x9c>)
 800109e:	f043 0320 	orr.w	r3, r3, #32
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <MX_GPIO_Init+0x9c>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0320 	and.w	r3, r3, #32
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <MX_GPIO_Init+0x9c>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a1a      	ldr	r2, [pc, #104]	; (8001120 <MX_GPIO_Init+0x9c>)
 80010b6:	f043 0304 	orr.w	r3, r3, #4
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b18      	ldr	r3, [pc, #96]	; (8001120 <MX_GPIO_Init+0x9c>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c8:	4b15      	ldr	r3, [pc, #84]	; (8001120 <MX_GPIO_Init+0x9c>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a14      	ldr	r2, [pc, #80]	; (8001120 <MX_GPIO_Init+0x9c>)
 80010ce:	f043 0308 	orr.w	r3, r3, #8
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <MX_GPIO_Init+0x9c>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0308 	and.w	r3, r3, #8
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON_STATUS_Pin|BUTTON_ENSURE_Pin;
 80010e0:	2390      	movs	r3, #144	; 0x90
 80010e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_GPIO_Init+0xa0>)
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4619      	mov	r1, r3
 80010f2:	480d      	ldr	r0, [pc, #52]	; (8001128 <MX_GPIO_Init+0xa4>)
 80010f4:	f001 fed2 	bl	8002e9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	210f      	movs	r1, #15
 80010fc:	200a      	movs	r0, #10
 80010fe:	f001 fbe8 	bl	80028d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001102:	200a      	movs	r0, #10
 8001104:	f001 fc01 	bl	800290a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 15, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	210f      	movs	r1, #15
 800110c:	2017      	movs	r0, #23
 800110e:	f001 fbe0 	bl	80028d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001112:	2017      	movs	r0, #23
 8001114:	f001 fbf9 	bl	800290a <HAL_NVIC_EnableIRQ>

}
 8001118:	bf00      	nop
 800111a:	3720      	adds	r7, #32
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40021000 	.word	0x40021000
 8001124:	10210000 	.word	0x10210000
 8001128:	40010800 	.word	0x40010800

0800112c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_I2C1_Init+0x50>)
 8001132:	4a13      	ldr	r2, [pc, #76]	; (8001180 <MX_I2C1_Init+0x54>)
 8001134:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_I2C1_Init+0x50>)
 8001138:	4a12      	ldr	r2, [pc, #72]	; (8001184 <MX_I2C1_Init+0x58>)
 800113a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_I2C1_Init+0x50>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_I2C1_Init+0x50>)
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_I2C1_Init+0x50>)
 800114a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800114e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <MX_I2C1_Init+0x50>)
 8001152:	2200      	movs	r2, #0
 8001154:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_I2C1_Init+0x50>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <MX_I2C1_Init+0x50>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_I2C1_Init+0x50>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <MX_I2C1_Init+0x50>)
 800116a:	f002 f855 	bl	8003218 <HAL_I2C_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001174:	f000 fa73 	bl	800165e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	2000022c 	.word	0x2000022c
 8001180:	40005400 	.word	0x40005400
 8001184:	00061a80 	.word	0x00061a80

08001188 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a1d      	ldr	r2, [pc, #116]	; (8001218 <HAL_I2C_MspInit+0x90>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d133      	bne.n	8001210 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a8:	4b1c      	ldr	r3, [pc, #112]	; (800121c <HAL_I2C_MspInit+0x94>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a1b      	ldr	r2, [pc, #108]	; (800121c <HAL_I2C_MspInit+0x94>)
 80011ae:	f043 0308 	orr.w	r3, r3, #8
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <HAL_I2C_MspInit+0x94>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0308 	and.w	r3, r3, #8
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011c0:	23c0      	movs	r3, #192	; 0xc0
 80011c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c4:	2312      	movs	r3, #18
 80011c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c8:	2303      	movs	r3, #3
 80011ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	4619      	mov	r1, r3
 80011d2:	4813      	ldr	r0, [pc, #76]	; (8001220 <HAL_I2C_MspInit+0x98>)
 80011d4:	f001 fe62 	bl	8002e9c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011d8:	4b10      	ldr	r3, [pc, #64]	; (800121c <HAL_I2C_MspInit+0x94>)
 80011da:	69db      	ldr	r3, [r3, #28]
 80011dc:	4a0f      	ldr	r2, [pc, #60]	; (800121c <HAL_I2C_MspInit+0x94>)
 80011de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011e2:	61d3      	str	r3, [r2, #28]
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <HAL_I2C_MspInit+0x94>)
 80011e6:	69db      	ldr	r3, [r3, #28]
 80011e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2100      	movs	r1, #0
 80011f4:	201f      	movs	r0, #31
 80011f6:	f001 fb6c 	bl	80028d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011fa:	201f      	movs	r0, #31
 80011fc:	f001 fb85 	bl	800290a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001200:	2200      	movs	r2, #0
 8001202:	2100      	movs	r1, #0
 8001204:	2020      	movs	r0, #32
 8001206:	f001 fb64 	bl	80028d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800120a:	2020      	movs	r0, #32
 800120c:	f001 fb7d 	bl	800290a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001210:	bf00      	nop
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40005400 	.word	0x40005400
 800121c:	40021000 	.word	0x40021000
 8001220:	40010c00 	.word	0x40010c00
 8001224:	00000000 	.word	0x00000000

08001228 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001228:	b5b0      	push	{r4, r5, r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a5f      	ldr	r2, [pc, #380]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d15f      	bne.n	80012f8 <HAL_TIM_PeriodElapsedCallback+0xd0>
  {
    millisecond++;
 8001238:	4b5e      	ldr	r3, [pc, #376]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	3301      	adds	r3, #1
 800123e:	b2da      	uxtb	r2, r3
 8001240:	4b5c      	ldr	r3, [pc, #368]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001242:	701a      	strb	r2, [r3, #0]
    if (T_isopen)
 8001244:	4b5c      	ldr	r3, [pc, #368]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d026      	beq.n	800129a <HAL_TIM_PeriodElapsedCallback+0x72>
    {
      T_millisecond++;
 800124c:	4b5b      	ldr	r3, [pc, #364]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x194>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	3301      	adds	r3, #1
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b59      	ldr	r3, [pc, #356]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001256:	701a      	strb	r2, [r3, #0]
      if (T_millisecond == 100)
 8001258:	4b58      	ldr	r3, [pc, #352]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x194>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b64      	cmp	r3, #100	; 0x64
 800125e:	d11c      	bne.n	800129a <HAL_TIM_PeriodElapsedCallback+0x72>
      {
        T_second++;
 8001260:	4b57      	ldr	r3, [pc, #348]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	3301      	adds	r3, #1
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b55      	ldr	r3, [pc, #340]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800126a:	701a      	strb	r2, [r3, #0]
        T_millisecond = 0;
 800126c:	4b53      	ldr	r3, [pc, #332]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x194>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
        if (T_second == 60)
 8001272:	4b53      	ldr	r3, [pc, #332]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b3c      	cmp	r3, #60	; 0x3c
 8001278:	d10f      	bne.n	800129a <HAL_TIM_PeriodElapsedCallback+0x72>
        {
          T_minute++;
 800127a:	4b52      	ldr	r3, [pc, #328]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	3301      	adds	r3, #1
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4b50      	ldr	r3, [pc, #320]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001284:	701a      	strb	r2, [r3, #0]
          T_second = 0;
 8001286:	4b4e      	ldr	r3, [pc, #312]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
          if (T_minute == 100)
 800128c:	4b4d      	ldr	r3, [pc, #308]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b64      	cmp	r3, #100	; 0x64
 8001292:	d102      	bne.n	800129a <HAL_TIM_PeriodElapsedCallback+0x72>
          {
            T_minute = 0;
 8001294:	4b4b      	ldr	r3, [pc, #300]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
          }
        }
      }
    }
    if (millisecond == 100)
 800129a:	4b46      	ldr	r3, [pc, #280]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b64      	cmp	r3, #100	; 0x64
 80012a0:	d17c      	bne.n	800139c <HAL_TIM_PeriodElapsedCallback+0x174>
    {
      second++;
 80012a2:	4b49      	ldr	r3, [pc, #292]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	3301      	adds	r3, #1
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b47      	ldr	r3, [pc, #284]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80012ac:	701a      	strb	r2, [r3, #0]
      millisecond = 0;
 80012ae:	4b41      	ldr	r3, [pc, #260]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
      if (second == 60)
 80012b4:	4b44      	ldr	r3, [pc, #272]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b3c      	cmp	r3, #60	; 0x3c
 80012ba:	d16f      	bne.n	800139c <HAL_TIM_PeriodElapsedCallback+0x174>
      {
        minute++;
 80012bc:	4b43      	ldr	r3, [pc, #268]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	3301      	adds	r3, #1
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	4b41      	ldr	r3, [pc, #260]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80012c6:	701a      	strb	r2, [r3, #0]
        second = 0;
 80012c8:	4b3f      	ldr	r3, [pc, #252]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
        if (minute == 60)
 80012ce:	4b3f      	ldr	r3, [pc, #252]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b3c      	cmp	r3, #60	; 0x3c
 80012d4:	d162      	bne.n	800139c <HAL_TIM_PeriodElapsedCallback+0x174>
        {
          hour++;
 80012d6:	4b3e      	ldr	r3, [pc, #248]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	3301      	adds	r3, #1
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4b3c      	ldr	r3, [pc, #240]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80012e0:	701a      	strb	r2, [r3, #0]
          minute = 0;
 80012e2:	4b3a      	ldr	r3, [pc, #232]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
          if (hour == 24)
 80012e8:	4b39      	ldr	r3, [pc, #228]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b18      	cmp	r3, #24
 80012ee:	d155      	bne.n	800139c <HAL_TIM_PeriodElapsedCallback+0x174>
          {
            hour = 0;
 80012f0:	4b37      	ldr	r3, [pc, #220]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
    if (++x == 2 * cc)
    {
      x = 0;
    }
  }
}
 80012f6:	e051      	b.n	800139c <HAL_TIM_PeriodElapsedCallback+0x174>
  else if (htim == &htim3)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a36      	ldr	r2, [pc, #216]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d14d      	bne.n	800139c <HAL_TIM_PeriodElapsedCallback+0x174>
    uint16_t y = pow(1.1, fabs(x - cc)) * (2000.0 / pow(1.1, cc - 1));
 8001300:	4b35      	ldr	r3, [pc, #212]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b35      	ldr	r3, [pc, #212]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff f879 	bl	8000404 <__aeabi_i2d>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4614      	mov	r4, r2
 8001318:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800131c:	4622      	mov	r2, r4
 800131e:	462b      	mov	r3, r5
 8001320:	a121      	add	r1, pc, #132	; (adr r1, 80013a8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001322:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001326:	f00b fc07 	bl	800cb38 <pow>
 800132a:	4604      	mov	r4, r0
 800132c:	460d      	mov	r5, r1
 800132e:	4b2b      	ldr	r3, [pc, #172]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	3b01      	subs	r3, #1
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff f865 	bl	8000404 <__aeabi_i2d>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	a11a      	add	r1, pc, #104	; (adr r1, 80013a8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001340:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001344:	f00b fbf8 	bl	800cb38 <pow>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	f04f 0000 	mov.w	r0, #0
 8001350:	4923      	ldr	r1, [pc, #140]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001352:	f7ff f9eb 	bl	800072c <__aeabi_ddiv>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4620      	mov	r0, r4
 800135c:	4629      	mov	r1, r5
 800135e:	f7ff f8bb 	bl	80004d8 <__aeabi_dmul>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f7ff fb8d 	bl	8000a88 <__aeabi_d2uiz>
 800136e:	4603      	mov	r3, r0
 8001370:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, y);
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	89fa      	ldrh	r2, [r7, #14]
 8001378:	641a      	str	r2, [r3, #64]	; 0x40
    if (++x == 2 * cc)
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	3301      	adds	r3, #1
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001384:	701a      	strb	r2, [r3, #0]
 8001386:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	429a      	cmp	r2, r3
 8001394:	d102      	bne.n	800139c <HAL_TIM_PeriodElapsedCallback+0x174>
      x = 0;
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
}
 800139c:	bf00      	nop
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bdb0      	pop	{r4, r5, r7, pc}
 80013a4:	f3af 8000 	nop.w
 80013a8:	9999999a 	.word	0x9999999a
 80013ac:	3ff19999 	.word	0x3ff19999
 80013b0:	20000730 	.word	0x20000730
 80013b4:	20000284 	.word	0x20000284
 80013b8:	20000288 	.word	0x20000288
 80013bc:	20000287 	.word	0x20000287
 80013c0:	20000286 	.word	0x20000286
 80013c4:	20000285 	.word	0x20000285
 80013c8:	20000283 	.word	0x20000283
 80013cc:	20000282 	.word	0x20000282
 80013d0:	20000281 	.word	0x20000281
 80013d4:	20000778 	.word	0x20000778
 80013d8:	20000019 	.word	0x20000019
 80013dc:	2000001a 	.word	0x2000001a
 80013e0:	409f4000 	.word	0x409f4000

080013e4 <HAL_UARTEx_RxEventCallback>:
char ms[] = "notice: hh:mm:ss";
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	807b      	strh	r3, [r7, #2]
  if (huart == &huart1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a26      	ldr	r2, [pc, #152]	; (800148c <HAL_UARTEx_RxEventCallback+0xa8>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d145      	bne.n	8001484 <HAL_UARTEx_RxEventCallback+0xa0>
  {
    if (Size == 8)
 80013f8:	887b      	ldrh	r3, [r7, #2]
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d133      	bne.n	8001466 <HAL_UARTEx_RxEventCallback+0x82>
    {
      C_hour = (time[0] - '0') * 10 + (time[1] - '0');
 80013fe:	4b24      	ldr	r3, [pc, #144]	; (8001490 <HAL_UARTEx_RxEventCallback+0xac>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	3b30      	subs	r3, #48	; 0x30
 8001404:	b2db      	uxtb	r3, r3
 8001406:	461a      	mov	r2, r3
 8001408:	0092      	lsls	r2, r2, #2
 800140a:	4413      	add	r3, r2
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	b2da      	uxtb	r2, r3
 8001410:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <HAL_UARTEx_RxEventCallback+0xac>)
 8001412:	785b      	ldrb	r3, [r3, #1]
 8001414:	4413      	add	r3, r2
 8001416:	b2db      	uxtb	r3, r3
 8001418:	3b30      	subs	r3, #48	; 0x30
 800141a:	b2da      	uxtb	r2, r3
 800141c:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <HAL_UARTEx_RxEventCallback+0xb0>)
 800141e:	701a      	strb	r2, [r3, #0]
      C_minute = (time[3] - '0') * 10 + (time[4] - '0');
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <HAL_UARTEx_RxEventCallback+0xac>)
 8001422:	78db      	ldrb	r3, [r3, #3]
 8001424:	3b30      	subs	r3, #48	; 0x30
 8001426:	b2db      	uxtb	r3, r3
 8001428:	461a      	mov	r2, r3
 800142a:	0092      	lsls	r2, r2, #2
 800142c:	4413      	add	r3, r2
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	b2da      	uxtb	r2, r3
 8001432:	4b17      	ldr	r3, [pc, #92]	; (8001490 <HAL_UARTEx_RxEventCallback+0xac>)
 8001434:	791b      	ldrb	r3, [r3, #4]
 8001436:	4413      	add	r3, r2
 8001438:	b2db      	uxtb	r3, r3
 800143a:	3b30      	subs	r3, #48	; 0x30
 800143c:	b2da      	uxtb	r2, r3
 800143e:	4b16      	ldr	r3, [pc, #88]	; (8001498 <HAL_UARTEx_RxEventCallback+0xb4>)
 8001440:	701a      	strb	r2, [r3, #0]
      C_second = (time[6] - '0') * 10 + (time[7] - '0');
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <HAL_UARTEx_RxEventCallback+0xac>)
 8001444:	799b      	ldrb	r3, [r3, #6]
 8001446:	3b30      	subs	r3, #48	; 0x30
 8001448:	b2db      	uxtb	r3, r3
 800144a:	461a      	mov	r2, r3
 800144c:	0092      	lsls	r2, r2, #2
 800144e:	4413      	add	r3, r2
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	b2da      	uxtb	r2, r3
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <HAL_UARTEx_RxEventCallback+0xac>)
 8001456:	79db      	ldrb	r3, [r3, #7]
 8001458:	4413      	add	r3, r2
 800145a:	b2db      	uxtb	r3, r3
 800145c:	3b30      	subs	r3, #48	; 0x30
 800145e:	b2da      	uxtb	r2, r3
 8001460:	4b0e      	ldr	r3, [pc, #56]	; (800149c <HAL_UARTEx_RxEventCallback+0xb8>)
 8001462:	701a      	strb	r2, [r3, #0]
 8001464:	e009      	b.n	800147a <HAL_UARTEx_RxEventCallback+0x96>
    }
    else
    {
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)&ms, strlen(ms));
 8001466:	480e      	ldr	r0, [pc, #56]	; (80014a0 <HAL_UARTEx_RxEventCallback+0xbc>)
 8001468:	f7fe fe72 	bl	8000150 <strlen>
 800146c:	4603      	mov	r3, r0
 800146e:	b29b      	uxth	r3, r3
 8001470:	461a      	mov	r2, r3
 8001472:	490b      	ldr	r1, [pc, #44]	; (80014a0 <HAL_UARTEx_RxEventCallback+0xbc>)
 8001474:	4805      	ldr	r0, [pc, #20]	; (800148c <HAL_UARTEx_RxEventCallback+0xa8>)
 8001476:	f005 ffc9 	bl	800740c <HAL_UART_Transmit_DMA>
    }
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)&time, sizeof(time) / sizeof(char));
 800147a:	2214      	movs	r2, #20
 800147c:	4904      	ldr	r1, [pc, #16]	; (8001490 <HAL_UARTEx_RxEventCallback+0xac>)
 800147e:	4803      	ldr	r0, [pc, #12]	; (800148c <HAL_UARTEx_RxEventCallback+0xa8>)
 8001480:	f006 f834 	bl	80074ec <HAL_UARTEx_ReceiveToIdle_DMA>
  }
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200007c0 	.word	0x200007c0
 8001490:	20000290 	.word	0x20000290
 8001494:	2000028b 	.word	0x2000028b
 8001498:	2000028c 	.word	0x2000028c
 800149c:	2000028d 	.word	0x2000028d
 80014a0:	20000008 	.word	0x20000008

080014a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a8:	f001 f8b6 	bl	8002618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ac:	f000 f892 	bl	80015d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b0:	f7ff fde8 	bl	8001084 <MX_GPIO_Init>
  MX_DMA_Init();
 80014b4:	f7ff fdc0 	bl	8001038 <MX_DMA_Init>
  MX_I2C1_Init();
 80014b8:	f7ff fe38 	bl	800112c <MX_I2C1_Init>
  MX_TIM2_Init();
 80014bc:	f000 fe90 	bl	80021e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014c0:	f000 feda 	bl	8002278 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80014c4:	f000 ffae 	bl	8002424 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // 初始化
  {
    aht20_init();
 80014c8:	f7ff fb86 	bl	8000bd8 <aht20_init>
    HAL_TIM_Base_Start_IT(&htim2);
 80014cc:	4834      	ldr	r0, [pc, #208]	; (80015a0 <main+0xfc>)
 80014ce:	f005 f809 	bl	80064e4 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim3);
 80014d2:	4834      	ldr	r0, [pc, #208]	; (80015a4 <main+0x100>)
 80014d4:	f005 f806 	bl	80064e4 <HAL_TIM_Base_Start_IT>
    HAL_Delay(20);
 80014d8:	2014      	movs	r0, #20
 80014da:	f001 f8ff 	bl	80026dc <HAL_Delay>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80014de:	210c      	movs	r1, #12
 80014e0:	4830      	ldr	r0, [pc, #192]	; (80015a4 <main+0x100>)
 80014e2:	f005 f8a1 	bl	8006628 <HAL_TIM_PWM_Start>
    OLED_Init();
 80014e6:	f000 f8e7 	bl	80016b8 <OLED_Init>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)&time, sizeof(time) / sizeof(char));
 80014ea:	2214      	movs	r2, #20
 80014ec:	492e      	ldr	r1, [pc, #184]	; (80015a8 <main+0x104>)
 80014ee:	482f      	ldr	r0, [pc, #188]	; (80015ac <main+0x108>)
 80014f0:	f005 fffc 	bl	80074ec <HAL_UARTEx_ReceiveToIdle_DMA>
  }
  // 开机动画
  {
    OLED_NewFrame();
 80014f4:	f000 f93c 	bl	8001770 <OLED_NewFrame>
    OLED_DrawImage(0, 0, &xcuImg, OLED_COLOR_NORMAL);
 80014f8:	2300      	movs	r3, #0
 80014fa:	4a2d      	ldr	r2, [pc, #180]	; (80015b0 <main+0x10c>)
 80014fc:	2100      	movs	r1, #0
 80014fe:	2000      	movs	r0, #0
 8001500:	f000 fb03 	bl	8001b0a <OLED_DrawImage>
    OLED_ShowFrame();
 8001504:	f000 f940 	bl	8001788 <OLED_ShowFrame>
    HAL_Delay(1000);
 8001508:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800150c:	f001 f8e6 	bl	80026dc <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // OLED_Init();
    if (status_inside)
 8001510:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <main+0x110>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d023      	beq.n	8001560 <main+0xbc>
    {
      switch (cur_status)
 8001518:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <main+0x114>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	3b01      	subs	r3, #1
 800151e:	2b03      	cmp	r3, #3
 8001520:	d83a      	bhi.n	8001598 <main+0xf4>
 8001522:	a201      	add	r2, pc, #4	; (adr r2, 8001528 <main+0x84>)
 8001524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001528:	08001539 	.word	0x08001539
 800152c:	0800153f 	.word	0x0800153f
 8001530:	0800154d 	.word	0x0800154d
 8001534:	0800155b 	.word	0x0800155b
      {
      case MESU_MAIN_PAGE:
        oled_disfunc_temperatureANDhumidity();
 8001538:	f7ff fce8 	bl	8000f0c <oled_disfunc_temperatureANDhumidity>
        break;
 800153c:	e02f      	b.n	800159e <main+0xfa>
      case MESU_CURRENT_TIME:
        oled_disfunc_time(CUR_TIME, &hour, &minute, &second);
 800153e:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <main+0x118>)
 8001540:	4a1f      	ldr	r2, [pc, #124]	; (80015c0 <main+0x11c>)
 8001542:	4920      	ldr	r1, [pc, #128]	; (80015c4 <main+0x120>)
 8001544:	2001      	movs	r0, #1
 8001546:	f7ff fc73 	bl	8000e30 <oled_disfunc_time>
        break;
 800154a:	e028      	b.n	800159e <main+0xfa>
      case MESU_TIMER:
        oled_disfunc_time(TIMER, &T_minute, &T_second, &T_millisecond);
 800154c:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <main+0x124>)
 800154e:	4a1f      	ldr	r2, [pc, #124]	; (80015cc <main+0x128>)
 8001550:	491f      	ldr	r1, [pc, #124]	; (80015d0 <main+0x12c>)
 8001552:	2002      	movs	r0, #2
 8001554:	f7ff fc6c 	bl	8000e30 <oled_disfunc_time>
        break;
 8001558:	e021      	b.n	800159e <main+0xfa>
      case MESU_AUTHOR_INFO:
        oled_disfunc_authorInfo();
 800155a:	f7ff fcc7 	bl	8000eec <oled_disfunc_authorInfo>
        break;
 800155e:	e01e      	b.n	800159e <main+0xfa>
        break;
      }
    }
    else
    {
      switch (cur_status)
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <main+0x114>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	3b01      	subs	r3, #1
 8001566:	2b03      	cmp	r3, #3
 8001568:	d818      	bhi.n	800159c <main+0xf8>
 800156a:	a201      	add	r2, pc, #4	; (adr r2, 8001570 <main+0xcc>)
 800156c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001570:	08001581 	.word	0x08001581
 8001574:	08001587 	.word	0x08001587
 8001578:	0800158d 	.word	0x0800158d
 800157c:	08001593 	.word	0x08001593
      {
      case MESU_MAIN_PAGE:
        oled_display_mainPage();
 8001580:	f7ff fbfe 	bl	8000d80 <oled_display_mainPage>
        break;
 8001584:	e00b      	b.n	800159e <main+0xfa>
      case MESU_CURRENT_TIME:
        oled_display_curTime();
 8001586:	f7ff fc3d 	bl	8000e04 <oled_display_curTime>
        break;
 800158a:	e008      	b.n	800159e <main+0xfa>
      case MESU_TIMER:
        oled_display_timer();
 800158c:	f7ff fc24 	bl	8000dd8 <oled_display_timer>
        break;
 8001590:	e005      	b.n	800159e <main+0xfa>
      case MESU_AUTHOR_INFO:
        oled_display_authorInfo();
 8001592:	f7ff fc0b 	bl	8000dac <oled_display_authorInfo>
        break;
 8001596:	e002      	b.n	800159e <main+0xfa>
        break;
 8001598:	bf00      	nop
 800159a:	e7b9      	b.n	8001510 <main+0x6c>
      default:
        break;
 800159c:	bf00      	nop
    if (status_inside)
 800159e:	e7b7      	b.n	8001510 <main+0x6c>
 80015a0:	20000730 	.word	0x20000730
 80015a4:	20000778 	.word	0x20000778
 80015a8:	20000290 	.word	0x20000290
 80015ac:	200007c0 	.word	0x200007c0
 80015b0:	0800f530 	.word	0x0800f530
 80015b4:	20000280 	.word	0x20000280
 80015b8:	20000005 	.word	0x20000005
 80015bc:	20000283 	.word	0x20000283
 80015c0:	20000282 	.word	0x20000282
 80015c4:	20000281 	.word	0x20000281
 80015c8:	20000287 	.word	0x20000287
 80015cc:	20000286 	.word	0x20000286
 80015d0:	20000285 	.word	0x20000285

080015d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b090      	sub	sp, #64	; 0x40
 80015d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015da:	f107 0318 	add.w	r3, r7, #24
 80015de:	2228      	movs	r2, #40	; 0x28
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f007 fe83 	bl	80092ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
 80015f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015f6:	2301      	movs	r3, #1
 80015f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001604:	2301      	movs	r3, #1
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001608:	2302      	movs	r3, #2
 800160a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800160c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001610:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001612:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001616:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001618:	f107 0318 	add.w	r3, r7, #24
 800161c:	4618      	mov	r0, r3
 800161e:	f004 fb01 	bl	8005c24 <HAL_RCC_OscConfig>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001628:	f000 f819 	bl	800165e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162c:	230f      	movs	r3, #15
 800162e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001630:	2302      	movs	r3, #2
 8001632:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800163c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2102      	movs	r1, #2
 8001646:	4618      	mov	r0, r3
 8001648:	f004 fd6e 	bl	8006128 <HAL_RCC_ClockConfig>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001652:	f000 f804 	bl	800165e <Error_Handler>
  }
}
 8001656:	bf00      	nop
 8001658:	3740      	adds	r7, #64	; 0x40
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001662:	b672      	cpsid	i
}
 8001664:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001666:	e7fe      	b.n	8001666 <Error_Handler+0x8>

08001668 <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af02      	add	r7, sp, #8
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	b29b      	uxth	r3, r3
 8001678:	f04f 32ff 	mov.w	r2, #4294967295
 800167c:	9200      	str	r2, [sp, #0]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	2178      	movs	r1, #120	; 0x78
 8001682:	4803      	ldr	r0, [pc, #12]	; (8001690 <OLED_Send+0x28>)
 8001684:	f001 ff20 	bl	80034c8 <HAL_I2C_Master_Transmit>
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	2000022c 	.word	0x2000022c

08001694 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 800169e:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <OLED_SendCmd+0x20>)
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 80016a4:	2102      	movs	r1, #2
 80016a6:	4803      	ldr	r0, [pc, #12]	; (80016b4 <OLED_SendCmd+0x20>)
 80016a8:	f7ff ffde 	bl	8001668 <OLED_Send>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200006a4 	.word	0x200006a4

080016b8 <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 80016bc:	20ae      	movs	r0, #174	; 0xae
 80016be:	f7ff ffe9 	bl	8001694 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 80016c2:	2020      	movs	r0, #32
 80016c4:	f7ff ffe6 	bl	8001694 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 80016c8:	2010      	movs	r0, #16
 80016ca:	f7ff ffe3 	bl	8001694 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 80016ce:	20b0      	movs	r0, #176	; 0xb0
 80016d0:	f7ff ffe0 	bl	8001694 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 80016d4:	20c8      	movs	r0, #200	; 0xc8
 80016d6:	f7ff ffdd 	bl	8001694 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 80016da:	2000      	movs	r0, #0
 80016dc:	f7ff ffda 	bl	8001694 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 80016e0:	2010      	movs	r0, #16
 80016e2:	f7ff ffd7 	bl	8001694 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 80016e6:	2040      	movs	r0, #64	; 0x40
 80016e8:	f7ff ffd4 	bl	8001694 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 80016ec:	2081      	movs	r0, #129	; 0x81
 80016ee:	f7ff ffd1 	bl	8001694 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 80016f2:	20df      	movs	r0, #223	; 0xdf
 80016f4:	f7ff ffce 	bl	8001694 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 80016f8:	20a1      	movs	r0, #161	; 0xa1
 80016fa:	f7ff ffcb 	bl	8001694 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 80016fe:	20a6      	movs	r0, #166	; 0xa6
 8001700:	f7ff ffc8 	bl	8001694 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 8001704:	20a8      	movs	r0, #168	; 0xa8
 8001706:	f7ff ffc5 	bl	8001694 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 800170a:	203f      	movs	r0, #63	; 0x3f
 800170c:	f7ff ffc2 	bl	8001694 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 8001710:	20a4      	movs	r0, #164	; 0xa4
 8001712:	f7ff ffbf 	bl	8001694 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 8001716:	20d3      	movs	r0, #211	; 0xd3
 8001718:	f7ff ffbc 	bl	8001694 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 800171c:	2000      	movs	r0, #0
 800171e:	f7ff ffb9 	bl	8001694 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 8001722:	20d5      	movs	r0, #213	; 0xd5
 8001724:	f7ff ffb6 	bl	8001694 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 8001728:	20f0      	movs	r0, #240	; 0xf0
 800172a:	f7ff ffb3 	bl	8001694 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 800172e:	20d9      	movs	r0, #217	; 0xd9
 8001730:	f7ff ffb0 	bl	8001694 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 8001734:	2022      	movs	r0, #34	; 0x22
 8001736:	f7ff ffad 	bl	8001694 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 800173a:	20da      	movs	r0, #218	; 0xda
 800173c:	f7ff ffaa 	bl	8001694 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8001740:	2012      	movs	r0, #18
 8001742:	f7ff ffa7 	bl	8001694 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 8001746:	20db      	movs	r0, #219	; 0xdb
 8001748:	f7ff ffa4 	bl	8001694 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 800174c:	2020      	movs	r0, #32
 800174e:	f7ff ffa1 	bl	8001694 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 8001752:	208d      	movs	r0, #141	; 0x8d
 8001754:	f7ff ff9e 	bl	8001694 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 8001758:	2014      	movs	r0, #20
 800175a:	f7ff ff9b 	bl	8001694 <OLED_SendCmd>

  OLED_NewFrame();
 800175e:	f000 f807 	bl	8001770 <OLED_NewFrame>
  OLED_ShowFrame();
 8001762:	f000 f811 	bl	8001788 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 8001766:	20af      	movs	r0, #175	; 0xaf
 8001768:	f7ff ff94 	bl	8001694 <OLED_SendCmd>
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8001774:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001778:	2100      	movs	r1, #0
 800177a:	4802      	ldr	r0, [pc, #8]	; (8001784 <OLED_NewFrame+0x14>)
 800177c:	f007 fdb7 	bl	80092ee <memset>
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200002a4 	.word	0x200002a4

08001788 <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <OLED_ShowFrame+0x5c>)
 8001790:	2240      	movs	r2, #64	; 0x40
 8001792:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8001794:	2300      	movs	r3, #0
 8001796:	71fb      	strb	r3, [r7, #7]
 8001798:	e01b      	b.n	80017d2 <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	3b50      	subs	r3, #80	; 0x50
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff77 	bl	8001694 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 80017a6:	2000      	movs	r0, #0
 80017a8:	f7ff ff74 	bl	8001694 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 80017ac:	2010      	movs	r0, #16
 80017ae:	f7ff ff71 	bl	8001694 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 80017b2:	480d      	ldr	r0, [pc, #52]	; (80017e8 <OLED_ShowFrame+0x60>)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	01db      	lsls	r3, r3, #7
 80017b8:	4a0c      	ldr	r2, [pc, #48]	; (80017ec <OLED_ShowFrame+0x64>)
 80017ba:	4413      	add	r3, r2
 80017bc:	2280      	movs	r2, #128	; 0x80
 80017be:	4619      	mov	r1, r3
 80017c0:	f007 fe23 	bl	800940a <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 80017c4:	2181      	movs	r1, #129	; 0x81
 80017c6:	4807      	ldr	r0, [pc, #28]	; (80017e4 <OLED_ShowFrame+0x5c>)
 80017c8:	f7ff ff4e 	bl	8001668 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	3301      	adds	r3, #1
 80017d0:	71fb      	strb	r3, [r7, #7]
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	2b07      	cmp	r3, #7
 80017d6:	d9e0      	bls.n	800179a <OLED_ShowFrame+0x12>
  }
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200006a8 	.word	0x200006a8
 80017e8:	200006a9 	.word	0x200006a9
 80017ec:	200002a4 	.word	0x200002a4

080017f0 <OLED_SetByte_Fine>:
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
 80017f0:	b490      	push	{r4, r7}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4604      	mov	r4, r0
 80017f8:	4608      	mov	r0, r1
 80017fa:	4611      	mov	r1, r2
 80017fc:	461a      	mov	r2, r3
 80017fe:	4623      	mov	r3, r4
 8001800:	71fb      	strb	r3, [r7, #7]
 8001802:	4603      	mov	r3, r0
 8001804:	71bb      	strb	r3, [r7, #6]
 8001806:	460b      	mov	r3, r1
 8001808:	717b      	strb	r3, [r7, #5]
 800180a:	4613      	mov	r3, r2
 800180c:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	2b07      	cmp	r3, #7
 8001812:	d860      	bhi.n	80018d6 <OLED_SetByte_Fine+0xe6>
 8001814:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001818:	2b00      	cmp	r3, #0
 800181a:	db5c      	blt.n	80018d6 <OLED_SetByte_Fine+0xe6>
    return;
  if (color)
 800181c:	7d3b      	ldrb	r3, [r7, #20]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d002      	beq.n	8001828 <OLED_SetByte_Fine+0x38>
    data = ~data;
 8001822:	797b      	ldrb	r3, [r7, #5]
 8001824:	43db      	mvns	r3, r3
 8001826:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 8001828:	7c3b      	ldrb	r3, [r7, #16]
 800182a:	3301      	adds	r3, #1
 800182c:	22ff      	movs	r2, #255	; 0xff
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	b25a      	sxtb	r2, r3
 8001834:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001838:	4313      	orrs	r3, r2
 800183a:	b25a      	sxtb	r2, r3
 800183c:	793b      	ldrb	r3, [r7, #4]
 800183e:	f1c3 0308 	rsb	r3, r3, #8
 8001842:	21ff      	movs	r1, #255	; 0xff
 8001844:	fa41 f303 	asr.w	r3, r1, r3
 8001848:	b25b      	sxtb	r3, r3
 800184a:	4313      	orrs	r3, r2
 800184c:	b25b      	sxtb	r3, r3
 800184e:	b2da      	uxtb	r2, r3
 8001850:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <OLED_SetByte_Fine+0xf0>)
 8001852:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8001854:	79fa      	ldrb	r2, [r7, #7]
 8001856:	79bb      	ldrb	r3, [r7, #6]
 8001858:	4922      	ldr	r1, [pc, #136]	; (80018e4 <OLED_SetByte_Fine+0xf4>)
 800185a:	01d2      	lsls	r2, r2, #7
 800185c:	440a      	add	r2, r1
 800185e:	4413      	add	r3, r2
 8001860:	7818      	ldrb	r0, [r3, #0]
 8001862:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <OLED_SetByte_Fine+0xf0>)
 8001864:	7819      	ldrb	r1, [r3, #0]
 8001866:	79fa      	ldrb	r2, [r7, #7]
 8001868:	79bb      	ldrb	r3, [r7, #6]
 800186a:	4001      	ands	r1, r0
 800186c:	b2c8      	uxtb	r0, r1
 800186e:	491d      	ldr	r1, [pc, #116]	; (80018e4 <OLED_SetByte_Fine+0xf4>)
 8001870:	01d2      	lsls	r2, r2, #7
 8001872:	440a      	add	r2, r1
 8001874:	4413      	add	r3, r2
 8001876:	4602      	mov	r2, r0
 8001878:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 800187a:	7c3b      	ldrb	r3, [r7, #16]
 800187c:	3301      	adds	r3, #1
 800187e:	22ff      	movs	r2, #255	; 0xff
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	b25b      	sxtb	r3, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	b25a      	sxtb	r2, r3
 800188a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800188e:	4013      	ands	r3, r2
 8001890:	b25a      	sxtb	r2, r3
 8001892:	793b      	ldrb	r3, [r7, #4]
 8001894:	f1c3 0308 	rsb	r3, r3, #8
 8001898:	21ff      	movs	r1, #255	; 0xff
 800189a:	fa41 f303 	asr.w	r3, r1, r3
 800189e:	b25b      	sxtb	r3, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	b25b      	sxtb	r3, r3
 80018a4:	4013      	ands	r3, r2
 80018a6:	b25b      	sxtb	r3, r3
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <OLED_SetByte_Fine+0xf0>)
 80018ac:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 80018ae:	79fa      	ldrb	r2, [r7, #7]
 80018b0:	79bb      	ldrb	r3, [r7, #6]
 80018b2:	490c      	ldr	r1, [pc, #48]	; (80018e4 <OLED_SetByte_Fine+0xf4>)
 80018b4:	01d2      	lsls	r2, r2, #7
 80018b6:	440a      	add	r2, r1
 80018b8:	4413      	add	r3, r2
 80018ba:	7818      	ldrb	r0, [r3, #0]
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <OLED_SetByte_Fine+0xf0>)
 80018be:	7819      	ldrb	r1, [r3, #0]
 80018c0:	79fa      	ldrb	r2, [r7, #7]
 80018c2:	79bb      	ldrb	r3, [r7, #6]
 80018c4:	4301      	orrs	r1, r0
 80018c6:	b2c8      	uxtb	r0, r1
 80018c8:	4906      	ldr	r1, [pc, #24]	; (80018e4 <OLED_SetByte_Fine+0xf4>)
 80018ca:	01d2      	lsls	r2, r2, #7
 80018cc:	440a      	add	r2, r1
 80018ce:	4413      	add	r3, r2
 80018d0:	4602      	mov	r2, r0
 80018d2:	701a      	strb	r2, [r3, #0]
 80018d4:	e000      	b.n	80018d8 <OLED_SetByte_Fine+0xe8>
    return;
 80018d6:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc90      	pop	{r4, r7}
 80018de:	4770      	bx	lr
 80018e0:	20000729 	.word	0x20000729
 80018e4:	200002a4 	.word	0x200002a4

080018e8 <OLED_SetBits_Fine>:
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
 80018e8:	b5b0      	push	{r4, r5, r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af02      	add	r7, sp, #8
 80018ee:	4604      	mov	r4, r0
 80018f0:	4608      	mov	r0, r1
 80018f2:	4611      	mov	r1, r2
 80018f4:	461a      	mov	r2, r3
 80018f6:	4623      	mov	r3, r4
 80018f8:	71fb      	strb	r3, [r7, #7]
 80018fa:	4603      	mov	r3, r0
 80018fc:	71bb      	strb	r3, [r7, #6]
 80018fe:	460b      	mov	r3, r1
 8001900:	717b      	strb	r3, [r7, #5]
 8001902:	4613      	mov	r3, r2
 8001904:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8001906:	79bb      	ldrb	r3, [r7, #6]
 8001908:	08db      	lsrs	r3, r3, #3
 800190a:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 800190c:	79bb      	ldrb	r3, [r7, #6]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 8001914:	7bba      	ldrb	r2, [r7, #14]
 8001916:	793b      	ldrb	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	2b08      	cmp	r3, #8
 800191c:	dd29      	ble.n	8001972 <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 800191e:	797a      	ldrb	r2, [r7, #5]
 8001920:	7bbb      	ldrb	r3, [r7, #14]
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	b2da      	uxtb	r2, r3
 8001928:	7bbc      	ldrb	r4, [r7, #14]
 800192a:	79f9      	ldrb	r1, [r7, #7]
 800192c:	7bf8      	ldrb	r0, [r7, #15]
 800192e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	2307      	movs	r3, #7
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	4623      	mov	r3, r4
 800193a:	f7ff ff59 	bl	80017f0 <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	3301      	adds	r3, #1
 8001942:	b2d8      	uxtb	r0, r3
 8001944:	797a      	ldrb	r2, [r7, #5]
 8001946:	7bbb      	ldrb	r3, [r7, #14]
 8001948:	f1c3 0308 	rsb	r3, r3, #8
 800194c:	fa42 f303 	asr.w	r3, r2, r3
 8001950:	b2dc      	uxtb	r4, r3
 8001952:	793a      	ldrb	r2, [r7, #4]
 8001954:	7bbb      	ldrb	r3, [r7, #14]
 8001956:	4413      	add	r3, r2
 8001958:	b2db      	uxtb	r3, r3
 800195a:	3b09      	subs	r3, #9
 800195c:	b2db      	uxtb	r3, r3
 800195e:	79f9      	ldrb	r1, [r7, #7]
 8001960:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001964:	9201      	str	r2, [sp, #4]
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	2300      	movs	r3, #0
 800196a:	4622      	mov	r2, r4
 800196c:	f7ff ff40 	bl	80017f0 <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 8001970:	e015      	b.n	800199e <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 8001972:	797a      	ldrb	r2, [r7, #5]
 8001974:	7bbb      	ldrb	r3, [r7, #14]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	b2dc      	uxtb	r4, r3
 800197c:	7bba      	ldrb	r2, [r7, #14]
 800197e:	793b      	ldrb	r3, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	b2db      	uxtb	r3, r3
 8001984:	3b01      	subs	r3, #1
 8001986:	b2db      	uxtb	r3, r3
 8001988:	7bbd      	ldrb	r5, [r7, #14]
 800198a:	79f9      	ldrb	r1, [r7, #7]
 800198c:	7bf8      	ldrb	r0, [r7, #15]
 800198e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001992:	9201      	str	r2, [sp, #4]
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	462b      	mov	r3, r5
 8001998:	4622      	mov	r2, r4
 800199a:	f7ff ff29 	bl	80017f0 <OLED_SetByte_Fine>
}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bdb0      	pop	{r4, r5, r7, pc}

080019a6 <OLED_SetBits>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
 80019a6:	b590      	push	{r4, r7, lr}
 80019a8:	b087      	sub	sp, #28
 80019aa:	af02      	add	r7, sp, #8
 80019ac:	4604      	mov	r4, r0
 80019ae:	4608      	mov	r0, r1
 80019b0:	4611      	mov	r1, r2
 80019b2:	461a      	mov	r2, r3
 80019b4:	4623      	mov	r3, r4
 80019b6:	71fb      	strb	r3, [r7, #7]
 80019b8:	4603      	mov	r3, r0
 80019ba:	71bb      	strb	r3, [r7, #6]
 80019bc:	460b      	mov	r3, r1
 80019be:	717b      	strb	r3, [r7, #5]
 80019c0:	4613      	mov	r3, r2
 80019c2:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 80019c4:	79bb      	ldrb	r3, [r7, #6]
 80019c6:	08db      	lsrs	r3, r3, #3
 80019c8:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 80019ca:	79bb      	ldrb	r3, [r7, #6]
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 80019d2:	797a      	ldrb	r2, [r7, #5]
 80019d4:	7bbb      	ldrb	r3, [r7, #14]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	7bbc      	ldrb	r4, [r7, #14]
 80019de:	79f9      	ldrb	r1, [r7, #7]
 80019e0:	7bf8      	ldrb	r0, [r7, #15]
 80019e2:	793b      	ldrb	r3, [r7, #4]
 80019e4:	9301      	str	r3, [sp, #4]
 80019e6:	2307      	movs	r3, #7
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	4623      	mov	r3, r4
 80019ec:	f7ff ff00 	bl	80017f0 <OLED_SetByte_Fine>
  if (bit)
 80019f0:	7bbb      	ldrb	r3, [r7, #14]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d014      	beq.n	8001a20 <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	3301      	adds	r3, #1
 80019fa:	b2d8      	uxtb	r0, r3
 80019fc:	797a      	ldrb	r2, [r7, #5]
 80019fe:	7bbb      	ldrb	r3, [r7, #14]
 8001a00:	f1c3 0308 	rsb	r3, r3, #8
 8001a04:	fa42 f303 	asr.w	r3, r2, r3
 8001a08:	b2dc      	uxtb	r4, r3
 8001a0a:	7bbb      	ldrb	r3, [r7, #14]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	79f9      	ldrb	r1, [r7, #7]
 8001a12:	793a      	ldrb	r2, [r7, #4]
 8001a14:	9201      	str	r2, [sp, #4]
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	2300      	movs	r3, #0
 8001a1a:	4622      	mov	r2, r4
 8001a1c:	f7ff fee8 	bl	80017f0 <OLED_SetByte_Fine>
  }
}
 8001a20:	bf00      	nop
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd90      	pop	{r4, r7, pc}

08001a28 <OLED_SetBlock>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
 8001a28:	b590      	push	{r4, r7, lr}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af02      	add	r7, sp, #8
 8001a2e:	603a      	str	r2, [r7, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
 8001a36:	460b      	mov	r3, r1
 8001a38:	71bb      	strb	r3, [r7, #6]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 8001a3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a42:	08db      	lsrs	r3, r3, #3
 8001a44:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 8001a46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	73fb      	strb	r3, [r7, #15]
 8001a54:	e025      	b.n	8001aa2 <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	73bb      	strb	r3, [r7, #14]
 8001a5a:	e01b      	b.n	8001a94 <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8001a5c:	79fa      	ldrb	r2, [r7, #7]
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	4413      	add	r3, r2
 8001a62:	b2d8      	uxtb	r0, r3
 8001a64:	7bbb      	ldrb	r3, [r7, #14]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	79bb      	ldrb	r3, [r7, #6]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b2dc      	uxtb	r4, r3
 8001a70:	7bfa      	ldrb	r2, [r7, #15]
 8001a72:	7bbb      	ldrb	r3, [r7, #14]
 8001a74:	7979      	ldrb	r1, [r7, #5]
 8001a76:	fb01 f303 	mul.w	r3, r1, r3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	4413      	add	r3, r2
 8001a82:	781a      	ldrb	r2, [r3, #0]
 8001a84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a88:	4621      	mov	r1, r4
 8001a8a:	f7ff ff8c 	bl	80019a6 <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 8001a8e:	7bbb      	ldrb	r3, [r7, #14]
 8001a90:	3301      	adds	r3, #1
 8001a92:	73bb      	strb	r3, [r7, #14]
 8001a94:	7bba      	ldrb	r2, [r7, #14]
 8001a96:	7b3b      	ldrb	r3, [r7, #12]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d3df      	bcc.n	8001a5c <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	73fb      	strb	r3, [r7, #15]
 8001aa2:	7bfa      	ldrb	r2, [r7, #15]
 8001aa4:	797b      	ldrb	r3, [r7, #5]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d3d5      	bcc.n	8001a56 <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 8001aaa:	7afb      	ldrb	r3, [r7, #11]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d028      	beq.n	8001b02 <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 8001ab0:	797b      	ldrb	r3, [r7, #5]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	7b3a      	ldrb	r2, [r7, #12]
 8001ab6:	b292      	uxth	r2, r2
 8001ab8:	fb02 f303 	mul.w	r3, r2, r3
 8001abc:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	737b      	strb	r3, [r7, #13]
 8001ac2:	e01a      	b.n	8001afa <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8001ac4:	79fa      	ldrb	r2, [r7, #7]
 8001ac6:	7b7b      	ldrb	r3, [r7, #13]
 8001ac8:	4413      	add	r3, r2
 8001aca:	b2d8      	uxtb	r0, r3
 8001acc:	7b3b      	ldrb	r3, [r7, #12]
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	79bb      	ldrb	r3, [r7, #6]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b2d9      	uxtb	r1, r3
 8001ad8:	893a      	ldrh	r2, [r7, #8]
 8001ada:	7b7b      	ldrb	r3, [r7, #13]
 8001adc:	4413      	add	r3, r2
 8001ade:	461a      	mov	r2, r3
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	781a      	ldrb	r2, [r3, #0]
 8001ae6:	7afc      	ldrb	r4, [r7, #11]
 8001ae8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	4623      	mov	r3, r4
 8001af0:	f7ff fefa 	bl	80018e8 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 8001af4:	7b7b      	ldrb	r3, [r7, #13]
 8001af6:	3301      	adds	r3, #1
 8001af8:	737b      	strb	r3, [r7, #13]
 8001afa:	7b7a      	ldrb	r2, [r7, #13]
 8001afc:	797b      	ldrb	r3, [r7, #5]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d3e0      	bcc.n	8001ac4 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 8001b02:	bf00      	nop
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd90      	pop	{r4, r7, pc}

08001b0a <OLED_DrawImage>:
 * @param y 起始点纵坐标
 * @param img 图片
 * @param color 颜色
 */
void OLED_DrawImage(uint8_t x, uint8_t y, const Image *img, OLED_ColorMode color)
{
 8001b0a:	b5b0      	push	{r4, r5, r7, lr}
 8001b0c:	b084      	sub	sp, #16
 8001b0e:	af02      	add	r7, sp, #8
 8001b10:	603a      	str	r2, [r7, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	4603      	mov	r3, r0
 8001b16:	71fb      	strb	r3, [r7, #7]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	71bb      	strb	r3, [r7, #6]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, img->data, img->w, img->h, color);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685c      	ldr	r4, [r3, #4]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	781d      	ldrb	r5, [r3, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	785b      	ldrb	r3, [r3, #1]
 8001b2c:	79b9      	ldrb	r1, [r7, #6]
 8001b2e:	79f8      	ldrb	r0, [r7, #7]
 8001b30:	797a      	ldrb	r2, [r7, #5]
 8001b32:	9201      	str	r2, [sp, #4]
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	462b      	mov	r3, r5
 8001b38:	4622      	mov	r2, r4
 8001b3a:	f7ff ff75 	bl	8001a28 <OLED_SetBlock>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bdb0      	pop	{r4, r5, r7, pc}

08001b46 <OLED_PrintASCIIChar>:
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color)
{
 8001b46:	b5b0      	push	{r4, r5, r7, lr}
 8001b48:	b084      	sub	sp, #16
 8001b4a:	af02      	add	r7, sp, #8
 8001b4c:	603b      	str	r3, [r7, #0]
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
 8001b52:	460b      	mov	r3, r1
 8001b54:	71bb      	strb	r3, [r7, #6]
 8001b56:	4613      	mov	r3, r2
 8001b58:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	797b      	ldrb	r3, [r7, #5]
 8001b60:	f1a3 0120 	sub.w	r1, r3, #32
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	3307      	adds	r3, #7
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	da00      	bge.n	8001b70 <OLED_PrintASCIIChar+0x2a>
 8001b6e:	3307      	adds	r3, #7
 8001b70:	10db      	asrs	r3, r3, #3
 8001b72:	4618      	mov	r0, r3
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	785b      	ldrb	r3, [r3, #1]
 8001b78:	fb00 f303 	mul.w	r3, r0, r3
 8001b7c:	fb01 f303 	mul.w	r3, r1, r3
 8001b80:	18d4      	adds	r4, r2, r3
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	785d      	ldrb	r5, [r3, #1]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	79b9      	ldrb	r1, [r7, #6]
 8001b8c:	79f8      	ldrb	r0, [r7, #7]
 8001b8e:	7e3a      	ldrb	r2, [r7, #24]
 8001b90:	9201      	str	r2, [sp, #4]
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	462b      	mov	r3, r5
 8001b96:	4622      	mov	r2, r4
 8001b98:	f7ff ff46 	bl	8001a28 <OLED_SetBlock>
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bdb0      	pop	{r4, r5, r7, pc}

08001ba4 <OLED_PrintASCIIString>:
 * @param str 字符串
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIString(uint8_t x, uint8_t y, char *str, const ASCIIFont *font, OLED_ColorMode color)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af02      	add	r7, sp, #8
 8001baa:	60ba      	str	r2, [r7, #8]
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	4603      	mov	r3, r0
 8001bb0:	73fb      	strb	r3, [r7, #15]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	73bb      	strb	r3, [r7, #14]
  uint8_t x0 = x;
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	75fb      	strb	r3, [r7, #23]
  while (*str)
 8001bba:	e011      	b.n	8001be0 <OLED_PrintASCIIString+0x3c>
  {
    OLED_PrintASCIIChar(x0, y, *str, font, color);
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	781a      	ldrb	r2, [r3, #0]
 8001bc0:	7bb9      	ldrb	r1, [r7, #14]
 8001bc2:	7df8      	ldrb	r0, [r7, #23]
 8001bc4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f7ff ffbb 	bl	8001b46 <OLED_PrintASCIIChar>
    x0 += font->w;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	785a      	ldrb	r2, [r3, #1]
 8001bd4:	7dfb      	ldrb	r3, [r7, #23]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	75fb      	strb	r3, [r7, #23]
    str++;
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	60bb      	str	r3, [r7, #8]
  while (*str)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1e9      	bne.n	8001bbc <OLED_PrintASCIIString+0x18>
  }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <_OLED_GetUTF8Len>:

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	b25b      	sxtb	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	db01      	blt.n	8001c08 <_OLED_GetUTF8Len+0x16>
  {
    return 1;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e018      	b.n	8001c3a <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xE0) == 0xC0)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8001c10:	2bc0      	cmp	r3, #192	; 0xc0
 8001c12:	d101      	bne.n	8001c18 <_OLED_GetUTF8Len+0x26>
  {
    return 2;
 8001c14:	2302      	movs	r3, #2
 8001c16:	e010      	b.n	8001c3a <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF0) == 0xE0)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c20:	2be0      	cmp	r3, #224	; 0xe0
 8001c22:	d101      	bne.n	8001c28 <_OLED_GetUTF8Len+0x36>
  {
    return 3;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e008      	b.n	8001c3a <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF8) == 0xF0)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8001c30:	2bf0      	cmp	r3, #240	; 0xf0
 8001c32:	d101      	bne.n	8001c38 <_OLED_GetUTF8Len+0x46>
  {
    return 4;
 8001c34:	2304      	movs	r3, #4
 8001c36:	e000      	b.n	8001c3a <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <OLED_PrintString>:
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color)
{
 8001c44:	b5b0      	push	{r4, r5, r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af02      	add	r7, sp, #8
 8001c4a:	60ba      	str	r2, [r7, #8]
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	4603      	mov	r3, r0
 8001c50:	73fb      	strb	r3, [r7, #15]
 8001c52:	460b      	mov	r3, r1
 8001c54:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 8001c56:	2300      	movs	r3, #0
 8001c58:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	3307      	adds	r3, #7
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	da00      	bge.n	8001c66 <OLED_PrintString+0x22>
 8001c64:	3307      	adds	r3, #7
 8001c66:	10db      	asrs	r3, r3, #3
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	7852      	ldrb	r2, [r2, #1]
 8001c6e:	fb02 f303 	mul.w	r3, r2, r3
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	3304      	adds	r3, #4
 8001c76:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i])
 8001c78:	e07d      	b.n	8001d76 <OLED_PrintString+0x132>
  {
    found = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 8001c7e:	8bfb      	ldrh	r3, [r7, #30]
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	4413      	add	r3, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ffb4 	bl	8001bf2 <_OLED_GetUTF8Len>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0)
 8001c8e:	7ebb      	ldrb	r3, [r7, #26]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d078      	beq.n	8001d86 <OLED_PrintString+0x142>
      break; // 有问题的UTF-8编码

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	773b      	strb	r3, [r7, #28]
 8001c98:	e032      	b.n	8001d00 <OLED_PrintString+0xbc>
    {
      head = (uint8_t *)(font->chars) + (j * oneLen);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	7f3a      	ldrb	r2, [r7, #28]
 8001ca0:	7ef9      	ldrb	r1, [r7, #27]
 8001ca2:	fb01 f202 	mul.w	r2, r1, r2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0)
 8001caa:	8bfb      	ldrh	r3, [r7, #30]
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	4413      	add	r3, r2
 8001cb0:	7eba      	ldrb	r2, [r7, #26]
 8001cb2:	6979      	ldr	r1, [r7, #20]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f007 fb0a 	bl	80092ce <memcmp>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d11c      	bne.n	8001cfa <OLED_PrintString+0xb6>
      {
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	1d1c      	adds	r4, r3, #4
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	785d      	ldrb	r5, [r3, #1]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	7bb9      	ldrb	r1, [r7, #14]
 8001cce:	7bf8      	ldrb	r0, [r7, #15]
 8001cd0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001cd4:	9201      	str	r2, [sp, #4]
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	462b      	mov	r3, r5
 8001cda:	4622      	mov	r2, r4
 8001cdc:	f7ff fea4 	bl	8001a28 <OLED_SetBlock>
        // 移动光标
        x += font->w;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	785a      	ldrb	r2, [r3, #1]
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8001cea:	7ebb      	ldrb	r3, [r7, #26]
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	8bfb      	ldrh	r3, [r7, #30]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	83fb      	strh	r3, [r7, #30]
        found = 1;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	777b      	strb	r3, [r7, #29]
        break;
 8001cf8:	e007      	b.n	8001d0a <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++)
 8001cfa:	7f3b      	ldrb	r3, [r7, #28]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	773b      	strb	r3, [r7, #28]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	7a1b      	ldrb	r3, [r3, #8]
 8001d04:	7f3a      	ldrb	r2, [r7, #28]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d3c7      	bcc.n	8001c9a <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0)
 8001d0a:	7f7b      	ldrb	r3, [r7, #29]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d132      	bne.n	8001d76 <OLED_PrintString+0x132>
    {
      if (utf8Len == 1)
 8001d10:	7ebb      	ldrb	r3, [r7, #26]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d119      	bne.n	8001d4a <OLED_PrintString+0x106>
      {
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 8001d16:	8bfb      	ldrh	r3, [r7, #30]
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	781a      	ldrb	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68dc      	ldr	r4, [r3, #12]
 8001d22:	7bb9      	ldrb	r1, [r7, #14]
 8001d24:	7bf8      	ldrb	r0, [r7, #15]
 8001d26:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	4623      	mov	r3, r4
 8001d2e:	f7ff ff0a 	bl	8001b46 <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	785a      	ldrb	r2, [r3, #1]
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8001d3e:	7ebb      	ldrb	r3, [r7, #26]
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	8bfb      	ldrh	r3, [r7, #30]
 8001d44:	4413      	add	r3, r2
 8001d46:	83fb      	strh	r3, [r7, #30]
 8001d48:	e015      	b.n	8001d76 <OLED_PrintString+0x132>
      }
      else
      {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	7bb9      	ldrb	r1, [r7, #14]
 8001d50:	7bf8      	ldrb	r0, [r7, #15]
 8001d52:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	f7ff fef3 	bl	8001b46 <OLED_PrintASCIIChar>
        x += font->ascii->w;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	785a      	ldrb	r2, [r3, #1]
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	4413      	add	r3, r2
 8001d6a:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8001d6c:	7ebb      	ldrb	r3, [r7, #26]
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	8bfb      	ldrh	r3, [r7, #30]
 8001d72:	4413      	add	r3, r2
 8001d74:	83fb      	strh	r3, [r7, #30]
  while (str[i])
 8001d76:	8bfb      	ldrh	r3, [r7, #30]
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f47f af7b 	bne.w	8001c7a <OLED_PrintString+0x36>
      }
    }
  }
}
 8001d84:	e000      	b.n	8001d88 <OLED_PrintString+0x144>
      break; // 有问题的UTF-8编码
 8001d86:	bf00      	nop
}
 8001d88:	bf00      	nop
 8001d8a:	3720      	adds	r7, #32
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bdb0      	pop	{r4, r5, r7, pc}

08001d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d96:	4b15      	ldr	r3, [pc, #84]	; (8001dec <HAL_MspInit+0x5c>)
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	4a14      	ldr	r2, [pc, #80]	; (8001dec <HAL_MspInit+0x5c>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6193      	str	r3, [r2, #24]
 8001da2:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_MspInit+0x5c>)
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dae:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <HAL_MspInit+0x5c>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	4a0e      	ldr	r2, [pc, #56]	; (8001dec <HAL_MspInit+0x5c>)
 8001db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db8:	61d3      	str	r3, [r2, #28]
 8001dba:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <HAL_MspInit+0x5c>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_MspInit+0x60>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <HAL_MspInit+0x60>)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40010000 	.word	0x40010000

08001df4 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001df8:	e7fe      	b.n	8001df8 <NMI_Handler+0x4>

08001dfa <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dfe:	e7fe      	b.n	8001dfe <HardFault_Handler+0x4>

08001e00 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <MemManage_Handler+0x4>

08001e06 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e0a:	e7fe      	b.n	8001e0a <BusFault_Handler+0x4>

08001e0c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <UsageFault_Handler+0x4>

08001e12 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr

08001e1e <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr

08001e2a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr

08001e36 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e3a:	f000 fc33 	bl	80026a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <EXTI4_IRQHandler>:

/**
 * @brief This function handles EXTI line4 interrupt.
 */
void EXTI4_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  HAL_Delay(20);
 8001e48:	2014      	movs	r0, #20
 8001e4a:	f000 fc47 	bl	80026dc <HAL_Delay>
  if (HAL_GPIO_ReadPin(BUTTON_STATUS_GPIO_Port, BUTTON_STATUS_Pin) == GPIO_PIN_RESET)
 8001e4e:	2110      	movs	r1, #16
 8001e50:	4822      	ldr	r0, [pc, #136]	; (8001edc <EXTI4_IRQHandler+0x98>)
 8001e52:	f001 f9a7 	bl	80031a4 <HAL_GPIO_ReadPin>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d139      	bne.n	8001ed0 <EXTI4_IRQHandler+0x8c>
  {
    // // 处理逻辑
    if (status_inside == TRUE)
 8001e5c:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <EXTI4_IRQHandler+0x9c>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d120      	bne.n	8001ea6 <EXTI4_IRQHandler+0x62>
    {
      // 退出功能
      if (cur_status == MESU_TIMER && T_isopen == FALSE && (T_millisecond + T_minute + T_minute) != 0)
 8001e64:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <EXTI4_IRQHandler+0xa0>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b03      	cmp	r3, #3
 8001e6a:	d118      	bne.n	8001e9e <EXTI4_IRQHandler+0x5a>
 8001e6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <EXTI4_IRQHandler+0xa4>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d114      	bne.n	8001e9e <EXTI4_IRQHandler+0x5a>
 8001e74:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <EXTI4_IRQHandler+0xa8>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <EXTI4_IRQHandler+0xac>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a1b      	ldr	r2, [pc, #108]	; (8001ef0 <EXTI4_IRQHandler+0xac>)
 8001e82:	7812      	ldrb	r2, [r2, #0]
 8001e84:	4413      	add	r3, r2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d009      	beq.n	8001e9e <EXTI4_IRQHandler+0x5a>
      {
        T_millisecond = 0;
 8001e8a:	4b18      	ldr	r3, [pc, #96]	; (8001eec <EXTI4_IRQHandler+0xa8>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
        T_second = 0;
 8001e90:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <EXTI4_IRQHandler+0xb0>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
        T_minute = 0;
 8001e96:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <EXTI4_IRQHandler+0xac>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
 8001e9c:	e010      	b.n	8001ec0 <EXTI4_IRQHandler+0x7c>
      }
      else
      {
        status_inside = FALSE;
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <EXTI4_IRQHandler+0x9c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
 8001ea4:	e00c      	b.n	8001ec0 <EXTI4_IRQHandler+0x7c>
      }
    }
    else
    {
      // 切换功能
      cur_status++;
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <EXTI4_IRQHandler+0xa0>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <EXTI4_IRQHandler+0xa0>)
 8001eb0:	701a      	strb	r2, [r3, #0]
      if (cur_status >= 5)
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <EXTI4_IRQHandler+0xa0>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	d902      	bls.n	8001ec0 <EXTI4_IRQHandler+0x7c>
      {
        cur_status = 1;
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <EXTI4_IRQHandler+0xa0>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	701a      	strb	r2, [r3, #0]
      }
    }

    while (HAL_GPIO_ReadPin(BUTTON_STATUS_GPIO_Port, BUTTON_STATUS_Pin) == GPIO_PIN_RESET)
 8001ec0:	bf00      	nop
 8001ec2:	2110      	movs	r1, #16
 8001ec4:	4805      	ldr	r0, [pc, #20]	; (8001edc <EXTI4_IRQHandler+0x98>)
 8001ec6:	f001 f96d 	bl	80031a4 <HAL_GPIO_ReadPin>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0f8      	beq.n	8001ec2 <EXTI4_IRQHandler+0x7e>
      ;
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_STATUS_Pin);
 8001ed0:	2010      	movs	r0, #16
 8001ed2:	f001 f97f 	bl	80031d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  /* USER CODE END EXTI4_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40010800 	.word	0x40010800
 8001ee0:	20000280 	.word	0x20000280
 8001ee4:	20000005 	.word	0x20000005
 8001ee8:	20000288 	.word	0x20000288
 8001eec:	20000287 	.word	0x20000287
 8001ef0:	20000285 	.word	0x20000285
 8001ef4:	20000286 	.word	0x20000286

08001ef8 <DMA1_Channel4_IRQHandler>:

/**
 * @brief This function handles DMA1 channel4 global interrupt.
 */
void DMA1_Channel4_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <DMA1_Channel4_IRQHandler+0x10>)
 8001efe:	f000 fe8d 	bl	8002c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	2000084c 	.word	0x2000084c

08001f0c <DMA1_Channel5_IRQHandler>:

/**
 * @brief This function handles DMA1 channel5 global interrupt.
 */
void DMA1_Channel5_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f10:	4802      	ldr	r0, [pc, #8]	; (8001f1c <DMA1_Channel5_IRQHandler+0x10>)
 8001f12:	f000 fe83 	bl	8002c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000808 	.word	0x20000808

08001f20 <EXTI9_5_IRQHandler>:

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  HAL_Delay(20);
 8001f24:	2014      	movs	r0, #20
 8001f26:	f000 fbd9 	bl	80026dc <HAL_Delay>
  if (HAL_GPIO_ReadPin(BUTTON_ENSURE_GPIO_Port, BUTTON_ENSURE_Pin) == GPIO_PIN_RESET)
 8001f2a:	2180      	movs	r1, #128	; 0x80
 8001f2c:	4825      	ldr	r0, [pc, #148]	; (8001fc4 <EXTI9_5_IRQHandler+0xa4>)
 8001f2e:	f001 f939 	bl	80031a4 <HAL_GPIO_ReadPin>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d140      	bne.n	8001fba <EXTI9_5_IRQHandler+0x9a>
  {
    // 处理逻辑
    {
      if (status_inside)
 8001f38:	4b23      	ldr	r3, [pc, #140]	; (8001fc8 <EXTI9_5_IRQHandler+0xa8>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d02f      	beq.n	8001fa0 <EXTI9_5_IRQHandler+0x80>
      {
        switch (cur_status)
 8001f40:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <EXTI9_5_IRQHandler+0xac>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d01f      	beq.n	8001f88 <EXTI9_5_IRQHandler+0x68>
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	dc2d      	bgt.n	8001fa8 <EXTI9_5_IRQHandler+0x88>
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d002      	beq.n	8001f56 <EXTI9_5_IRQHandler+0x36>
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d00c      	beq.n	8001f6e <EXTI9_5_IRQHandler+0x4e>
          {
            T_isopen = TRUE;
          }
          break;
        default:
          break;
 8001f54:	e028      	b.n	8001fa8 <EXTI9_5_IRQHandler+0x88>
          if (A_isopen == FALSE)
 8001f56:	4b1e      	ldr	r3, [pc, #120]	; (8001fd0 <EXTI9_5_IRQHandler+0xb0>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d103      	bne.n	8001f66 <EXTI9_5_IRQHandler+0x46>
            A_isopen = TRUE;
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <EXTI9_5_IRQHandler+0xb0>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]
          break;
 8001f64:	e021      	b.n	8001faa <EXTI9_5_IRQHandler+0x8a>
            A_isopen = FALSE;
 8001f66:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <EXTI9_5_IRQHandler+0xb0>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
          break;
 8001f6c:	e01d      	b.n	8001faa <EXTI9_5_IRQHandler+0x8a>
          hour = C_hour;
 8001f6e:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <EXTI9_5_IRQHandler+0xb4>)
 8001f70:	781a      	ldrb	r2, [r3, #0]
 8001f72:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <EXTI9_5_IRQHandler+0xb8>)
 8001f74:	701a      	strb	r2, [r3, #0]
          minute = C_minute;
 8001f76:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <EXTI9_5_IRQHandler+0xbc>)
 8001f78:	781a      	ldrb	r2, [r3, #0]
 8001f7a:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <EXTI9_5_IRQHandler+0xc0>)
 8001f7c:	701a      	strb	r2, [r3, #0]
          second = C_second;
 8001f7e:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <EXTI9_5_IRQHandler+0xc4>)
 8001f80:	781a      	ldrb	r2, [r3, #0]
 8001f82:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <EXTI9_5_IRQHandler+0xc8>)
 8001f84:	701a      	strb	r2, [r3, #0]
          break;
 8001f86:	e010      	b.n	8001faa <EXTI9_5_IRQHandler+0x8a>
          if (T_isopen)
 8001f88:	4b18      	ldr	r3, [pc, #96]	; (8001fec <EXTI9_5_IRQHandler+0xcc>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <EXTI9_5_IRQHandler+0x78>
            T_isopen = FALSE;
 8001f90:	4b16      	ldr	r3, [pc, #88]	; (8001fec <EXTI9_5_IRQHandler+0xcc>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
          break;
 8001f96:	e008      	b.n	8001faa <EXTI9_5_IRQHandler+0x8a>
            T_isopen = TRUE;
 8001f98:	4b14      	ldr	r3, [pc, #80]	; (8001fec <EXTI9_5_IRQHandler+0xcc>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	701a      	strb	r2, [r3, #0]
          break;
 8001f9e:	e004      	b.n	8001faa <EXTI9_5_IRQHandler+0x8a>
        }
      }
      else
      {
        // 确定键
        status_inside = TRUE;
 8001fa0:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <EXTI9_5_IRQHandler+0xa8>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]
 8001fa6:	e000      	b.n	8001faa <EXTI9_5_IRQHandler+0x8a>
          break;
 8001fa8:	bf00      	nop
      }
    }
    // 处理逻辑
    while (HAL_GPIO_ReadPin(BUTTON_ENSURE_GPIO_Port, BUTTON_ENSURE_Pin) == GPIO_PIN_RESET)
 8001faa:	bf00      	nop
 8001fac:	2180      	movs	r1, #128	; 0x80
 8001fae:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <EXTI9_5_IRQHandler+0xa4>)
 8001fb0:	f001 f8f8 	bl	80031a4 <HAL_GPIO_ReadPin>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f8      	beq.n	8001fac <EXTI9_5_IRQHandler+0x8c>
      ;
  }
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_ENSURE_Pin);
 8001fba:	2080      	movs	r0, #128	; 0x80
 8001fbc:	f001 f90a 	bl	80031d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40010800 	.word	0x40010800
 8001fc8:	20000280 	.word	0x20000280
 8001fcc:	20000005 	.word	0x20000005
 8001fd0:	20000289 	.word	0x20000289
 8001fd4:	2000028b 	.word	0x2000028b
 8001fd8:	20000281 	.word	0x20000281
 8001fdc:	2000028c 	.word	0x2000028c
 8001fe0:	20000282 	.word	0x20000282
 8001fe4:	2000028d 	.word	0x2000028d
 8001fe8:	20000283 	.word	0x20000283
 8001fec:	20000288 	.word	0x20000288

08001ff0 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ff4:	4802      	ldr	r0, [pc, #8]	; (8002000 <TIM2_IRQHandler+0x10>)
 8001ff6:	f004 fbb9 	bl	800676c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000730 	.word	0x20000730

08002004 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002008:	4802      	ldr	r0, [pc, #8]	; (8002014 <TIM3_IRQHandler+0x10>)
 800200a:	f004 fbaf 	bl	800676c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000778 	.word	0x20000778

08002018 <I2C1_EV_IRQHandler>:

/**
 * @brief This function handles I2C1 event interrupt.
 */
void I2C1_EV_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800201c:	4802      	ldr	r0, [pc, #8]	; (8002028 <I2C1_EV_IRQHandler+0x10>)
 800201e:	f001 fdbd 	bl	8003b9c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	2000022c 	.word	0x2000022c

0800202c <I2C1_ER_IRQHandler>:

/**
 * @brief This function handles I2C1 error interrupt.
 */
void I2C1_ER_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002030:	4802      	ldr	r0, [pc, #8]	; (800203c <I2C1_ER_IRQHandler+0x10>)
 8002032:	f001 ff06 	bl	8003e42 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	2000022c 	.word	0x2000022c

08002040 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002044:	4802      	ldr	r0, [pc, #8]	; (8002050 <USART1_IRQHandler+0x10>)
 8002046:	f005 faaf 	bl	80075a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200007c0 	.word	0x200007c0

08002054 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return 1;
 8002058:	2301      	movs	r3, #1
}
 800205a:	4618      	mov	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr

08002062 <_kill>:

int _kill(int pid, int sig)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800206c:	f007 f992 	bl	8009394 <__errno>
 8002070:	4603      	mov	r3, r0
 8002072:	2216      	movs	r2, #22
 8002074:	601a      	str	r2, [r3, #0]
  return -1;
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <_exit>:

void _exit (int status)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800208a:	f04f 31ff 	mov.w	r1, #4294967295
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff ffe7 	bl	8002062 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002094:	e7fe      	b.n	8002094 <_exit+0x12>

08002096 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b086      	sub	sp, #24
 800209a:	af00      	add	r7, sp, #0
 800209c:	60f8      	str	r0, [r7, #12]
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	e00a      	b.n	80020be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020a8:	f3af 8000 	nop.w
 80020ac:	4601      	mov	r1, r0
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	1c5a      	adds	r2, r3, #1
 80020b2:	60ba      	str	r2, [r7, #8]
 80020b4:	b2ca      	uxtb	r2, r1
 80020b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	3301      	adds	r3, #1
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	dbf0      	blt.n	80020a8 <_read+0x12>
  }

  return len;
 80020c6:	687b      	ldr	r3, [r7, #4]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	e009      	b.n	80020f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	60ba      	str	r2, [r7, #8]
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	3301      	adds	r3, #1
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	dbf1      	blt.n	80020e2 <_write+0x12>
  }
  return len;
 80020fe:	687b      	ldr	r3, [r7, #4]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <_close>:

int _close(int file)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002110:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr

0800211e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800212e:	605a      	str	r2, [r3, #4]
  return 0;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <_isatty>:

int _isatty(int file)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002144:	2301      	movs	r3, #1
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002170:	4a14      	ldr	r2, [pc, #80]	; (80021c4 <_sbrk+0x5c>)
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <_sbrk+0x60>)
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800217c:	4b13      	ldr	r3, [pc, #76]	; (80021cc <_sbrk+0x64>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d102      	bne.n	800218a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002184:	4b11      	ldr	r3, [pc, #68]	; (80021cc <_sbrk+0x64>)
 8002186:	4a12      	ldr	r2, [pc, #72]	; (80021d0 <_sbrk+0x68>)
 8002188:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800218a:	4b10      	ldr	r3, [pc, #64]	; (80021cc <_sbrk+0x64>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	429a      	cmp	r2, r3
 8002196:	d207      	bcs.n	80021a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002198:	f007 f8fc 	bl	8009394 <__errno>
 800219c:	4603      	mov	r3, r0
 800219e:	220c      	movs	r2, #12
 80021a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021a2:	f04f 33ff 	mov.w	r3, #4294967295
 80021a6:	e009      	b.n	80021bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a8:	4b08      	ldr	r3, [pc, #32]	; (80021cc <_sbrk+0x64>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ae:	4b07      	ldr	r3, [pc, #28]	; (80021cc <_sbrk+0x64>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	4a05      	ldr	r2, [pc, #20]	; (80021cc <_sbrk+0x64>)
 80021b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ba:	68fb      	ldr	r3, [r7, #12]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20005000 	.word	0x20005000
 80021c8:	00000400 	.word	0x00000400
 80021cc:	2000072c 	.word	0x2000072c
 80021d0:	200009e0 	.word	0x200009e0

080021d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021e6:	f107 0308 	add.w	r3, r7, #8
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	609a      	str	r2, [r3, #8]
 80021f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f4:	463b      	mov	r3, r7
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021fc:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <MX_TIM2_Init+0x94>)
 80021fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002202:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8002204:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <MX_TIM2_Init+0x94>)
 8002206:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800220a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <MX_TIM2_Init+0x94>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 8002212:	4b18      	ldr	r3, [pc, #96]	; (8002274 <MX_TIM2_Init+0x94>)
 8002214:	2213      	movs	r2, #19
 8002216:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002218:	4b16      	ldr	r3, [pc, #88]	; (8002274 <MX_TIM2_Init+0x94>)
 800221a:	2200      	movs	r2, #0
 800221c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800221e:	4b15      	ldr	r3, [pc, #84]	; (8002274 <MX_TIM2_Init+0x94>)
 8002220:	2200      	movs	r2, #0
 8002222:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002224:	4813      	ldr	r0, [pc, #76]	; (8002274 <MX_TIM2_Init+0x94>)
 8002226:	f004 f90d 	bl	8006444 <HAL_TIM_Base_Init>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002230:	f7ff fa15 	bl	800165e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002238:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800223a:	f107 0308 	add.w	r3, r7, #8
 800223e:	4619      	mov	r1, r3
 8002240:	480c      	ldr	r0, [pc, #48]	; (8002274 <MX_TIM2_Init+0x94>)
 8002242:	f004 fc5d 	bl	8006b00 <HAL_TIM_ConfigClockSource>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800224c:	f7ff fa07 	bl	800165e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002250:	2300      	movs	r3, #0
 8002252:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002254:	2300      	movs	r3, #0
 8002256:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002258:	463b      	mov	r3, r7
 800225a:	4619      	mov	r1, r3
 800225c:	4805      	ldr	r0, [pc, #20]	; (8002274 <MX_TIM2_Init+0x94>)
 800225e:	f004 ffdf 	bl	8007220 <HAL_TIMEx_MasterConfigSynchronization>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002268:	f7ff f9f9 	bl	800165e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800226c:	bf00      	nop
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20000730 	.word	0x20000730

08002278 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08a      	sub	sp, #40	; 0x28
 800227c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800227e:	f107 0320 	add.w	r3, r7, #32
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002288:	1d3b      	adds	r3, r7, #4
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	60da      	str	r2, [r3, #12]
 8002294:	611a      	str	r2, [r3, #16]
 8002296:	615a      	str	r2, [r3, #20]
 8002298:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800229a:	4b22      	ldr	r3, [pc, #136]	; (8002324 <MX_TIM3_Init+0xac>)
 800229c:	4a22      	ldr	r2, [pc, #136]	; (8002328 <MX_TIM3_Init+0xb0>)
 800229e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 899;
 80022a0:	4b20      	ldr	r3, [pc, #128]	; (8002324 <MX_TIM3_Init+0xac>)
 80022a2:	f240 3283 	movw	r2, #899	; 0x383
 80022a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a8:	4b1e      	ldr	r3, [pc, #120]	; (8002324 <MX_TIM3_Init+0xac>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 80022ae:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <MX_TIM3_Init+0xac>)
 80022b0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80022b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b6:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <MX_TIM3_Init+0xac>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022bc:	4b19      	ldr	r3, [pc, #100]	; (8002324 <MX_TIM3_Init+0xac>)
 80022be:	2200      	movs	r2, #0
 80022c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022c2:	4818      	ldr	r0, [pc, #96]	; (8002324 <MX_TIM3_Init+0xac>)
 80022c4:	f004 f960 	bl	8006588 <HAL_TIM_PWM_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80022ce:	f7ff f9c6 	bl	800165e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022d2:	2300      	movs	r3, #0
 80022d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d6:	2300      	movs	r3, #0
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022da:	f107 0320 	add.w	r3, r7, #32
 80022de:	4619      	mov	r1, r3
 80022e0:	4810      	ldr	r0, [pc, #64]	; (8002324 <MX_TIM3_Init+0xac>)
 80022e2:	f004 ff9d 	bl	8007220 <HAL_TIMEx_MasterConfigSynchronization>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80022ec:	f7ff f9b7 	bl	800165e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022f0:	2360      	movs	r3, #96	; 0x60
 80022f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	220c      	movs	r2, #12
 8002304:	4619      	mov	r1, r3
 8002306:	4807      	ldr	r0, [pc, #28]	; (8002324 <MX_TIM3_Init+0xac>)
 8002308:	f004 fb38 	bl	800697c <HAL_TIM_PWM_ConfigChannel>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002312:	f7ff f9a4 	bl	800165e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002316:	4803      	ldr	r0, [pc, #12]	; (8002324 <MX_TIM3_Init+0xac>)
 8002318:	f000 f852 	bl	80023c0 <HAL_TIM_MspPostInit>

}
 800231c:	bf00      	nop
 800231e:	3728      	adds	r7, #40	; 0x28
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20000778 	.word	0x20000778
 8002328:	40000400 	.word	0x40000400

0800232c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800233c:	d113      	bne.n	8002366 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800233e:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <HAL_TIM_Base_MspInit+0x44>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	4a0b      	ldr	r2, [pc, #44]	; (8002370 <HAL_TIM_Base_MspInit+0x44>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	61d3      	str	r3, [r2, #28]
 800234a:	4b09      	ldr	r3, [pc, #36]	; (8002370 <HAL_TIM_Base_MspInit+0x44>)
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	2100      	movs	r1, #0
 800235a:	201c      	movs	r0, #28
 800235c:	f000 fab9 	bl	80028d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002360:	201c      	movs	r0, #28
 8002362:	f000 fad2 	bl	800290a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000

08002374 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a0d      	ldr	r2, [pc, #52]	; (80023b8 <HAL_TIM_PWM_MspInit+0x44>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d113      	bne.n	80023ae <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002386:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <HAL_TIM_PWM_MspInit+0x48>)
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	4a0c      	ldr	r2, [pc, #48]	; (80023bc <HAL_TIM_PWM_MspInit+0x48>)
 800238c:	f043 0302 	orr.w	r3, r3, #2
 8002390:	61d3      	str	r3, [r2, #28]
 8002392:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <HAL_TIM_PWM_MspInit+0x48>)
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800239e:	2200      	movs	r2, #0
 80023a0:	2100      	movs	r1, #0
 80023a2:	201d      	movs	r0, #29
 80023a4:	f000 fa95 	bl	80028d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023a8:	201d      	movs	r0, #29
 80023aa:	f000 faae 	bl	800290a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40000400 	.word	0x40000400
 80023bc:	40021000 	.word	0x40021000

080023c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 0310 	add.w	r3, r7, #16
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a0f      	ldr	r2, [pc, #60]	; (8002418 <HAL_TIM_MspPostInit+0x58>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d117      	bne.n	8002410 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e0:	4b0e      	ldr	r3, [pc, #56]	; (800241c <HAL_TIM_MspPostInit+0x5c>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	4a0d      	ldr	r2, [pc, #52]	; (800241c <HAL_TIM_MspPostInit+0x5c>)
 80023e6:	f043 0308 	orr.w	r3, r3, #8
 80023ea:	6193      	str	r3, [r2, #24]
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_TIM_MspPostInit+0x5c>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80023f8:	2302      	movs	r3, #2
 80023fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fc:	2302      	movs	r3, #2
 80023fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002400:	2302      	movs	r3, #2
 8002402:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002404:	f107 0310 	add.w	r3, r7, #16
 8002408:	4619      	mov	r1, r3
 800240a:	4805      	ldr	r0, [pc, #20]	; (8002420 <HAL_TIM_MspPostInit+0x60>)
 800240c:	f000 fd46 	bl	8002e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002410:	bf00      	nop
 8002412:	3720      	adds	r7, #32
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40000400 	.word	0x40000400
 800241c:	40021000 	.word	0x40021000
 8002420:	40010c00 	.word	0x40010c00

08002424 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <MX_USART1_UART_Init+0x4c>)
 800242a:	4a12      	ldr	r2, [pc, #72]	; (8002474 <MX_USART1_UART_Init+0x50>)
 800242c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <MX_USART1_UART_Init+0x4c>)
 8002430:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002434:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002436:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <MX_USART1_UART_Init+0x4c>)
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <MX_USART1_UART_Init+0x4c>)
 800243e:	2200      	movs	r2, #0
 8002440:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002442:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <MX_USART1_UART_Init+0x4c>)
 8002444:	2200      	movs	r2, #0
 8002446:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002448:	4b09      	ldr	r3, [pc, #36]	; (8002470 <MX_USART1_UART_Init+0x4c>)
 800244a:	220c      	movs	r2, #12
 800244c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800244e:	4b08      	ldr	r3, [pc, #32]	; (8002470 <MX_USART1_UART_Init+0x4c>)
 8002450:	2200      	movs	r2, #0
 8002452:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <MX_USART1_UART_Init+0x4c>)
 8002456:	2200      	movs	r2, #0
 8002458:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800245a:	4805      	ldr	r0, [pc, #20]	; (8002470 <MX_USART1_UART_Init+0x4c>)
 800245c:	f004 ff50 	bl	8007300 <HAL_UART_Init>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002466:	f7ff f8fa 	bl	800165e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	200007c0 	.word	0x200007c0
 8002474:	40013800 	.word	0x40013800

08002478 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 0310 	add.w	r3, r7, #16
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a47      	ldr	r2, [pc, #284]	; (80025b0 <HAL_UART_MspInit+0x138>)
 8002494:	4293      	cmp	r3, r2
 8002496:	f040 8086 	bne.w	80025a6 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800249a:	4b46      	ldr	r3, [pc, #280]	; (80025b4 <HAL_UART_MspInit+0x13c>)
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	4a45      	ldr	r2, [pc, #276]	; (80025b4 <HAL_UART_MspInit+0x13c>)
 80024a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a4:	6193      	str	r3, [r2, #24]
 80024a6:	4b43      	ldr	r3, [pc, #268]	; (80025b4 <HAL_UART_MspInit+0x13c>)
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b2:	4b40      	ldr	r3, [pc, #256]	; (80025b4 <HAL_UART_MspInit+0x13c>)
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	4a3f      	ldr	r2, [pc, #252]	; (80025b4 <HAL_UART_MspInit+0x13c>)
 80024b8:	f043 0304 	orr.w	r3, r3, #4
 80024bc:	6193      	str	r3, [r2, #24]
 80024be:	4b3d      	ldr	r3, [pc, #244]	; (80025b4 <HAL_UART_MspInit+0x13c>)
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d0:	2302      	movs	r3, #2
 80024d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024d4:	2303      	movs	r3, #3
 80024d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d8:	f107 0310 	add.w	r3, r7, #16
 80024dc:	4619      	mov	r1, r3
 80024de:	4836      	ldr	r0, [pc, #216]	; (80025b8 <HAL_UART_MspInit+0x140>)
 80024e0:	f000 fcdc 	bl	8002e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f2:	f107 0310 	add.w	r3, r7, #16
 80024f6:	4619      	mov	r1, r3
 80024f8:	482f      	ldr	r0, [pc, #188]	; (80025b8 <HAL_UART_MspInit+0x140>)
 80024fa:	f000 fccf 	bl	8002e9c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80024fe:	4b2f      	ldr	r3, [pc, #188]	; (80025bc <HAL_UART_MspInit+0x144>)
 8002500:	4a2f      	ldr	r2, [pc, #188]	; (80025c0 <HAL_UART_MspInit+0x148>)
 8002502:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002504:	4b2d      	ldr	r3, [pc, #180]	; (80025bc <HAL_UART_MspInit+0x144>)
 8002506:	2200      	movs	r2, #0
 8002508:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800250a:	4b2c      	ldr	r3, [pc, #176]	; (80025bc <HAL_UART_MspInit+0x144>)
 800250c:	2200      	movs	r2, #0
 800250e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002510:	4b2a      	ldr	r3, [pc, #168]	; (80025bc <HAL_UART_MspInit+0x144>)
 8002512:	2280      	movs	r2, #128	; 0x80
 8002514:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002516:	4b29      	ldr	r3, [pc, #164]	; (80025bc <HAL_UART_MspInit+0x144>)
 8002518:	2200      	movs	r2, #0
 800251a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800251c:	4b27      	ldr	r3, [pc, #156]	; (80025bc <HAL_UART_MspInit+0x144>)
 800251e:	2200      	movs	r2, #0
 8002520:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002522:	4b26      	ldr	r3, [pc, #152]	; (80025bc <HAL_UART_MspInit+0x144>)
 8002524:	2200      	movs	r2, #0
 8002526:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002528:	4b24      	ldr	r3, [pc, #144]	; (80025bc <HAL_UART_MspInit+0x144>)
 800252a:	2200      	movs	r2, #0
 800252c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800252e:	4823      	ldr	r0, [pc, #140]	; (80025bc <HAL_UART_MspInit+0x144>)
 8002530:	f000 fa06 	bl	8002940 <HAL_DMA_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800253a:	f7ff f890 	bl	800165e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a1e      	ldr	r2, [pc, #120]	; (80025bc <HAL_UART_MspInit+0x144>)
 8002542:	63da      	str	r2, [r3, #60]	; 0x3c
 8002544:	4a1d      	ldr	r2, [pc, #116]	; (80025bc <HAL_UART_MspInit+0x144>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800254a:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <HAL_UART_MspInit+0x14c>)
 800254c:	4a1e      	ldr	r2, [pc, #120]	; (80025c8 <HAL_UART_MspInit+0x150>)
 800254e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002550:	4b1c      	ldr	r3, [pc, #112]	; (80025c4 <HAL_UART_MspInit+0x14c>)
 8002552:	2210      	movs	r2, #16
 8002554:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002556:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <HAL_UART_MspInit+0x14c>)
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800255c:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <HAL_UART_MspInit+0x14c>)
 800255e:	2280      	movs	r2, #128	; 0x80
 8002560:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002562:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <HAL_UART_MspInit+0x14c>)
 8002564:	2200      	movs	r2, #0
 8002566:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002568:	4b16      	ldr	r3, [pc, #88]	; (80025c4 <HAL_UART_MspInit+0x14c>)
 800256a:	2200      	movs	r2, #0
 800256c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <HAL_UART_MspInit+0x14c>)
 8002570:	2200      	movs	r2, #0
 8002572:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <HAL_UART_MspInit+0x14c>)
 8002576:	2200      	movs	r2, #0
 8002578:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800257a:	4812      	ldr	r0, [pc, #72]	; (80025c4 <HAL_UART_MspInit+0x14c>)
 800257c:	f000 f9e0 	bl	8002940 <HAL_DMA_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8002586:	f7ff f86a 	bl	800165e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <HAL_UART_MspInit+0x14c>)
 800258e:	639a      	str	r2, [r3, #56]	; 0x38
 8002590:	4a0c      	ldr	r2, [pc, #48]	; (80025c4 <HAL_UART_MspInit+0x14c>)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	2100      	movs	r1, #0
 800259a:	2025      	movs	r0, #37	; 0x25
 800259c:	f000 f999 	bl	80028d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025a0:	2025      	movs	r0, #37	; 0x25
 80025a2:	f000 f9b2 	bl	800290a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80025a6:	bf00      	nop
 80025a8:	3720      	adds	r7, #32
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40013800 	.word	0x40013800
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40010800 	.word	0x40010800
 80025bc:	20000808 	.word	0x20000808
 80025c0:	40020058 	.word	0x40020058
 80025c4:	2000084c 	.word	0x2000084c
 80025c8:	40020044 	.word	0x40020044

080025cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025cc:	f7ff fe02 	bl	80021d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025d0:	480b      	ldr	r0, [pc, #44]	; (8002600 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80025d2:	490c      	ldr	r1, [pc, #48]	; (8002604 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80025d4:	4a0c      	ldr	r2, [pc, #48]	; (8002608 <LoopFillZerobss+0x16>)
  movs r3, #0
 80025d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025d8:	e002      	b.n	80025e0 <LoopCopyDataInit>

080025da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025de:	3304      	adds	r3, #4

080025e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025e4:	d3f9      	bcc.n	80025da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025e6:	4a09      	ldr	r2, [pc, #36]	; (800260c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80025e8:	4c09      	ldr	r4, [pc, #36]	; (8002610 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025ec:	e001      	b.n	80025f2 <LoopFillZerobss>

080025ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025f0:	3204      	adds	r2, #4

080025f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025f4:	d3fb      	bcc.n	80025ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025f6:	f006 fed3 	bl	80093a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025fa:	f7fe ff53 	bl	80014a4 <main>
  bx lr
 80025fe:	4770      	bx	lr
  ldr r0, =_sdata
 8002600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002604:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8002608:	0800fdc0 	.word	0x0800fdc0
  ldr r2, =_sbss
 800260c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8002610:	200009e0 	.word	0x200009e0

08002614 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002614:	e7fe      	b.n	8002614 <ADC1_2_IRQHandler>
	...

08002618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <HAL_Init+0x28>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a07      	ldr	r2, [pc, #28]	; (8002640 <HAL_Init+0x28>)
 8002622:	f043 0310 	orr.w	r3, r3, #16
 8002626:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002628:	2003      	movs	r0, #3
 800262a:	f000 f947 	bl	80028bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800262e:	2000      	movs	r0, #0
 8002630:	f000 f808 	bl	8002644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002634:	f7ff fbac 	bl	8001d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40022000 	.word	0x40022000

08002644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800264c:	4b12      	ldr	r3, [pc, #72]	; (8002698 <HAL_InitTick+0x54>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_InitTick+0x58>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	4619      	mov	r1, r3
 8002656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800265a:	fbb3 f3f1 	udiv	r3, r3, r1
 800265e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002662:	4618      	mov	r0, r3
 8002664:	f000 f95f 	bl	8002926 <HAL_SYSTICK_Config>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e00e      	b.n	8002690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b0f      	cmp	r3, #15
 8002676:	d80a      	bhi.n	800268e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002678:	2200      	movs	r2, #0
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	f04f 30ff 	mov.w	r0, #4294967295
 8002680:	f000 f927 	bl	80028d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002684:	4a06      	ldr	r2, [pc, #24]	; (80026a0 <HAL_InitTick+0x5c>)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	e000      	b.n	8002690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	2000001c 	.word	0x2000001c
 800269c:	20000024 	.word	0x20000024
 80026a0:	20000020 	.word	0x20000020

080026a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <HAL_IncTick+0x1c>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_IncTick+0x20>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	4a03      	ldr	r2, [pc, #12]	; (80026c4 <HAL_IncTick+0x20>)
 80026b6:	6013      	str	r3, [r2, #0]
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	20000024 	.word	0x20000024
 80026c4:	20000890 	.word	0x20000890

080026c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return uwTick;
 80026cc:	4b02      	ldr	r3, [pc, #8]	; (80026d8 <HAL_GetTick+0x10>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr
 80026d8:	20000890 	.word	0x20000890

080026dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026e4:	f7ff fff0 	bl	80026c8 <HAL_GetTick>
 80026e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d005      	beq.n	8002702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <HAL_Delay+0x44>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4413      	add	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002702:	bf00      	nop
 8002704:	f7ff ffe0 	bl	80026c8 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	429a      	cmp	r2, r3
 8002712:	d8f7      	bhi.n	8002704 <HAL_Delay+0x28>
  {
  }
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000024 	.word	0x20000024

08002724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <__NVIC_SetPriorityGrouping+0x44>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002740:	4013      	ands	r3, r2
 8002742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800274c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002756:	4a04      	ldr	r2, [pc, #16]	; (8002768 <__NVIC_SetPriorityGrouping+0x44>)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	60d3      	str	r3, [r2, #12]
}
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <__NVIC_GetPriorityGrouping+0x18>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	0a1b      	lsrs	r3, r3, #8
 8002776:	f003 0307 	and.w	r3, r3, #7
}
 800277a:	4618      	mov	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	2b00      	cmp	r3, #0
 8002798:	db0b      	blt.n	80027b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	f003 021f 	and.w	r2, r3, #31
 80027a0:	4906      	ldr	r1, [pc, #24]	; (80027bc <__NVIC_EnableIRQ+0x34>)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	2001      	movs	r0, #1
 80027aa:	fa00 f202 	lsl.w	r2, r0, r2
 80027ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr
 80027bc:	e000e100 	.word	0xe000e100

080027c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	6039      	str	r1, [r7, #0]
 80027ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	db0a      	blt.n	80027ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	490c      	ldr	r1, [pc, #48]	; (800280c <__NVIC_SetPriority+0x4c>)
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	0112      	lsls	r2, r2, #4
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	440b      	add	r3, r1
 80027e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e8:	e00a      	b.n	8002800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	4908      	ldr	r1, [pc, #32]	; (8002810 <__NVIC_SetPriority+0x50>)
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	3b04      	subs	r3, #4
 80027f8:	0112      	lsls	r2, r2, #4
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	440b      	add	r3, r1
 80027fe:	761a      	strb	r2, [r3, #24]
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	e000e100 	.word	0xe000e100
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002814:	b480      	push	{r7}
 8002816:	b089      	sub	sp, #36	; 0x24
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f1c3 0307 	rsb	r3, r3, #7
 800282e:	2b04      	cmp	r3, #4
 8002830:	bf28      	it	cs
 8002832:	2304      	movcs	r3, #4
 8002834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3304      	adds	r3, #4
 800283a:	2b06      	cmp	r3, #6
 800283c:	d902      	bls.n	8002844 <NVIC_EncodePriority+0x30>
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3b03      	subs	r3, #3
 8002842:	e000      	b.n	8002846 <NVIC_EncodePriority+0x32>
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002848:	f04f 32ff 	mov.w	r2, #4294967295
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43da      	mvns	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	401a      	ands	r2, r3
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800285c:	f04f 31ff 	mov.w	r1, #4294967295
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	fa01 f303 	lsl.w	r3, r1, r3
 8002866:	43d9      	mvns	r1, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800286c:	4313      	orrs	r3, r2
         );
}
 800286e:	4618      	mov	r0, r3
 8002870:	3724      	adds	r7, #36	; 0x24
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3b01      	subs	r3, #1
 8002884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002888:	d301      	bcc.n	800288e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800288a:	2301      	movs	r3, #1
 800288c:	e00f      	b.n	80028ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800288e:	4a0a      	ldr	r2, [pc, #40]	; (80028b8 <SysTick_Config+0x40>)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3b01      	subs	r3, #1
 8002894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002896:	210f      	movs	r1, #15
 8002898:	f04f 30ff 	mov.w	r0, #4294967295
 800289c:	f7ff ff90 	bl	80027c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <SysTick_Config+0x40>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028a6:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <SysTick_Config+0x40>)
 80028a8:	2207      	movs	r2, #7
 80028aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	e000e010 	.word	0xe000e010

080028bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff ff2d 	bl	8002724 <__NVIC_SetPriorityGrouping>
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b086      	sub	sp, #24
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	4603      	mov	r3, r0
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	607a      	str	r2, [r7, #4]
 80028de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028e4:	f7ff ff42 	bl	800276c <__NVIC_GetPriorityGrouping>
 80028e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	6978      	ldr	r0, [r7, #20]
 80028f0:	f7ff ff90 	bl	8002814 <NVIC_EncodePriority>
 80028f4:	4602      	mov	r2, r0
 80028f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028fa:	4611      	mov	r1, r2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff5f 	bl	80027c0 <__NVIC_SetPriority>
}
 8002902:	bf00      	nop
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	4603      	mov	r3, r0
 8002912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff35 	bl	8002788 <__NVIC_EnableIRQ>
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff ffa2 	bl	8002878 <SysTick_Config>
 8002934:	4603      	mov	r3, r0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e043      	b.n	80029de <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	4b22      	ldr	r3, [pc, #136]	; (80029e8 <HAL_DMA_Init+0xa8>)
 800295e:	4413      	add	r3, r2
 8002960:	4a22      	ldr	r2, [pc, #136]	; (80029ec <HAL_DMA_Init+0xac>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	091b      	lsrs	r3, r3, #4
 8002968:	009a      	lsls	r2, r3, #2
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a1f      	ldr	r2, [pc, #124]	; (80029f0 <HAL_DMA_Init+0xb0>)
 8002972:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800298a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800298e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002998:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr
 80029e8:	bffdfff8 	.word	0xbffdfff8
 80029ec:	cccccccd 	.word	0xcccccccd
 80029f0:	40020000 	.word	0x40020000

080029f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
 8002a00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_DMA_Start_IT+0x20>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e04b      	b.n	8002aac <HAL_DMA_Start_IT+0xb8>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d13a      	bne.n	8002a9e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	68b9      	ldr	r1, [r7, #8]
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f9f8 	bl	8002e42 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d008      	beq.n	8002a6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 020e 	orr.w	r2, r2, #14
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	e00f      	b.n	8002a8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0204 	bic.w	r2, r2, #4
 8002a7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 020a 	orr.w	r2, r2, #10
 8002a8a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	e005      	b.n	8002aaa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d008      	beq.n	8002ade <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2204      	movs	r2, #4
 8002ad0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e020      	b.n	8002b20 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 020e 	bic.w	r2, r2, #14
 8002aec:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0201 	bic.w	r2, r2, #1
 8002afc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b06:	2101      	movs	r1, #1
 8002b08:	fa01 f202 	lsl.w	r2, r1, r2
 8002b0c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr
	...

08002b2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d005      	beq.n	8002b50 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2204      	movs	r2, #4
 8002b48:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
 8002b4e:	e051      	b.n	8002bf4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 020e 	bic.w	r2, r2, #14
 8002b5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0201 	bic.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a22      	ldr	r2, [pc, #136]	; (8002c00 <HAL_DMA_Abort_IT+0xd4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d029      	beq.n	8002bce <HAL_DMA_Abort_IT+0xa2>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a21      	ldr	r2, [pc, #132]	; (8002c04 <HAL_DMA_Abort_IT+0xd8>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d022      	beq.n	8002bca <HAL_DMA_Abort_IT+0x9e>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a1f      	ldr	r2, [pc, #124]	; (8002c08 <HAL_DMA_Abort_IT+0xdc>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d01a      	beq.n	8002bc4 <HAL_DMA_Abort_IT+0x98>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a1e      	ldr	r2, [pc, #120]	; (8002c0c <HAL_DMA_Abort_IT+0xe0>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d012      	beq.n	8002bbe <HAL_DMA_Abort_IT+0x92>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a1c      	ldr	r2, [pc, #112]	; (8002c10 <HAL_DMA_Abort_IT+0xe4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_DMA_Abort_IT+0x8c>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a1b      	ldr	r2, [pc, #108]	; (8002c14 <HAL_DMA_Abort_IT+0xe8>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d102      	bne.n	8002bb2 <HAL_DMA_Abort_IT+0x86>
 8002bac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bb0:	e00e      	b.n	8002bd0 <HAL_DMA_Abort_IT+0xa4>
 8002bb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bb6:	e00b      	b.n	8002bd0 <HAL_DMA_Abort_IT+0xa4>
 8002bb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bbc:	e008      	b.n	8002bd0 <HAL_DMA_Abort_IT+0xa4>
 8002bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bc2:	e005      	b.n	8002bd0 <HAL_DMA_Abort_IT+0xa4>
 8002bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bc8:	e002      	b.n	8002bd0 <HAL_DMA_Abort_IT+0xa4>
 8002bca:	2310      	movs	r3, #16
 8002bcc:	e000      	b.n	8002bd0 <HAL_DMA_Abort_IT+0xa4>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	4a11      	ldr	r2, [pc, #68]	; (8002c18 <HAL_DMA_Abort_IT+0xec>)
 8002bd2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	4798      	blx	r3
    } 
  }
  return status;
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40020008 	.word	0x40020008
 8002c04:	4002001c 	.word	0x4002001c
 8002c08:	40020030 	.word	0x40020030
 8002c0c:	40020044 	.word	0x40020044
 8002c10:	40020058 	.word	0x40020058
 8002c14:	4002006c 	.word	0x4002006c
 8002c18:	40020000 	.word	0x40020000

08002c1c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	2204      	movs	r2, #4
 8002c3a:	409a      	lsls	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d04f      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0xc8>
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d04a      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0320 	and.w	r3, r3, #32
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d107      	bne.n	8002c6c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0204 	bic.w	r2, r2, #4
 8002c6a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a66      	ldr	r2, [pc, #408]	; (8002e0c <HAL_DMA_IRQHandler+0x1f0>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d029      	beq.n	8002cca <HAL_DMA_IRQHandler+0xae>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a65      	ldr	r2, [pc, #404]	; (8002e10 <HAL_DMA_IRQHandler+0x1f4>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d022      	beq.n	8002cc6 <HAL_DMA_IRQHandler+0xaa>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a63      	ldr	r2, [pc, #396]	; (8002e14 <HAL_DMA_IRQHandler+0x1f8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d01a      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0xa4>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a62      	ldr	r2, [pc, #392]	; (8002e18 <HAL_DMA_IRQHandler+0x1fc>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d012      	beq.n	8002cba <HAL_DMA_IRQHandler+0x9e>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a60      	ldr	r2, [pc, #384]	; (8002e1c <HAL_DMA_IRQHandler+0x200>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00a      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x98>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a5f      	ldr	r2, [pc, #380]	; (8002e20 <HAL_DMA_IRQHandler+0x204>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d102      	bne.n	8002cae <HAL_DMA_IRQHandler+0x92>
 8002ca8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cac:	e00e      	b.n	8002ccc <HAL_DMA_IRQHandler+0xb0>
 8002cae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002cb2:	e00b      	b.n	8002ccc <HAL_DMA_IRQHandler+0xb0>
 8002cb4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002cb8:	e008      	b.n	8002ccc <HAL_DMA_IRQHandler+0xb0>
 8002cba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cbe:	e005      	b.n	8002ccc <HAL_DMA_IRQHandler+0xb0>
 8002cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cc4:	e002      	b.n	8002ccc <HAL_DMA_IRQHandler+0xb0>
 8002cc6:	2340      	movs	r3, #64	; 0x40
 8002cc8:	e000      	b.n	8002ccc <HAL_DMA_IRQHandler+0xb0>
 8002cca:	2304      	movs	r3, #4
 8002ccc:	4a55      	ldr	r2, [pc, #340]	; (8002e24 <HAL_DMA_IRQHandler+0x208>)
 8002cce:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 8094 	beq.w	8002e02 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002ce2:	e08e      	b.n	8002e02 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	2202      	movs	r2, #2
 8002cea:	409a      	lsls	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d056      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x186>
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d051      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10b      	bne.n	8002d24 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 020a 	bic.w	r2, r2, #10
 8002d1a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a38      	ldr	r2, [pc, #224]	; (8002e0c <HAL_DMA_IRQHandler+0x1f0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d029      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x166>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a37      	ldr	r2, [pc, #220]	; (8002e10 <HAL_DMA_IRQHandler+0x1f4>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d022      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x162>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a35      	ldr	r2, [pc, #212]	; (8002e14 <HAL_DMA_IRQHandler+0x1f8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d01a      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x15c>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a34      	ldr	r2, [pc, #208]	; (8002e18 <HAL_DMA_IRQHandler+0x1fc>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d012      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x156>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a32      	ldr	r2, [pc, #200]	; (8002e1c <HAL_DMA_IRQHandler+0x200>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00a      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x150>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a31      	ldr	r2, [pc, #196]	; (8002e20 <HAL_DMA_IRQHandler+0x204>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d102      	bne.n	8002d66 <HAL_DMA_IRQHandler+0x14a>
 8002d60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d64:	e00e      	b.n	8002d84 <HAL_DMA_IRQHandler+0x168>
 8002d66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d6a:	e00b      	b.n	8002d84 <HAL_DMA_IRQHandler+0x168>
 8002d6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d70:	e008      	b.n	8002d84 <HAL_DMA_IRQHandler+0x168>
 8002d72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d76:	e005      	b.n	8002d84 <HAL_DMA_IRQHandler+0x168>
 8002d78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d7c:	e002      	b.n	8002d84 <HAL_DMA_IRQHandler+0x168>
 8002d7e:	2320      	movs	r3, #32
 8002d80:	e000      	b.n	8002d84 <HAL_DMA_IRQHandler+0x168>
 8002d82:	2302      	movs	r3, #2
 8002d84:	4a27      	ldr	r2, [pc, #156]	; (8002e24 <HAL_DMA_IRQHandler+0x208>)
 8002d86:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d034      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002da0:	e02f      	b.n	8002e02 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	2208      	movs	r2, #8
 8002da8:	409a      	lsls	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d028      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x1e8>
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d023      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 020e 	bic.w	r2, r2, #14
 8002dca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dda:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d004      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	4798      	blx	r3
    }
  }
  return;
 8002e02:	bf00      	nop
 8002e04:	bf00      	nop
}
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40020008 	.word	0x40020008
 8002e10:	4002001c 	.word	0x4002001c
 8002e14:	40020030 	.word	0x40020030
 8002e18:	40020044 	.word	0x40020044
 8002e1c:	40020058 	.word	0x40020058
 8002e20:	4002006c 	.word	0x4002006c
 8002e24:	40020000 	.word	0x40020000

08002e28 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e36:	b2db      	uxtb	r3, r3
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bc80      	pop	{r7}
 8002e40:	4770      	bx	lr

08002e42 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b085      	sub	sp, #20
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]
 8002e4e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e58:	2101      	movs	r1, #1
 8002e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b10      	cmp	r3, #16
 8002e6e:	d108      	bne.n	8002e82 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e80:	e007      	b.n	8002e92 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	60da      	str	r2, [r3, #12]
}
 8002e92:	bf00      	nop
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b08b      	sub	sp, #44	; 0x2c
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eae:	e169      	b.n	8003184 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	69fa      	ldr	r2, [r7, #28]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	f040 8158 	bne.w	800317e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4a9a      	ldr	r2, [pc, #616]	; (800313c <HAL_GPIO_Init+0x2a0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d05e      	beq.n	8002f96 <HAL_GPIO_Init+0xfa>
 8002ed8:	4a98      	ldr	r2, [pc, #608]	; (800313c <HAL_GPIO_Init+0x2a0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d875      	bhi.n	8002fca <HAL_GPIO_Init+0x12e>
 8002ede:	4a98      	ldr	r2, [pc, #608]	; (8003140 <HAL_GPIO_Init+0x2a4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d058      	beq.n	8002f96 <HAL_GPIO_Init+0xfa>
 8002ee4:	4a96      	ldr	r2, [pc, #600]	; (8003140 <HAL_GPIO_Init+0x2a4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d86f      	bhi.n	8002fca <HAL_GPIO_Init+0x12e>
 8002eea:	4a96      	ldr	r2, [pc, #600]	; (8003144 <HAL_GPIO_Init+0x2a8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d052      	beq.n	8002f96 <HAL_GPIO_Init+0xfa>
 8002ef0:	4a94      	ldr	r2, [pc, #592]	; (8003144 <HAL_GPIO_Init+0x2a8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d869      	bhi.n	8002fca <HAL_GPIO_Init+0x12e>
 8002ef6:	4a94      	ldr	r2, [pc, #592]	; (8003148 <HAL_GPIO_Init+0x2ac>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d04c      	beq.n	8002f96 <HAL_GPIO_Init+0xfa>
 8002efc:	4a92      	ldr	r2, [pc, #584]	; (8003148 <HAL_GPIO_Init+0x2ac>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d863      	bhi.n	8002fca <HAL_GPIO_Init+0x12e>
 8002f02:	4a92      	ldr	r2, [pc, #584]	; (800314c <HAL_GPIO_Init+0x2b0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d046      	beq.n	8002f96 <HAL_GPIO_Init+0xfa>
 8002f08:	4a90      	ldr	r2, [pc, #576]	; (800314c <HAL_GPIO_Init+0x2b0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d85d      	bhi.n	8002fca <HAL_GPIO_Init+0x12e>
 8002f0e:	2b12      	cmp	r3, #18
 8002f10:	d82a      	bhi.n	8002f68 <HAL_GPIO_Init+0xcc>
 8002f12:	2b12      	cmp	r3, #18
 8002f14:	d859      	bhi.n	8002fca <HAL_GPIO_Init+0x12e>
 8002f16:	a201      	add	r2, pc, #4	; (adr r2, 8002f1c <HAL_GPIO_Init+0x80>)
 8002f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1c:	08002f97 	.word	0x08002f97
 8002f20:	08002f71 	.word	0x08002f71
 8002f24:	08002f83 	.word	0x08002f83
 8002f28:	08002fc5 	.word	0x08002fc5
 8002f2c:	08002fcb 	.word	0x08002fcb
 8002f30:	08002fcb 	.word	0x08002fcb
 8002f34:	08002fcb 	.word	0x08002fcb
 8002f38:	08002fcb 	.word	0x08002fcb
 8002f3c:	08002fcb 	.word	0x08002fcb
 8002f40:	08002fcb 	.word	0x08002fcb
 8002f44:	08002fcb 	.word	0x08002fcb
 8002f48:	08002fcb 	.word	0x08002fcb
 8002f4c:	08002fcb 	.word	0x08002fcb
 8002f50:	08002fcb 	.word	0x08002fcb
 8002f54:	08002fcb 	.word	0x08002fcb
 8002f58:	08002fcb 	.word	0x08002fcb
 8002f5c:	08002fcb 	.word	0x08002fcb
 8002f60:	08002f79 	.word	0x08002f79
 8002f64:	08002f8d 	.word	0x08002f8d
 8002f68:	4a79      	ldr	r2, [pc, #484]	; (8003150 <HAL_GPIO_Init+0x2b4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d013      	beq.n	8002f96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f6e:	e02c      	b.n	8002fca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	623b      	str	r3, [r7, #32]
          break;
 8002f76:	e029      	b.n	8002fcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	623b      	str	r3, [r7, #32]
          break;
 8002f80:	e024      	b.n	8002fcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	3308      	adds	r3, #8
 8002f88:	623b      	str	r3, [r7, #32]
          break;
 8002f8a:	e01f      	b.n	8002fcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	330c      	adds	r3, #12
 8002f92:	623b      	str	r3, [r7, #32]
          break;
 8002f94:	e01a      	b.n	8002fcc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d102      	bne.n	8002fa4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f9e:	2304      	movs	r3, #4
 8002fa0:	623b      	str	r3, [r7, #32]
          break;
 8002fa2:	e013      	b.n	8002fcc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d105      	bne.n	8002fb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fac:	2308      	movs	r3, #8
 8002fae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69fa      	ldr	r2, [r7, #28]
 8002fb4:	611a      	str	r2, [r3, #16]
          break;
 8002fb6:	e009      	b.n	8002fcc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fb8:	2308      	movs	r3, #8
 8002fba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69fa      	ldr	r2, [r7, #28]
 8002fc0:	615a      	str	r2, [r3, #20]
          break;
 8002fc2:	e003      	b.n	8002fcc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	623b      	str	r3, [r7, #32]
          break;
 8002fc8:	e000      	b.n	8002fcc <HAL_GPIO_Init+0x130>
          break;
 8002fca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	2bff      	cmp	r3, #255	; 0xff
 8002fd0:	d801      	bhi.n	8002fd6 <HAL_GPIO_Init+0x13a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	e001      	b.n	8002fda <HAL_GPIO_Init+0x13e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	2bff      	cmp	r3, #255	; 0xff
 8002fe0:	d802      	bhi.n	8002fe8 <HAL_GPIO_Init+0x14c>
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	e002      	b.n	8002fee <HAL_GPIO_Init+0x152>
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	3b08      	subs	r3, #8
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	210f      	movs	r1, #15
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	401a      	ands	r2, r3
 8003000:	6a39      	ldr	r1, [r7, #32]
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	fa01 f303 	lsl.w	r3, r1, r3
 8003008:	431a      	orrs	r2, r3
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 80b1 	beq.w	800317e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800301c:	4b4d      	ldr	r3, [pc, #308]	; (8003154 <HAL_GPIO_Init+0x2b8>)
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	4a4c      	ldr	r2, [pc, #304]	; (8003154 <HAL_GPIO_Init+0x2b8>)
 8003022:	f043 0301 	orr.w	r3, r3, #1
 8003026:	6193      	str	r3, [r2, #24]
 8003028:	4b4a      	ldr	r3, [pc, #296]	; (8003154 <HAL_GPIO_Init+0x2b8>)
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003034:	4a48      	ldr	r2, [pc, #288]	; (8003158 <HAL_GPIO_Init+0x2bc>)
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	089b      	lsrs	r3, r3, #2
 800303a:	3302      	adds	r3, #2
 800303c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003040:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	f003 0303 	and.w	r3, r3, #3
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	220f      	movs	r2, #15
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4013      	ands	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a40      	ldr	r2, [pc, #256]	; (800315c <HAL_GPIO_Init+0x2c0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d013      	beq.n	8003088 <HAL_GPIO_Init+0x1ec>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a3f      	ldr	r2, [pc, #252]	; (8003160 <HAL_GPIO_Init+0x2c4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d00d      	beq.n	8003084 <HAL_GPIO_Init+0x1e8>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a3e      	ldr	r2, [pc, #248]	; (8003164 <HAL_GPIO_Init+0x2c8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d007      	beq.n	8003080 <HAL_GPIO_Init+0x1e4>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a3d      	ldr	r2, [pc, #244]	; (8003168 <HAL_GPIO_Init+0x2cc>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d101      	bne.n	800307c <HAL_GPIO_Init+0x1e0>
 8003078:	2303      	movs	r3, #3
 800307a:	e006      	b.n	800308a <HAL_GPIO_Init+0x1ee>
 800307c:	2304      	movs	r3, #4
 800307e:	e004      	b.n	800308a <HAL_GPIO_Init+0x1ee>
 8003080:	2302      	movs	r3, #2
 8003082:	e002      	b.n	800308a <HAL_GPIO_Init+0x1ee>
 8003084:	2301      	movs	r3, #1
 8003086:	e000      	b.n	800308a <HAL_GPIO_Init+0x1ee>
 8003088:	2300      	movs	r3, #0
 800308a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800308c:	f002 0203 	and.w	r2, r2, #3
 8003090:	0092      	lsls	r2, r2, #2
 8003092:	4093      	lsls	r3, r2
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800309a:	492f      	ldr	r1, [pc, #188]	; (8003158 <HAL_GPIO_Init+0x2bc>)
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	089b      	lsrs	r3, r3, #2
 80030a0:	3302      	adds	r3, #2
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d006      	beq.n	80030c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030b4:	4b2d      	ldr	r3, [pc, #180]	; (800316c <HAL_GPIO_Init+0x2d0>)
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	492c      	ldr	r1, [pc, #176]	; (800316c <HAL_GPIO_Init+0x2d0>)
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	4313      	orrs	r3, r2
 80030be:	608b      	str	r3, [r1, #8]
 80030c0:	e006      	b.n	80030d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030c2:	4b2a      	ldr	r3, [pc, #168]	; (800316c <HAL_GPIO_Init+0x2d0>)
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	4928      	ldr	r1, [pc, #160]	; (800316c <HAL_GPIO_Init+0x2d0>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d006      	beq.n	80030ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030dc:	4b23      	ldr	r3, [pc, #140]	; (800316c <HAL_GPIO_Init+0x2d0>)
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	4922      	ldr	r1, [pc, #136]	; (800316c <HAL_GPIO_Init+0x2d0>)
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	60cb      	str	r3, [r1, #12]
 80030e8:	e006      	b.n	80030f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030ea:	4b20      	ldr	r3, [pc, #128]	; (800316c <HAL_GPIO_Init+0x2d0>)
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	491e      	ldr	r1, [pc, #120]	; (800316c <HAL_GPIO_Init+0x2d0>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d006      	beq.n	8003112 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003104:	4b19      	ldr	r3, [pc, #100]	; (800316c <HAL_GPIO_Init+0x2d0>)
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	4918      	ldr	r1, [pc, #96]	; (800316c <HAL_GPIO_Init+0x2d0>)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	4313      	orrs	r3, r2
 800310e:	604b      	str	r3, [r1, #4]
 8003110:	e006      	b.n	8003120 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003112:	4b16      	ldr	r3, [pc, #88]	; (800316c <HAL_GPIO_Init+0x2d0>)
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	43db      	mvns	r3, r3
 800311a:	4914      	ldr	r1, [pc, #80]	; (800316c <HAL_GPIO_Init+0x2d0>)
 800311c:	4013      	ands	r3, r2
 800311e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d021      	beq.n	8003170 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800312c:	4b0f      	ldr	r3, [pc, #60]	; (800316c <HAL_GPIO_Init+0x2d0>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	490e      	ldr	r1, [pc, #56]	; (800316c <HAL_GPIO_Init+0x2d0>)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	4313      	orrs	r3, r2
 8003136:	600b      	str	r3, [r1, #0]
 8003138:	e021      	b.n	800317e <HAL_GPIO_Init+0x2e2>
 800313a:	bf00      	nop
 800313c:	10320000 	.word	0x10320000
 8003140:	10310000 	.word	0x10310000
 8003144:	10220000 	.word	0x10220000
 8003148:	10210000 	.word	0x10210000
 800314c:	10120000 	.word	0x10120000
 8003150:	10110000 	.word	0x10110000
 8003154:	40021000 	.word	0x40021000
 8003158:	40010000 	.word	0x40010000
 800315c:	40010800 	.word	0x40010800
 8003160:	40010c00 	.word	0x40010c00
 8003164:	40011000 	.word	0x40011000
 8003168:	40011400 	.word	0x40011400
 800316c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003170:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <HAL_GPIO_Init+0x304>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	43db      	mvns	r3, r3
 8003178:	4909      	ldr	r1, [pc, #36]	; (80031a0 <HAL_GPIO_Init+0x304>)
 800317a:	4013      	ands	r3, r2
 800317c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	3301      	adds	r3, #1
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	fa22 f303 	lsr.w	r3, r2, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	f47f ae8e 	bne.w	8002eb0 <HAL_GPIO_Init+0x14>
  }
}
 8003194:	bf00      	nop
 8003196:	bf00      	nop
 8003198:	372c      	adds	r7, #44	; 0x2c
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr
 80031a0:	40010400 	.word	0x40010400

080031a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	887b      	ldrh	r3, [r7, #2]
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031bc:	2301      	movs	r3, #1
 80031be:	73fb      	strb	r3, [r7, #15]
 80031c0:	e001      	b.n	80031c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031c2:	2300      	movs	r3, #0
 80031c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bc80      	pop	{r7}
 80031d0:	4770      	bx	lr
	...

080031d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031de:	4b08      	ldr	r3, [pc, #32]	; (8003200 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031e0:	695a      	ldr	r2, [r3, #20]
 80031e2:	88fb      	ldrh	r3, [r7, #6]
 80031e4:	4013      	ands	r3, r2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d006      	beq.n	80031f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031ea:	4a05      	ldr	r2, [pc, #20]	; (8003200 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031f0:	88fb      	ldrh	r3, [r7, #6]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 f806 	bl	8003204 <HAL_GPIO_EXTI_Callback>
  }
}
 80031f8:	bf00      	nop
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40010400 	.word	0x40010400

08003204 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr

08003218 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e12b      	b.n	8003482 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d106      	bne.n	8003244 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7fd ffa2 	bl	8001188 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2224      	movs	r2, #36	; 0x24
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0201 	bic.w	r2, r2, #1
 800325a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800326a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800327a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800327c:	f003 f89c 	bl	80063b8 <HAL_RCC_GetPCLK1Freq>
 8003280:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4a81      	ldr	r2, [pc, #516]	; (800348c <HAL_I2C_Init+0x274>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d807      	bhi.n	800329c <HAL_I2C_Init+0x84>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4a80      	ldr	r2, [pc, #512]	; (8003490 <HAL_I2C_Init+0x278>)
 8003290:	4293      	cmp	r3, r2
 8003292:	bf94      	ite	ls
 8003294:	2301      	movls	r3, #1
 8003296:	2300      	movhi	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	e006      	b.n	80032aa <HAL_I2C_Init+0x92>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4a7d      	ldr	r2, [pc, #500]	; (8003494 <HAL_I2C_Init+0x27c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	bf94      	ite	ls
 80032a4:	2301      	movls	r3, #1
 80032a6:	2300      	movhi	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e0e7      	b.n	8003482 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4a78      	ldr	r2, [pc, #480]	; (8003498 <HAL_I2C_Init+0x280>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	0c9b      	lsrs	r3, r3, #18
 80032bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	4a6a      	ldr	r2, [pc, #424]	; (800348c <HAL_I2C_Init+0x274>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d802      	bhi.n	80032ec <HAL_I2C_Init+0xd4>
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	3301      	adds	r3, #1
 80032ea:	e009      	b.n	8003300 <HAL_I2C_Init+0xe8>
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032f2:	fb02 f303 	mul.w	r3, r2, r3
 80032f6:	4a69      	ldr	r2, [pc, #420]	; (800349c <HAL_I2C_Init+0x284>)
 80032f8:	fba2 2303 	umull	r2, r3, r2, r3
 80032fc:	099b      	lsrs	r3, r3, #6
 80032fe:	3301      	adds	r3, #1
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	430b      	orrs	r3, r1
 8003306:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003312:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	495c      	ldr	r1, [pc, #368]	; (800348c <HAL_I2C_Init+0x274>)
 800331c:	428b      	cmp	r3, r1
 800331e:	d819      	bhi.n	8003354 <HAL_I2C_Init+0x13c>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	1e59      	subs	r1, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	fbb1 f3f3 	udiv	r3, r1, r3
 800332e:	1c59      	adds	r1, r3, #1
 8003330:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003334:	400b      	ands	r3, r1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <HAL_I2C_Init+0x138>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1e59      	subs	r1, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	fbb1 f3f3 	udiv	r3, r1, r3
 8003348:	3301      	adds	r3, #1
 800334a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800334e:	e051      	b.n	80033f4 <HAL_I2C_Init+0x1dc>
 8003350:	2304      	movs	r3, #4
 8003352:	e04f      	b.n	80033f4 <HAL_I2C_Init+0x1dc>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d111      	bne.n	8003380 <HAL_I2C_Init+0x168>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1e58      	subs	r0, r3, #1
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6859      	ldr	r1, [r3, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	440b      	add	r3, r1
 800336a:	fbb0 f3f3 	udiv	r3, r0, r3
 800336e:	3301      	adds	r3, #1
 8003370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003374:	2b00      	cmp	r3, #0
 8003376:	bf0c      	ite	eq
 8003378:	2301      	moveq	r3, #1
 800337a:	2300      	movne	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	e012      	b.n	80033a6 <HAL_I2C_Init+0x18e>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	1e58      	subs	r0, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6859      	ldr	r1, [r3, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	0099      	lsls	r1, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	fbb0 f3f3 	udiv	r3, r0, r3
 8003396:	3301      	adds	r3, #1
 8003398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339c:	2b00      	cmp	r3, #0
 800339e:	bf0c      	ite	eq
 80033a0:	2301      	moveq	r3, #1
 80033a2:	2300      	movne	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <HAL_I2C_Init+0x196>
 80033aa:	2301      	movs	r3, #1
 80033ac:	e022      	b.n	80033f4 <HAL_I2C_Init+0x1dc>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10e      	bne.n	80033d4 <HAL_I2C_Init+0x1bc>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1e58      	subs	r0, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6859      	ldr	r1, [r3, #4]
 80033be:	460b      	mov	r3, r1
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	440b      	add	r3, r1
 80033c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80033c8:	3301      	adds	r3, #1
 80033ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033d2:	e00f      	b.n	80033f4 <HAL_I2C_Init+0x1dc>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	1e58      	subs	r0, r3, #1
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6859      	ldr	r1, [r3, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	0099      	lsls	r1, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ea:	3301      	adds	r3, #1
 80033ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	6809      	ldr	r1, [r1, #0]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69da      	ldr	r2, [r3, #28]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003422:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6911      	ldr	r1, [r2, #16]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	68d2      	ldr	r2, [r2, #12]
 800342e:	4311      	orrs	r1, r2
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6812      	ldr	r2, [r2, #0]
 8003434:	430b      	orrs	r3, r1
 8003436:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695a      	ldr	r2, [r3, #20]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2220      	movs	r2, #32
 800346e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	000186a0 	.word	0x000186a0
 8003490:	001e847f 	.word	0x001e847f
 8003494:	003d08ff 	.word	0x003d08ff
 8003498:	431bde83 	.word	0x431bde83
 800349c:	10624dd3 	.word	0x10624dd3

080034a0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b2:	2b80      	cmp	r3, #128	; 0x80
 80034b4:	d103      	bne.n	80034be <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2200      	movs	r2, #0
 80034bc:	611a      	str	r2, [r3, #16]
  }
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr

080034c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af02      	add	r7, sp, #8
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	607a      	str	r2, [r7, #4]
 80034d2:	461a      	mov	r2, r3
 80034d4:	460b      	mov	r3, r1
 80034d6:	817b      	strh	r3, [r7, #10]
 80034d8:	4613      	mov	r3, r2
 80034da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034dc:	f7ff f8f4 	bl	80026c8 <HAL_GetTick>
 80034e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b20      	cmp	r3, #32
 80034ec:	f040 80e0 	bne.w	80036b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	2319      	movs	r3, #25
 80034f6:	2201      	movs	r2, #1
 80034f8:	4970      	ldr	r1, [pc, #448]	; (80036bc <HAL_I2C_Master_Transmit+0x1f4>)
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f002 f910 	bl	8005720 <I2C_WaitOnFlagUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003506:	2302      	movs	r3, #2
 8003508:	e0d3      	b.n	80036b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_I2C_Master_Transmit+0x50>
 8003514:	2302      	movs	r3, #2
 8003516:	e0cc      	b.n	80036b2 <HAL_I2C_Master_Transmit+0x1ea>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b01      	cmp	r3, #1
 800352c:	d007      	beq.n	800353e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0201 	orr.w	r2, r2, #1
 800353c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800354c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2221      	movs	r2, #33	; 0x21
 8003552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2210      	movs	r2, #16
 800355a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	893a      	ldrh	r2, [r7, #8]
 800356e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4a50      	ldr	r2, [pc, #320]	; (80036c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800357e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003580:	8979      	ldrh	r1, [r7, #10]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	6a3a      	ldr	r2, [r7, #32]
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f001 fed2 	bl	8005330 <I2C_MasterRequestWrite>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e08d      	b.n	80036b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003596:	2300      	movs	r3, #0
 8003598:	613b      	str	r3, [r7, #16]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	613b      	str	r3, [r7, #16]
 80035aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035ac:	e066      	b.n	800367c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	6a39      	ldr	r1, [r7, #32]
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f002 f9ce 	bl	8005954 <I2C_WaitOnTXEFlagUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00d      	beq.n	80035da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d107      	bne.n	80035d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e06b      	b.n	80036b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	781a      	ldrb	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003602:	3b01      	subs	r3, #1
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b04      	cmp	r3, #4
 8003616:	d11b      	bne.n	8003650 <HAL_I2C_Master_Transmit+0x188>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361c:	2b00      	cmp	r3, #0
 800361e:	d017      	beq.n	8003650 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	781a      	ldrb	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363a:	b29b      	uxth	r3, r3
 800363c:	3b01      	subs	r3, #1
 800363e:	b29a      	uxth	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	6a39      	ldr	r1, [r7, #32]
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f002 f9c5 	bl	80059e4 <I2C_WaitOnBTFFlagUntilTimeout>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00d      	beq.n	800367c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	2b04      	cmp	r3, #4
 8003666:	d107      	bne.n	8003678 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003676:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e01a      	b.n	80036b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003680:	2b00      	cmp	r3, #0
 8003682:	d194      	bne.n	80035ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003692:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036ac:	2300      	movs	r3, #0
 80036ae:	e000      	b.n	80036b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036b0:	2302      	movs	r3, #2
  }
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	00100002 	.word	0x00100002
 80036c0:	ffff0000 	.word	0xffff0000

080036c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08c      	sub	sp, #48	; 0x30
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	607a      	str	r2, [r7, #4]
 80036ce:	461a      	mov	r2, r3
 80036d0:	460b      	mov	r3, r1
 80036d2:	817b      	strh	r3, [r7, #10]
 80036d4:	4613      	mov	r3, r2
 80036d6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036dc:	f7fe fff4 	bl	80026c8 <HAL_GetTick>
 80036e0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b20      	cmp	r3, #32
 80036ec:	f040 824b 	bne.w	8003b86 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	2319      	movs	r3, #25
 80036f6:	2201      	movs	r2, #1
 80036f8:	497f      	ldr	r1, [pc, #508]	; (80038f8 <HAL_I2C_Master_Receive+0x234>)
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f002 f810 	bl	8005720 <I2C_WaitOnFlagUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003706:	2302      	movs	r3, #2
 8003708:	e23e      	b.n	8003b88 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_I2C_Master_Receive+0x54>
 8003714:	2302      	movs	r3, #2
 8003716:	e237      	b.n	8003b88 <HAL_I2C_Master_Receive+0x4c4>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b01      	cmp	r3, #1
 800372c:	d007      	beq.n	800373e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 0201 	orr.w	r2, r2, #1
 800373c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800374c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2222      	movs	r2, #34	; 0x22
 8003752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2210      	movs	r2, #16
 800375a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	893a      	ldrh	r2, [r7, #8]
 800376e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4a5f      	ldr	r2, [pc, #380]	; (80038fc <HAL_I2C_Master_Receive+0x238>)
 800377e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003780:	8979      	ldrh	r1, [r7, #10]
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f001 fe54 	bl	8005434 <I2C_MasterRequestRead>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e1f8      	b.n	8003b88 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379a:	2b00      	cmp	r3, #0
 800379c:	d113      	bne.n	80037c6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800379e:	2300      	movs	r3, #0
 80037a0:	61fb      	str	r3, [r7, #28]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	61fb      	str	r3, [r7, #28]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	61fb      	str	r3, [r7, #28]
 80037b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	e1cc      	b.n	8003b60 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d11e      	bne.n	800380c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037de:	b672      	cpsid	i
}
 80037e0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e2:	2300      	movs	r3, #0
 80037e4:	61bb      	str	r3, [r7, #24]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	61bb      	str	r3, [r7, #24]
 80037f6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003806:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003808:	b662      	cpsie	i
}
 800380a:	e035      	b.n	8003878 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003810:	2b02      	cmp	r3, #2
 8003812:	d11e      	bne.n	8003852 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003822:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003824:	b672      	cpsid	i
}
 8003826:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800384c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800384e:	b662      	cpsie	i
}
 8003850:	e012      	b.n	8003878 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003860:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003862:	2300      	movs	r3, #0
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003878:	e172      	b.n	8003b60 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387e:	2b03      	cmp	r3, #3
 8003880:	f200 811f 	bhi.w	8003ac2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003888:	2b01      	cmp	r3, #1
 800388a:	d123      	bne.n	80038d4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800388c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f002 f921 	bl	8005ad8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e173      	b.n	8003b88 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038d2:	e145      	b.n	8003b60 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d152      	bne.n	8003982 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e2:	2200      	movs	r2, #0
 80038e4:	4906      	ldr	r1, [pc, #24]	; (8003900 <HAL_I2C_Master_Receive+0x23c>)
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f001 ff1a 	bl	8005720 <I2C_WaitOnFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d008      	beq.n	8003904 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e148      	b.n	8003b88 <HAL_I2C_Master_Receive+0x4c4>
 80038f6:	bf00      	nop
 80038f8:	00100002 	.word	0x00100002
 80038fc:	ffff0000 	.word	0xffff0000
 8003900:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003904:	b672      	cpsid	i
}
 8003906:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003916:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	1c5a      	adds	r2, r3, #1
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003934:	3b01      	subs	r3, #1
 8003936:	b29a      	uxth	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800394a:	b662      	cpsie	i
}
 800394c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396a:	3b01      	subs	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003976:	b29b      	uxth	r3, r3
 8003978:	3b01      	subs	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003980:	e0ee      	b.n	8003b60 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003988:	2200      	movs	r2, #0
 800398a:	4981      	ldr	r1, [pc, #516]	; (8003b90 <HAL_I2C_Master_Receive+0x4cc>)
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f001 fec7 	bl	8005720 <I2C_WaitOnFlagUntilTimeout>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e0f5      	b.n	8003b88 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039ac:	b672      	cpsid	i
}
 80039ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691a      	ldr	r2, [r3, #16]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039e2:	4b6c      	ldr	r3, [pc, #432]	; (8003b94 <HAL_I2C_Master_Receive+0x4d0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	08db      	lsrs	r3, r3, #3
 80039e8:	4a6b      	ldr	r2, [pc, #428]	; (8003b98 <HAL_I2C_Master_Receive+0x4d4>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	0a1a      	lsrs	r2, r3, #8
 80039f0:	4613      	mov	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	00da      	lsls	r2, r3, #3
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d118      	bne.n	8003a3a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2220      	movs	r2, #32
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	f043 0220 	orr.w	r2, r3, #32
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003a2a:	b662      	cpsie	i
}
 8003a2c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e0a6      	b.n	8003b88 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b04      	cmp	r3, #4
 8003a46:	d1d9      	bne.n	80039fc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a8a:	b662      	cpsie	i
}
 8003a8c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ac0:	e04e      	b.n	8003b60 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f002 f806 	bl	8005ad8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e058      	b.n	8003b88 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d124      	bne.n	8003b60 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d107      	bne.n	8003b2e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b2c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f47f ae88 	bne.w	800387a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	e000      	b.n	8003b88 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003b86:	2302      	movs	r3, #2
  }
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3728      	adds	r7, #40	; 0x28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	00010004 	.word	0x00010004
 8003b94:	2000001c 	.word	0x2000001c
 8003b98:	14f8b589 	.word	0x14f8b589

08003b9c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bbc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
 8003bc8:	2b10      	cmp	r3, #16
 8003bca:	d003      	beq.n	8003bd4 <HAL_I2C_EV_IRQHandler+0x38>
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	2b40      	cmp	r3, #64	; 0x40
 8003bd0:	f040 80b1 	bne.w	8003d36 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10d      	bne.n	8003c0a <HAL_I2C_EV_IRQHandler+0x6e>
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003bf4:	d003      	beq.n	8003bfe <HAL_I2C_EV_IRQHandler+0x62>
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003bfc:	d101      	bne.n	8003c02 <HAL_I2C_EV_IRQHandler+0x66>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e000      	b.n	8003c04 <HAL_I2C_EV_IRQHandler+0x68>
 8003c02:	2300      	movs	r3, #0
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	f000 8114 	beq.w	8003e32 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00b      	beq.n	8003c2c <HAL_I2C_EV_IRQHandler+0x90>
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d006      	beq.n	8003c2c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f001 ffe5 	bl	8005bee <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 fd60 	bl	80046ea <I2C_Master_SB>
 8003c2a:	e083      	b.n	8003d34 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d008      	beq.n	8003c48 <HAL_I2C_EV_IRQHandler+0xac>
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 fdd7 	bl	80047f4 <I2C_Master_ADD10>
 8003c46:	e075      	b.n	8003d34 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d008      	beq.n	8003c64 <HAL_I2C_EV_IRQHandler+0xc8>
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 fdf2 	bl	8004846 <I2C_Master_ADDR>
 8003c62:	e067      	b.n	8003d34 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d036      	beq.n	8003cdc <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c7c:	f000 80db 	beq.w	8003e36 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00d      	beq.n	8003ca6 <HAL_I2C_EV_IRQHandler+0x10a>
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <HAL_I2C_EV_IRQHandler+0x10a>
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d103      	bne.n	8003ca6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f9d4 	bl	800404c <I2C_MasterTransmit_TXE>
 8003ca4:	e046      	b.n	8003d34 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 80c2 	beq.w	8003e36 <HAL_I2C_EV_IRQHandler+0x29a>
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80bc 	beq.w	8003e36 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003cbe:	7bbb      	ldrb	r3, [r7, #14]
 8003cc0:	2b21      	cmp	r3, #33	; 0x21
 8003cc2:	d103      	bne.n	8003ccc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fa5d 	bl	8004184 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cca:	e0b4      	b.n	8003e36 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
 8003cce:	2b40      	cmp	r3, #64	; 0x40
 8003cd0:	f040 80b1 	bne.w	8003e36 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 facb 	bl	8004270 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cda:	e0ac      	b.n	8003e36 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cea:	f000 80a4 	beq.w	8003e36 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00d      	beq.n	8003d14 <HAL_I2C_EV_IRQHandler+0x178>
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d008      	beq.n	8003d14 <HAL_I2C_EV_IRQHandler+0x178>
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d103      	bne.n	8003d14 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 fb47 	bl	80043a0 <I2C_MasterReceive_RXNE>
 8003d12:	e00f      	b.n	8003d34 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	f003 0304 	and.w	r3, r3, #4
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 808b 	beq.w	8003e36 <HAL_I2C_EV_IRQHandler+0x29a>
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8085 	beq.w	8003e36 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 fbf2 	bl	8004516 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d32:	e080      	b.n	8003e36 <HAL_I2C_EV_IRQHandler+0x29a>
 8003d34:	e07f      	b.n	8003e36 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d004      	beq.n	8003d48 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	61fb      	str	r3, [r7, #28]
 8003d46:	e007      	b.n	8003d58 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d011      	beq.n	8003d86 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00c      	beq.n	8003d86 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003d7c:	69b9      	ldr	r1, [r7, #24]
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 ffb8 	bl	8004cf4 <I2C_Slave_ADDR>
 8003d84:	e05a      	b.n	8003e3c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	f003 0310 	and.w	r3, r3, #16
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d008      	beq.n	8003da2 <HAL_I2C_EV_IRQHandler+0x206>
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fff2 	bl	8004d84 <I2C_Slave_STOPF>
 8003da0:	e04c      	b.n	8003e3c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003da2:	7bbb      	ldrb	r3, [r7, #14]
 8003da4:	2b21      	cmp	r3, #33	; 0x21
 8003da6:	d002      	beq.n	8003dae <HAL_I2C_EV_IRQHandler+0x212>
 8003da8:	7bbb      	ldrb	r3, [r7, #14]
 8003daa:	2b29      	cmp	r3, #41	; 0x29
 8003dac:	d120      	bne.n	8003df0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00d      	beq.n	8003dd4 <HAL_I2C_EV_IRQHandler+0x238>
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d008      	beq.n	8003dd4 <HAL_I2C_EV_IRQHandler+0x238>
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d103      	bne.n	8003dd4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fed5 	bl	8004b7c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003dd2:	e032      	b.n	8003e3a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d02d      	beq.n	8003e3a <HAL_I2C_EV_IRQHandler+0x29e>
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d028      	beq.n	8003e3a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 ff04 	bl	8004bf6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003dee:	e024      	b.n	8003e3a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00d      	beq.n	8003e16 <HAL_I2C_EV_IRQHandler+0x27a>
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_I2C_EV_IRQHandler+0x27a>
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d103      	bne.n	8003e16 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 ff11 	bl	8004c36 <I2C_SlaveReceive_RXNE>
 8003e14:	e012      	b.n	8003e3c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00d      	beq.n	8003e3c <HAL_I2C_EV_IRQHandler+0x2a0>
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d008      	beq.n	8003e3c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 ff41 	bl	8004cb2 <I2C_SlaveReceive_BTF>
 8003e30:	e004      	b.n	8003e3c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003e32:	bf00      	nop
 8003e34:	e002      	b.n	8003e3c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e36:	bf00      	nop
 8003e38:	e000      	b.n	8003e3c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e3a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003e3c:	3720      	adds	r7, #32
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b08a      	sub	sp, #40	; 0x28
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e64:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d015      	beq.n	8003e9c <HAL_I2C_ER_IRQHandler+0x5a>
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d010      	beq.n	8003e9c <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e8a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e9a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00d      	beq.n	8003ec2 <HAL_I2C_ER_IRQHandler+0x80>
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d008      	beq.n	8003ec2 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	f043 0302 	orr.w	r3, r3, #2
 8003eb6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003ec0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d03e      	beq.n	8003f4a <HAL_I2C_ER_IRQHandler+0x108>
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d039      	beq.n	8003f4a <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8003ed6:	7efb      	ldrb	r3, [r7, #27]
 8003ed8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003ef0:	7ebb      	ldrb	r3, [r7, #26]
 8003ef2:	2b20      	cmp	r3, #32
 8003ef4:	d112      	bne.n	8003f1c <HAL_I2C_ER_IRQHandler+0xda>
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10f      	bne.n	8003f1c <HAL_I2C_ER_IRQHandler+0xda>
 8003efc:	7cfb      	ldrb	r3, [r7, #19]
 8003efe:	2b21      	cmp	r3, #33	; 0x21
 8003f00:	d008      	beq.n	8003f14 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003f02:	7cfb      	ldrb	r3, [r7, #19]
 8003f04:	2b29      	cmp	r3, #41	; 0x29
 8003f06:	d005      	beq.n	8003f14 <HAL_I2C_ER_IRQHandler+0xd2>
 8003f08:	7cfb      	ldrb	r3, [r7, #19]
 8003f0a:	2b28      	cmp	r3, #40	; 0x28
 8003f0c:	d106      	bne.n	8003f1c <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2b21      	cmp	r3, #33	; 0x21
 8003f12:	d103      	bne.n	8003f1c <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f001 f865 	bl	8004fe4 <I2C_Slave_AF>
 8003f1a:	e016      	b.n	8003f4a <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f24:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	f043 0304 	orr.w	r3, r3, #4
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003f2e:	7efb      	ldrb	r3, [r7, #27]
 8003f30:	2b10      	cmp	r3, #16
 8003f32:	d002      	beq.n	8003f3a <HAL_I2C_ER_IRQHandler+0xf8>
 8003f34:	7efb      	ldrb	r3, [r7, #27]
 8003f36:	2b40      	cmp	r3, #64	; 0x40
 8003f38:	d107      	bne.n	8003f4a <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f48:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00d      	beq.n	8003f70 <HAL_I2C_ER_IRQHandler+0x12e>
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d008      	beq.n	8003f70 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	f043 0308 	orr.w	r3, r3, #8
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003f6e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d008      	beq.n	8003f88 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f001 f8a2 	bl	80050cc <I2C_ITError>
  }
}
 8003f88:	bf00      	nop
 8003f8a:	3728      	adds	r7, #40	; 0x28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	70fb      	strb	r3, [r7, #3]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr

08003ff2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bc80      	pop	{r7}
 8004002:	4770      	bx	lr

08004004 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	bc80      	pop	{r7}
 8004014:	4770      	bx	lr

08004016 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr

0800403a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr

0800404c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004062:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406e:	2b00      	cmp	r3, #0
 8004070:	d150      	bne.n	8004114 <I2C_MasterTransmit_TXE+0xc8>
 8004072:	7bfb      	ldrb	r3, [r7, #15]
 8004074:	2b21      	cmp	r3, #33	; 0x21
 8004076:	d14d      	bne.n	8004114 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2b08      	cmp	r3, #8
 800407c:	d01d      	beq.n	80040ba <I2C_MasterTransmit_TXE+0x6e>
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b20      	cmp	r3, #32
 8004082:	d01a      	beq.n	80040ba <I2C_MasterTransmit_TXE+0x6e>
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800408a:	d016      	beq.n	80040ba <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800409a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2211      	movs	r2, #17
 80040a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7ff ff6c 	bl	8003f90 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040b8:	e060      	b.n	800417c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040c8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b40      	cmp	r3, #64	; 0x40
 80040f2:	d107      	bne.n	8004104 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7ff ff81 	bl	8004004 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004102:	e03b      	b.n	800417c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7ff ff3f 	bl	8003f90 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004112:	e033      	b.n	800417c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004114:	7bfb      	ldrb	r3, [r7, #15]
 8004116:	2b21      	cmp	r3, #33	; 0x21
 8004118:	d005      	beq.n	8004126 <I2C_MasterTransmit_TXE+0xda>
 800411a:	7bbb      	ldrb	r3, [r7, #14]
 800411c:	2b40      	cmp	r3, #64	; 0x40
 800411e:	d12d      	bne.n	800417c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004120:	7bfb      	ldrb	r3, [r7, #15]
 8004122:	2b22      	cmp	r3, #34	; 0x22
 8004124:	d12a      	bne.n	800417c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412a:	b29b      	uxth	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	d108      	bne.n	8004142 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800413e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004140:	e01c      	b.n	800417c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b40      	cmp	r3, #64	; 0x40
 800414c:	d103      	bne.n	8004156 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f88e 	bl	8004270 <I2C_MemoryTransmit_TXE_BTF>
}
 8004154:	e012      	b.n	800417c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	781a      	ldrb	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004170:	b29b      	uxth	r3, r3
 8004172:	3b01      	subs	r3, #1
 8004174:	b29a      	uxth	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800417a:	e7ff      	b.n	800417c <I2C_MasterTransmit_TXE+0x130>
 800417c:	bf00      	nop
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b21      	cmp	r3, #33	; 0x21
 800419c:	d164      	bne.n	8004268 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d012      	beq.n	80041ce <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	781a      	ldrb	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80041cc:	e04c      	b.n	8004268 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d01d      	beq.n	8004210 <I2C_MasterTransmit_BTF+0x8c>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	d01a      	beq.n	8004210 <I2C_MasterTransmit_BTF+0x8c>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041e0:	d016      	beq.n	8004210 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041f0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2211      	movs	r2, #17
 80041f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2220      	movs	r2, #32
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff fec1 	bl	8003f90 <HAL_I2C_MasterTxCpltCallback>
}
 800420e:	e02b      	b.n	8004268 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800421e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800422e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b40      	cmp	r3, #64	; 0x40
 8004248:	d107      	bne.n	800425a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7ff fed6 	bl	8004004 <HAL_I2C_MemTxCpltCallback>
}
 8004258:	e006      	b.n	8004268 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7ff fe94 	bl	8003f90 <HAL_I2C_MasterTxCpltCallback>
}
 8004268:	bf00      	nop
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004284:	2b00      	cmp	r3, #0
 8004286:	d11d      	bne.n	80042c4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428c:	2b01      	cmp	r3, #1
 800428e:	d10b      	bne.n	80042a8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004294:	b2da      	uxtb	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a0:	1c9a      	adds	r2, r3, #2
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80042a6:	e077      	b.n	8004398 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	121b      	asrs	r3, r3, #8
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80042c2:	e069      	b.n	8004398 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d10b      	bne.n	80042e4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80042e2:	e059      	b.n	8004398 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d152      	bne.n	8004392 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	2b22      	cmp	r3, #34	; 0x22
 80042f0:	d10d      	bne.n	800430e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004300:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800430c:	e044      	b.n	8004398 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d015      	beq.n	8004344 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004318:	7bfb      	ldrb	r3, [r7, #15]
 800431a:	2b21      	cmp	r3, #33	; 0x21
 800431c:	d112      	bne.n	8004344 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	781a      	ldrb	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004338:	b29b      	uxth	r3, r3
 800433a:	3b01      	subs	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004342:	e029      	b.n	8004398 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d124      	bne.n	8004398 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800434e:	7bfb      	ldrb	r3, [r7, #15]
 8004350:	2b21      	cmp	r3, #33	; 0x21
 8004352:	d121      	bne.n	8004398 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004362:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004372:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2220      	movs	r2, #32
 800437e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff fe3a 	bl	8004004 <HAL_I2C_MemTxCpltCallback>
}
 8004390:	e002      	b.n	8004398 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7ff f884 	bl	80034a0 <I2C_Flush_DR>
}
 8004398:	bf00      	nop
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b22      	cmp	r3, #34	; 0x22
 80043b2:	f040 80ac 	bne.w	800450e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d921      	bls.n	8004408 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	691a      	ldr	r2, [r3, #16]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2b03      	cmp	r3, #3
 80043f2:	f040 808c 	bne.w	800450e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004404:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004406:	e082      	b.n	800450e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	2b02      	cmp	r3, #2
 800440e:	d075      	beq.n	80044fc <I2C_MasterReceive_RXNE+0x15c>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d002      	beq.n	800441c <I2C_MasterReceive_RXNE+0x7c>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d16f      	bne.n	80044fc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f001 fb29 	bl	8005a74 <I2C_WaitOnSTOPRequestThroughIT>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d142      	bne.n	80044ae <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004436:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004446:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691a      	ldr	r2, [r3, #16]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	1c5a      	adds	r2, r3, #1
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004464:	b29b      	uxth	r3, r3
 8004466:	3b01      	subs	r3, #1
 8004468:	b29a      	uxth	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b40      	cmp	r3, #64	; 0x40
 8004480:	d10a      	bne.n	8004498 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7ff fdc0 	bl	8004016 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004496:	e03a      	b.n	800450e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2212      	movs	r2, #18
 80044a4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7ff fd7b 	bl	8003fa2 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044ac:	e02f      	b.n	800450e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044bc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	691a      	ldr	r2, [r3, #16]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	b2d2      	uxtb	r2, r2
 80044ca:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044da:	b29b      	uxth	r3, r3
 80044dc:	3b01      	subs	r3, #1
 80044de:	b29a      	uxth	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7ff fd97 	bl	8004028 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044fa:	e008      	b.n	800450e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800450a:	605a      	str	r2, [r3, #4]
}
 800450c:	e7ff      	b.n	800450e <I2C_MasterReceive_RXNE+0x16e>
 800450e:	bf00      	nop
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004522:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004528:	b29b      	uxth	r3, r3
 800452a:	2b04      	cmp	r3, #4
 800452c:	d11b      	bne.n	8004566 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800453c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	1c5a      	adds	r2, r3, #1
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455a:	b29b      	uxth	r3, r3
 800455c:	3b01      	subs	r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004564:	e0bd      	b.n	80046e2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456a:	b29b      	uxth	r3, r3
 800456c:	2b03      	cmp	r3, #3
 800456e:	d129      	bne.n	80045c4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800457e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b04      	cmp	r3, #4
 8004584:	d00a      	beq.n	800459c <I2C_MasterReceive_BTF+0x86>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b02      	cmp	r3, #2
 800458a:	d007      	beq.n	800459c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800459a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691a      	ldr	r2, [r3, #16]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29a      	uxth	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045c2:	e08e      	b.n	80046e2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d176      	bne.n	80046bc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d002      	beq.n	80045da <I2C_MasterReceive_BTF+0xc4>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b10      	cmp	r3, #16
 80045d8:	d108      	bne.n	80045ec <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	e019      	b.n	8004620 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d002      	beq.n	80045f8 <I2C_MasterReceive_BTF+0xe2>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d108      	bne.n	800460a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	e00a      	b.n	8004620 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b10      	cmp	r3, #16
 800460e:	d007      	beq.n	8004620 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800461e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004662:	b29b      	uxth	r3, r3
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800467a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b40      	cmp	r3, #64	; 0x40
 800468e:	d10a      	bne.n	80046a6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff fcb9 	bl	8004016 <HAL_I2C_MemRxCpltCallback>
}
 80046a4:	e01d      	b.n	80046e2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2212      	movs	r2, #18
 80046b2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff fc74 	bl	8003fa2 <HAL_I2C_MasterRxCpltCallback>
}
 80046ba:	e012      	b.n	80046e2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d8:	b29b      	uxth	r3, r3
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29a      	uxth	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80046e2:	bf00      	nop
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b40      	cmp	r3, #64	; 0x40
 80046fc:	d117      	bne.n	800472e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004702:	2b00      	cmp	r3, #0
 8004704:	d109      	bne.n	800471a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470a:	b2db      	uxtb	r3, r3
 800470c:	461a      	mov	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004716:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004718:	e067      	b.n	80047ea <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471e:	b2db      	uxtb	r3, r3
 8004720:	f043 0301 	orr.w	r3, r3, #1
 8004724:	b2da      	uxtb	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	611a      	str	r2, [r3, #16]
}
 800472c:	e05d      	b.n	80047ea <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004736:	d133      	bne.n	80047a0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b21      	cmp	r3, #33	; 0x21
 8004742:	d109      	bne.n	8004758 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004748:	b2db      	uxtb	r3, r3
 800474a:	461a      	mov	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004754:	611a      	str	r2, [r3, #16]
 8004756:	e008      	b.n	800476a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475c:	b2db      	uxtb	r3, r3
 800475e:	f043 0301 	orr.w	r3, r3, #1
 8004762:	b2da      	uxtb	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476e:	2b00      	cmp	r3, #0
 8004770:	d004      	beq.n	800477c <I2C_Master_SB+0x92>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004778:	2b00      	cmp	r3, #0
 800477a:	d108      	bne.n	800478e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004780:	2b00      	cmp	r3, #0
 8004782:	d032      	beq.n	80047ea <I2C_Master_SB+0x100>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478a:	2b00      	cmp	r3, #0
 800478c:	d02d      	beq.n	80047ea <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800479c:	605a      	str	r2, [r3, #4]
}
 800479e:	e024      	b.n	80047ea <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10e      	bne.n	80047c6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	11db      	asrs	r3, r3, #7
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	f003 0306 	and.w	r3, r3, #6
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f063 030f 	orn	r3, r3, #15
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	611a      	str	r2, [r3, #16]
}
 80047c4:	e011      	b.n	80047ea <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d10d      	bne.n	80047ea <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	11db      	asrs	r3, r3, #7
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	f003 0306 	and.w	r3, r3, #6
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	f063 030e 	orn	r3, r3, #14
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	611a      	str	r2, [r3, #16]
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr

080047f4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004800:	b2da      	uxtb	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480c:	2b00      	cmp	r3, #0
 800480e:	d004      	beq.n	800481a <I2C_Master_ADD10+0x26>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004816:	2b00      	cmp	r3, #0
 8004818:	d108      	bne.n	800482c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00c      	beq.n	800483c <I2C_Master_ADD10+0x48>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004828:	2b00      	cmp	r3, #0
 800482a:	d007      	beq.n	800483c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800483a:	605a      	str	r2, [r3, #4]
  }
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	bc80      	pop	{r7}
 8004844:	4770      	bx	lr

08004846 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004846:	b480      	push	{r7}
 8004848:	b091      	sub	sp, #68	; 0x44
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004854:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004862:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b22      	cmp	r3, #34	; 0x22
 800486e:	f040 8174 	bne.w	8004b5a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10f      	bne.n	800489a <I2C_Master_ADDR+0x54>
 800487a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800487e:	2b40      	cmp	r3, #64	; 0x40
 8004880:	d10b      	bne.n	800489a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004882:	2300      	movs	r3, #0
 8004884:	633b      	str	r3, [r7, #48]	; 0x30
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	633b      	str	r3, [r7, #48]	; 0x30
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	633b      	str	r3, [r7, #48]	; 0x30
 8004896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004898:	e16b      	b.n	8004b72 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d11d      	bne.n	80048de <I2C_Master_ADDR+0x98>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048aa:	d118      	bne.n	80048de <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ac:	2300      	movs	r3, #0
 80048ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048d0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	651a      	str	r2, [r3, #80]	; 0x50
 80048dc:	e149      	b.n	8004b72 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d113      	bne.n	8004910 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048e8:	2300      	movs	r3, #0
 80048ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80048fc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	e120      	b.n	8004b52 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b01      	cmp	r3, #1
 8004918:	f040 808a 	bne.w	8004a30 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800491c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004922:	d137      	bne.n	8004994 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004932:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800493e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004942:	d113      	bne.n	800496c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004952:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004954:	2300      	movs	r3, #0
 8004956:	627b      	str	r3, [r7, #36]	; 0x24
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	627b      	str	r3, [r7, #36]	; 0x24
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	627b      	str	r3, [r7, #36]	; 0x24
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	e0f2      	b.n	8004b52 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800496c:	2300      	movs	r3, #0
 800496e:	623b      	str	r3, [r7, #32]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	623b      	str	r3, [r7, #32]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	623b      	str	r3, [r7, #32]
 8004980:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	e0de      	b.n	8004b52 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004996:	2b08      	cmp	r3, #8
 8004998:	d02e      	beq.n	80049f8 <I2C_Master_ADDR+0x1b2>
 800499a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499c:	2b20      	cmp	r3, #32
 800499e:	d02b      	beq.n	80049f8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80049a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a2:	2b12      	cmp	r3, #18
 80049a4:	d102      	bne.n	80049ac <I2C_Master_ADDR+0x166>
 80049a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d125      	bne.n	80049f8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80049ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d00e      	beq.n	80049d0 <I2C_Master_ADDR+0x18a>
 80049b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d00b      	beq.n	80049d0 <I2C_Master_ADDR+0x18a>
 80049b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ba:	2b10      	cmp	r3, #16
 80049bc:	d008      	beq.n	80049d0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	e007      	b.n	80049e0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049de:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049e0:	2300      	movs	r3, #0
 80049e2:	61fb      	str	r3, [r7, #28]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	61fb      	str	r3, [r7, #28]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	61fb      	str	r3, [r7, #28]
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	e0ac      	b.n	8004b52 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a06:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a08:	2300      	movs	r3, #0
 8004a0a:	61bb      	str	r3, [r7, #24]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	61bb      	str	r3, [r7, #24]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	61bb      	str	r3, [r7, #24]
 8004a1c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	e090      	b.n	8004b52 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d158      	bne.n	8004aec <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d021      	beq.n	8004a84 <I2C_Master_ADDR+0x23e>
 8004a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d01e      	beq.n	8004a84 <I2C_Master_ADDR+0x23e>
 8004a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a48:	2b10      	cmp	r3, #16
 8004a4a:	d01b      	beq.n	8004a84 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a5a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	617b      	str	r3, [r7, #20]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	e012      	b.n	8004aaa <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a92:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a94:	2300      	movs	r3, #0
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	613b      	str	r3, [r7, #16]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	613b      	str	r3, [r7, #16]
 8004aa8:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ab8:	d14b      	bne.n	8004b52 <I2C_Master_ADDR+0x30c>
 8004aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ac0:	d00b      	beq.n	8004ada <I2C_Master_ADDR+0x294>
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d008      	beq.n	8004ada <I2C_Master_ADDR+0x294>
 8004ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d005      	beq.n	8004ada <I2C_Master_ADDR+0x294>
 8004ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad0:	2b10      	cmp	r3, #16
 8004ad2:	d002      	beq.n	8004ada <I2C_Master_ADDR+0x294>
 8004ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad6:	2b20      	cmp	r3, #32
 8004ad8:	d13b      	bne.n	8004b52 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ae8:	605a      	str	r2, [r3, #4]
 8004aea:	e032      	b.n	8004b52 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004afa:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b0a:	d117      	bne.n	8004b3c <I2C_Master_ADDR+0x2f6>
 8004b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b12:	d00b      	beq.n	8004b2c <I2C_Master_ADDR+0x2e6>
 8004b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d008      	beq.n	8004b2c <I2C_Master_ADDR+0x2e6>
 8004b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d005      	beq.n	8004b2c <I2C_Master_ADDR+0x2e6>
 8004b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b22:	2b10      	cmp	r3, #16
 8004b24:	d002      	beq.n	8004b2c <I2C_Master_ADDR+0x2e6>
 8004b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b28:	2b20      	cmp	r3, #32
 8004b2a:	d107      	bne.n	8004b3c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b3a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004b58:	e00b      	b.n	8004b72 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60bb      	str	r3, [r7, #8]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	60bb      	str	r3, [r7, #8]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	60bb      	str	r3, [r7, #8]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
}
 8004b70:	e7ff      	b.n	8004b72 <I2C_Master_ADDR+0x32c>
 8004b72:	bf00      	nop
 8004b74:	3744      	adds	r7, #68	; 0x44
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr

08004b7c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b8a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d02b      	beq.n	8004bee <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	781a      	ldrb	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d114      	bne.n	8004bee <I2C_SlaveTransmit_TXE+0x72>
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
 8004bc6:	2b29      	cmp	r3, #41	; 0x29
 8004bc8:	d111      	bne.n	8004bee <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2221      	movs	r2, #33	; 0x21
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2228      	movs	r2, #40	; 0x28
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7ff f9e3 	bl	8003fb4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004bee:	bf00      	nop
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b083      	sub	sp, #12
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d011      	beq.n	8004c2c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	781a      	ldrb	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	3b01      	subs	r3, #1
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bc80      	pop	{r7}
 8004c34:	4770      	bx	lr

08004c36 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b084      	sub	sp, #16
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c44:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d02c      	beq.n	8004caa <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691a      	ldr	r2, [r3, #16]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	b2d2      	uxtb	r2, r2
 8004c5c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d114      	bne.n	8004caa <I2C_SlaveReceive_RXNE+0x74>
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
 8004c82:	2b2a      	cmp	r3, #42	; 0x2a
 8004c84:	d111      	bne.n	8004caa <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c94:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2222      	movs	r2, #34	; 0x22
 8004c9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2228      	movs	r2, #40	; 0x28
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7ff f98e 	bl	8003fc6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004caa:	bf00      	nop
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d012      	beq.n	8004cea <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691a      	ldr	r2, [r3, #16]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr

08004cf4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d0e:	2b28      	cmp	r3, #40	; 0x28
 8004d10:	d125      	bne.n	8004d5e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d20:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d103      	bne.n	8004d42 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	81bb      	strh	r3, [r7, #12]
 8004d40:	e002      	b.n	8004d48 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004d50:	89ba      	ldrh	r2, [r7, #12]
 8004d52:	7bfb      	ldrb	r3, [r7, #15]
 8004d54:	4619      	mov	r1, r3
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7ff f93e 	bl	8003fd8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d5c:	e00e      	b.n	8004d7c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60bb      	str	r3, [r7, #8]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	60bb      	str	r3, [r7, #8]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	60bb      	str	r3, [r7, #8]
 8004d72:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004d7c:	bf00      	nop
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d92:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004da2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004da4:	2300      	movs	r3, #0
 8004da6:	60bb      	str	r3, [r7, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	60bb      	str	r3, [r7, #8]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0201 	orr.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004de0:	d172      	bne.n	8004ec8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
 8004de4:	2b22      	cmp	r3, #34	; 0x22
 8004de6:	d002      	beq.n	8004dee <I2C_Slave_STOPF+0x6a>
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
 8004dea:	2b2a      	cmp	r3, #42	; 0x2a
 8004dec:	d135      	bne.n	8004e5a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d005      	beq.n	8004e12 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	f043 0204 	orr.w	r2, r3, #4
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e20:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fd fffe 	bl	8002e28 <HAL_DMA_GetState>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d049      	beq.n	8004ec6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e36:	4a69      	ldr	r2, [pc, #420]	; (8004fdc <I2C_Slave_STOPF+0x258>)
 8004e38:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fd fe74 	bl	8002b2c <HAL_DMA_Abort_IT>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d03d      	beq.n	8004ec6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e54:	4610      	mov	r0, r2
 8004e56:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e58:	e035      	b.n	8004ec6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	f043 0204 	orr.w	r2, r3, #4
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e8c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fd ffc8 	bl	8002e28 <HAL_DMA_GetState>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d014      	beq.n	8004ec8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea2:	4a4e      	ldr	r2, [pc, #312]	; (8004fdc <I2C_Slave_STOPF+0x258>)
 8004ea4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fd fe3e 	bl	8002b2c <HAL_DMA_Abort_IT>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d008      	beq.n	8004ec8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	4798      	blx	r3
 8004ec4:	e000      	b.n	8004ec8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ec6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d03e      	beq.n	8004f50 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	d112      	bne.n	8004f06 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	691a      	ldr	r2, [r3, #16]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f10:	2b40      	cmp	r3, #64	; 0x40
 8004f12:	d112      	bne.n	8004f3a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d005      	beq.n	8004f50 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f48:	f043 0204 	orr.w	r2, r3, #4
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f8b7 	bl	80050cc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004f5e:	e039      	b.n	8004fd4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
 8004f62:	2b2a      	cmp	r3, #42	; 0x2a
 8004f64:	d109      	bne.n	8004f7a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2228      	movs	r2, #40	; 0x28
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7ff f826 	bl	8003fc6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b28      	cmp	r3, #40	; 0x28
 8004f84:	d111      	bne.n	8004faa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a15      	ldr	r2, [pc, #84]	; (8004fe0 <I2C_Slave_STOPF+0x25c>)
 8004f8a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2220      	movs	r2, #32
 8004f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7ff f825 	bl	8003ff2 <HAL_I2C_ListenCpltCallback>
}
 8004fa8:	e014      	b.n	8004fd4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fae:	2b22      	cmp	r3, #34	; 0x22
 8004fb0:	d002      	beq.n	8004fb8 <I2C_Slave_STOPF+0x234>
 8004fb2:	7bfb      	ldrb	r3, [r7, #15]
 8004fb4:	2b22      	cmp	r3, #34	; 0x22
 8004fb6:	d10d      	bne.n	8004fd4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7fe fff9 	bl	8003fc6 <HAL_I2C_SlaveRxCpltCallback>
}
 8004fd4:	bf00      	nop
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	080055d1 	.word	0x080055d1
 8004fe0:	ffff0000 	.word	0xffff0000

08004fe4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d002      	beq.n	8005006 <I2C_Slave_AF+0x22>
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b20      	cmp	r3, #32
 8005004:	d129      	bne.n	800505a <I2C_Slave_AF+0x76>
 8005006:	7bfb      	ldrb	r3, [r7, #15]
 8005008:	2b28      	cmp	r3, #40	; 0x28
 800500a:	d126      	bne.n	800505a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a2e      	ldr	r2, [pc, #184]	; (80050c8 <I2C_Slave_AF+0xe4>)
 8005010:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005020:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800502a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800503a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2220      	movs	r2, #32
 8005046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7fe ffcd 	bl	8003ff2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005058:	e031      	b.n	80050be <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800505a:	7bfb      	ldrb	r3, [r7, #15]
 800505c:	2b21      	cmp	r3, #33	; 0x21
 800505e:	d129      	bne.n	80050b4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a19      	ldr	r2, [pc, #100]	; (80050c8 <I2C_Slave_AF+0xe4>)
 8005064:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2221      	movs	r2, #33	; 0x21
 800506a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2220      	movs	r2, #32
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800508a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005094:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050a4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7fe f9fa 	bl	80034a0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7fe ff81 	bl	8003fb4 <HAL_I2C_SlaveTxCpltCallback>
}
 80050b2:	e004      	b.n	80050be <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050bc:	615a      	str	r2, [r3, #20]
}
 80050be:	bf00      	nop
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	ffff0000 	.word	0xffff0000

080050cc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050da:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050e2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80050e4:	7bbb      	ldrb	r3, [r7, #14]
 80050e6:	2b10      	cmp	r3, #16
 80050e8:	d002      	beq.n	80050f0 <I2C_ITError+0x24>
 80050ea:	7bbb      	ldrb	r3, [r7, #14]
 80050ec:	2b40      	cmp	r3, #64	; 0x40
 80050ee:	d10a      	bne.n	8005106 <I2C_ITError+0x3a>
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
 80050f2:	2b22      	cmp	r3, #34	; 0x22
 80050f4:	d107      	bne.n	8005106 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005104:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005106:	7bfb      	ldrb	r3, [r7, #15]
 8005108:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800510c:	2b28      	cmp	r3, #40	; 0x28
 800510e:	d107      	bne.n	8005120 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2228      	movs	r2, #40	; 0x28
 800511a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800511e:	e015      	b.n	800514c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800512a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800512e:	d00a      	beq.n	8005146 <I2C_ITError+0x7a>
 8005130:	7bfb      	ldrb	r3, [r7, #15]
 8005132:	2b60      	cmp	r3, #96	; 0x60
 8005134:	d007      	beq.n	8005146 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2220      	movs	r2, #32
 800513a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800515a:	d162      	bne.n	8005222 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800516a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005170:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b01      	cmp	r3, #1
 8005178:	d020      	beq.n	80051bc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517e:	4a6a      	ldr	r2, [pc, #424]	; (8005328 <I2C_ITError+0x25c>)
 8005180:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005186:	4618      	mov	r0, r3
 8005188:	f7fd fcd0 	bl	8002b2c <HAL_DMA_Abort_IT>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 8089 	beq.w	80052a6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0201 	bic.w	r2, r2, #1
 80051a2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051b6:	4610      	mov	r0, r2
 80051b8:	4798      	blx	r3
 80051ba:	e074      	b.n	80052a6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c0:	4a59      	ldr	r2, [pc, #356]	; (8005328 <I2C_ITError+0x25c>)
 80051c2:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7fd fcaf 	bl	8002b2c <HAL_DMA_Abort_IT>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d068      	beq.n	80052a6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051de:	2b40      	cmp	r3, #64	; 0x40
 80051e0:	d10b      	bne.n	80051fa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691a      	ldr	r2, [r3, #16]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	b2d2      	uxtb	r2, r2
 80051ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 0201 	bic.w	r2, r2, #1
 8005208:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2220      	movs	r2, #32
 800520e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800521c:	4610      	mov	r0, r2
 800521e:	4798      	blx	r3
 8005220:	e041      	b.n	80052a6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b60      	cmp	r3, #96	; 0x60
 800522c:	d125      	bne.n	800527a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2220      	movs	r2, #32
 8005232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005246:	2b40      	cmp	r3, #64	; 0x40
 8005248:	d10b      	bne.n	8005262 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	691a      	ldr	r2, [r3, #16]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 0201 	bic.w	r2, r2, #1
 8005270:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7fe fee1 	bl	800403a <HAL_I2C_AbortCpltCallback>
 8005278:	e015      	b.n	80052a6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005284:	2b40      	cmp	r3, #64	; 0x40
 8005286:	d10b      	bne.n	80052a0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691a      	ldr	r2, [r3, #16]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f7fe fec1 	bl	8004028 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10e      	bne.n	80052d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d109      	bne.n	80052d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d104      	bne.n	80052d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d007      	beq.n	80052e4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052e2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ea:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d113      	bne.n	8005320 <I2C_ITError+0x254>
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
 80052fa:	2b28      	cmp	r3, #40	; 0x28
 80052fc:	d110      	bne.n	8005320 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a0a      	ldr	r2, [pc, #40]	; (800532c <I2C_ITError+0x260>)
 8005302:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2220      	movs	r2, #32
 800530e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7fe fe69 	bl	8003ff2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005320:	bf00      	nop
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	080055d1 	.word	0x080055d1
 800532c:	ffff0000 	.word	0xffff0000

08005330 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af02      	add	r7, sp, #8
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	607a      	str	r2, [r7, #4]
 800533a:	603b      	str	r3, [r7, #0]
 800533c:	460b      	mov	r3, r1
 800533e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2b08      	cmp	r3, #8
 800534a:	d006      	beq.n	800535a <I2C_MasterRequestWrite+0x2a>
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d003      	beq.n	800535a <I2C_MasterRequestWrite+0x2a>
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005358:	d108      	bne.n	800536c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	e00b      	b.n	8005384 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005370:	2b12      	cmp	r3, #18
 8005372:	d107      	bne.n	8005384 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005382:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f000 f9c5 	bl	8005720 <I2C_WaitOnFlagUntilTimeout>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00d      	beq.n	80053b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053aa:	d103      	bne.n	80053b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e035      	b.n	8005424 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053c0:	d108      	bne.n	80053d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053c2:	897b      	ldrh	r3, [r7, #10]
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	461a      	mov	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053d0:	611a      	str	r2, [r3, #16]
 80053d2:	e01b      	b.n	800540c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80053d4:	897b      	ldrh	r3, [r7, #10]
 80053d6:	11db      	asrs	r3, r3, #7
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	f003 0306 	and.w	r3, r3, #6
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	f063 030f 	orn	r3, r3, #15
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	490e      	ldr	r1, [pc, #56]	; (800542c <I2C_MasterRequestWrite+0xfc>)
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f000 fa0e 	bl	8005814 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e010      	b.n	8005424 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005402:	897b      	ldrh	r3, [r7, #10]
 8005404:	b2da      	uxtb	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	4907      	ldr	r1, [pc, #28]	; (8005430 <I2C_MasterRequestWrite+0x100>)
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 f9fe 	bl	8005814 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e000      	b.n	8005424 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	00010008 	.word	0x00010008
 8005430:	00010002 	.word	0x00010002

08005434 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af02      	add	r7, sp, #8
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	607a      	str	r2, [r7, #4]
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	460b      	mov	r3, r1
 8005442:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005448:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005458:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2b08      	cmp	r3, #8
 800545e:	d006      	beq.n	800546e <I2C_MasterRequestRead+0x3a>
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d003      	beq.n	800546e <I2C_MasterRequestRead+0x3a>
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800546c:	d108      	bne.n	8005480 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	e00b      	b.n	8005498 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005484:	2b11      	cmp	r3, #17
 8005486:	d107      	bne.n	8005498 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005496:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 f93b 	bl	8005720 <I2C_WaitOnFlagUntilTimeout>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00d      	beq.n	80054cc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054be:	d103      	bne.n	80054c8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e079      	b.n	80055c0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054d4:	d108      	bne.n	80054e8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80054d6:	897b      	ldrh	r3, [r7, #10]
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	f043 0301 	orr.w	r3, r3, #1
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	611a      	str	r2, [r3, #16]
 80054e6:	e05f      	b.n	80055a8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80054e8:	897b      	ldrh	r3, [r7, #10]
 80054ea:	11db      	asrs	r3, r3, #7
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	f003 0306 	and.w	r3, r3, #6
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	f063 030f 	orn	r3, r3, #15
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	4930      	ldr	r1, [pc, #192]	; (80055c8 <I2C_MasterRequestRead+0x194>)
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 f984 	bl	8005814 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e054      	b.n	80055c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005516:	897b      	ldrh	r3, [r7, #10]
 8005518:	b2da      	uxtb	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	4929      	ldr	r1, [pc, #164]	; (80055cc <I2C_MasterRequestRead+0x198>)
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f000 f974 	bl	8005814 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e044      	b.n	80055c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005536:	2300      	movs	r3, #0
 8005538:	613b      	str	r3, [r7, #16]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	613b      	str	r3, [r7, #16]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	613b      	str	r3, [r7, #16]
 800554a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800555a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 f8d9 	bl	8005720 <I2C_WaitOnFlagUntilTimeout>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00d      	beq.n	8005590 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005582:	d103      	bne.n	800558c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800558a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e017      	b.n	80055c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005590:	897b      	ldrh	r3, [r7, #10]
 8005592:	11db      	asrs	r3, r3, #7
 8005594:	b2db      	uxtb	r3, r3
 8005596:	f003 0306 	and.w	r3, r3, #6
 800559a:	b2db      	uxtb	r3, r3
 800559c:	f063 030e 	orn	r3, r3, #14
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	4907      	ldr	r1, [pc, #28]	; (80055cc <I2C_MasterRequestRead+0x198>)
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 f930 	bl	8005814 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e000      	b.n	80055c0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3718      	adds	r7, #24
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	00010008 	.word	0x00010008
 80055cc:	00010002 	.word	0x00010002

080055d0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80055ea:	4b4b      	ldr	r3, [pc, #300]	; (8005718 <I2C_DMAAbort+0x148>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	08db      	lsrs	r3, r3, #3
 80055f0:	4a4a      	ldr	r2, [pc, #296]	; (800571c <I2C_DMAAbort+0x14c>)
 80055f2:	fba2 2303 	umull	r2, r3, r2, r3
 80055f6:	0a1a      	lsrs	r2, r3, #8
 80055f8:	4613      	mov	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	00da      	lsls	r2, r3, #3
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d106      	bne.n	8005618 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	f043 0220 	orr.w	r2, r3, #32
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005616:	e00a      	b.n	800562e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3b01      	subs	r3, #1
 800561c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800562c:	d0ea      	beq.n	8005604 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005632:	2b00      	cmp	r3, #0
 8005634:	d003      	beq.n	800563e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563a:	2200      	movs	r2, #0
 800563c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564a:	2200      	movs	r2, #0
 800564c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800565c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2200      	movs	r2, #0
 8005662:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005670:	2200      	movs	r2, #0
 8005672:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005680:	2200      	movs	r2, #0
 8005682:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0201 	bic.w	r2, r2, #1
 8005692:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b60      	cmp	r3, #96	; 0x60
 800569e:	d10e      	bne.n	80056be <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	2200      	movs	r2, #0
 80056b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80056b6:	6978      	ldr	r0, [r7, #20]
 80056b8:	f7fe fcbf 	bl	800403a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056bc:	e027      	b.n	800570e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056be:	7cfb      	ldrb	r3, [r7, #19]
 80056c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80056c4:	2b28      	cmp	r3, #40	; 0x28
 80056c6:	d117      	bne.n	80056f8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f042 0201 	orr.w	r2, r2, #1
 80056d6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2200      	movs	r2, #0
 80056ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2228      	movs	r2, #40	; 0x28
 80056f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80056f6:	e007      	b.n	8005708 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005708:	6978      	ldr	r0, [r7, #20]
 800570a:	f7fe fc8d 	bl	8004028 <HAL_I2C_ErrorCallback>
}
 800570e:	bf00      	nop
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	2000001c 	.word	0x2000001c
 800571c:	14f8b589 	.word	0x14f8b589

08005720 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	603b      	str	r3, [r7, #0]
 800572c:	4613      	mov	r3, r2
 800572e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005730:	e048      	b.n	80057c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005738:	d044      	beq.n	80057c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800573a:	f7fc ffc5 	bl	80026c8 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d302      	bcc.n	8005750 <I2C_WaitOnFlagUntilTimeout+0x30>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d139      	bne.n	80057c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	0c1b      	lsrs	r3, r3, #16
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b01      	cmp	r3, #1
 8005758:	d10d      	bne.n	8005776 <I2C_WaitOnFlagUntilTimeout+0x56>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	43da      	mvns	r2, r3
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	4013      	ands	r3, r2
 8005766:	b29b      	uxth	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	bf0c      	ite	eq
 800576c:	2301      	moveq	r3, #1
 800576e:	2300      	movne	r3, #0
 8005770:	b2db      	uxtb	r3, r3
 8005772:	461a      	mov	r2, r3
 8005774:	e00c      	b.n	8005790 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	43da      	mvns	r2, r3
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	4013      	ands	r3, r2
 8005782:	b29b      	uxth	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	bf0c      	ite	eq
 8005788:	2301      	moveq	r3, #1
 800578a:	2300      	movne	r3, #0
 800578c:	b2db      	uxtb	r3, r3
 800578e:	461a      	mov	r2, r3
 8005790:	79fb      	ldrb	r3, [r7, #7]
 8005792:	429a      	cmp	r2, r3
 8005794:	d116      	bne.n	80057c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b0:	f043 0220 	orr.w	r2, r3, #32
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e023      	b.n	800580c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	0c1b      	lsrs	r3, r3, #16
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d10d      	bne.n	80057ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	43da      	mvns	r2, r3
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	4013      	ands	r3, r2
 80057da:	b29b      	uxth	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	bf0c      	ite	eq
 80057e0:	2301      	moveq	r3, #1
 80057e2:	2300      	movne	r3, #0
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	461a      	mov	r2, r3
 80057e8:	e00c      	b.n	8005804 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	43da      	mvns	r2, r3
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	4013      	ands	r3, r2
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	bf0c      	ite	eq
 80057fc:	2301      	moveq	r3, #1
 80057fe:	2300      	movne	r3, #0
 8005800:	b2db      	uxtb	r3, r3
 8005802:	461a      	mov	r2, r3
 8005804:	79fb      	ldrb	r3, [r7, #7]
 8005806:	429a      	cmp	r2, r3
 8005808:	d093      	beq.n	8005732 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
 8005820:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005822:	e071      	b.n	8005908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800582e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005832:	d123      	bne.n	800587c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005842:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800584c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2220      	movs	r2, #32
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005868:	f043 0204 	orr.w	r2, r3, #4
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e067      	b.n	800594c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005882:	d041      	beq.n	8005908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005884:	f7fc ff20 	bl	80026c8 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	429a      	cmp	r2, r3
 8005892:	d302      	bcc.n	800589a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d136      	bne.n	8005908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	0c1b      	lsrs	r3, r3, #16
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d10c      	bne.n	80058be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	43da      	mvns	r2, r3
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	4013      	ands	r3, r2
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	bf14      	ite	ne
 80058b6:	2301      	movne	r3, #1
 80058b8:	2300      	moveq	r3, #0
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	e00b      	b.n	80058d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	43da      	mvns	r2, r3
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	4013      	ands	r3, r2
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	bf14      	ite	ne
 80058d0:	2301      	movne	r3, #1
 80058d2:	2300      	moveq	r3, #0
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d016      	beq.n	8005908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f4:	f043 0220 	orr.w	r2, r3, #32
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e021      	b.n	800594c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	0c1b      	lsrs	r3, r3, #16
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b01      	cmp	r3, #1
 8005910:	d10c      	bne.n	800592c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	43da      	mvns	r2, r3
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	4013      	ands	r3, r2
 800591e:	b29b      	uxth	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	bf14      	ite	ne
 8005924:	2301      	movne	r3, #1
 8005926:	2300      	moveq	r3, #0
 8005928:	b2db      	uxtb	r3, r3
 800592a:	e00b      	b.n	8005944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	43da      	mvns	r2, r3
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	4013      	ands	r3, r2
 8005938:	b29b      	uxth	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	bf14      	ite	ne
 800593e:	2301      	movne	r3, #1
 8005940:	2300      	moveq	r3, #0
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b00      	cmp	r3, #0
 8005946:	f47f af6d 	bne.w	8005824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005960:	e034      	b.n	80059cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 f915 	bl	8005b92 <I2C_IsAcknowledgeFailed>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e034      	b.n	80059dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005978:	d028      	beq.n	80059cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800597a:	f7fc fea5 	bl	80026c8 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	429a      	cmp	r2, r3
 8005988:	d302      	bcc.n	8005990 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d11d      	bne.n	80059cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599a:	2b80      	cmp	r3, #128	; 0x80
 800599c:	d016      	beq.n	80059cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2220      	movs	r2, #32
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	f043 0220 	orr.w	r2, r3, #32
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e007      	b.n	80059dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d6:	2b80      	cmp	r3, #128	; 0x80
 80059d8:	d1c3      	bne.n	8005962 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059f0:	e034      	b.n	8005a5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 f8cd 	bl	8005b92 <I2C_IsAcknowledgeFailed>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e034      	b.n	8005a6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a08:	d028      	beq.n	8005a5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a0a:	f7fc fe5d 	bl	80026c8 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d302      	bcc.n	8005a20 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d11d      	bne.n	8005a5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	f003 0304 	and.w	r3, r3, #4
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d016      	beq.n	8005a5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a48:	f043 0220 	orr.w	r2, r3, #32
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e007      	b.n	8005a6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	d1c3      	bne.n	80059f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005a80:	4b13      	ldr	r3, [pc, #76]	; (8005ad0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	08db      	lsrs	r3, r3, #3
 8005a86:	4a13      	ldr	r2, [pc, #76]	; (8005ad4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005a88:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8c:	0a1a      	lsrs	r2, r3, #8
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d107      	bne.n	8005ab2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	f043 0220 	orr.w	r2, r3, #32
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e008      	b.n	8005ac4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ac0:	d0e9      	beq.n	8005a96 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bc80      	pop	{r7}
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	2000001c 	.word	0x2000001c
 8005ad4:	14f8b589 	.word	0x14f8b589

08005ad8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ae4:	e049      	b.n	8005b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	f003 0310 	and.w	r3, r3, #16
 8005af0:	2b10      	cmp	r3, #16
 8005af2:	d119      	bne.n	8005b28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f06f 0210 	mvn.w	r2, #16
 8005afc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e030      	b.n	8005b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b28:	f7fc fdce 	bl	80026c8 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d302      	bcc.n	8005b3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d11d      	bne.n	8005b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	695b      	ldr	r3, [r3, #20]
 8005b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b48:	2b40      	cmp	r3, #64	; 0x40
 8005b4a:	d016      	beq.n	8005b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	f043 0220 	orr.w	r2, r3, #32
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e007      	b.n	8005b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b84:	2b40      	cmp	r3, #64	; 0x40
 8005b86:	d1ae      	bne.n	8005ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b083      	sub	sp, #12
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba8:	d11b      	bne.n	8005be2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bb2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	f043 0204 	orr.w	r2, r3, #4
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e000      	b.n	8005be4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bc80      	pop	{r7}
 8005bec:	4770      	bx	lr

08005bee <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfa:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005bfe:	d103      	bne.n	8005c08 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005c06:	e007      	b.n	8005c18 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005c10:	d102      	bne.n	8005c18 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2208      	movs	r2, #8
 8005c16:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bc80      	pop	{r7}
 8005c20:	4770      	bx	lr
	...

08005c24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e272      	b.n	800611c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f000 8087 	beq.w	8005d52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c44:	4b92      	ldr	r3, [pc, #584]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f003 030c 	and.w	r3, r3, #12
 8005c4c:	2b04      	cmp	r3, #4
 8005c4e:	d00c      	beq.n	8005c6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005c50:	4b8f      	ldr	r3, [pc, #572]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f003 030c 	and.w	r3, r3, #12
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	d112      	bne.n	8005c82 <HAL_RCC_OscConfig+0x5e>
 8005c5c:	4b8c      	ldr	r3, [pc, #560]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c68:	d10b      	bne.n	8005c82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c6a:	4b89      	ldr	r3, [pc, #548]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d06c      	beq.n	8005d50 <HAL_RCC_OscConfig+0x12c>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d168      	bne.n	8005d50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e24c      	b.n	800611c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c8a:	d106      	bne.n	8005c9a <HAL_RCC_OscConfig+0x76>
 8005c8c:	4b80      	ldr	r3, [pc, #512]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a7f      	ldr	r2, [pc, #508]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	e02e      	b.n	8005cf8 <HAL_RCC_OscConfig+0xd4>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10c      	bne.n	8005cbc <HAL_RCC_OscConfig+0x98>
 8005ca2:	4b7b      	ldr	r3, [pc, #492]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a7a      	ldr	r2, [pc, #488]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	4b78      	ldr	r3, [pc, #480]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a77      	ldr	r2, [pc, #476]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005cb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	e01d      	b.n	8005cf8 <HAL_RCC_OscConfig+0xd4>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cc4:	d10c      	bne.n	8005ce0 <HAL_RCC_OscConfig+0xbc>
 8005cc6:	4b72      	ldr	r3, [pc, #456]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a71      	ldr	r2, [pc, #452]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cd0:	6013      	str	r3, [r2, #0]
 8005cd2:	4b6f      	ldr	r3, [pc, #444]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a6e      	ldr	r2, [pc, #440]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cdc:	6013      	str	r3, [r2, #0]
 8005cde:	e00b      	b.n	8005cf8 <HAL_RCC_OscConfig+0xd4>
 8005ce0:	4b6b      	ldr	r3, [pc, #428]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a6a      	ldr	r2, [pc, #424]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cea:	6013      	str	r3, [r2, #0]
 8005cec:	4b68      	ldr	r3, [pc, #416]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a67      	ldr	r2, [pc, #412]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cf6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d013      	beq.n	8005d28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d00:	f7fc fce2 	bl	80026c8 <HAL_GetTick>
 8005d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d06:	e008      	b.n	8005d1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d08:	f7fc fcde 	bl	80026c8 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	2b64      	cmp	r3, #100	; 0x64
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e200      	b.n	800611c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d1a:	4b5d      	ldr	r3, [pc, #372]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d0f0      	beq.n	8005d08 <HAL_RCC_OscConfig+0xe4>
 8005d26:	e014      	b.n	8005d52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d28:	f7fc fcce 	bl	80026c8 <HAL_GetTick>
 8005d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d2e:	e008      	b.n	8005d42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d30:	f7fc fcca 	bl	80026c8 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b64      	cmp	r3, #100	; 0x64
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e1ec      	b.n	800611c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d42:	4b53      	ldr	r3, [pc, #332]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1f0      	bne.n	8005d30 <HAL_RCC_OscConfig+0x10c>
 8005d4e:	e000      	b.n	8005d52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d063      	beq.n	8005e26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d5e:	4b4c      	ldr	r3, [pc, #304]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f003 030c 	and.w	r3, r3, #12
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00b      	beq.n	8005d82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005d6a:	4b49      	ldr	r3, [pc, #292]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f003 030c 	and.w	r3, r3, #12
 8005d72:	2b08      	cmp	r3, #8
 8005d74:	d11c      	bne.n	8005db0 <HAL_RCC_OscConfig+0x18c>
 8005d76:	4b46      	ldr	r3, [pc, #280]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d116      	bne.n	8005db0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d82:	4b43      	ldr	r3, [pc, #268]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d005      	beq.n	8005d9a <HAL_RCC_OscConfig+0x176>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d001      	beq.n	8005d9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e1c0      	b.n	800611c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d9a:	4b3d      	ldr	r3, [pc, #244]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	4939      	ldr	r1, [pc, #228]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dae:	e03a      	b.n	8005e26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d020      	beq.n	8005dfa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005db8:	4b36      	ldr	r3, [pc, #216]	; (8005e94 <HAL_RCC_OscConfig+0x270>)
 8005dba:	2201      	movs	r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dbe:	f7fc fc83 	bl	80026c8 <HAL_GetTick>
 8005dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dc4:	e008      	b.n	8005dd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dc6:	f7fc fc7f 	bl	80026c8 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d901      	bls.n	8005dd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e1a1      	b.n	800611c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dd8:	4b2d      	ldr	r3, [pc, #180]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d0f0      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005de4:	4b2a      	ldr	r3, [pc, #168]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	4927      	ldr	r1, [pc, #156]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	600b      	str	r3, [r1, #0]
 8005df8:	e015      	b.n	8005e26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dfa:	4b26      	ldr	r3, [pc, #152]	; (8005e94 <HAL_RCC_OscConfig+0x270>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e00:	f7fc fc62 	bl	80026c8 <HAL_GetTick>
 8005e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e06:	e008      	b.n	8005e1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e08:	f7fc fc5e 	bl	80026c8 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e180      	b.n	800611c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e1a:	4b1d      	ldr	r3, [pc, #116]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1f0      	bne.n	8005e08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0308 	and.w	r3, r3, #8
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d03a      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d019      	beq.n	8005e6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e3a:	4b17      	ldr	r3, [pc, #92]	; (8005e98 <HAL_RCC_OscConfig+0x274>)
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e40:	f7fc fc42 	bl	80026c8 <HAL_GetTick>
 8005e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e46:	e008      	b.n	8005e5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e48:	f7fc fc3e 	bl	80026c8 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d901      	bls.n	8005e5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e160      	b.n	800611c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e5a:	4b0d      	ldr	r3, [pc, #52]	; (8005e90 <HAL_RCC_OscConfig+0x26c>)
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d0f0      	beq.n	8005e48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005e66:	2001      	movs	r0, #1
 8005e68:	f000 face 	bl	8006408 <RCC_Delay>
 8005e6c:	e01c      	b.n	8005ea8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e6e:	4b0a      	ldr	r3, [pc, #40]	; (8005e98 <HAL_RCC_OscConfig+0x274>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e74:	f7fc fc28 	bl	80026c8 <HAL_GetTick>
 8005e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e7a:	e00f      	b.n	8005e9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e7c:	f7fc fc24 	bl	80026c8 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d908      	bls.n	8005e9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e146      	b.n	800611c <HAL_RCC_OscConfig+0x4f8>
 8005e8e:	bf00      	nop
 8005e90:	40021000 	.word	0x40021000
 8005e94:	42420000 	.word	0x42420000
 8005e98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e9c:	4b92      	ldr	r3, [pc, #584]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1e9      	bne.n	8005e7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0304 	and.w	r3, r3, #4
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 80a6 	beq.w	8006002 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005eba:	4b8b      	ldr	r3, [pc, #556]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10d      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ec6:	4b88      	ldr	r3, [pc, #544]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	4a87      	ldr	r2, [pc, #540]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 8005ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ed0:	61d3      	str	r3, [r2, #28]
 8005ed2:	4b85      	ldr	r3, [pc, #532]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eda:	60bb      	str	r3, [r7, #8]
 8005edc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ee2:	4b82      	ldr	r3, [pc, #520]	; (80060ec <HAL_RCC_OscConfig+0x4c8>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d118      	bne.n	8005f20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005eee:	4b7f      	ldr	r3, [pc, #508]	; (80060ec <HAL_RCC_OscConfig+0x4c8>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a7e      	ldr	r2, [pc, #504]	; (80060ec <HAL_RCC_OscConfig+0x4c8>)
 8005ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ef8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005efa:	f7fc fbe5 	bl	80026c8 <HAL_GetTick>
 8005efe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f00:	e008      	b.n	8005f14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f02:	f7fc fbe1 	bl	80026c8 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	2b64      	cmp	r3, #100	; 0x64
 8005f0e:	d901      	bls.n	8005f14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e103      	b.n	800611c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f14:	4b75      	ldr	r3, [pc, #468]	; (80060ec <HAL_RCC_OscConfig+0x4c8>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d0f0      	beq.n	8005f02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d106      	bne.n	8005f36 <HAL_RCC_OscConfig+0x312>
 8005f28:	4b6f      	ldr	r3, [pc, #444]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	4a6e      	ldr	r2, [pc, #440]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 8005f2e:	f043 0301 	orr.w	r3, r3, #1
 8005f32:	6213      	str	r3, [r2, #32]
 8005f34:	e02d      	b.n	8005f92 <HAL_RCC_OscConfig+0x36e>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10c      	bne.n	8005f58 <HAL_RCC_OscConfig+0x334>
 8005f3e:	4b6a      	ldr	r3, [pc, #424]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	4a69      	ldr	r2, [pc, #420]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 8005f44:	f023 0301 	bic.w	r3, r3, #1
 8005f48:	6213      	str	r3, [r2, #32]
 8005f4a:	4b67      	ldr	r3, [pc, #412]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	4a66      	ldr	r2, [pc, #408]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 8005f50:	f023 0304 	bic.w	r3, r3, #4
 8005f54:	6213      	str	r3, [r2, #32]
 8005f56:	e01c      	b.n	8005f92 <HAL_RCC_OscConfig+0x36e>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	2b05      	cmp	r3, #5
 8005f5e:	d10c      	bne.n	8005f7a <HAL_RCC_OscConfig+0x356>
 8005f60:	4b61      	ldr	r3, [pc, #388]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	4a60      	ldr	r2, [pc, #384]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 8005f66:	f043 0304 	orr.w	r3, r3, #4
 8005f6a:	6213      	str	r3, [r2, #32]
 8005f6c:	4b5e      	ldr	r3, [pc, #376]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	4a5d      	ldr	r2, [pc, #372]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 8005f72:	f043 0301 	orr.w	r3, r3, #1
 8005f76:	6213      	str	r3, [r2, #32]
 8005f78:	e00b      	b.n	8005f92 <HAL_RCC_OscConfig+0x36e>
 8005f7a:	4b5b      	ldr	r3, [pc, #364]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	4a5a      	ldr	r2, [pc, #360]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 8005f80:	f023 0301 	bic.w	r3, r3, #1
 8005f84:	6213      	str	r3, [r2, #32]
 8005f86:	4b58      	ldr	r3, [pc, #352]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	4a57      	ldr	r2, [pc, #348]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 8005f8c:	f023 0304 	bic.w	r3, r3, #4
 8005f90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d015      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f9a:	f7fc fb95 	bl	80026c8 <HAL_GetTick>
 8005f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fa0:	e00a      	b.n	8005fb8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fa2:	f7fc fb91 	bl	80026c8 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d901      	bls.n	8005fb8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e0b1      	b.n	800611c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fb8:	4b4b      	ldr	r3, [pc, #300]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d0ee      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x37e>
 8005fc4:	e014      	b.n	8005ff0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fc6:	f7fc fb7f 	bl	80026c8 <HAL_GetTick>
 8005fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fcc:	e00a      	b.n	8005fe4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fce:	f7fc fb7b 	bl	80026c8 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d901      	bls.n	8005fe4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e09b      	b.n	800611c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fe4:	4b40      	ldr	r3, [pc, #256]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 8005fe6:	6a1b      	ldr	r3, [r3, #32]
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1ee      	bne.n	8005fce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ff0:	7dfb      	ldrb	r3, [r7, #23]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d105      	bne.n	8006002 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ff6:	4b3c      	ldr	r3, [pc, #240]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	4a3b      	ldr	r2, [pc, #236]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 8005ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006000:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	2b00      	cmp	r3, #0
 8006008:	f000 8087 	beq.w	800611a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800600c:	4b36      	ldr	r3, [pc, #216]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f003 030c 	and.w	r3, r3, #12
 8006014:	2b08      	cmp	r3, #8
 8006016:	d061      	beq.n	80060dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	2b02      	cmp	r3, #2
 800601e:	d146      	bne.n	80060ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006020:	4b33      	ldr	r3, [pc, #204]	; (80060f0 <HAL_RCC_OscConfig+0x4cc>)
 8006022:	2200      	movs	r2, #0
 8006024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006026:	f7fc fb4f 	bl	80026c8 <HAL_GetTick>
 800602a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800602c:	e008      	b.n	8006040 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800602e:	f7fc fb4b 	bl	80026c8 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	2b02      	cmp	r3, #2
 800603a:	d901      	bls.n	8006040 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e06d      	b.n	800611c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006040:	4b29      	ldr	r3, [pc, #164]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1f0      	bne.n	800602e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006054:	d108      	bne.n	8006068 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006056:	4b24      	ldr	r3, [pc, #144]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	4921      	ldr	r1, [pc, #132]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 8006064:	4313      	orrs	r3, r2
 8006066:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006068:	4b1f      	ldr	r3, [pc, #124]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a19      	ldr	r1, [r3, #32]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006078:	430b      	orrs	r3, r1
 800607a:	491b      	ldr	r1, [pc, #108]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 800607c:	4313      	orrs	r3, r2
 800607e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006080:	4b1b      	ldr	r3, [pc, #108]	; (80060f0 <HAL_RCC_OscConfig+0x4cc>)
 8006082:	2201      	movs	r2, #1
 8006084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006086:	f7fc fb1f 	bl	80026c8 <HAL_GetTick>
 800608a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800608c:	e008      	b.n	80060a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800608e:	f7fc fb1b 	bl	80026c8 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	2b02      	cmp	r3, #2
 800609a:	d901      	bls.n	80060a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e03d      	b.n	800611c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060a0:	4b11      	ldr	r3, [pc, #68]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d0f0      	beq.n	800608e <HAL_RCC_OscConfig+0x46a>
 80060ac:	e035      	b.n	800611a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ae:	4b10      	ldr	r3, [pc, #64]	; (80060f0 <HAL_RCC_OscConfig+0x4cc>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b4:	f7fc fb08 	bl	80026c8 <HAL_GetTick>
 80060b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060bc:	f7fc fb04 	bl	80026c8 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e026      	b.n	800611c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060ce:	4b06      	ldr	r3, [pc, #24]	; (80060e8 <HAL_RCC_OscConfig+0x4c4>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1f0      	bne.n	80060bc <HAL_RCC_OscConfig+0x498>
 80060da:	e01e      	b.n	800611a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	69db      	ldr	r3, [r3, #28]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d107      	bne.n	80060f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e019      	b.n	800611c <HAL_RCC_OscConfig+0x4f8>
 80060e8:	40021000 	.word	0x40021000
 80060ec:	40007000 	.word	0x40007000
 80060f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80060f4:	4b0b      	ldr	r3, [pc, #44]	; (8006124 <HAL_RCC_OscConfig+0x500>)
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	429a      	cmp	r2, r3
 8006106:	d106      	bne.n	8006116 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006112:	429a      	cmp	r2, r3
 8006114:	d001      	beq.n	800611a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e000      	b.n	800611c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	40021000 	.word	0x40021000

08006128 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e0d0      	b.n	80062de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800613c:	4b6a      	ldr	r3, [pc, #424]	; (80062e8 <HAL_RCC_ClockConfig+0x1c0>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0307 	and.w	r3, r3, #7
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	429a      	cmp	r2, r3
 8006148:	d910      	bls.n	800616c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800614a:	4b67      	ldr	r3, [pc, #412]	; (80062e8 <HAL_RCC_ClockConfig+0x1c0>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f023 0207 	bic.w	r2, r3, #7
 8006152:	4965      	ldr	r1, [pc, #404]	; (80062e8 <HAL_RCC_ClockConfig+0x1c0>)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	4313      	orrs	r3, r2
 8006158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800615a:	4b63      	ldr	r3, [pc, #396]	; (80062e8 <HAL_RCC_ClockConfig+0x1c0>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0307 	and.w	r3, r3, #7
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	429a      	cmp	r2, r3
 8006166:	d001      	beq.n	800616c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e0b8      	b.n	80062de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b00      	cmp	r3, #0
 8006176:	d020      	beq.n	80061ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	2b00      	cmp	r3, #0
 8006182:	d005      	beq.n	8006190 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006184:	4b59      	ldr	r3, [pc, #356]	; (80062ec <HAL_RCC_ClockConfig+0x1c4>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	4a58      	ldr	r2, [pc, #352]	; (80062ec <HAL_RCC_ClockConfig+0x1c4>)
 800618a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800618e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0308 	and.w	r3, r3, #8
 8006198:	2b00      	cmp	r3, #0
 800619a:	d005      	beq.n	80061a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800619c:	4b53      	ldr	r3, [pc, #332]	; (80062ec <HAL_RCC_ClockConfig+0x1c4>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	4a52      	ldr	r2, [pc, #328]	; (80062ec <HAL_RCC_ClockConfig+0x1c4>)
 80061a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80061a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061a8:	4b50      	ldr	r3, [pc, #320]	; (80062ec <HAL_RCC_ClockConfig+0x1c4>)
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	494d      	ldr	r1, [pc, #308]	; (80062ec <HAL_RCC_ClockConfig+0x1c4>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d040      	beq.n	8006248 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d107      	bne.n	80061de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ce:	4b47      	ldr	r3, [pc, #284]	; (80062ec <HAL_RCC_ClockConfig+0x1c4>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d115      	bne.n	8006206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e07f      	b.n	80062de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d107      	bne.n	80061f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061e6:	4b41      	ldr	r3, [pc, #260]	; (80062ec <HAL_RCC_ClockConfig+0x1c4>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d109      	bne.n	8006206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e073      	b.n	80062de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061f6:	4b3d      	ldr	r3, [pc, #244]	; (80062ec <HAL_RCC_ClockConfig+0x1c4>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e06b      	b.n	80062de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006206:	4b39      	ldr	r3, [pc, #228]	; (80062ec <HAL_RCC_ClockConfig+0x1c4>)
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f023 0203 	bic.w	r2, r3, #3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	4936      	ldr	r1, [pc, #216]	; (80062ec <HAL_RCC_ClockConfig+0x1c4>)
 8006214:	4313      	orrs	r3, r2
 8006216:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006218:	f7fc fa56 	bl	80026c8 <HAL_GetTick>
 800621c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800621e:	e00a      	b.n	8006236 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006220:	f7fc fa52 	bl	80026c8 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	f241 3288 	movw	r2, #5000	; 0x1388
 800622e:	4293      	cmp	r3, r2
 8006230:	d901      	bls.n	8006236 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e053      	b.n	80062de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006236:	4b2d      	ldr	r3, [pc, #180]	; (80062ec <HAL_RCC_ClockConfig+0x1c4>)
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f003 020c 	and.w	r2, r3, #12
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	429a      	cmp	r2, r3
 8006246:	d1eb      	bne.n	8006220 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006248:	4b27      	ldr	r3, [pc, #156]	; (80062e8 <HAL_RCC_ClockConfig+0x1c0>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	429a      	cmp	r2, r3
 8006254:	d210      	bcs.n	8006278 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006256:	4b24      	ldr	r3, [pc, #144]	; (80062e8 <HAL_RCC_ClockConfig+0x1c0>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f023 0207 	bic.w	r2, r3, #7
 800625e:	4922      	ldr	r1, [pc, #136]	; (80062e8 <HAL_RCC_ClockConfig+0x1c0>)
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	4313      	orrs	r3, r2
 8006264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006266:	4b20      	ldr	r3, [pc, #128]	; (80062e8 <HAL_RCC_ClockConfig+0x1c0>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	429a      	cmp	r2, r3
 8006272:	d001      	beq.n	8006278 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e032      	b.n	80062de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0304 	and.w	r3, r3, #4
 8006280:	2b00      	cmp	r3, #0
 8006282:	d008      	beq.n	8006296 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006284:	4b19      	ldr	r3, [pc, #100]	; (80062ec <HAL_RCC_ClockConfig+0x1c4>)
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	4916      	ldr	r1, [pc, #88]	; (80062ec <HAL_RCC_ClockConfig+0x1c4>)
 8006292:	4313      	orrs	r3, r2
 8006294:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0308 	and.w	r3, r3, #8
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d009      	beq.n	80062b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80062a2:	4b12      	ldr	r3, [pc, #72]	; (80062ec <HAL_RCC_ClockConfig+0x1c4>)
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	490e      	ldr	r1, [pc, #56]	; (80062ec <HAL_RCC_ClockConfig+0x1c4>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062b6:	f000 f821 	bl	80062fc <HAL_RCC_GetSysClockFreq>
 80062ba:	4602      	mov	r2, r0
 80062bc:	4b0b      	ldr	r3, [pc, #44]	; (80062ec <HAL_RCC_ClockConfig+0x1c4>)
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	091b      	lsrs	r3, r3, #4
 80062c2:	f003 030f 	and.w	r3, r3, #15
 80062c6:	490a      	ldr	r1, [pc, #40]	; (80062f0 <HAL_RCC_ClockConfig+0x1c8>)
 80062c8:	5ccb      	ldrb	r3, [r1, r3]
 80062ca:	fa22 f303 	lsr.w	r3, r2, r3
 80062ce:	4a09      	ldr	r2, [pc, #36]	; (80062f4 <HAL_RCC_ClockConfig+0x1cc>)
 80062d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80062d2:	4b09      	ldr	r3, [pc, #36]	; (80062f8 <HAL_RCC_ClockConfig+0x1d0>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7fc f9b4 	bl	8002644 <HAL_InitTick>

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	40022000 	.word	0x40022000
 80062ec:	40021000 	.word	0x40021000
 80062f0:	0800f934 	.word	0x0800f934
 80062f4:	2000001c 	.word	0x2000001c
 80062f8:	20000020 	.word	0x20000020

080062fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	60fb      	str	r3, [r7, #12]
 8006306:	2300      	movs	r3, #0
 8006308:	60bb      	str	r3, [r7, #8]
 800630a:	2300      	movs	r3, #0
 800630c:	617b      	str	r3, [r7, #20]
 800630e:	2300      	movs	r3, #0
 8006310:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006312:	2300      	movs	r3, #0
 8006314:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006316:	4b1e      	ldr	r3, [pc, #120]	; (8006390 <HAL_RCC_GetSysClockFreq+0x94>)
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f003 030c 	and.w	r3, r3, #12
 8006322:	2b04      	cmp	r3, #4
 8006324:	d002      	beq.n	800632c <HAL_RCC_GetSysClockFreq+0x30>
 8006326:	2b08      	cmp	r3, #8
 8006328:	d003      	beq.n	8006332 <HAL_RCC_GetSysClockFreq+0x36>
 800632a:	e027      	b.n	800637c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800632c:	4b19      	ldr	r3, [pc, #100]	; (8006394 <HAL_RCC_GetSysClockFreq+0x98>)
 800632e:	613b      	str	r3, [r7, #16]
      break;
 8006330:	e027      	b.n	8006382 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	0c9b      	lsrs	r3, r3, #18
 8006336:	f003 030f 	and.w	r3, r3, #15
 800633a:	4a17      	ldr	r2, [pc, #92]	; (8006398 <HAL_RCC_GetSysClockFreq+0x9c>)
 800633c:	5cd3      	ldrb	r3, [r2, r3]
 800633e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d010      	beq.n	800636c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800634a:	4b11      	ldr	r3, [pc, #68]	; (8006390 <HAL_RCC_GetSysClockFreq+0x94>)
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	0c5b      	lsrs	r3, r3, #17
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	4a11      	ldr	r2, [pc, #68]	; (800639c <HAL_RCC_GetSysClockFreq+0xa0>)
 8006356:	5cd3      	ldrb	r3, [r2, r3]
 8006358:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a0d      	ldr	r2, [pc, #52]	; (8006394 <HAL_RCC_GetSysClockFreq+0x98>)
 800635e:	fb03 f202 	mul.w	r2, r3, r2
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	fbb2 f3f3 	udiv	r3, r2, r3
 8006368:	617b      	str	r3, [r7, #20]
 800636a:	e004      	b.n	8006376 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a0c      	ldr	r2, [pc, #48]	; (80063a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006370:	fb02 f303 	mul.w	r3, r2, r3
 8006374:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	613b      	str	r3, [r7, #16]
      break;
 800637a:	e002      	b.n	8006382 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800637c:	4b05      	ldr	r3, [pc, #20]	; (8006394 <HAL_RCC_GetSysClockFreq+0x98>)
 800637e:	613b      	str	r3, [r7, #16]
      break;
 8006380:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006382:	693b      	ldr	r3, [r7, #16]
}
 8006384:	4618      	mov	r0, r3
 8006386:	371c      	adds	r7, #28
 8006388:	46bd      	mov	sp, r7
 800638a:	bc80      	pop	{r7}
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	40021000 	.word	0x40021000
 8006394:	007a1200 	.word	0x007a1200
 8006398:	0800f94c 	.word	0x0800f94c
 800639c:	0800f95c 	.word	0x0800f95c
 80063a0:	003d0900 	.word	0x003d0900

080063a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063a4:	b480      	push	{r7}
 80063a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063a8:	4b02      	ldr	r3, [pc, #8]	; (80063b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80063aa:	681b      	ldr	r3, [r3, #0]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bc80      	pop	{r7}
 80063b2:	4770      	bx	lr
 80063b4:	2000001c 	.word	0x2000001c

080063b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80063bc:	f7ff fff2 	bl	80063a4 <HAL_RCC_GetHCLKFreq>
 80063c0:	4602      	mov	r2, r0
 80063c2:	4b05      	ldr	r3, [pc, #20]	; (80063d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	0a1b      	lsrs	r3, r3, #8
 80063c8:	f003 0307 	and.w	r3, r3, #7
 80063cc:	4903      	ldr	r1, [pc, #12]	; (80063dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80063ce:	5ccb      	ldrb	r3, [r1, r3]
 80063d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	40021000 	.word	0x40021000
 80063dc:	0800f944 	.word	0x0800f944

080063e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80063e4:	f7ff ffde 	bl	80063a4 <HAL_RCC_GetHCLKFreq>
 80063e8:	4602      	mov	r2, r0
 80063ea:	4b05      	ldr	r3, [pc, #20]	; (8006400 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	0adb      	lsrs	r3, r3, #11
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	4903      	ldr	r1, [pc, #12]	; (8006404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063f6:	5ccb      	ldrb	r3, [r1, r3]
 80063f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	40021000 	.word	0x40021000
 8006404:	0800f944 	.word	0x0800f944

08006408 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006410:	4b0a      	ldr	r3, [pc, #40]	; (800643c <RCC_Delay+0x34>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a0a      	ldr	r2, [pc, #40]	; (8006440 <RCC_Delay+0x38>)
 8006416:	fba2 2303 	umull	r2, r3, r2, r3
 800641a:	0a5b      	lsrs	r3, r3, #9
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	fb02 f303 	mul.w	r3, r2, r3
 8006422:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006424:	bf00      	nop
  }
  while (Delay --);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	1e5a      	subs	r2, r3, #1
 800642a:	60fa      	str	r2, [r7, #12]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1f9      	bne.n	8006424 <RCC_Delay+0x1c>
}
 8006430:	bf00      	nop
 8006432:	bf00      	nop
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	bc80      	pop	{r7}
 800643a:	4770      	bx	lr
 800643c:	2000001c 	.word	0x2000001c
 8006440:	10624dd3 	.word	0x10624dd3

08006444 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e041      	b.n	80064da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d106      	bne.n	8006470 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7fb ff5e 	bl	800232c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	3304      	adds	r3, #4
 8006480:	4619      	mov	r1, r3
 8006482:	4610      	mov	r0, r2
 8006484:	f000 fc28 	bl	8006cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d001      	beq.n	80064fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e03a      	b.n	8006572 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68da      	ldr	r2, [r3, #12]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f042 0201 	orr.w	r2, r2, #1
 8006512:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a18      	ldr	r2, [pc, #96]	; (800657c <HAL_TIM_Base_Start_IT+0x98>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d00e      	beq.n	800653c <HAL_TIM_Base_Start_IT+0x58>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006526:	d009      	beq.n	800653c <HAL_TIM_Base_Start_IT+0x58>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a14      	ldr	r2, [pc, #80]	; (8006580 <HAL_TIM_Base_Start_IT+0x9c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d004      	beq.n	800653c <HAL_TIM_Base_Start_IT+0x58>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a13      	ldr	r2, [pc, #76]	; (8006584 <HAL_TIM_Base_Start_IT+0xa0>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d111      	bne.n	8006560 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f003 0307 	and.w	r3, r3, #7
 8006546:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2b06      	cmp	r3, #6
 800654c:	d010      	beq.n	8006570 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f042 0201 	orr.w	r2, r2, #1
 800655c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800655e:	e007      	b.n	8006570 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f042 0201 	orr.w	r2, r2, #1
 800656e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	bc80      	pop	{r7}
 800657a:	4770      	bx	lr
 800657c:	40012c00 	.word	0x40012c00
 8006580:	40000400 	.word	0x40000400
 8006584:	40000800 	.word	0x40000800

08006588 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e041      	b.n	800661e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d106      	bne.n	80065b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7fb fee0 	bl	8002374 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	3304      	adds	r3, #4
 80065c4:	4619      	mov	r1, r3
 80065c6:	4610      	mov	r0, r2
 80065c8:	f000 fb86 	bl	8006cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
	...

08006628 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d109      	bne.n	800664c <HAL_TIM_PWM_Start+0x24>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800663e:	b2db      	uxtb	r3, r3
 8006640:	2b01      	cmp	r3, #1
 8006642:	bf14      	ite	ne
 8006644:	2301      	movne	r3, #1
 8006646:	2300      	moveq	r3, #0
 8006648:	b2db      	uxtb	r3, r3
 800664a:	e022      	b.n	8006692 <HAL_TIM_PWM_Start+0x6a>
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	2b04      	cmp	r3, #4
 8006650:	d109      	bne.n	8006666 <HAL_TIM_PWM_Start+0x3e>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b01      	cmp	r3, #1
 800665c:	bf14      	ite	ne
 800665e:	2301      	movne	r3, #1
 8006660:	2300      	moveq	r3, #0
 8006662:	b2db      	uxtb	r3, r3
 8006664:	e015      	b.n	8006692 <HAL_TIM_PWM_Start+0x6a>
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2b08      	cmp	r3, #8
 800666a:	d109      	bne.n	8006680 <HAL_TIM_PWM_Start+0x58>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b01      	cmp	r3, #1
 8006676:	bf14      	ite	ne
 8006678:	2301      	movne	r3, #1
 800667a:	2300      	moveq	r3, #0
 800667c:	b2db      	uxtb	r3, r3
 800667e:	e008      	b.n	8006692 <HAL_TIM_PWM_Start+0x6a>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b01      	cmp	r3, #1
 800668a:	bf14      	ite	ne
 800668c:	2301      	movne	r3, #1
 800668e:	2300      	moveq	r3, #0
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e05e      	b.n	8006758 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d104      	bne.n	80066aa <HAL_TIM_PWM_Start+0x82>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2202      	movs	r2, #2
 80066a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066a8:	e013      	b.n	80066d2 <HAL_TIM_PWM_Start+0xaa>
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	2b04      	cmp	r3, #4
 80066ae:	d104      	bne.n	80066ba <HAL_TIM_PWM_Start+0x92>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066b8:	e00b      	b.n	80066d2 <HAL_TIM_PWM_Start+0xaa>
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2b08      	cmp	r3, #8
 80066be:	d104      	bne.n	80066ca <HAL_TIM_PWM_Start+0xa2>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2202      	movs	r2, #2
 80066c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066c8:	e003      	b.n	80066d2 <HAL_TIM_PWM_Start+0xaa>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2202      	movs	r2, #2
 80066ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2201      	movs	r2, #1
 80066d8:	6839      	ldr	r1, [r7, #0]
 80066da:	4618      	mov	r0, r3
 80066dc:	f000 fd7c 	bl	80071d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a1e      	ldr	r2, [pc, #120]	; (8006760 <HAL_TIM_PWM_Start+0x138>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d107      	bne.n	80066fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a18      	ldr	r2, [pc, #96]	; (8006760 <HAL_TIM_PWM_Start+0x138>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d00e      	beq.n	8006722 <HAL_TIM_PWM_Start+0xfa>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800670c:	d009      	beq.n	8006722 <HAL_TIM_PWM_Start+0xfa>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a14      	ldr	r2, [pc, #80]	; (8006764 <HAL_TIM_PWM_Start+0x13c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d004      	beq.n	8006722 <HAL_TIM_PWM_Start+0xfa>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a12      	ldr	r2, [pc, #72]	; (8006768 <HAL_TIM_PWM_Start+0x140>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d111      	bne.n	8006746 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f003 0307 	and.w	r3, r3, #7
 800672c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2b06      	cmp	r3, #6
 8006732:	d010      	beq.n	8006756 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f042 0201 	orr.w	r2, r2, #1
 8006742:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006744:	e007      	b.n	8006756 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f042 0201 	orr.w	r2, r2, #1
 8006754:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	40012c00 	.word	0x40012c00
 8006764:	40000400 	.word	0x40000400
 8006768:	40000800 	.word	0x40000800

0800676c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	f003 0302 	and.w	r3, r3, #2
 800677e:	2b02      	cmp	r3, #2
 8006780:	d122      	bne.n	80067c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	f003 0302 	and.w	r3, r3, #2
 800678c:	2b02      	cmp	r3, #2
 800678e:	d11b      	bne.n	80067c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f06f 0202 	mvn.w	r2, #2
 8006798:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	f003 0303 	and.w	r3, r3, #3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fa76 	bl	8006ca0 <HAL_TIM_IC_CaptureCallback>
 80067b4:	e005      	b.n	80067c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fa69 	bl	8006c8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 fa78 	bl	8006cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f003 0304 	and.w	r3, r3, #4
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	d122      	bne.n	800681c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	f003 0304 	and.w	r3, r3, #4
 80067e0:	2b04      	cmp	r3, #4
 80067e2:	d11b      	bne.n	800681c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f06f 0204 	mvn.w	r2, #4
 80067ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2202      	movs	r2, #2
 80067f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fa4c 	bl	8006ca0 <HAL_TIM_IC_CaptureCallback>
 8006808:	e005      	b.n	8006816 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 fa3f 	bl	8006c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fa4e 	bl	8006cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	f003 0308 	and.w	r3, r3, #8
 8006826:	2b08      	cmp	r3, #8
 8006828:	d122      	bne.n	8006870 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f003 0308 	and.w	r3, r3, #8
 8006834:	2b08      	cmp	r3, #8
 8006836:	d11b      	bne.n	8006870 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f06f 0208 	mvn.w	r2, #8
 8006840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2204      	movs	r2, #4
 8006846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	f003 0303 	and.w	r3, r3, #3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 fa22 	bl	8006ca0 <HAL_TIM_IC_CaptureCallback>
 800685c:	e005      	b.n	800686a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fa15 	bl	8006c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fa24 	bl	8006cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	f003 0310 	and.w	r3, r3, #16
 800687a:	2b10      	cmp	r3, #16
 800687c:	d122      	bne.n	80068c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f003 0310 	and.w	r3, r3, #16
 8006888:	2b10      	cmp	r3, #16
 800688a:	d11b      	bne.n	80068c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f06f 0210 	mvn.w	r2, #16
 8006894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2208      	movs	r2, #8
 800689a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f9f8 	bl	8006ca0 <HAL_TIM_IC_CaptureCallback>
 80068b0:	e005      	b.n	80068be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f9eb 	bl	8006c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f9fa 	bl	8006cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d10e      	bne.n	80068f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d107      	bne.n	80068f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f06f 0201 	mvn.w	r2, #1
 80068e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7fa fc9c 	bl	8001228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068fa:	2b80      	cmp	r3, #128	; 0x80
 80068fc:	d10e      	bne.n	800691c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006908:	2b80      	cmp	r3, #128	; 0x80
 800690a:	d107      	bne.n	800691c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fce9 	bl	80072ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006926:	2b40      	cmp	r3, #64	; 0x40
 8006928:	d10e      	bne.n	8006948 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006934:	2b40      	cmp	r3, #64	; 0x40
 8006936:	d107      	bne.n	8006948 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f9be 	bl	8006cc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	f003 0320 	and.w	r3, r3, #32
 8006952:	2b20      	cmp	r3, #32
 8006954:	d10e      	bne.n	8006974 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f003 0320 	and.w	r3, r3, #32
 8006960:	2b20      	cmp	r3, #32
 8006962:	d107      	bne.n	8006974 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f06f 0220 	mvn.w	r2, #32
 800696c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fcb4 	bl	80072dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006974:	bf00      	nop
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006988:	2300      	movs	r3, #0
 800698a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006992:	2b01      	cmp	r3, #1
 8006994:	d101      	bne.n	800699a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006996:	2302      	movs	r3, #2
 8006998:	e0ae      	b.n	8006af8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b0c      	cmp	r3, #12
 80069a6:	f200 809f 	bhi.w	8006ae8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80069aa:	a201      	add	r2, pc, #4	; (adr r2, 80069b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b0:	080069e5 	.word	0x080069e5
 80069b4:	08006ae9 	.word	0x08006ae9
 80069b8:	08006ae9 	.word	0x08006ae9
 80069bc:	08006ae9 	.word	0x08006ae9
 80069c0:	08006a25 	.word	0x08006a25
 80069c4:	08006ae9 	.word	0x08006ae9
 80069c8:	08006ae9 	.word	0x08006ae9
 80069cc:	08006ae9 	.word	0x08006ae9
 80069d0:	08006a67 	.word	0x08006a67
 80069d4:	08006ae9 	.word	0x08006ae9
 80069d8:	08006ae9 	.word	0x08006ae9
 80069dc:	08006ae9 	.word	0x08006ae9
 80069e0:	08006aa7 	.word	0x08006aa7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68b9      	ldr	r1, [r7, #8]
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 f9d6 	bl	8006d9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	699a      	ldr	r2, [r3, #24]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f042 0208 	orr.w	r2, r2, #8
 80069fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	699a      	ldr	r2, [r3, #24]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0204 	bic.w	r2, r2, #4
 8006a0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6999      	ldr	r1, [r3, #24]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	691a      	ldr	r2, [r3, #16]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	619a      	str	r2, [r3, #24]
      break;
 8006a22:	e064      	b.n	8006aee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68b9      	ldr	r1, [r7, #8]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 fa1c 	bl	8006e68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	699a      	ldr	r2, [r3, #24]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	699a      	ldr	r2, [r3, #24]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6999      	ldr	r1, [r3, #24]
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	021a      	lsls	r2, r3, #8
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	430a      	orrs	r2, r1
 8006a62:	619a      	str	r2, [r3, #24]
      break;
 8006a64:	e043      	b.n	8006aee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68b9      	ldr	r1, [r7, #8]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f000 fa65 	bl	8006f3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	69da      	ldr	r2, [r3, #28]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f042 0208 	orr.w	r2, r2, #8
 8006a80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69da      	ldr	r2, [r3, #28]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f022 0204 	bic.w	r2, r2, #4
 8006a90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69d9      	ldr	r1, [r3, #28]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	691a      	ldr	r2, [r3, #16]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	61da      	str	r2, [r3, #28]
      break;
 8006aa4:	e023      	b.n	8006aee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68b9      	ldr	r1, [r7, #8]
 8006aac:	4618      	mov	r0, r3
 8006aae:	f000 faaf 	bl	8007010 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	69da      	ldr	r2, [r3, #28]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	69da      	ldr	r2, [r3, #28]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	69d9      	ldr	r1, [r3, #28]
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	021a      	lsls	r2, r3, #8
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	61da      	str	r2, [r3, #28]
      break;
 8006ae6:	e002      	b.n	8006aee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	75fb      	strb	r3, [r7, #23]
      break;
 8006aec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3718      	adds	r7, #24
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d101      	bne.n	8006b1c <HAL_TIM_ConfigClockSource+0x1c>
 8006b18:	2302      	movs	r3, #2
 8006b1a:	e0b4      	b.n	8006c86 <HAL_TIM_ConfigClockSource+0x186>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b54:	d03e      	beq.n	8006bd4 <HAL_TIM_ConfigClockSource+0xd4>
 8006b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b5a:	f200 8087 	bhi.w	8006c6c <HAL_TIM_ConfigClockSource+0x16c>
 8006b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b62:	f000 8086 	beq.w	8006c72 <HAL_TIM_ConfigClockSource+0x172>
 8006b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b6a:	d87f      	bhi.n	8006c6c <HAL_TIM_ConfigClockSource+0x16c>
 8006b6c:	2b70      	cmp	r3, #112	; 0x70
 8006b6e:	d01a      	beq.n	8006ba6 <HAL_TIM_ConfigClockSource+0xa6>
 8006b70:	2b70      	cmp	r3, #112	; 0x70
 8006b72:	d87b      	bhi.n	8006c6c <HAL_TIM_ConfigClockSource+0x16c>
 8006b74:	2b60      	cmp	r3, #96	; 0x60
 8006b76:	d050      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0x11a>
 8006b78:	2b60      	cmp	r3, #96	; 0x60
 8006b7a:	d877      	bhi.n	8006c6c <HAL_TIM_ConfigClockSource+0x16c>
 8006b7c:	2b50      	cmp	r3, #80	; 0x50
 8006b7e:	d03c      	beq.n	8006bfa <HAL_TIM_ConfigClockSource+0xfa>
 8006b80:	2b50      	cmp	r3, #80	; 0x50
 8006b82:	d873      	bhi.n	8006c6c <HAL_TIM_ConfigClockSource+0x16c>
 8006b84:	2b40      	cmp	r3, #64	; 0x40
 8006b86:	d058      	beq.n	8006c3a <HAL_TIM_ConfigClockSource+0x13a>
 8006b88:	2b40      	cmp	r3, #64	; 0x40
 8006b8a:	d86f      	bhi.n	8006c6c <HAL_TIM_ConfigClockSource+0x16c>
 8006b8c:	2b30      	cmp	r3, #48	; 0x30
 8006b8e:	d064      	beq.n	8006c5a <HAL_TIM_ConfigClockSource+0x15a>
 8006b90:	2b30      	cmp	r3, #48	; 0x30
 8006b92:	d86b      	bhi.n	8006c6c <HAL_TIM_ConfigClockSource+0x16c>
 8006b94:	2b20      	cmp	r3, #32
 8006b96:	d060      	beq.n	8006c5a <HAL_TIM_ConfigClockSource+0x15a>
 8006b98:	2b20      	cmp	r3, #32
 8006b9a:	d867      	bhi.n	8006c6c <HAL_TIM_ConfigClockSource+0x16c>
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d05c      	beq.n	8006c5a <HAL_TIM_ConfigClockSource+0x15a>
 8006ba0:	2b10      	cmp	r3, #16
 8006ba2:	d05a      	beq.n	8006c5a <HAL_TIM_ConfigClockSource+0x15a>
 8006ba4:	e062      	b.n	8006c6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006bb6:	f000 faf0 	bl	800719a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	609a      	str	r2, [r3, #8]
      break;
 8006bd2:	e04f      	b.n	8006c74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006be4:	f000 fad9 	bl	800719a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	689a      	ldr	r2, [r3, #8]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bf6:	609a      	str	r2, [r3, #8]
      break;
 8006bf8:	e03c      	b.n	8006c74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c06:	461a      	mov	r2, r3
 8006c08:	f000 fa50 	bl	80070ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2150      	movs	r1, #80	; 0x50
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 faa7 	bl	8007166 <TIM_ITRx_SetConfig>
      break;
 8006c18:	e02c      	b.n	8006c74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c26:	461a      	mov	r2, r3
 8006c28:	f000 fa6e 	bl	8007108 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2160      	movs	r1, #96	; 0x60
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 fa97 	bl	8007166 <TIM_ITRx_SetConfig>
      break;
 8006c38:	e01c      	b.n	8006c74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c46:	461a      	mov	r2, r3
 8006c48:	f000 fa30 	bl	80070ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2140      	movs	r1, #64	; 0x40
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 fa87 	bl	8007166 <TIM_ITRx_SetConfig>
      break;
 8006c58:	e00c      	b.n	8006c74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4619      	mov	r1, r3
 8006c64:	4610      	mov	r0, r2
 8006c66:	f000 fa7e 	bl	8007166 <TIM_ITRx_SetConfig>
      break;
 8006c6a:	e003      	b.n	8006c74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c70:	e000      	b.n	8006c74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b083      	sub	sp, #12
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c96:	bf00      	nop
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bc80      	pop	{r7}
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bc80      	pop	{r7}
 8006cb0:	4770      	bx	lr

08006cb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b083      	sub	sp, #12
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cba:	bf00      	nop
 8006cbc:	370c      	adds	r7, #12
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bc80      	pop	{r7}
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bc80      	pop	{r7}
 8006cd4:	4770      	bx	lr
	...

08006cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a29      	ldr	r2, [pc, #164]	; (8006d90 <TIM_Base_SetConfig+0xb8>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d00b      	beq.n	8006d08 <TIM_Base_SetConfig+0x30>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cf6:	d007      	beq.n	8006d08 <TIM_Base_SetConfig+0x30>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a26      	ldr	r2, [pc, #152]	; (8006d94 <TIM_Base_SetConfig+0xbc>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d003      	beq.n	8006d08 <TIM_Base_SetConfig+0x30>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a25      	ldr	r2, [pc, #148]	; (8006d98 <TIM_Base_SetConfig+0xc0>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d108      	bne.n	8006d1a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a1c      	ldr	r2, [pc, #112]	; (8006d90 <TIM_Base_SetConfig+0xb8>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00b      	beq.n	8006d3a <TIM_Base_SetConfig+0x62>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d28:	d007      	beq.n	8006d3a <TIM_Base_SetConfig+0x62>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a19      	ldr	r2, [pc, #100]	; (8006d94 <TIM_Base_SetConfig+0xbc>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d003      	beq.n	8006d3a <TIM_Base_SetConfig+0x62>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a18      	ldr	r2, [pc, #96]	; (8006d98 <TIM_Base_SetConfig+0xc0>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d108      	bne.n	8006d4c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	689a      	ldr	r2, [r3, #8]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a07      	ldr	r2, [pc, #28]	; (8006d90 <TIM_Base_SetConfig+0xb8>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d103      	bne.n	8006d80 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	691a      	ldr	r2, [r3, #16]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	615a      	str	r2, [r3, #20]
}
 8006d86:	bf00      	nop
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bc80      	pop	{r7}
 8006d8e:	4770      	bx	lr
 8006d90:	40012c00 	.word	0x40012c00
 8006d94:	40000400 	.word	0x40000400
 8006d98:	40000800 	.word	0x40000800

08006d9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a1b      	ldr	r3, [r3, #32]
 8006db0:	f023 0201 	bic.w	r2, r3, #1
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f023 0303 	bic.w	r3, r3, #3
 8006dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f023 0302 	bic.w	r3, r3, #2
 8006de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a1c      	ldr	r2, [pc, #112]	; (8006e64 <TIM_OC1_SetConfig+0xc8>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d10c      	bne.n	8006e12 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f023 0308 	bic.w	r3, r3, #8
 8006dfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f023 0304 	bic.w	r3, r3, #4
 8006e10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a13      	ldr	r2, [pc, #76]	; (8006e64 <TIM_OC1_SetConfig+0xc8>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d111      	bne.n	8006e3e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	695b      	ldr	r3, [r3, #20]
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	685a      	ldr	r2, [r3, #4]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	621a      	str	r2, [r3, #32]
}
 8006e58:	bf00      	nop
 8006e5a:	371c      	adds	r7, #28
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bc80      	pop	{r7}
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	40012c00 	.word	0x40012c00

08006e68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b087      	sub	sp, #28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a1b      	ldr	r3, [r3, #32]
 8006e7c:	f023 0210 	bic.w	r2, r3, #16
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	021b      	lsls	r3, r3, #8
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f023 0320 	bic.w	r3, r3, #32
 8006eb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	011b      	lsls	r3, r3, #4
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a1d      	ldr	r2, [pc, #116]	; (8006f38 <TIM_OC2_SetConfig+0xd0>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d10d      	bne.n	8006ee4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	011b      	lsls	r3, r3, #4
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ee2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a14      	ldr	r2, [pc, #80]	; (8006f38 <TIM_OC2_SetConfig+0xd0>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d113      	bne.n	8006f14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ef2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006efa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	695b      	ldr	r3, [r3, #20]
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	621a      	str	r2, [r3, #32]
}
 8006f2e:	bf00      	nop
 8006f30:	371c      	adds	r7, #28
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bc80      	pop	{r7}
 8006f36:	4770      	bx	lr
 8006f38:	40012c00 	.word	0x40012c00

08006f3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b087      	sub	sp, #28
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a1b      	ldr	r3, [r3, #32]
 8006f50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	69db      	ldr	r3, [r3, #28]
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f023 0303 	bic.w	r3, r3, #3
 8006f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	021b      	lsls	r3, r3, #8
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a1d      	ldr	r2, [pc, #116]	; (800700c <TIM_OC3_SetConfig+0xd0>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d10d      	bne.n	8006fb6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	021b      	lsls	r3, r3, #8
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a14      	ldr	r2, [pc, #80]	; (800700c <TIM_OC3_SetConfig+0xd0>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d113      	bne.n	8006fe6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	695b      	ldr	r3, [r3, #20]
 8006fd2:	011b      	lsls	r3, r3, #4
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	011b      	lsls	r3, r3, #4
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	621a      	str	r2, [r3, #32]
}
 8007000:	bf00      	nop
 8007002:	371c      	adds	r7, #28
 8007004:	46bd      	mov	sp, r7
 8007006:	bc80      	pop	{r7}
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	40012c00 	.word	0x40012c00

08007010 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007010:	b480      	push	{r7}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a1b      	ldr	r3, [r3, #32]
 8007024:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	69db      	ldr	r3, [r3, #28]
 8007036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800703e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007046:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	021b      	lsls	r3, r3, #8
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	4313      	orrs	r3, r2
 8007052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800705a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	031b      	lsls	r3, r3, #12
 8007062:	693a      	ldr	r2, [r7, #16]
 8007064:	4313      	orrs	r3, r2
 8007066:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a0f      	ldr	r2, [pc, #60]	; (80070a8 <TIM_OC4_SetConfig+0x98>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d109      	bne.n	8007084 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007076:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	695b      	ldr	r3, [r3, #20]
 800707c:	019b      	lsls	r3, r3, #6
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	4313      	orrs	r3, r2
 8007082:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	621a      	str	r2, [r3, #32]
}
 800709e:	bf00      	nop
 80070a0:	371c      	adds	r7, #28
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bc80      	pop	{r7}
 80070a6:	4770      	bx	lr
 80070a8:	40012c00 	.word	0x40012c00

080070ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b087      	sub	sp, #28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6a1b      	ldr	r3, [r3, #32]
 80070bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	f023 0201 	bic.w	r2, r3, #1
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	011b      	lsls	r3, r3, #4
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	4313      	orrs	r3, r2
 80070e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f023 030a 	bic.w	r3, r3, #10
 80070e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	621a      	str	r2, [r3, #32]
}
 80070fe:	bf00      	nop
 8007100:	371c      	adds	r7, #28
 8007102:	46bd      	mov	sp, r7
 8007104:	bc80      	pop	{r7}
 8007106:	4770      	bx	lr

08007108 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007108:	b480      	push	{r7}
 800710a:	b087      	sub	sp, #28
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6a1b      	ldr	r3, [r3, #32]
 8007118:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	f023 0210 	bic.w	r2, r3, #16
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	031b      	lsls	r3, r3, #12
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	4313      	orrs	r3, r2
 800713c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007144:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	011b      	lsls	r3, r3, #4
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	4313      	orrs	r3, r2
 800714e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	621a      	str	r2, [r3, #32]
}
 800715c:	bf00      	nop
 800715e:	371c      	adds	r7, #28
 8007160:	46bd      	mov	sp, r7
 8007162:	bc80      	pop	{r7}
 8007164:	4770      	bx	lr

08007166 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007166:	b480      	push	{r7}
 8007168:	b085      	sub	sp, #20
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800717c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	4313      	orrs	r3, r2
 8007184:	f043 0307 	orr.w	r3, r3, #7
 8007188:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	609a      	str	r2, [r3, #8]
}
 8007190:	bf00      	nop
 8007192:	3714      	adds	r7, #20
 8007194:	46bd      	mov	sp, r7
 8007196:	bc80      	pop	{r7}
 8007198:	4770      	bx	lr

0800719a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800719a:	b480      	push	{r7}
 800719c:	b087      	sub	sp, #28
 800719e:	af00      	add	r7, sp, #0
 80071a0:	60f8      	str	r0, [r7, #12]
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	607a      	str	r2, [r7, #4]
 80071a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	021a      	lsls	r2, r3, #8
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	431a      	orrs	r2, r3
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	609a      	str	r2, [r3, #8]
}
 80071ce:	bf00      	nop
 80071d0:	371c      	adds	r7, #28
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bc80      	pop	{r7}
 80071d6:	4770      	bx	lr

080071d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071d8:	b480      	push	{r7}
 80071da:	b087      	sub	sp, #28
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	f003 031f 	and.w	r3, r3, #31
 80071ea:	2201      	movs	r2, #1
 80071ec:	fa02 f303 	lsl.w	r3, r2, r3
 80071f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6a1a      	ldr	r2, [r3, #32]
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	43db      	mvns	r3, r3
 80071fa:	401a      	ands	r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6a1a      	ldr	r2, [r3, #32]
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	f003 031f 	and.w	r3, r3, #31
 800720a:	6879      	ldr	r1, [r7, #4]
 800720c:	fa01 f303 	lsl.w	r3, r1, r3
 8007210:	431a      	orrs	r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	621a      	str	r2, [r3, #32]
}
 8007216:	bf00      	nop
 8007218:	371c      	adds	r7, #28
 800721a:	46bd      	mov	sp, r7
 800721c:	bc80      	pop	{r7}
 800721e:	4770      	bx	lr

08007220 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007230:	2b01      	cmp	r3, #1
 8007232:	d101      	bne.n	8007238 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007234:	2302      	movs	r3, #2
 8007236:	e046      	b.n	80072c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2202      	movs	r2, #2
 8007244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	4313      	orrs	r3, r2
 8007268:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a16      	ldr	r2, [pc, #88]	; (80072d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d00e      	beq.n	800729a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007284:	d009      	beq.n	800729a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a12      	ldr	r2, [pc, #72]	; (80072d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d004      	beq.n	800729a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a10      	ldr	r2, [pc, #64]	; (80072d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d10c      	bne.n	80072b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bc80      	pop	{r7}
 80072ce:	4770      	bx	lr
 80072d0:	40012c00 	.word	0x40012c00
 80072d4:	40000400 	.word	0x40000400
 80072d8:	40000800 	.word	0x40000800

080072dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bc80      	pop	{r7}
 80072ec:	4770      	bx	lr

080072ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b083      	sub	sp, #12
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072f6:	bf00      	nop
 80072f8:	370c      	adds	r7, #12
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bc80      	pop	{r7}
 80072fe:	4770      	bx	lr

08007300 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e042      	b.n	8007398 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b00      	cmp	r3, #0
 800731c:	d106      	bne.n	800732c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7fb f8a6 	bl	8002478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2224      	movs	r2, #36	; 0x24
 8007330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68da      	ldr	r2, [r3, #12]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007342:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 ffa3 	bl	8008290 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	691a      	ldr	r2, [r3, #16]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007358:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	695a      	ldr	r2, [r3, #20]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007368:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68da      	ldr	r2, [r3, #12]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007378:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2220      	movs	r2, #32
 8007384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2220      	movs	r2, #32
 800738c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	4613      	mov	r3, r2
 80073ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b20      	cmp	r3, #32
 80073b8:	d121      	bne.n	80073fe <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d002      	beq.n	80073c6 <HAL_UART_Transmit_IT+0x26>
 80073c0:	88fb      	ldrh	r3, [r7, #6]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e01a      	b.n	8007400 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	88fa      	ldrh	r2, [r7, #6]
 80073d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	88fa      	ldrh	r2, [r7, #6]
 80073da:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2221      	movs	r2, #33	; 0x21
 80073e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68da      	ldr	r2, [r3, #12]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80073f8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	e000      	b.n	8007400 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80073fe:	2302      	movs	r3, #2
  }
}
 8007400:	4618      	mov	r0, r3
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	bc80      	pop	{r7}
 8007408:	4770      	bx	lr
	...

0800740c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b08c      	sub	sp, #48	; 0x30
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	4613      	mov	r3, r2
 8007418:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b20      	cmp	r3, #32
 8007424:	d156      	bne.n	80074d4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <HAL_UART_Transmit_DMA+0x26>
 800742c:	88fb      	ldrh	r3, [r7, #6]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e04f      	b.n	80074d6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	88fa      	ldrh	r2, [r7, #6]
 8007440:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	88fa      	ldrh	r2, [r7, #6]
 8007446:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2221      	movs	r2, #33	; 0x21
 8007452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745a:	4a21      	ldr	r2, [pc, #132]	; (80074e0 <HAL_UART_Transmit_DMA+0xd4>)
 800745c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007462:	4a20      	ldr	r2, [pc, #128]	; (80074e4 <HAL_UART_Transmit_DMA+0xd8>)
 8007464:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746a:	4a1f      	ldr	r2, [pc, #124]	; (80074e8 <HAL_UART_Transmit_DMA+0xdc>)
 800746c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007472:	2200      	movs	r2, #0
 8007474:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8007476:	f107 0308 	add.w	r3, r7, #8
 800747a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007482:	6819      	ldr	r1, [r3, #0]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	3304      	adds	r3, #4
 800748a:	461a      	mov	r2, r3
 800748c:	88fb      	ldrh	r3, [r7, #6]
 800748e:	f7fb fab1 	bl	80029f4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800749a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	3314      	adds	r3, #20
 80074a2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	e853 3f00 	ldrex	r3, [r3]
 80074aa:	617b      	str	r3, [r7, #20]
   return(result);
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	3314      	adds	r3, #20
 80074ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074bc:	627a      	str	r2, [r7, #36]	; 0x24
 80074be:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c0:	6a39      	ldr	r1, [r7, #32]
 80074c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074c4:	e841 2300 	strex	r3, r2, [r1]
 80074c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1e5      	bne.n	800749c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80074d0:	2300      	movs	r3, #0
 80074d2:	e000      	b.n	80074d6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80074d4:	2302      	movs	r3, #2
  }
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3730      	adds	r7, #48	; 0x30
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	08007b27 	.word	0x08007b27
 80074e4:	08007bc1 	.word	0x08007bc1
 80074e8:	08007d45 	.word	0x08007d45

080074ec <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08c      	sub	sp, #48	; 0x30
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	4613      	mov	r3, r2
 80074f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b20      	cmp	r3, #32
 8007504:	d14a      	bne.n	800759c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800750c:	88fb      	ldrh	r3, [r7, #6]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d101      	bne.n	8007516 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e043      	b.n	800759e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2201      	movs	r2, #1
 800751a:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007522:	88fb      	ldrh	r3, [r7, #6]
 8007524:	461a      	mov	r2, r3
 8007526:	68b9      	ldr	r1, [r7, #8]
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f000 fc55 	bl	8007dd8 <UART_Start_Receive_DMA>
 800752e:	4603      	mov	r3, r0
 8007530:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007534:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007538:	2b00      	cmp	r3, #0
 800753a:	d12c      	bne.n	8007596 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007540:	2b01      	cmp	r3, #1
 8007542:	d125      	bne.n	8007590 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007544:	2300      	movs	r3, #0
 8007546:	613b      	str	r3, [r7, #16]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	613b      	str	r3, [r7, #16]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	613b      	str	r3, [r7, #16]
 8007558:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	330c      	adds	r3, #12
 8007560:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	e853 3f00 	ldrex	r3, [r3]
 8007568:	617b      	str	r3, [r7, #20]
   return(result);
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f043 0310 	orr.w	r3, r3, #16
 8007570:	62bb      	str	r3, [r7, #40]	; 0x28
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	330c      	adds	r3, #12
 8007578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800757a:	627a      	str	r2, [r7, #36]	; 0x24
 800757c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757e:	6a39      	ldr	r1, [r7, #32]
 8007580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007582:	e841 2300 	strex	r3, r2, [r1]
 8007586:	61fb      	str	r3, [r7, #28]
   return(result);
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1e5      	bne.n	800755a <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800758e:	e002      	b.n	8007596 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8007596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800759a:	e000      	b.n	800759e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800759c:	2302      	movs	r3, #2
  }
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3730      	adds	r7, #48	; 0x30
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
	...

080075a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b0ba      	sub	sp, #232	; 0xe8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80075ce:	2300      	movs	r3, #0
 80075d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80075da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075de:	f003 030f 	and.w	r3, r3, #15
 80075e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80075e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10f      	bne.n	800760e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075f2:	f003 0320 	and.w	r3, r3, #32
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d009      	beq.n	800760e <HAL_UART_IRQHandler+0x66>
 80075fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075fe:	f003 0320 	and.w	r3, r3, #32
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fd84 	bl	8008114 <UART_Receive_IT>
      return;
 800760c:	e25b      	b.n	8007ac6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800760e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007612:	2b00      	cmp	r3, #0
 8007614:	f000 80de 	beq.w	80077d4 <HAL_UART_IRQHandler+0x22c>
 8007618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800761c:	f003 0301 	and.w	r3, r3, #1
 8007620:	2b00      	cmp	r3, #0
 8007622:	d106      	bne.n	8007632 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007628:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 80d1 	beq.w	80077d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00b      	beq.n	8007656 <HAL_UART_IRQHandler+0xae>
 800763e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007646:	2b00      	cmp	r3, #0
 8007648:	d005      	beq.n	8007656 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800764e:	f043 0201 	orr.w	r2, r3, #1
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800765a:	f003 0304 	and.w	r3, r3, #4
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00b      	beq.n	800767a <HAL_UART_IRQHandler+0xd2>
 8007662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	2b00      	cmp	r3, #0
 800766c:	d005      	beq.n	800767a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007672:	f043 0202 	orr.w	r2, r3, #2
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800767a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00b      	beq.n	800769e <HAL_UART_IRQHandler+0xf6>
 8007686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b00      	cmp	r3, #0
 8007690:	d005      	beq.n	800769e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007696:	f043 0204 	orr.w	r2, r3, #4
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800769e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076a2:	f003 0308 	and.w	r3, r3, #8
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d011      	beq.n	80076ce <HAL_UART_IRQHandler+0x126>
 80076aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076ae:	f003 0320 	and.w	r3, r3, #32
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d105      	bne.n	80076c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80076b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d005      	beq.n	80076ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c6:	f043 0208 	orr.w	r2, r3, #8
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f000 81f2 	beq.w	8007abc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076dc:	f003 0320 	and.w	r3, r3, #32
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d008      	beq.n	80076f6 <HAL_UART_IRQHandler+0x14e>
 80076e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076e8:	f003 0320 	and.w	r3, r3, #32
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d002      	beq.n	80076f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fd0f 	bl	8008114 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007700:	2b00      	cmp	r3, #0
 8007702:	bf14      	ite	ne
 8007704:	2301      	movne	r3, #1
 8007706:	2300      	moveq	r3, #0
 8007708:	b2db      	uxtb	r3, r3
 800770a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007712:	f003 0308 	and.w	r3, r3, #8
 8007716:	2b00      	cmp	r3, #0
 8007718:	d103      	bne.n	8007722 <HAL_UART_IRQHandler+0x17a>
 800771a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800771e:	2b00      	cmp	r3, #0
 8007720:	d04f      	beq.n	80077c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fc19 	bl	8007f5a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007732:	2b00      	cmp	r3, #0
 8007734:	d041      	beq.n	80077ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3314      	adds	r3, #20
 800773c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007740:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007744:	e853 3f00 	ldrex	r3, [r3]
 8007748:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800774c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007754:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	3314      	adds	r3, #20
 800775e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007762:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007766:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800776e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007772:	e841 2300 	strex	r3, r2, [r1]
 8007776:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800777a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1d9      	bne.n	8007736 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007786:	2b00      	cmp	r3, #0
 8007788:	d013      	beq.n	80077b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800778e:	4a7e      	ldr	r2, [pc, #504]	; (8007988 <HAL_UART_IRQHandler+0x3e0>)
 8007790:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007796:	4618      	mov	r0, r3
 8007798:	f7fb f9c8 	bl	8002b2c <HAL_DMA_Abort_IT>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d016      	beq.n	80077d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80077ac:	4610      	mov	r0, r2
 80077ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b0:	e00e      	b.n	80077d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f9ae 	bl	8007b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b8:	e00a      	b.n	80077d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f9aa 	bl	8007b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c0:	e006      	b.n	80077d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f9a6 	bl	8007b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80077ce:	e175      	b.n	8007abc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d0:	bf00      	nop
    return;
 80077d2:	e173      	b.n	8007abc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d8:	2b01      	cmp	r3, #1
 80077da:	f040 814f 	bne.w	8007a7c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80077de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077e2:	f003 0310 	and.w	r3, r3, #16
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f000 8148 	beq.w	8007a7c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80077ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077f0:	f003 0310 	and.w	r3, r3, #16
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 8141 	beq.w	8007a7c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077fa:	2300      	movs	r3, #0
 80077fc:	60bb      	str	r3, [r7, #8]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	60bb      	str	r3, [r7, #8]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	60bb      	str	r3, [r7, #8]
 800780e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800781a:	2b00      	cmp	r3, #0
 800781c:	f000 80b6 	beq.w	800798c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800782c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 8145 	beq.w	8007ac0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800783a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800783e:	429a      	cmp	r2, r3
 8007840:	f080 813e 	bcs.w	8007ac0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800784a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	2b20      	cmp	r3, #32
 8007854:	f000 8088 	beq.w	8007968 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	330c      	adds	r3, #12
 800785e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007862:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007866:	e853 3f00 	ldrex	r3, [r3]
 800786a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800786e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007872:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007876:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	330c      	adds	r3, #12
 8007880:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007884:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007888:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007890:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007894:	e841 2300 	strex	r3, r2, [r1]
 8007898:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800789c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1d9      	bne.n	8007858 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3314      	adds	r3, #20
 80078aa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078ae:	e853 3f00 	ldrex	r3, [r3]
 80078b2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80078b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078b6:	f023 0301 	bic.w	r3, r3, #1
 80078ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	3314      	adds	r3, #20
 80078c4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80078c8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80078cc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ce:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80078d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80078d4:	e841 2300 	strex	r3, r2, [r1]
 80078d8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80078da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1e1      	bne.n	80078a4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	3314      	adds	r3, #20
 80078e6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078ea:	e853 3f00 	ldrex	r3, [r3]
 80078ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80078f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	3314      	adds	r3, #20
 8007900:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007904:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007906:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800790a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800790c:	e841 2300 	strex	r3, r2, [r1]
 8007910:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007912:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e3      	bne.n	80078e0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2220      	movs	r2, #32
 800791c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	330c      	adds	r3, #12
 800792c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007930:	e853 3f00 	ldrex	r3, [r3]
 8007934:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007938:	f023 0310 	bic.w	r3, r3, #16
 800793c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	330c      	adds	r3, #12
 8007946:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800794a:	65ba      	str	r2, [r7, #88]	; 0x58
 800794c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007950:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007952:	e841 2300 	strex	r3, r2, [r1]
 8007956:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1e3      	bne.n	8007926 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007962:	4618      	mov	r0, r3
 8007964:	f7fb f8a6 	bl	8002ab4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2202      	movs	r2, #2
 800796c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007976:	b29b      	uxth	r3, r3
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	b29b      	uxth	r3, r3
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7f9 fd30 	bl	80013e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007984:	e09c      	b.n	8007ac0 <HAL_UART_IRQHandler+0x518>
 8007986:	bf00      	nop
 8007988:	0800801f 	.word	0x0800801f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007994:	b29b      	uxth	r3, r3
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f000 808e 	beq.w	8007ac4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80079a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 8089 	beq.w	8007ac4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	330c      	adds	r3, #12
 80079b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079bc:	e853 3f00 	ldrex	r3, [r3]
 80079c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	330c      	adds	r3, #12
 80079d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80079d6:	647a      	str	r2, [r7, #68]	; 0x44
 80079d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e3      	bne.n	80079b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3314      	adds	r3, #20
 80079f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	623b      	str	r3, [r7, #32]
   return(result);
 80079fa:	6a3b      	ldr	r3, [r7, #32]
 80079fc:	f023 0301 	bic.w	r3, r3, #1
 8007a00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	3314      	adds	r3, #20
 8007a0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a0e:	633a      	str	r2, [r7, #48]	; 0x30
 8007a10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a16:	e841 2300 	strex	r3, r2, [r1]
 8007a1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1e3      	bne.n	80079ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2220      	movs	r2, #32
 8007a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	330c      	adds	r3, #12
 8007a36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	e853 3f00 	ldrex	r3, [r3]
 8007a3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 0310 	bic.w	r3, r3, #16
 8007a46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	330c      	adds	r3, #12
 8007a50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007a54:	61fa      	str	r2, [r7, #28]
 8007a56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a58:	69b9      	ldr	r1, [r7, #24]
 8007a5a:	69fa      	ldr	r2, [r7, #28]
 8007a5c:	e841 2300 	strex	r3, r2, [r1]
 8007a60:	617b      	str	r3, [r7, #20]
   return(result);
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1e3      	bne.n	8007a30 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a72:	4619      	mov	r1, r3
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f7f9 fcb5 	bl	80013e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a7a:	e023      	b.n	8007ac4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d009      	beq.n	8007a9c <HAL_UART_IRQHandler+0x4f4>
 8007a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d003      	beq.n	8007a9c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fad6 	bl	8008046 <UART_Transmit_IT>
    return;
 8007a9a:	e014      	b.n	8007ac6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00e      	beq.n	8007ac6 <HAL_UART_IRQHandler+0x51e>
 8007aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d008      	beq.n	8007ac6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fb15 	bl	80080e4 <UART_EndTransmit_IT>
    return;
 8007aba:	e004      	b.n	8007ac6 <HAL_UART_IRQHandler+0x51e>
    return;
 8007abc:	bf00      	nop
 8007abe:	e002      	b.n	8007ac6 <HAL_UART_IRQHandler+0x51e>
      return;
 8007ac0:	bf00      	nop
 8007ac2:	e000      	b.n	8007ac6 <HAL_UART_IRQHandler+0x51e>
      return;
 8007ac4:	bf00      	nop
  }
}
 8007ac6:	37e8      	adds	r7, #232	; 0xe8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bc80      	pop	{r7}
 8007adc:	4770      	bx	lr

08007ade <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b083      	sub	sp, #12
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007ae6:	bf00      	nop
 8007ae8:	370c      	adds	r7, #12
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bc80      	pop	{r7}
 8007aee:	4770      	bx	lr

08007af0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bc80      	pop	{r7}
 8007b00:	4770      	bx	lr

08007b02 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b083      	sub	sp, #12
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007b0a:	bf00      	nop
 8007b0c:	370c      	adds	r7, #12
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bc80      	pop	{r7}
 8007b12:	4770      	bx	lr

08007b14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bc80      	pop	{r7}
 8007b24:	4770      	bx	lr

08007b26 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b090      	sub	sp, #64	; 0x40
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 0320 	and.w	r3, r3, #32
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d137      	bne.n	8007bb2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b44:	2200      	movs	r2, #0
 8007b46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	3314      	adds	r3, #20
 8007b4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b52:	e853 3f00 	ldrex	r3, [r3]
 8007b56:	623b      	str	r3, [r7, #32]
   return(result);
 8007b58:	6a3b      	ldr	r3, [r7, #32]
 8007b5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3314      	adds	r3, #20
 8007b66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b68:	633a      	str	r2, [r7, #48]	; 0x30
 8007b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b70:	e841 2300 	strex	r3, r2, [r1]
 8007b74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1e5      	bne.n	8007b48 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	330c      	adds	r3, #12
 8007b82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	e853 3f00 	ldrex	r3, [r3]
 8007b8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b92:	637b      	str	r3, [r7, #52]	; 0x34
 8007b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	330c      	adds	r3, #12
 8007b9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b9c:	61fa      	str	r2, [r7, #28]
 8007b9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba0:	69b9      	ldr	r1, [r7, #24]
 8007ba2:	69fa      	ldr	r2, [r7, #28]
 8007ba4:	e841 2300 	strex	r3, r2, [r1]
 8007ba8:	617b      	str	r3, [r7, #20]
   return(result);
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1e5      	bne.n	8007b7c <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007bb0:	e002      	b.n	8007bb8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007bb2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007bb4:	f7ff ff8a 	bl	8007acc <HAL_UART_TxCpltCallback>
}
 8007bb8:	bf00      	nop
 8007bba:	3740      	adds	r7, #64	; 0x40
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bcc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f7ff ff85 	bl	8007ade <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bd4:	bf00      	nop
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b09c      	sub	sp, #112	; 0x70
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 0320 	and.w	r3, r3, #32
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d172      	bne.n	8007cde <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	330c      	adds	r3, #12
 8007c04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c08:	e853 3f00 	ldrex	r3, [r3]
 8007c0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c14:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	330c      	adds	r3, #12
 8007c1c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c1e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007c20:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c26:	e841 2300 	strex	r3, r2, [r1]
 8007c2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1e5      	bne.n	8007bfe <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	3314      	adds	r3, #20
 8007c38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3c:	e853 3f00 	ldrex	r3, [r3]
 8007c40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c44:	f023 0301 	bic.w	r3, r3, #1
 8007c48:	667b      	str	r3, [r7, #100]	; 0x64
 8007c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	3314      	adds	r3, #20
 8007c50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007c52:	647a      	str	r2, [r7, #68]	; 0x44
 8007c54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c5a:	e841 2300 	strex	r3, r2, [r1]
 8007c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1e5      	bne.n	8007c32 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3314      	adds	r3, #20
 8007c6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c70:	e853 3f00 	ldrex	r3, [r3]
 8007c74:	623b      	str	r3, [r7, #32]
   return(result);
 8007c76:	6a3b      	ldr	r3, [r7, #32]
 8007c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c7c:	663b      	str	r3, [r7, #96]	; 0x60
 8007c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	3314      	adds	r3, #20
 8007c84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007c86:	633a      	str	r2, [r7, #48]	; 0x30
 8007c88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c8e:	e841 2300 	strex	r3, r2, [r1]
 8007c92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1e5      	bne.n	8007c66 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c9c:	2220      	movs	r2, #32
 8007c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d119      	bne.n	8007cde <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	330c      	adds	r3, #12
 8007cb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	e853 3f00 	ldrex	r3, [r3]
 8007cb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f023 0310 	bic.w	r3, r3, #16
 8007cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	330c      	adds	r3, #12
 8007cc8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007cca:	61fa      	str	r2, [r7, #28]
 8007ccc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cce:	69b9      	ldr	r1, [r7, #24]
 8007cd0:	69fa      	ldr	r2, [r7, #28]
 8007cd2:	e841 2300 	strex	r3, r2, [r1]
 8007cd6:	617b      	str	r3, [r7, #20]
   return(result);
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1e5      	bne.n	8007caa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d106      	bne.n	8007cfa <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007cf4:	f7f9 fb76 	bl	80013e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007cf8:	e002      	b.n	8007d00 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007cfa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007cfc:	f7ff fef8 	bl	8007af0 <HAL_UART_RxCpltCallback>
}
 8007d00:	bf00      	nop
 8007d02:	3770      	adds	r7, #112	; 0x70
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d14:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d108      	bne.n	8007d36 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d28:	085b      	lsrs	r3, r3, #1
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f7f9 fb58 	bl	80013e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d34:	e002      	b.n	8007d3c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f7ff fee3 	bl	8007b02 <HAL_UART_RxHalfCpltCallback>
}
 8007d3c:	bf00      	nop
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d54:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	695b      	ldr	r3, [r3, #20]
 8007d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	bf14      	ite	ne
 8007d64:	2301      	movne	r3, #1
 8007d66:	2300      	moveq	r3, #0
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	2b21      	cmp	r3, #33	; 0x21
 8007d76:	d108      	bne.n	8007d8a <UART_DMAError+0x46>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d005      	beq.n	8007d8a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2200      	movs	r2, #0
 8007d82:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007d84:	68b8      	ldr	r0, [r7, #8]
 8007d86:	f000 f8c1 	bl	8007f0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	bf14      	ite	ne
 8007d98:	2301      	movne	r3, #1
 8007d9a:	2300      	moveq	r3, #0
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	2b22      	cmp	r3, #34	; 0x22
 8007daa:	d108      	bne.n	8007dbe <UART_DMAError+0x7a>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d005      	beq.n	8007dbe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	2200      	movs	r2, #0
 8007db6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007db8:	68b8      	ldr	r0, [r7, #8]
 8007dba:	f000 f8ce 	bl	8007f5a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dc2:	f043 0210 	orr.w	r2, r3, #16
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007dca:	68b8      	ldr	r0, [r7, #8]
 8007dcc:	f7ff fea2 	bl	8007b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dd0:	bf00      	nop
 8007dd2:	3710      	adds	r7, #16
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b098      	sub	sp, #96	; 0x60
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	4613      	mov	r3, r2
 8007de4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	88fa      	ldrh	r2, [r7, #6]
 8007df0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2222      	movs	r2, #34	; 0x22
 8007dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e04:	4a3e      	ldr	r2, [pc, #248]	; (8007f00 <UART_Start_Receive_DMA+0x128>)
 8007e06:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e0c:	4a3d      	ldr	r2, [pc, #244]	; (8007f04 <UART_Start_Receive_DMA+0x12c>)
 8007e0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e14:	4a3c      	ldr	r2, [pc, #240]	; (8007f08 <UART_Start_Receive_DMA+0x130>)
 8007e16:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007e20:	f107 0308 	add.w	r3, r7, #8
 8007e24:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	3304      	adds	r3, #4
 8007e30:	4619      	mov	r1, r3
 8007e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	88fb      	ldrh	r3, [r7, #6]
 8007e38:	f7fa fddc 	bl	80029f4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	613b      	str	r3, [r7, #16]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	613b      	str	r3, [r7, #16]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	613b      	str	r3, [r7, #16]
 8007e50:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d019      	beq.n	8007e8e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	330c      	adds	r3, #12
 8007e60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e64:	e853 3f00 	ldrex	r3, [r3]
 8007e68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e70:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	330c      	adds	r3, #12
 8007e78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e7a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007e7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007e80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e82:	e841 2300 	strex	r3, r2, [r1]
 8007e86:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1e5      	bne.n	8007e5a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3314      	adds	r3, #20
 8007e94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e98:	e853 3f00 	ldrex	r3, [r3]
 8007e9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea0:	f043 0301 	orr.w	r3, r3, #1
 8007ea4:	657b      	str	r3, [r7, #84]	; 0x54
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3314      	adds	r3, #20
 8007eac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007eae:	63ba      	str	r2, [r7, #56]	; 0x38
 8007eb0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007eb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007eb6:	e841 2300 	strex	r3, r2, [r1]
 8007eba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1e5      	bne.n	8007e8e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	3314      	adds	r3, #20
 8007ec8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	e853 3f00 	ldrex	r3, [r3]
 8007ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ed8:	653b      	str	r3, [r7, #80]	; 0x50
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	3314      	adds	r3, #20
 8007ee0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ee2:	627a      	str	r2, [r7, #36]	; 0x24
 8007ee4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee6:	6a39      	ldr	r1, [r7, #32]
 8007ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eea:	e841 2300 	strex	r3, r2, [r1]
 8007eee:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1e5      	bne.n	8007ec2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3760      	adds	r7, #96	; 0x60
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	08007bdd 	.word	0x08007bdd
 8007f04:	08007d09 	.word	0x08007d09
 8007f08:	08007d45 	.word	0x08007d45

08007f0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b089      	sub	sp, #36	; 0x24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	330c      	adds	r3, #12
 8007f1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	e853 3f00 	ldrex	r3, [r3]
 8007f22:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007f2a:	61fb      	str	r3, [r7, #28]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	330c      	adds	r3, #12
 8007f32:	69fa      	ldr	r2, [r7, #28]
 8007f34:	61ba      	str	r2, [r7, #24]
 8007f36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f38:	6979      	ldr	r1, [r7, #20]
 8007f3a:	69ba      	ldr	r2, [r7, #24]
 8007f3c:	e841 2300 	strex	r3, r2, [r1]
 8007f40:	613b      	str	r3, [r7, #16]
   return(result);
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1e5      	bne.n	8007f14 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2220      	movs	r2, #32
 8007f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8007f50:	bf00      	nop
 8007f52:	3724      	adds	r7, #36	; 0x24
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bc80      	pop	{r7}
 8007f58:	4770      	bx	lr

08007f5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	b095      	sub	sp, #84	; 0x54
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	330c      	adds	r3, #12
 8007f68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f6c:	e853 3f00 	ldrex	r3, [r3]
 8007f70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	330c      	adds	r3, #12
 8007f80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f82:	643a      	str	r2, [r7, #64]	; 0x40
 8007f84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f8a:	e841 2300 	strex	r3, r2, [r1]
 8007f8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1e5      	bne.n	8007f62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	3314      	adds	r3, #20
 8007f9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	e853 3f00 	ldrex	r3, [r3]
 8007fa4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	f023 0301 	bic.w	r3, r3, #1
 8007fac:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3314      	adds	r3, #20
 8007fb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fbe:	e841 2300 	strex	r3, r2, [r1]
 8007fc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1e5      	bne.n	8007f96 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d119      	bne.n	8008006 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	330c      	adds	r3, #12
 8007fd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	e853 3f00 	ldrex	r3, [r3]
 8007fe0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	f023 0310 	bic.w	r3, r3, #16
 8007fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	330c      	adds	r3, #12
 8007ff0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ff2:	61ba      	str	r2, [r7, #24]
 8007ff4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff6:	6979      	ldr	r1, [r7, #20]
 8007ff8:	69ba      	ldr	r2, [r7, #24]
 8007ffa:	e841 2300 	strex	r3, r2, [r1]
 8007ffe:	613b      	str	r3, [r7, #16]
   return(result);
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1e5      	bne.n	8007fd2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2220      	movs	r2, #32
 800800a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008014:	bf00      	nop
 8008016:	3754      	adds	r7, #84	; 0x54
 8008018:	46bd      	mov	sp, r7
 800801a:	bc80      	pop	{r7}
 800801c:	4770      	bx	lr

0800801e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b084      	sub	sp, #16
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f7ff fd6b 	bl	8007b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800803e:	bf00      	nop
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008046:	b480      	push	{r7}
 8008048:	b085      	sub	sp, #20
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b21      	cmp	r3, #33	; 0x21
 8008058:	d13e      	bne.n	80080d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008062:	d114      	bne.n	800808e <UART_Transmit_IT+0x48>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d110      	bne.n	800808e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a1b      	ldr	r3, [r3, #32]
 8008070:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	881b      	ldrh	r3, [r3, #0]
 8008076:	461a      	mov	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008080:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	1c9a      	adds	r2, r3, #2
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	621a      	str	r2, [r3, #32]
 800808c:	e008      	b.n	80080a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	1c59      	adds	r1, r3, #1
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	6211      	str	r1, [r2, #32]
 8008098:	781a      	ldrb	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	3b01      	subs	r3, #1
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	4619      	mov	r1, r3
 80080ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d10f      	bne.n	80080d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68da      	ldr	r2, [r3, #12]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68da      	ldr	r2, [r3, #12]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	e000      	b.n	80080da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80080d8:	2302      	movs	r3, #2
  }
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3714      	adds	r7, #20
 80080de:	46bd      	mov	sp, r7
 80080e0:	bc80      	pop	{r7}
 80080e2:	4770      	bx	lr

080080e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68da      	ldr	r2, [r3, #12]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2220      	movs	r2, #32
 8008100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7ff fce1 	bl	8007acc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b08c      	sub	sp, #48	; 0x30
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008122:	b2db      	uxtb	r3, r3
 8008124:	2b22      	cmp	r3, #34	; 0x22
 8008126:	f040 80ae 	bne.w	8008286 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008132:	d117      	bne.n	8008164 <UART_Receive_IT+0x50>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d113      	bne.n	8008164 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800813c:	2300      	movs	r3, #0
 800813e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008144:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	b29b      	uxth	r3, r3
 800814e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008152:	b29a      	uxth	r2, r3
 8008154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008156:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815c:	1c9a      	adds	r2, r3, #2
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	629a      	str	r2, [r3, #40]	; 0x28
 8008162:	e026      	b.n	80081b2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008168:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800816a:	2300      	movs	r3, #0
 800816c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008176:	d007      	beq.n	8008188 <UART_Receive_IT+0x74>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10a      	bne.n	8008196 <UART_Receive_IT+0x82>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d106      	bne.n	8008196 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	b2da      	uxtb	r2, r3
 8008190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008192:	701a      	strb	r2, [r3, #0]
 8008194:	e008      	b.n	80081a8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	b2db      	uxtb	r3, r3
 800819e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081a2:	b2da      	uxtb	r2, r3
 80081a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ac:	1c5a      	adds	r2, r3, #1
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	3b01      	subs	r3, #1
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	4619      	mov	r1, r3
 80081c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d15d      	bne.n	8008282 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68da      	ldr	r2, [r3, #12]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f022 0220 	bic.w	r2, r2, #32
 80081d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68da      	ldr	r2, [r3, #12]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	695a      	ldr	r2, [r3, #20]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f022 0201 	bic.w	r2, r2, #1
 80081f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2220      	movs	r2, #32
 80081fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008208:	2b01      	cmp	r3, #1
 800820a:	d135      	bne.n	8008278 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	330c      	adds	r3, #12
 8008218:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	e853 3f00 	ldrex	r3, [r3]
 8008220:	613b      	str	r3, [r7, #16]
   return(result);
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	f023 0310 	bic.w	r3, r3, #16
 8008228:	627b      	str	r3, [r7, #36]	; 0x24
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	330c      	adds	r3, #12
 8008230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008232:	623a      	str	r2, [r7, #32]
 8008234:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008236:	69f9      	ldr	r1, [r7, #28]
 8008238:	6a3a      	ldr	r2, [r7, #32]
 800823a:	e841 2300 	strex	r3, r2, [r1]
 800823e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1e5      	bne.n	8008212 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f003 0310 	and.w	r3, r3, #16
 8008250:	2b10      	cmp	r3, #16
 8008252:	d10a      	bne.n	800826a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008254:	2300      	movs	r3, #0
 8008256:	60fb      	str	r3, [r7, #12]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	60fb      	str	r3, [r7, #12]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	60fb      	str	r3, [r7, #12]
 8008268:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800826e:	4619      	mov	r1, r3
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f7f9 f8b7 	bl	80013e4 <HAL_UARTEx_RxEventCallback>
 8008276:	e002      	b.n	800827e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f7ff fc39 	bl	8007af0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800827e:	2300      	movs	r3, #0
 8008280:	e002      	b.n	8008288 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008282:	2300      	movs	r3, #0
 8008284:	e000      	b.n	8008288 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008286:	2302      	movs	r3, #2
  }
}
 8008288:	4618      	mov	r0, r3
 800828a:	3730      	adds	r7, #48	; 0x30
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68da      	ldr	r2, [r3, #12]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	430a      	orrs	r2, r1
 80082ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	689a      	ldr	r2, [r3, #8]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	431a      	orrs	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	695b      	ldr	r3, [r3, #20]
 80082bc:	4313      	orrs	r3, r2
 80082be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80082ca:	f023 030c 	bic.w	r3, r3, #12
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	6812      	ldr	r2, [r2, #0]
 80082d2:	68b9      	ldr	r1, [r7, #8]
 80082d4:	430b      	orrs	r3, r1
 80082d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	695b      	ldr	r3, [r3, #20]
 80082de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	699a      	ldr	r2, [r3, #24]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	430a      	orrs	r2, r1
 80082ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a2c      	ldr	r2, [pc, #176]	; (80083a4 <UART_SetConfig+0x114>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d103      	bne.n	8008300 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80082f8:	f7fe f872 	bl	80063e0 <HAL_RCC_GetPCLK2Freq>
 80082fc:	60f8      	str	r0, [r7, #12]
 80082fe:	e002      	b.n	8008306 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008300:	f7fe f85a 	bl	80063b8 <HAL_RCC_GetPCLK1Freq>
 8008304:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	4613      	mov	r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4413      	add	r3, r2
 800830e:	009a      	lsls	r2, r3, #2
 8008310:	441a      	add	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	fbb2 f3f3 	udiv	r3, r2, r3
 800831c:	4a22      	ldr	r2, [pc, #136]	; (80083a8 <UART_SetConfig+0x118>)
 800831e:	fba2 2303 	umull	r2, r3, r2, r3
 8008322:	095b      	lsrs	r3, r3, #5
 8008324:	0119      	lsls	r1, r3, #4
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	4613      	mov	r3, r2
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4413      	add	r3, r2
 800832e:	009a      	lsls	r2, r3, #2
 8008330:	441a      	add	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	fbb2 f2f3 	udiv	r2, r2, r3
 800833c:	4b1a      	ldr	r3, [pc, #104]	; (80083a8 <UART_SetConfig+0x118>)
 800833e:	fba3 0302 	umull	r0, r3, r3, r2
 8008342:	095b      	lsrs	r3, r3, #5
 8008344:	2064      	movs	r0, #100	; 0x64
 8008346:	fb00 f303 	mul.w	r3, r0, r3
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	011b      	lsls	r3, r3, #4
 800834e:	3332      	adds	r3, #50	; 0x32
 8008350:	4a15      	ldr	r2, [pc, #84]	; (80083a8 <UART_SetConfig+0x118>)
 8008352:	fba2 2303 	umull	r2, r3, r2, r3
 8008356:	095b      	lsrs	r3, r3, #5
 8008358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800835c:	4419      	add	r1, r3
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	4613      	mov	r3, r2
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	4413      	add	r3, r2
 8008366:	009a      	lsls	r2, r3, #2
 8008368:	441a      	add	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	fbb2 f2f3 	udiv	r2, r2, r3
 8008374:	4b0c      	ldr	r3, [pc, #48]	; (80083a8 <UART_SetConfig+0x118>)
 8008376:	fba3 0302 	umull	r0, r3, r3, r2
 800837a:	095b      	lsrs	r3, r3, #5
 800837c:	2064      	movs	r0, #100	; 0x64
 800837e:	fb00 f303 	mul.w	r3, r0, r3
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	011b      	lsls	r3, r3, #4
 8008386:	3332      	adds	r3, #50	; 0x32
 8008388:	4a07      	ldr	r2, [pc, #28]	; (80083a8 <UART_SetConfig+0x118>)
 800838a:	fba2 2303 	umull	r2, r3, r2, r3
 800838e:	095b      	lsrs	r3, r3, #5
 8008390:	f003 020f 	and.w	r2, r3, #15
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	440a      	add	r2, r1
 800839a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800839c:	bf00      	nop
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	40013800 	.word	0x40013800
 80083a8:	51eb851f 	.word	0x51eb851f

080083ac <__cvt>:
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083b2:	461f      	mov	r7, r3
 80083b4:	bfbb      	ittet	lt
 80083b6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80083ba:	461f      	movlt	r7, r3
 80083bc:	2300      	movge	r3, #0
 80083be:	232d      	movlt	r3, #45	; 0x2d
 80083c0:	b088      	sub	sp, #32
 80083c2:	4614      	mov	r4, r2
 80083c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80083c6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80083c8:	7013      	strb	r3, [r2, #0]
 80083ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80083cc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80083d0:	f023 0820 	bic.w	r8, r3, #32
 80083d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80083d8:	d005      	beq.n	80083e6 <__cvt+0x3a>
 80083da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80083de:	d100      	bne.n	80083e2 <__cvt+0x36>
 80083e0:	3501      	adds	r5, #1
 80083e2:	2302      	movs	r3, #2
 80083e4:	e000      	b.n	80083e8 <__cvt+0x3c>
 80083e6:	2303      	movs	r3, #3
 80083e8:	aa07      	add	r2, sp, #28
 80083ea:	9204      	str	r2, [sp, #16]
 80083ec:	aa06      	add	r2, sp, #24
 80083ee:	e9cd a202 	strd	sl, r2, [sp, #8]
 80083f2:	e9cd 3500 	strd	r3, r5, [sp]
 80083f6:	4622      	mov	r2, r4
 80083f8:	463b      	mov	r3, r7
 80083fa:	f001 f8a5 	bl	8009548 <_dtoa_r>
 80083fe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008402:	4606      	mov	r6, r0
 8008404:	d102      	bne.n	800840c <__cvt+0x60>
 8008406:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008408:	07db      	lsls	r3, r3, #31
 800840a:	d522      	bpl.n	8008452 <__cvt+0xa6>
 800840c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008410:	eb06 0905 	add.w	r9, r6, r5
 8008414:	d110      	bne.n	8008438 <__cvt+0x8c>
 8008416:	7833      	ldrb	r3, [r6, #0]
 8008418:	2b30      	cmp	r3, #48	; 0x30
 800841a:	d10a      	bne.n	8008432 <__cvt+0x86>
 800841c:	2200      	movs	r2, #0
 800841e:	2300      	movs	r3, #0
 8008420:	4620      	mov	r0, r4
 8008422:	4639      	mov	r1, r7
 8008424:	f7f8 fac0 	bl	80009a8 <__aeabi_dcmpeq>
 8008428:	b918      	cbnz	r0, 8008432 <__cvt+0x86>
 800842a:	f1c5 0501 	rsb	r5, r5, #1
 800842e:	f8ca 5000 	str.w	r5, [sl]
 8008432:	f8da 3000 	ldr.w	r3, [sl]
 8008436:	4499      	add	r9, r3
 8008438:	2200      	movs	r2, #0
 800843a:	2300      	movs	r3, #0
 800843c:	4620      	mov	r0, r4
 800843e:	4639      	mov	r1, r7
 8008440:	f7f8 fab2 	bl	80009a8 <__aeabi_dcmpeq>
 8008444:	b108      	cbz	r0, 800844a <__cvt+0x9e>
 8008446:	f8cd 901c 	str.w	r9, [sp, #28]
 800844a:	2230      	movs	r2, #48	; 0x30
 800844c:	9b07      	ldr	r3, [sp, #28]
 800844e:	454b      	cmp	r3, r9
 8008450:	d307      	bcc.n	8008462 <__cvt+0xb6>
 8008452:	4630      	mov	r0, r6
 8008454:	9b07      	ldr	r3, [sp, #28]
 8008456:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008458:	1b9b      	subs	r3, r3, r6
 800845a:	6013      	str	r3, [r2, #0]
 800845c:	b008      	add	sp, #32
 800845e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008462:	1c59      	adds	r1, r3, #1
 8008464:	9107      	str	r1, [sp, #28]
 8008466:	701a      	strb	r2, [r3, #0]
 8008468:	e7f0      	b.n	800844c <__cvt+0xa0>

0800846a <__exponent>:
 800846a:	4603      	mov	r3, r0
 800846c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800846e:	2900      	cmp	r1, #0
 8008470:	f803 2b02 	strb.w	r2, [r3], #2
 8008474:	bfb6      	itet	lt
 8008476:	222d      	movlt	r2, #45	; 0x2d
 8008478:	222b      	movge	r2, #43	; 0x2b
 800847a:	4249      	neglt	r1, r1
 800847c:	2909      	cmp	r1, #9
 800847e:	7042      	strb	r2, [r0, #1]
 8008480:	dd2a      	ble.n	80084d8 <__exponent+0x6e>
 8008482:	f10d 0207 	add.w	r2, sp, #7
 8008486:	4617      	mov	r7, r2
 8008488:	260a      	movs	r6, #10
 800848a:	fb91 f5f6 	sdiv	r5, r1, r6
 800848e:	4694      	mov	ip, r2
 8008490:	fb06 1415 	mls	r4, r6, r5, r1
 8008494:	3430      	adds	r4, #48	; 0x30
 8008496:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800849a:	460c      	mov	r4, r1
 800849c:	2c63      	cmp	r4, #99	; 0x63
 800849e:	4629      	mov	r1, r5
 80084a0:	f102 32ff 	add.w	r2, r2, #4294967295
 80084a4:	dcf1      	bgt.n	800848a <__exponent+0x20>
 80084a6:	3130      	adds	r1, #48	; 0x30
 80084a8:	f1ac 0402 	sub.w	r4, ip, #2
 80084ac:	f802 1c01 	strb.w	r1, [r2, #-1]
 80084b0:	4622      	mov	r2, r4
 80084b2:	1c41      	adds	r1, r0, #1
 80084b4:	42ba      	cmp	r2, r7
 80084b6:	d30a      	bcc.n	80084ce <__exponent+0x64>
 80084b8:	f10d 0209 	add.w	r2, sp, #9
 80084bc:	eba2 020c 	sub.w	r2, r2, ip
 80084c0:	42bc      	cmp	r4, r7
 80084c2:	bf88      	it	hi
 80084c4:	2200      	movhi	r2, #0
 80084c6:	4413      	add	r3, r2
 80084c8:	1a18      	subs	r0, r3, r0
 80084ca:	b003      	add	sp, #12
 80084cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084ce:	f812 5b01 	ldrb.w	r5, [r2], #1
 80084d2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80084d6:	e7ed      	b.n	80084b4 <__exponent+0x4a>
 80084d8:	2330      	movs	r3, #48	; 0x30
 80084da:	3130      	adds	r1, #48	; 0x30
 80084dc:	7083      	strb	r3, [r0, #2]
 80084de:	70c1      	strb	r1, [r0, #3]
 80084e0:	1d03      	adds	r3, r0, #4
 80084e2:	e7f1      	b.n	80084c8 <__exponent+0x5e>

080084e4 <_printf_float>:
 80084e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e8:	b091      	sub	sp, #68	; 0x44
 80084ea:	460c      	mov	r4, r1
 80084ec:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80084f0:	4616      	mov	r6, r2
 80084f2:	461f      	mov	r7, r3
 80084f4:	4605      	mov	r5, r0
 80084f6:	f000 ff03 	bl	8009300 <_localeconv_r>
 80084fa:	6803      	ldr	r3, [r0, #0]
 80084fc:	4618      	mov	r0, r3
 80084fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008500:	f7f7 fe26 	bl	8000150 <strlen>
 8008504:	2300      	movs	r3, #0
 8008506:	930e      	str	r3, [sp, #56]	; 0x38
 8008508:	f8d8 3000 	ldr.w	r3, [r8]
 800850c:	900a      	str	r0, [sp, #40]	; 0x28
 800850e:	3307      	adds	r3, #7
 8008510:	f023 0307 	bic.w	r3, r3, #7
 8008514:	f103 0208 	add.w	r2, r3, #8
 8008518:	f894 9018 	ldrb.w	r9, [r4, #24]
 800851c:	f8d4 b000 	ldr.w	fp, [r4]
 8008520:	f8c8 2000 	str.w	r2, [r8]
 8008524:	e9d3 a800 	ldrd	sl, r8, [r3]
 8008528:	4652      	mov	r2, sl
 800852a:	4643      	mov	r3, r8
 800852c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008530:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8008534:	930b      	str	r3, [sp, #44]	; 0x2c
 8008536:	f04f 32ff 	mov.w	r2, #4294967295
 800853a:	4650      	mov	r0, sl
 800853c:	4b9c      	ldr	r3, [pc, #624]	; (80087b0 <_printf_float+0x2cc>)
 800853e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008540:	f7f8 fa64 	bl	8000a0c <__aeabi_dcmpun>
 8008544:	bb70      	cbnz	r0, 80085a4 <_printf_float+0xc0>
 8008546:	f04f 32ff 	mov.w	r2, #4294967295
 800854a:	4650      	mov	r0, sl
 800854c:	4b98      	ldr	r3, [pc, #608]	; (80087b0 <_printf_float+0x2cc>)
 800854e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008550:	f7f8 fa3e 	bl	80009d0 <__aeabi_dcmple>
 8008554:	bb30      	cbnz	r0, 80085a4 <_printf_float+0xc0>
 8008556:	2200      	movs	r2, #0
 8008558:	2300      	movs	r3, #0
 800855a:	4650      	mov	r0, sl
 800855c:	4641      	mov	r1, r8
 800855e:	f7f8 fa2d 	bl	80009bc <__aeabi_dcmplt>
 8008562:	b110      	cbz	r0, 800856a <_printf_float+0x86>
 8008564:	232d      	movs	r3, #45	; 0x2d
 8008566:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800856a:	4a92      	ldr	r2, [pc, #584]	; (80087b4 <_printf_float+0x2d0>)
 800856c:	4b92      	ldr	r3, [pc, #584]	; (80087b8 <_printf_float+0x2d4>)
 800856e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008572:	bf94      	ite	ls
 8008574:	4690      	movls	r8, r2
 8008576:	4698      	movhi	r8, r3
 8008578:	2303      	movs	r3, #3
 800857a:	f04f 0a00 	mov.w	sl, #0
 800857e:	6123      	str	r3, [r4, #16]
 8008580:	f02b 0304 	bic.w	r3, fp, #4
 8008584:	6023      	str	r3, [r4, #0]
 8008586:	4633      	mov	r3, r6
 8008588:	4621      	mov	r1, r4
 800858a:	4628      	mov	r0, r5
 800858c:	9700      	str	r7, [sp, #0]
 800858e:	aa0f      	add	r2, sp, #60	; 0x3c
 8008590:	f000 f9d6 	bl	8008940 <_printf_common>
 8008594:	3001      	adds	r0, #1
 8008596:	f040 8090 	bne.w	80086ba <_printf_float+0x1d6>
 800859a:	f04f 30ff 	mov.w	r0, #4294967295
 800859e:	b011      	add	sp, #68	; 0x44
 80085a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a4:	4652      	mov	r2, sl
 80085a6:	4643      	mov	r3, r8
 80085a8:	4650      	mov	r0, sl
 80085aa:	4641      	mov	r1, r8
 80085ac:	f7f8 fa2e 	bl	8000a0c <__aeabi_dcmpun>
 80085b0:	b148      	cbz	r0, 80085c6 <_printf_float+0xe2>
 80085b2:	f1b8 0f00 	cmp.w	r8, #0
 80085b6:	bfb8      	it	lt
 80085b8:	232d      	movlt	r3, #45	; 0x2d
 80085ba:	4a80      	ldr	r2, [pc, #512]	; (80087bc <_printf_float+0x2d8>)
 80085bc:	bfb8      	it	lt
 80085be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80085c2:	4b7f      	ldr	r3, [pc, #508]	; (80087c0 <_printf_float+0x2dc>)
 80085c4:	e7d3      	b.n	800856e <_printf_float+0x8a>
 80085c6:	6863      	ldr	r3, [r4, #4]
 80085c8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80085cc:	1c5a      	adds	r2, r3, #1
 80085ce:	d142      	bne.n	8008656 <_printf_float+0x172>
 80085d0:	2306      	movs	r3, #6
 80085d2:	6063      	str	r3, [r4, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	9206      	str	r2, [sp, #24]
 80085d8:	aa0e      	add	r2, sp, #56	; 0x38
 80085da:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80085de:	aa0d      	add	r2, sp, #52	; 0x34
 80085e0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80085e4:	9203      	str	r2, [sp, #12]
 80085e6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80085ea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80085ee:	6023      	str	r3, [r4, #0]
 80085f0:	6863      	ldr	r3, [r4, #4]
 80085f2:	4652      	mov	r2, sl
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	4628      	mov	r0, r5
 80085f8:	4643      	mov	r3, r8
 80085fa:	910b      	str	r1, [sp, #44]	; 0x2c
 80085fc:	f7ff fed6 	bl	80083ac <__cvt>
 8008600:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008602:	4680      	mov	r8, r0
 8008604:	2947      	cmp	r1, #71	; 0x47
 8008606:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008608:	d108      	bne.n	800861c <_printf_float+0x138>
 800860a:	1cc8      	adds	r0, r1, #3
 800860c:	db02      	blt.n	8008614 <_printf_float+0x130>
 800860e:	6863      	ldr	r3, [r4, #4]
 8008610:	4299      	cmp	r1, r3
 8008612:	dd40      	ble.n	8008696 <_printf_float+0x1b2>
 8008614:	f1a9 0902 	sub.w	r9, r9, #2
 8008618:	fa5f f989 	uxtb.w	r9, r9
 800861c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008620:	d81f      	bhi.n	8008662 <_printf_float+0x17e>
 8008622:	464a      	mov	r2, r9
 8008624:	3901      	subs	r1, #1
 8008626:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800862a:	910d      	str	r1, [sp, #52]	; 0x34
 800862c:	f7ff ff1d 	bl	800846a <__exponent>
 8008630:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008632:	4682      	mov	sl, r0
 8008634:	1813      	adds	r3, r2, r0
 8008636:	2a01      	cmp	r2, #1
 8008638:	6123      	str	r3, [r4, #16]
 800863a:	dc02      	bgt.n	8008642 <_printf_float+0x15e>
 800863c:	6822      	ldr	r2, [r4, #0]
 800863e:	07d2      	lsls	r2, r2, #31
 8008640:	d501      	bpl.n	8008646 <_printf_float+0x162>
 8008642:	3301      	adds	r3, #1
 8008644:	6123      	str	r3, [r4, #16]
 8008646:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800864a:	2b00      	cmp	r3, #0
 800864c:	d09b      	beq.n	8008586 <_printf_float+0xa2>
 800864e:	232d      	movs	r3, #45	; 0x2d
 8008650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008654:	e797      	b.n	8008586 <_printf_float+0xa2>
 8008656:	2947      	cmp	r1, #71	; 0x47
 8008658:	d1bc      	bne.n	80085d4 <_printf_float+0xf0>
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1ba      	bne.n	80085d4 <_printf_float+0xf0>
 800865e:	2301      	movs	r3, #1
 8008660:	e7b7      	b.n	80085d2 <_printf_float+0xee>
 8008662:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008666:	d118      	bne.n	800869a <_printf_float+0x1b6>
 8008668:	2900      	cmp	r1, #0
 800866a:	6863      	ldr	r3, [r4, #4]
 800866c:	dd0b      	ble.n	8008686 <_printf_float+0x1a2>
 800866e:	6121      	str	r1, [r4, #16]
 8008670:	b913      	cbnz	r3, 8008678 <_printf_float+0x194>
 8008672:	6822      	ldr	r2, [r4, #0]
 8008674:	07d0      	lsls	r0, r2, #31
 8008676:	d502      	bpl.n	800867e <_printf_float+0x19a>
 8008678:	3301      	adds	r3, #1
 800867a:	440b      	add	r3, r1
 800867c:	6123      	str	r3, [r4, #16]
 800867e:	f04f 0a00 	mov.w	sl, #0
 8008682:	65a1      	str	r1, [r4, #88]	; 0x58
 8008684:	e7df      	b.n	8008646 <_printf_float+0x162>
 8008686:	b913      	cbnz	r3, 800868e <_printf_float+0x1aa>
 8008688:	6822      	ldr	r2, [r4, #0]
 800868a:	07d2      	lsls	r2, r2, #31
 800868c:	d501      	bpl.n	8008692 <_printf_float+0x1ae>
 800868e:	3302      	adds	r3, #2
 8008690:	e7f4      	b.n	800867c <_printf_float+0x198>
 8008692:	2301      	movs	r3, #1
 8008694:	e7f2      	b.n	800867c <_printf_float+0x198>
 8008696:	f04f 0967 	mov.w	r9, #103	; 0x67
 800869a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800869c:	4299      	cmp	r1, r3
 800869e:	db05      	blt.n	80086ac <_printf_float+0x1c8>
 80086a0:	6823      	ldr	r3, [r4, #0]
 80086a2:	6121      	str	r1, [r4, #16]
 80086a4:	07d8      	lsls	r0, r3, #31
 80086a6:	d5ea      	bpl.n	800867e <_printf_float+0x19a>
 80086a8:	1c4b      	adds	r3, r1, #1
 80086aa:	e7e7      	b.n	800867c <_printf_float+0x198>
 80086ac:	2900      	cmp	r1, #0
 80086ae:	bfcc      	ite	gt
 80086b0:	2201      	movgt	r2, #1
 80086b2:	f1c1 0202 	rsble	r2, r1, #2
 80086b6:	4413      	add	r3, r2
 80086b8:	e7e0      	b.n	800867c <_printf_float+0x198>
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	055a      	lsls	r2, r3, #21
 80086be:	d407      	bmi.n	80086d0 <_printf_float+0x1ec>
 80086c0:	6923      	ldr	r3, [r4, #16]
 80086c2:	4642      	mov	r2, r8
 80086c4:	4631      	mov	r1, r6
 80086c6:	4628      	mov	r0, r5
 80086c8:	47b8      	blx	r7
 80086ca:	3001      	adds	r0, #1
 80086cc:	d12b      	bne.n	8008726 <_printf_float+0x242>
 80086ce:	e764      	b.n	800859a <_printf_float+0xb6>
 80086d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80086d4:	f240 80dd 	bls.w	8008892 <_printf_float+0x3ae>
 80086d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086dc:	2200      	movs	r2, #0
 80086de:	2300      	movs	r3, #0
 80086e0:	f7f8 f962 	bl	80009a8 <__aeabi_dcmpeq>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	d033      	beq.n	8008750 <_printf_float+0x26c>
 80086e8:	2301      	movs	r3, #1
 80086ea:	4631      	mov	r1, r6
 80086ec:	4628      	mov	r0, r5
 80086ee:	4a35      	ldr	r2, [pc, #212]	; (80087c4 <_printf_float+0x2e0>)
 80086f0:	47b8      	blx	r7
 80086f2:	3001      	adds	r0, #1
 80086f4:	f43f af51 	beq.w	800859a <_printf_float+0xb6>
 80086f8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80086fc:	429a      	cmp	r2, r3
 80086fe:	db02      	blt.n	8008706 <_printf_float+0x222>
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	07d8      	lsls	r0, r3, #31
 8008704:	d50f      	bpl.n	8008726 <_printf_float+0x242>
 8008706:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800870a:	4631      	mov	r1, r6
 800870c:	4628      	mov	r0, r5
 800870e:	47b8      	blx	r7
 8008710:	3001      	adds	r0, #1
 8008712:	f43f af42 	beq.w	800859a <_printf_float+0xb6>
 8008716:	f04f 0800 	mov.w	r8, #0
 800871a:	f104 091a 	add.w	r9, r4, #26
 800871e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008720:	3b01      	subs	r3, #1
 8008722:	4543      	cmp	r3, r8
 8008724:	dc09      	bgt.n	800873a <_printf_float+0x256>
 8008726:	6823      	ldr	r3, [r4, #0]
 8008728:	079b      	lsls	r3, r3, #30
 800872a:	f100 8104 	bmi.w	8008936 <_printf_float+0x452>
 800872e:	68e0      	ldr	r0, [r4, #12]
 8008730:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008732:	4298      	cmp	r0, r3
 8008734:	bfb8      	it	lt
 8008736:	4618      	movlt	r0, r3
 8008738:	e731      	b.n	800859e <_printf_float+0xba>
 800873a:	2301      	movs	r3, #1
 800873c:	464a      	mov	r2, r9
 800873e:	4631      	mov	r1, r6
 8008740:	4628      	mov	r0, r5
 8008742:	47b8      	blx	r7
 8008744:	3001      	adds	r0, #1
 8008746:	f43f af28 	beq.w	800859a <_printf_float+0xb6>
 800874a:	f108 0801 	add.w	r8, r8, #1
 800874e:	e7e6      	b.n	800871e <_printf_float+0x23a>
 8008750:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008752:	2b00      	cmp	r3, #0
 8008754:	dc38      	bgt.n	80087c8 <_printf_float+0x2e4>
 8008756:	2301      	movs	r3, #1
 8008758:	4631      	mov	r1, r6
 800875a:	4628      	mov	r0, r5
 800875c:	4a19      	ldr	r2, [pc, #100]	; (80087c4 <_printf_float+0x2e0>)
 800875e:	47b8      	blx	r7
 8008760:	3001      	adds	r0, #1
 8008762:	f43f af1a 	beq.w	800859a <_printf_float+0xb6>
 8008766:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800876a:	4313      	orrs	r3, r2
 800876c:	d102      	bne.n	8008774 <_printf_float+0x290>
 800876e:	6823      	ldr	r3, [r4, #0]
 8008770:	07d9      	lsls	r1, r3, #31
 8008772:	d5d8      	bpl.n	8008726 <_printf_float+0x242>
 8008774:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008778:	4631      	mov	r1, r6
 800877a:	4628      	mov	r0, r5
 800877c:	47b8      	blx	r7
 800877e:	3001      	adds	r0, #1
 8008780:	f43f af0b 	beq.w	800859a <_printf_float+0xb6>
 8008784:	f04f 0900 	mov.w	r9, #0
 8008788:	f104 0a1a 	add.w	sl, r4, #26
 800878c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800878e:	425b      	negs	r3, r3
 8008790:	454b      	cmp	r3, r9
 8008792:	dc01      	bgt.n	8008798 <_printf_float+0x2b4>
 8008794:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008796:	e794      	b.n	80086c2 <_printf_float+0x1de>
 8008798:	2301      	movs	r3, #1
 800879a:	4652      	mov	r2, sl
 800879c:	4631      	mov	r1, r6
 800879e:	4628      	mov	r0, r5
 80087a0:	47b8      	blx	r7
 80087a2:	3001      	adds	r0, #1
 80087a4:	f43f aef9 	beq.w	800859a <_printf_float+0xb6>
 80087a8:	f109 0901 	add.w	r9, r9, #1
 80087ac:	e7ee      	b.n	800878c <_printf_float+0x2a8>
 80087ae:	bf00      	nop
 80087b0:	7fefffff 	.word	0x7fefffff
 80087b4:	0800f95e 	.word	0x0800f95e
 80087b8:	0800f962 	.word	0x0800f962
 80087bc:	0800f966 	.word	0x0800f966
 80087c0:	0800f96a 	.word	0x0800f96a
 80087c4:	0800f96e 	.word	0x0800f96e
 80087c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087cc:	429a      	cmp	r2, r3
 80087ce:	bfa8      	it	ge
 80087d0:	461a      	movge	r2, r3
 80087d2:	2a00      	cmp	r2, #0
 80087d4:	4691      	mov	r9, r2
 80087d6:	dc37      	bgt.n	8008848 <_printf_float+0x364>
 80087d8:	f04f 0b00 	mov.w	fp, #0
 80087dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087e0:	f104 021a 	add.w	r2, r4, #26
 80087e4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80087e8:	ebaa 0309 	sub.w	r3, sl, r9
 80087ec:	455b      	cmp	r3, fp
 80087ee:	dc33      	bgt.n	8008858 <_printf_float+0x374>
 80087f0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80087f4:	429a      	cmp	r2, r3
 80087f6:	db3b      	blt.n	8008870 <_printf_float+0x38c>
 80087f8:	6823      	ldr	r3, [r4, #0]
 80087fa:	07da      	lsls	r2, r3, #31
 80087fc:	d438      	bmi.n	8008870 <_printf_float+0x38c>
 80087fe:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008802:	eba2 0903 	sub.w	r9, r2, r3
 8008806:	eba2 020a 	sub.w	r2, r2, sl
 800880a:	4591      	cmp	r9, r2
 800880c:	bfa8      	it	ge
 800880e:	4691      	movge	r9, r2
 8008810:	f1b9 0f00 	cmp.w	r9, #0
 8008814:	dc34      	bgt.n	8008880 <_printf_float+0x39c>
 8008816:	f04f 0800 	mov.w	r8, #0
 800881a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800881e:	f104 0a1a 	add.w	sl, r4, #26
 8008822:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008826:	1a9b      	subs	r3, r3, r2
 8008828:	eba3 0309 	sub.w	r3, r3, r9
 800882c:	4543      	cmp	r3, r8
 800882e:	f77f af7a 	ble.w	8008726 <_printf_float+0x242>
 8008832:	2301      	movs	r3, #1
 8008834:	4652      	mov	r2, sl
 8008836:	4631      	mov	r1, r6
 8008838:	4628      	mov	r0, r5
 800883a:	47b8      	blx	r7
 800883c:	3001      	adds	r0, #1
 800883e:	f43f aeac 	beq.w	800859a <_printf_float+0xb6>
 8008842:	f108 0801 	add.w	r8, r8, #1
 8008846:	e7ec      	b.n	8008822 <_printf_float+0x33e>
 8008848:	4613      	mov	r3, r2
 800884a:	4631      	mov	r1, r6
 800884c:	4642      	mov	r2, r8
 800884e:	4628      	mov	r0, r5
 8008850:	47b8      	blx	r7
 8008852:	3001      	adds	r0, #1
 8008854:	d1c0      	bne.n	80087d8 <_printf_float+0x2f4>
 8008856:	e6a0      	b.n	800859a <_printf_float+0xb6>
 8008858:	2301      	movs	r3, #1
 800885a:	4631      	mov	r1, r6
 800885c:	4628      	mov	r0, r5
 800885e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008860:	47b8      	blx	r7
 8008862:	3001      	adds	r0, #1
 8008864:	f43f ae99 	beq.w	800859a <_printf_float+0xb6>
 8008868:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800886a:	f10b 0b01 	add.w	fp, fp, #1
 800886e:	e7b9      	b.n	80087e4 <_printf_float+0x300>
 8008870:	4631      	mov	r1, r6
 8008872:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008876:	4628      	mov	r0, r5
 8008878:	47b8      	blx	r7
 800887a:	3001      	adds	r0, #1
 800887c:	d1bf      	bne.n	80087fe <_printf_float+0x31a>
 800887e:	e68c      	b.n	800859a <_printf_float+0xb6>
 8008880:	464b      	mov	r3, r9
 8008882:	4631      	mov	r1, r6
 8008884:	4628      	mov	r0, r5
 8008886:	eb08 020a 	add.w	r2, r8, sl
 800888a:	47b8      	blx	r7
 800888c:	3001      	adds	r0, #1
 800888e:	d1c2      	bne.n	8008816 <_printf_float+0x332>
 8008890:	e683      	b.n	800859a <_printf_float+0xb6>
 8008892:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008894:	2a01      	cmp	r2, #1
 8008896:	dc01      	bgt.n	800889c <_printf_float+0x3b8>
 8008898:	07db      	lsls	r3, r3, #31
 800889a:	d539      	bpl.n	8008910 <_printf_float+0x42c>
 800889c:	2301      	movs	r3, #1
 800889e:	4642      	mov	r2, r8
 80088a0:	4631      	mov	r1, r6
 80088a2:	4628      	mov	r0, r5
 80088a4:	47b8      	blx	r7
 80088a6:	3001      	adds	r0, #1
 80088a8:	f43f ae77 	beq.w	800859a <_printf_float+0xb6>
 80088ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088b0:	4631      	mov	r1, r6
 80088b2:	4628      	mov	r0, r5
 80088b4:	47b8      	blx	r7
 80088b6:	3001      	adds	r0, #1
 80088b8:	f43f ae6f 	beq.w	800859a <_printf_float+0xb6>
 80088bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088c0:	2200      	movs	r2, #0
 80088c2:	2300      	movs	r3, #0
 80088c4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80088c8:	f7f8 f86e 	bl	80009a8 <__aeabi_dcmpeq>
 80088cc:	b9d8      	cbnz	r0, 8008906 <_printf_float+0x422>
 80088ce:	f109 33ff 	add.w	r3, r9, #4294967295
 80088d2:	f108 0201 	add.w	r2, r8, #1
 80088d6:	4631      	mov	r1, r6
 80088d8:	4628      	mov	r0, r5
 80088da:	47b8      	blx	r7
 80088dc:	3001      	adds	r0, #1
 80088de:	d10e      	bne.n	80088fe <_printf_float+0x41a>
 80088e0:	e65b      	b.n	800859a <_printf_float+0xb6>
 80088e2:	2301      	movs	r3, #1
 80088e4:	464a      	mov	r2, r9
 80088e6:	4631      	mov	r1, r6
 80088e8:	4628      	mov	r0, r5
 80088ea:	47b8      	blx	r7
 80088ec:	3001      	adds	r0, #1
 80088ee:	f43f ae54 	beq.w	800859a <_printf_float+0xb6>
 80088f2:	f108 0801 	add.w	r8, r8, #1
 80088f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088f8:	3b01      	subs	r3, #1
 80088fa:	4543      	cmp	r3, r8
 80088fc:	dcf1      	bgt.n	80088e2 <_printf_float+0x3fe>
 80088fe:	4653      	mov	r3, sl
 8008900:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008904:	e6de      	b.n	80086c4 <_printf_float+0x1e0>
 8008906:	f04f 0800 	mov.w	r8, #0
 800890a:	f104 091a 	add.w	r9, r4, #26
 800890e:	e7f2      	b.n	80088f6 <_printf_float+0x412>
 8008910:	2301      	movs	r3, #1
 8008912:	4642      	mov	r2, r8
 8008914:	e7df      	b.n	80088d6 <_printf_float+0x3f2>
 8008916:	2301      	movs	r3, #1
 8008918:	464a      	mov	r2, r9
 800891a:	4631      	mov	r1, r6
 800891c:	4628      	mov	r0, r5
 800891e:	47b8      	blx	r7
 8008920:	3001      	adds	r0, #1
 8008922:	f43f ae3a 	beq.w	800859a <_printf_float+0xb6>
 8008926:	f108 0801 	add.w	r8, r8, #1
 800892a:	68e3      	ldr	r3, [r4, #12]
 800892c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800892e:	1a5b      	subs	r3, r3, r1
 8008930:	4543      	cmp	r3, r8
 8008932:	dcf0      	bgt.n	8008916 <_printf_float+0x432>
 8008934:	e6fb      	b.n	800872e <_printf_float+0x24a>
 8008936:	f04f 0800 	mov.w	r8, #0
 800893a:	f104 0919 	add.w	r9, r4, #25
 800893e:	e7f4      	b.n	800892a <_printf_float+0x446>

08008940 <_printf_common>:
 8008940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008944:	4616      	mov	r6, r2
 8008946:	4699      	mov	r9, r3
 8008948:	688a      	ldr	r2, [r1, #8]
 800894a:	690b      	ldr	r3, [r1, #16]
 800894c:	4607      	mov	r7, r0
 800894e:	4293      	cmp	r3, r2
 8008950:	bfb8      	it	lt
 8008952:	4613      	movlt	r3, r2
 8008954:	6033      	str	r3, [r6, #0]
 8008956:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800895a:	460c      	mov	r4, r1
 800895c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008960:	b10a      	cbz	r2, 8008966 <_printf_common+0x26>
 8008962:	3301      	adds	r3, #1
 8008964:	6033      	str	r3, [r6, #0]
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	0699      	lsls	r1, r3, #26
 800896a:	bf42      	ittt	mi
 800896c:	6833      	ldrmi	r3, [r6, #0]
 800896e:	3302      	addmi	r3, #2
 8008970:	6033      	strmi	r3, [r6, #0]
 8008972:	6825      	ldr	r5, [r4, #0]
 8008974:	f015 0506 	ands.w	r5, r5, #6
 8008978:	d106      	bne.n	8008988 <_printf_common+0x48>
 800897a:	f104 0a19 	add.w	sl, r4, #25
 800897e:	68e3      	ldr	r3, [r4, #12]
 8008980:	6832      	ldr	r2, [r6, #0]
 8008982:	1a9b      	subs	r3, r3, r2
 8008984:	42ab      	cmp	r3, r5
 8008986:	dc2b      	bgt.n	80089e0 <_printf_common+0xa0>
 8008988:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800898c:	1e13      	subs	r3, r2, #0
 800898e:	6822      	ldr	r2, [r4, #0]
 8008990:	bf18      	it	ne
 8008992:	2301      	movne	r3, #1
 8008994:	0692      	lsls	r2, r2, #26
 8008996:	d430      	bmi.n	80089fa <_printf_common+0xba>
 8008998:	4649      	mov	r1, r9
 800899a:	4638      	mov	r0, r7
 800899c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089a0:	47c0      	blx	r8
 80089a2:	3001      	adds	r0, #1
 80089a4:	d023      	beq.n	80089ee <_printf_common+0xae>
 80089a6:	6823      	ldr	r3, [r4, #0]
 80089a8:	6922      	ldr	r2, [r4, #16]
 80089aa:	f003 0306 	and.w	r3, r3, #6
 80089ae:	2b04      	cmp	r3, #4
 80089b0:	bf14      	ite	ne
 80089b2:	2500      	movne	r5, #0
 80089b4:	6833      	ldreq	r3, [r6, #0]
 80089b6:	f04f 0600 	mov.w	r6, #0
 80089ba:	bf08      	it	eq
 80089bc:	68e5      	ldreq	r5, [r4, #12]
 80089be:	f104 041a 	add.w	r4, r4, #26
 80089c2:	bf08      	it	eq
 80089c4:	1aed      	subeq	r5, r5, r3
 80089c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80089ca:	bf08      	it	eq
 80089cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089d0:	4293      	cmp	r3, r2
 80089d2:	bfc4      	itt	gt
 80089d4:	1a9b      	subgt	r3, r3, r2
 80089d6:	18ed      	addgt	r5, r5, r3
 80089d8:	42b5      	cmp	r5, r6
 80089da:	d11a      	bne.n	8008a12 <_printf_common+0xd2>
 80089dc:	2000      	movs	r0, #0
 80089de:	e008      	b.n	80089f2 <_printf_common+0xb2>
 80089e0:	2301      	movs	r3, #1
 80089e2:	4652      	mov	r2, sl
 80089e4:	4649      	mov	r1, r9
 80089e6:	4638      	mov	r0, r7
 80089e8:	47c0      	blx	r8
 80089ea:	3001      	adds	r0, #1
 80089ec:	d103      	bne.n	80089f6 <_printf_common+0xb6>
 80089ee:	f04f 30ff 	mov.w	r0, #4294967295
 80089f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f6:	3501      	adds	r5, #1
 80089f8:	e7c1      	b.n	800897e <_printf_common+0x3e>
 80089fa:	2030      	movs	r0, #48	; 0x30
 80089fc:	18e1      	adds	r1, r4, r3
 80089fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a02:	1c5a      	adds	r2, r3, #1
 8008a04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a08:	4422      	add	r2, r4
 8008a0a:	3302      	adds	r3, #2
 8008a0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a10:	e7c2      	b.n	8008998 <_printf_common+0x58>
 8008a12:	2301      	movs	r3, #1
 8008a14:	4622      	mov	r2, r4
 8008a16:	4649      	mov	r1, r9
 8008a18:	4638      	mov	r0, r7
 8008a1a:	47c0      	blx	r8
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	d0e6      	beq.n	80089ee <_printf_common+0xae>
 8008a20:	3601      	adds	r6, #1
 8008a22:	e7d9      	b.n	80089d8 <_printf_common+0x98>

08008a24 <_printf_i>:
 8008a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a28:	7e0f      	ldrb	r7, [r1, #24]
 8008a2a:	4691      	mov	r9, r2
 8008a2c:	2f78      	cmp	r7, #120	; 0x78
 8008a2e:	4680      	mov	r8, r0
 8008a30:	460c      	mov	r4, r1
 8008a32:	469a      	mov	sl, r3
 8008a34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a3a:	d807      	bhi.n	8008a4c <_printf_i+0x28>
 8008a3c:	2f62      	cmp	r7, #98	; 0x62
 8008a3e:	d80a      	bhi.n	8008a56 <_printf_i+0x32>
 8008a40:	2f00      	cmp	r7, #0
 8008a42:	f000 80d5 	beq.w	8008bf0 <_printf_i+0x1cc>
 8008a46:	2f58      	cmp	r7, #88	; 0x58
 8008a48:	f000 80c1 	beq.w	8008bce <_printf_i+0x1aa>
 8008a4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a54:	e03a      	b.n	8008acc <_printf_i+0xa8>
 8008a56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a5a:	2b15      	cmp	r3, #21
 8008a5c:	d8f6      	bhi.n	8008a4c <_printf_i+0x28>
 8008a5e:	a101      	add	r1, pc, #4	; (adr r1, 8008a64 <_printf_i+0x40>)
 8008a60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a64:	08008abd 	.word	0x08008abd
 8008a68:	08008ad1 	.word	0x08008ad1
 8008a6c:	08008a4d 	.word	0x08008a4d
 8008a70:	08008a4d 	.word	0x08008a4d
 8008a74:	08008a4d 	.word	0x08008a4d
 8008a78:	08008a4d 	.word	0x08008a4d
 8008a7c:	08008ad1 	.word	0x08008ad1
 8008a80:	08008a4d 	.word	0x08008a4d
 8008a84:	08008a4d 	.word	0x08008a4d
 8008a88:	08008a4d 	.word	0x08008a4d
 8008a8c:	08008a4d 	.word	0x08008a4d
 8008a90:	08008bd7 	.word	0x08008bd7
 8008a94:	08008afd 	.word	0x08008afd
 8008a98:	08008b91 	.word	0x08008b91
 8008a9c:	08008a4d 	.word	0x08008a4d
 8008aa0:	08008a4d 	.word	0x08008a4d
 8008aa4:	08008bf9 	.word	0x08008bf9
 8008aa8:	08008a4d 	.word	0x08008a4d
 8008aac:	08008afd 	.word	0x08008afd
 8008ab0:	08008a4d 	.word	0x08008a4d
 8008ab4:	08008a4d 	.word	0x08008a4d
 8008ab8:	08008b99 	.word	0x08008b99
 8008abc:	682b      	ldr	r3, [r5, #0]
 8008abe:	1d1a      	adds	r2, r3, #4
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	602a      	str	r2, [r5, #0]
 8008ac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ac8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008acc:	2301      	movs	r3, #1
 8008ace:	e0a0      	b.n	8008c12 <_printf_i+0x1ee>
 8008ad0:	6820      	ldr	r0, [r4, #0]
 8008ad2:	682b      	ldr	r3, [r5, #0]
 8008ad4:	0607      	lsls	r7, r0, #24
 8008ad6:	f103 0104 	add.w	r1, r3, #4
 8008ada:	6029      	str	r1, [r5, #0]
 8008adc:	d501      	bpl.n	8008ae2 <_printf_i+0xbe>
 8008ade:	681e      	ldr	r6, [r3, #0]
 8008ae0:	e003      	b.n	8008aea <_printf_i+0xc6>
 8008ae2:	0646      	lsls	r6, r0, #25
 8008ae4:	d5fb      	bpl.n	8008ade <_printf_i+0xba>
 8008ae6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008aea:	2e00      	cmp	r6, #0
 8008aec:	da03      	bge.n	8008af6 <_printf_i+0xd2>
 8008aee:	232d      	movs	r3, #45	; 0x2d
 8008af0:	4276      	negs	r6, r6
 8008af2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008af6:	230a      	movs	r3, #10
 8008af8:	4859      	ldr	r0, [pc, #356]	; (8008c60 <_printf_i+0x23c>)
 8008afa:	e012      	b.n	8008b22 <_printf_i+0xfe>
 8008afc:	682b      	ldr	r3, [r5, #0]
 8008afe:	6820      	ldr	r0, [r4, #0]
 8008b00:	1d19      	adds	r1, r3, #4
 8008b02:	6029      	str	r1, [r5, #0]
 8008b04:	0605      	lsls	r5, r0, #24
 8008b06:	d501      	bpl.n	8008b0c <_printf_i+0xe8>
 8008b08:	681e      	ldr	r6, [r3, #0]
 8008b0a:	e002      	b.n	8008b12 <_printf_i+0xee>
 8008b0c:	0641      	lsls	r1, r0, #25
 8008b0e:	d5fb      	bpl.n	8008b08 <_printf_i+0xe4>
 8008b10:	881e      	ldrh	r6, [r3, #0]
 8008b12:	2f6f      	cmp	r7, #111	; 0x6f
 8008b14:	bf0c      	ite	eq
 8008b16:	2308      	moveq	r3, #8
 8008b18:	230a      	movne	r3, #10
 8008b1a:	4851      	ldr	r0, [pc, #324]	; (8008c60 <_printf_i+0x23c>)
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b22:	6865      	ldr	r5, [r4, #4]
 8008b24:	2d00      	cmp	r5, #0
 8008b26:	bfa8      	it	ge
 8008b28:	6821      	ldrge	r1, [r4, #0]
 8008b2a:	60a5      	str	r5, [r4, #8]
 8008b2c:	bfa4      	itt	ge
 8008b2e:	f021 0104 	bicge.w	r1, r1, #4
 8008b32:	6021      	strge	r1, [r4, #0]
 8008b34:	b90e      	cbnz	r6, 8008b3a <_printf_i+0x116>
 8008b36:	2d00      	cmp	r5, #0
 8008b38:	d04b      	beq.n	8008bd2 <_printf_i+0x1ae>
 8008b3a:	4615      	mov	r5, r2
 8008b3c:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b40:	fb03 6711 	mls	r7, r3, r1, r6
 8008b44:	5dc7      	ldrb	r7, [r0, r7]
 8008b46:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b4a:	4637      	mov	r7, r6
 8008b4c:	42bb      	cmp	r3, r7
 8008b4e:	460e      	mov	r6, r1
 8008b50:	d9f4      	bls.n	8008b3c <_printf_i+0x118>
 8008b52:	2b08      	cmp	r3, #8
 8008b54:	d10b      	bne.n	8008b6e <_printf_i+0x14a>
 8008b56:	6823      	ldr	r3, [r4, #0]
 8008b58:	07de      	lsls	r6, r3, #31
 8008b5a:	d508      	bpl.n	8008b6e <_printf_i+0x14a>
 8008b5c:	6923      	ldr	r3, [r4, #16]
 8008b5e:	6861      	ldr	r1, [r4, #4]
 8008b60:	4299      	cmp	r1, r3
 8008b62:	bfde      	ittt	le
 8008b64:	2330      	movle	r3, #48	; 0x30
 8008b66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b6e:	1b52      	subs	r2, r2, r5
 8008b70:	6122      	str	r2, [r4, #16]
 8008b72:	464b      	mov	r3, r9
 8008b74:	4621      	mov	r1, r4
 8008b76:	4640      	mov	r0, r8
 8008b78:	f8cd a000 	str.w	sl, [sp]
 8008b7c:	aa03      	add	r2, sp, #12
 8008b7e:	f7ff fedf 	bl	8008940 <_printf_common>
 8008b82:	3001      	adds	r0, #1
 8008b84:	d14a      	bne.n	8008c1c <_printf_i+0x1f8>
 8008b86:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8a:	b004      	add	sp, #16
 8008b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b90:	6823      	ldr	r3, [r4, #0]
 8008b92:	f043 0320 	orr.w	r3, r3, #32
 8008b96:	6023      	str	r3, [r4, #0]
 8008b98:	2778      	movs	r7, #120	; 0x78
 8008b9a:	4832      	ldr	r0, [pc, #200]	; (8008c64 <_printf_i+0x240>)
 8008b9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ba0:	6823      	ldr	r3, [r4, #0]
 8008ba2:	6829      	ldr	r1, [r5, #0]
 8008ba4:	061f      	lsls	r7, r3, #24
 8008ba6:	f851 6b04 	ldr.w	r6, [r1], #4
 8008baa:	d402      	bmi.n	8008bb2 <_printf_i+0x18e>
 8008bac:	065f      	lsls	r7, r3, #25
 8008bae:	bf48      	it	mi
 8008bb0:	b2b6      	uxthmi	r6, r6
 8008bb2:	07df      	lsls	r7, r3, #31
 8008bb4:	bf48      	it	mi
 8008bb6:	f043 0320 	orrmi.w	r3, r3, #32
 8008bba:	6029      	str	r1, [r5, #0]
 8008bbc:	bf48      	it	mi
 8008bbe:	6023      	strmi	r3, [r4, #0]
 8008bc0:	b91e      	cbnz	r6, 8008bca <_printf_i+0x1a6>
 8008bc2:	6823      	ldr	r3, [r4, #0]
 8008bc4:	f023 0320 	bic.w	r3, r3, #32
 8008bc8:	6023      	str	r3, [r4, #0]
 8008bca:	2310      	movs	r3, #16
 8008bcc:	e7a6      	b.n	8008b1c <_printf_i+0xf8>
 8008bce:	4824      	ldr	r0, [pc, #144]	; (8008c60 <_printf_i+0x23c>)
 8008bd0:	e7e4      	b.n	8008b9c <_printf_i+0x178>
 8008bd2:	4615      	mov	r5, r2
 8008bd4:	e7bd      	b.n	8008b52 <_printf_i+0x12e>
 8008bd6:	682b      	ldr	r3, [r5, #0]
 8008bd8:	6826      	ldr	r6, [r4, #0]
 8008bda:	1d18      	adds	r0, r3, #4
 8008bdc:	6961      	ldr	r1, [r4, #20]
 8008bde:	6028      	str	r0, [r5, #0]
 8008be0:	0635      	lsls	r5, r6, #24
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	d501      	bpl.n	8008bea <_printf_i+0x1c6>
 8008be6:	6019      	str	r1, [r3, #0]
 8008be8:	e002      	b.n	8008bf0 <_printf_i+0x1cc>
 8008bea:	0670      	lsls	r0, r6, #25
 8008bec:	d5fb      	bpl.n	8008be6 <_printf_i+0x1c2>
 8008bee:	8019      	strh	r1, [r3, #0]
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	4615      	mov	r5, r2
 8008bf4:	6123      	str	r3, [r4, #16]
 8008bf6:	e7bc      	b.n	8008b72 <_printf_i+0x14e>
 8008bf8:	682b      	ldr	r3, [r5, #0]
 8008bfa:	2100      	movs	r1, #0
 8008bfc:	1d1a      	adds	r2, r3, #4
 8008bfe:	602a      	str	r2, [r5, #0]
 8008c00:	681d      	ldr	r5, [r3, #0]
 8008c02:	6862      	ldr	r2, [r4, #4]
 8008c04:	4628      	mov	r0, r5
 8008c06:	f000 fbf2 	bl	80093ee <memchr>
 8008c0a:	b108      	cbz	r0, 8008c10 <_printf_i+0x1ec>
 8008c0c:	1b40      	subs	r0, r0, r5
 8008c0e:	6060      	str	r0, [r4, #4]
 8008c10:	6863      	ldr	r3, [r4, #4]
 8008c12:	6123      	str	r3, [r4, #16]
 8008c14:	2300      	movs	r3, #0
 8008c16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c1a:	e7aa      	b.n	8008b72 <_printf_i+0x14e>
 8008c1c:	462a      	mov	r2, r5
 8008c1e:	4649      	mov	r1, r9
 8008c20:	4640      	mov	r0, r8
 8008c22:	6923      	ldr	r3, [r4, #16]
 8008c24:	47d0      	blx	sl
 8008c26:	3001      	adds	r0, #1
 8008c28:	d0ad      	beq.n	8008b86 <_printf_i+0x162>
 8008c2a:	6823      	ldr	r3, [r4, #0]
 8008c2c:	079b      	lsls	r3, r3, #30
 8008c2e:	d413      	bmi.n	8008c58 <_printf_i+0x234>
 8008c30:	68e0      	ldr	r0, [r4, #12]
 8008c32:	9b03      	ldr	r3, [sp, #12]
 8008c34:	4298      	cmp	r0, r3
 8008c36:	bfb8      	it	lt
 8008c38:	4618      	movlt	r0, r3
 8008c3a:	e7a6      	b.n	8008b8a <_printf_i+0x166>
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	4632      	mov	r2, r6
 8008c40:	4649      	mov	r1, r9
 8008c42:	4640      	mov	r0, r8
 8008c44:	47d0      	blx	sl
 8008c46:	3001      	adds	r0, #1
 8008c48:	d09d      	beq.n	8008b86 <_printf_i+0x162>
 8008c4a:	3501      	adds	r5, #1
 8008c4c:	68e3      	ldr	r3, [r4, #12]
 8008c4e:	9903      	ldr	r1, [sp, #12]
 8008c50:	1a5b      	subs	r3, r3, r1
 8008c52:	42ab      	cmp	r3, r5
 8008c54:	dcf2      	bgt.n	8008c3c <_printf_i+0x218>
 8008c56:	e7eb      	b.n	8008c30 <_printf_i+0x20c>
 8008c58:	2500      	movs	r5, #0
 8008c5a:	f104 0619 	add.w	r6, r4, #25
 8008c5e:	e7f5      	b.n	8008c4c <_printf_i+0x228>
 8008c60:	0800f970 	.word	0x0800f970
 8008c64:	0800f981 	.word	0x0800f981

08008c68 <_scanf_float>:
 8008c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c6c:	b087      	sub	sp, #28
 8008c6e:	9303      	str	r3, [sp, #12]
 8008c70:	688b      	ldr	r3, [r1, #8]
 8008c72:	4617      	mov	r7, r2
 8008c74:	1e5a      	subs	r2, r3, #1
 8008c76:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008c7a:	bf85      	ittet	hi
 8008c7c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008c80:	195b      	addhi	r3, r3, r5
 8008c82:	2300      	movls	r3, #0
 8008c84:	9302      	strhi	r3, [sp, #8]
 8008c86:	bf88      	it	hi
 8008c88:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008c8c:	468b      	mov	fp, r1
 8008c8e:	f04f 0500 	mov.w	r5, #0
 8008c92:	bf8c      	ite	hi
 8008c94:	608b      	strhi	r3, [r1, #8]
 8008c96:	9302      	strls	r3, [sp, #8]
 8008c98:	680b      	ldr	r3, [r1, #0]
 8008c9a:	4680      	mov	r8, r0
 8008c9c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008ca0:	f84b 3b1c 	str.w	r3, [fp], #28
 8008ca4:	460c      	mov	r4, r1
 8008ca6:	465e      	mov	r6, fp
 8008ca8:	46aa      	mov	sl, r5
 8008caa:	46a9      	mov	r9, r5
 8008cac:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008cb0:	9501      	str	r5, [sp, #4]
 8008cb2:	68a2      	ldr	r2, [r4, #8]
 8008cb4:	b152      	cbz	r2, 8008ccc <_scanf_float+0x64>
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	2b4e      	cmp	r3, #78	; 0x4e
 8008cbc:	d864      	bhi.n	8008d88 <_scanf_float+0x120>
 8008cbe:	2b40      	cmp	r3, #64	; 0x40
 8008cc0:	d83c      	bhi.n	8008d3c <_scanf_float+0xd4>
 8008cc2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008cc6:	b2c8      	uxtb	r0, r1
 8008cc8:	280e      	cmp	r0, #14
 8008cca:	d93a      	bls.n	8008d42 <_scanf_float+0xda>
 8008ccc:	f1b9 0f00 	cmp.w	r9, #0
 8008cd0:	d003      	beq.n	8008cda <_scanf_float+0x72>
 8008cd2:	6823      	ldr	r3, [r4, #0]
 8008cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cd8:	6023      	str	r3, [r4, #0]
 8008cda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008cde:	f1ba 0f01 	cmp.w	sl, #1
 8008ce2:	f200 8113 	bhi.w	8008f0c <_scanf_float+0x2a4>
 8008ce6:	455e      	cmp	r6, fp
 8008ce8:	f200 8105 	bhi.w	8008ef6 <_scanf_float+0x28e>
 8008cec:	2501      	movs	r5, #1
 8008cee:	4628      	mov	r0, r5
 8008cf0:	b007      	add	sp, #28
 8008cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008cfa:	2a0d      	cmp	r2, #13
 8008cfc:	d8e6      	bhi.n	8008ccc <_scanf_float+0x64>
 8008cfe:	a101      	add	r1, pc, #4	; (adr r1, 8008d04 <_scanf_float+0x9c>)
 8008d00:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008d04:	08008e43 	.word	0x08008e43
 8008d08:	08008ccd 	.word	0x08008ccd
 8008d0c:	08008ccd 	.word	0x08008ccd
 8008d10:	08008ccd 	.word	0x08008ccd
 8008d14:	08008ea3 	.word	0x08008ea3
 8008d18:	08008e7b 	.word	0x08008e7b
 8008d1c:	08008ccd 	.word	0x08008ccd
 8008d20:	08008ccd 	.word	0x08008ccd
 8008d24:	08008e51 	.word	0x08008e51
 8008d28:	08008ccd 	.word	0x08008ccd
 8008d2c:	08008ccd 	.word	0x08008ccd
 8008d30:	08008ccd 	.word	0x08008ccd
 8008d34:	08008ccd 	.word	0x08008ccd
 8008d38:	08008e09 	.word	0x08008e09
 8008d3c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008d40:	e7db      	b.n	8008cfa <_scanf_float+0x92>
 8008d42:	290e      	cmp	r1, #14
 8008d44:	d8c2      	bhi.n	8008ccc <_scanf_float+0x64>
 8008d46:	a001      	add	r0, pc, #4	; (adr r0, 8008d4c <_scanf_float+0xe4>)
 8008d48:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008d4c:	08008dfb 	.word	0x08008dfb
 8008d50:	08008ccd 	.word	0x08008ccd
 8008d54:	08008dfb 	.word	0x08008dfb
 8008d58:	08008e8f 	.word	0x08008e8f
 8008d5c:	08008ccd 	.word	0x08008ccd
 8008d60:	08008da9 	.word	0x08008da9
 8008d64:	08008de5 	.word	0x08008de5
 8008d68:	08008de5 	.word	0x08008de5
 8008d6c:	08008de5 	.word	0x08008de5
 8008d70:	08008de5 	.word	0x08008de5
 8008d74:	08008de5 	.word	0x08008de5
 8008d78:	08008de5 	.word	0x08008de5
 8008d7c:	08008de5 	.word	0x08008de5
 8008d80:	08008de5 	.word	0x08008de5
 8008d84:	08008de5 	.word	0x08008de5
 8008d88:	2b6e      	cmp	r3, #110	; 0x6e
 8008d8a:	d809      	bhi.n	8008da0 <_scanf_float+0x138>
 8008d8c:	2b60      	cmp	r3, #96	; 0x60
 8008d8e:	d8b2      	bhi.n	8008cf6 <_scanf_float+0x8e>
 8008d90:	2b54      	cmp	r3, #84	; 0x54
 8008d92:	d077      	beq.n	8008e84 <_scanf_float+0x21c>
 8008d94:	2b59      	cmp	r3, #89	; 0x59
 8008d96:	d199      	bne.n	8008ccc <_scanf_float+0x64>
 8008d98:	2d07      	cmp	r5, #7
 8008d9a:	d197      	bne.n	8008ccc <_scanf_float+0x64>
 8008d9c:	2508      	movs	r5, #8
 8008d9e:	e029      	b.n	8008df4 <_scanf_float+0x18c>
 8008da0:	2b74      	cmp	r3, #116	; 0x74
 8008da2:	d06f      	beq.n	8008e84 <_scanf_float+0x21c>
 8008da4:	2b79      	cmp	r3, #121	; 0x79
 8008da6:	e7f6      	b.n	8008d96 <_scanf_float+0x12e>
 8008da8:	6821      	ldr	r1, [r4, #0]
 8008daa:	05c8      	lsls	r0, r1, #23
 8008dac:	d51a      	bpl.n	8008de4 <_scanf_float+0x17c>
 8008dae:	9b02      	ldr	r3, [sp, #8]
 8008db0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008db4:	6021      	str	r1, [r4, #0]
 8008db6:	f109 0901 	add.w	r9, r9, #1
 8008dba:	b11b      	cbz	r3, 8008dc4 <_scanf_float+0x15c>
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	3201      	adds	r2, #1
 8008dc0:	9302      	str	r3, [sp, #8]
 8008dc2:	60a2      	str	r2, [r4, #8]
 8008dc4:	68a3      	ldr	r3, [r4, #8]
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	60a3      	str	r3, [r4, #8]
 8008dca:	6923      	ldr	r3, [r4, #16]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	6123      	str	r3, [r4, #16]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	3b01      	subs	r3, #1
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	607b      	str	r3, [r7, #4]
 8008dd8:	f340 8084 	ble.w	8008ee4 <_scanf_float+0x27c>
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	3301      	adds	r3, #1
 8008de0:	603b      	str	r3, [r7, #0]
 8008de2:	e766      	b.n	8008cb2 <_scanf_float+0x4a>
 8008de4:	eb1a 0f05 	cmn.w	sl, r5
 8008de8:	f47f af70 	bne.w	8008ccc <_scanf_float+0x64>
 8008dec:	6822      	ldr	r2, [r4, #0]
 8008dee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008df2:	6022      	str	r2, [r4, #0]
 8008df4:	f806 3b01 	strb.w	r3, [r6], #1
 8008df8:	e7e4      	b.n	8008dc4 <_scanf_float+0x15c>
 8008dfa:	6822      	ldr	r2, [r4, #0]
 8008dfc:	0610      	lsls	r0, r2, #24
 8008dfe:	f57f af65 	bpl.w	8008ccc <_scanf_float+0x64>
 8008e02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e06:	e7f4      	b.n	8008df2 <_scanf_float+0x18a>
 8008e08:	f1ba 0f00 	cmp.w	sl, #0
 8008e0c:	d10e      	bne.n	8008e2c <_scanf_float+0x1c4>
 8008e0e:	f1b9 0f00 	cmp.w	r9, #0
 8008e12:	d10e      	bne.n	8008e32 <_scanf_float+0x1ca>
 8008e14:	6822      	ldr	r2, [r4, #0]
 8008e16:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008e1a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008e1e:	d108      	bne.n	8008e32 <_scanf_float+0x1ca>
 8008e20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008e24:	f04f 0a01 	mov.w	sl, #1
 8008e28:	6022      	str	r2, [r4, #0]
 8008e2a:	e7e3      	b.n	8008df4 <_scanf_float+0x18c>
 8008e2c:	f1ba 0f02 	cmp.w	sl, #2
 8008e30:	d055      	beq.n	8008ede <_scanf_float+0x276>
 8008e32:	2d01      	cmp	r5, #1
 8008e34:	d002      	beq.n	8008e3c <_scanf_float+0x1d4>
 8008e36:	2d04      	cmp	r5, #4
 8008e38:	f47f af48 	bne.w	8008ccc <_scanf_float+0x64>
 8008e3c:	3501      	adds	r5, #1
 8008e3e:	b2ed      	uxtb	r5, r5
 8008e40:	e7d8      	b.n	8008df4 <_scanf_float+0x18c>
 8008e42:	f1ba 0f01 	cmp.w	sl, #1
 8008e46:	f47f af41 	bne.w	8008ccc <_scanf_float+0x64>
 8008e4a:	f04f 0a02 	mov.w	sl, #2
 8008e4e:	e7d1      	b.n	8008df4 <_scanf_float+0x18c>
 8008e50:	b97d      	cbnz	r5, 8008e72 <_scanf_float+0x20a>
 8008e52:	f1b9 0f00 	cmp.w	r9, #0
 8008e56:	f47f af3c 	bne.w	8008cd2 <_scanf_float+0x6a>
 8008e5a:	6822      	ldr	r2, [r4, #0]
 8008e5c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008e60:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008e64:	f47f af39 	bne.w	8008cda <_scanf_float+0x72>
 8008e68:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008e6c:	2501      	movs	r5, #1
 8008e6e:	6022      	str	r2, [r4, #0]
 8008e70:	e7c0      	b.n	8008df4 <_scanf_float+0x18c>
 8008e72:	2d03      	cmp	r5, #3
 8008e74:	d0e2      	beq.n	8008e3c <_scanf_float+0x1d4>
 8008e76:	2d05      	cmp	r5, #5
 8008e78:	e7de      	b.n	8008e38 <_scanf_float+0x1d0>
 8008e7a:	2d02      	cmp	r5, #2
 8008e7c:	f47f af26 	bne.w	8008ccc <_scanf_float+0x64>
 8008e80:	2503      	movs	r5, #3
 8008e82:	e7b7      	b.n	8008df4 <_scanf_float+0x18c>
 8008e84:	2d06      	cmp	r5, #6
 8008e86:	f47f af21 	bne.w	8008ccc <_scanf_float+0x64>
 8008e8a:	2507      	movs	r5, #7
 8008e8c:	e7b2      	b.n	8008df4 <_scanf_float+0x18c>
 8008e8e:	6822      	ldr	r2, [r4, #0]
 8008e90:	0591      	lsls	r1, r2, #22
 8008e92:	f57f af1b 	bpl.w	8008ccc <_scanf_float+0x64>
 8008e96:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008e9a:	6022      	str	r2, [r4, #0]
 8008e9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ea0:	e7a8      	b.n	8008df4 <_scanf_float+0x18c>
 8008ea2:	6822      	ldr	r2, [r4, #0]
 8008ea4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008ea8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008eac:	d006      	beq.n	8008ebc <_scanf_float+0x254>
 8008eae:	0550      	lsls	r0, r2, #21
 8008eb0:	f57f af0c 	bpl.w	8008ccc <_scanf_float+0x64>
 8008eb4:	f1b9 0f00 	cmp.w	r9, #0
 8008eb8:	f43f af0f 	beq.w	8008cda <_scanf_float+0x72>
 8008ebc:	0591      	lsls	r1, r2, #22
 8008ebe:	bf58      	it	pl
 8008ec0:	9901      	ldrpl	r1, [sp, #4]
 8008ec2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ec6:	bf58      	it	pl
 8008ec8:	eba9 0101 	subpl.w	r1, r9, r1
 8008ecc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008ed0:	f04f 0900 	mov.w	r9, #0
 8008ed4:	bf58      	it	pl
 8008ed6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008eda:	6022      	str	r2, [r4, #0]
 8008edc:	e78a      	b.n	8008df4 <_scanf_float+0x18c>
 8008ede:	f04f 0a03 	mov.w	sl, #3
 8008ee2:	e787      	b.n	8008df4 <_scanf_float+0x18c>
 8008ee4:	4639      	mov	r1, r7
 8008ee6:	4640      	mov	r0, r8
 8008ee8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008eec:	4798      	blx	r3
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	f43f aedf 	beq.w	8008cb2 <_scanf_float+0x4a>
 8008ef4:	e6ea      	b.n	8008ccc <_scanf_float+0x64>
 8008ef6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008efa:	463a      	mov	r2, r7
 8008efc:	4640      	mov	r0, r8
 8008efe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f02:	4798      	blx	r3
 8008f04:	6923      	ldr	r3, [r4, #16]
 8008f06:	3b01      	subs	r3, #1
 8008f08:	6123      	str	r3, [r4, #16]
 8008f0a:	e6ec      	b.n	8008ce6 <_scanf_float+0x7e>
 8008f0c:	1e6b      	subs	r3, r5, #1
 8008f0e:	2b06      	cmp	r3, #6
 8008f10:	d825      	bhi.n	8008f5e <_scanf_float+0x2f6>
 8008f12:	2d02      	cmp	r5, #2
 8008f14:	d836      	bhi.n	8008f84 <_scanf_float+0x31c>
 8008f16:	455e      	cmp	r6, fp
 8008f18:	f67f aee8 	bls.w	8008cec <_scanf_float+0x84>
 8008f1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f20:	463a      	mov	r2, r7
 8008f22:	4640      	mov	r0, r8
 8008f24:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f28:	4798      	blx	r3
 8008f2a:	6923      	ldr	r3, [r4, #16]
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	6123      	str	r3, [r4, #16]
 8008f30:	e7f1      	b.n	8008f16 <_scanf_float+0x2ae>
 8008f32:	9802      	ldr	r0, [sp, #8]
 8008f34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f38:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008f3c:	463a      	mov	r2, r7
 8008f3e:	9002      	str	r0, [sp, #8]
 8008f40:	4640      	mov	r0, r8
 8008f42:	4798      	blx	r3
 8008f44:	6923      	ldr	r3, [r4, #16]
 8008f46:	3b01      	subs	r3, #1
 8008f48:	6123      	str	r3, [r4, #16]
 8008f4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f4e:	fa5f fa8a 	uxtb.w	sl, sl
 8008f52:	f1ba 0f02 	cmp.w	sl, #2
 8008f56:	d1ec      	bne.n	8008f32 <_scanf_float+0x2ca>
 8008f58:	3d03      	subs	r5, #3
 8008f5a:	b2ed      	uxtb	r5, r5
 8008f5c:	1b76      	subs	r6, r6, r5
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	05da      	lsls	r2, r3, #23
 8008f62:	d52f      	bpl.n	8008fc4 <_scanf_float+0x35c>
 8008f64:	055b      	lsls	r3, r3, #21
 8008f66:	d510      	bpl.n	8008f8a <_scanf_float+0x322>
 8008f68:	455e      	cmp	r6, fp
 8008f6a:	f67f aebf 	bls.w	8008cec <_scanf_float+0x84>
 8008f6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f72:	463a      	mov	r2, r7
 8008f74:	4640      	mov	r0, r8
 8008f76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f7a:	4798      	blx	r3
 8008f7c:	6923      	ldr	r3, [r4, #16]
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	6123      	str	r3, [r4, #16]
 8008f82:	e7f1      	b.n	8008f68 <_scanf_float+0x300>
 8008f84:	46aa      	mov	sl, r5
 8008f86:	9602      	str	r6, [sp, #8]
 8008f88:	e7df      	b.n	8008f4a <_scanf_float+0x2e2>
 8008f8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008f8e:	6923      	ldr	r3, [r4, #16]
 8008f90:	2965      	cmp	r1, #101	; 0x65
 8008f92:	f103 33ff 	add.w	r3, r3, #4294967295
 8008f96:	f106 35ff 	add.w	r5, r6, #4294967295
 8008f9a:	6123      	str	r3, [r4, #16]
 8008f9c:	d00c      	beq.n	8008fb8 <_scanf_float+0x350>
 8008f9e:	2945      	cmp	r1, #69	; 0x45
 8008fa0:	d00a      	beq.n	8008fb8 <_scanf_float+0x350>
 8008fa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fa6:	463a      	mov	r2, r7
 8008fa8:	4640      	mov	r0, r8
 8008faa:	4798      	blx	r3
 8008fac:	6923      	ldr	r3, [r4, #16]
 8008fae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008fb2:	3b01      	subs	r3, #1
 8008fb4:	1eb5      	subs	r5, r6, #2
 8008fb6:	6123      	str	r3, [r4, #16]
 8008fb8:	463a      	mov	r2, r7
 8008fba:	4640      	mov	r0, r8
 8008fbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fc0:	4798      	blx	r3
 8008fc2:	462e      	mov	r6, r5
 8008fc4:	6825      	ldr	r5, [r4, #0]
 8008fc6:	f015 0510 	ands.w	r5, r5, #16
 8008fca:	d155      	bne.n	8009078 <_scanf_float+0x410>
 8008fcc:	7035      	strb	r5, [r6, #0]
 8008fce:	6823      	ldr	r3, [r4, #0]
 8008fd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fd8:	d11d      	bne.n	8009016 <_scanf_float+0x3ae>
 8008fda:	9b01      	ldr	r3, [sp, #4]
 8008fdc:	454b      	cmp	r3, r9
 8008fde:	eba3 0209 	sub.w	r2, r3, r9
 8008fe2:	d125      	bne.n	8009030 <_scanf_float+0x3c8>
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	4659      	mov	r1, fp
 8008fe8:	4640      	mov	r0, r8
 8008fea:	f002 fc41 	bl	800b870 <_strtod_r>
 8008fee:	9b03      	ldr	r3, [sp, #12]
 8008ff0:	f8d4 c000 	ldr.w	ip, [r4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f01c 0f02 	tst.w	ip, #2
 8008ffa:	4606      	mov	r6, r0
 8008ffc:	460f      	mov	r7, r1
 8008ffe:	f103 0204 	add.w	r2, r3, #4
 8009002:	d020      	beq.n	8009046 <_scanf_float+0x3de>
 8009004:	9903      	ldr	r1, [sp, #12]
 8009006:	600a      	str	r2, [r1, #0]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	e9c3 6700 	strd	r6, r7, [r3]
 800900e:	68e3      	ldr	r3, [r4, #12]
 8009010:	3301      	adds	r3, #1
 8009012:	60e3      	str	r3, [r4, #12]
 8009014:	e66b      	b.n	8008cee <_scanf_float+0x86>
 8009016:	9b04      	ldr	r3, [sp, #16]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d0e3      	beq.n	8008fe4 <_scanf_float+0x37c>
 800901c:	9905      	ldr	r1, [sp, #20]
 800901e:	230a      	movs	r3, #10
 8009020:	462a      	mov	r2, r5
 8009022:	4640      	mov	r0, r8
 8009024:	3101      	adds	r1, #1
 8009026:	f002 fca7 	bl	800b978 <_strtol_r>
 800902a:	9b04      	ldr	r3, [sp, #16]
 800902c:	9e05      	ldr	r6, [sp, #20]
 800902e:	1ac2      	subs	r2, r0, r3
 8009030:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009034:	429e      	cmp	r6, r3
 8009036:	bf28      	it	cs
 8009038:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800903c:	4630      	mov	r0, r6
 800903e:	490f      	ldr	r1, [pc, #60]	; (800907c <_scanf_float+0x414>)
 8009040:	f000 f8e2 	bl	8009208 <siprintf>
 8009044:	e7ce      	b.n	8008fe4 <_scanf_float+0x37c>
 8009046:	f01c 0f04 	tst.w	ip, #4
 800904a:	d1db      	bne.n	8009004 <_scanf_float+0x39c>
 800904c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009050:	f8cc 2000 	str.w	r2, [ip]
 8009054:	f8d3 8000 	ldr.w	r8, [r3]
 8009058:	4602      	mov	r2, r0
 800905a:	460b      	mov	r3, r1
 800905c:	f7f7 fcd6 	bl	8000a0c <__aeabi_dcmpun>
 8009060:	b128      	cbz	r0, 800906e <_scanf_float+0x406>
 8009062:	4807      	ldr	r0, [pc, #28]	; (8009080 <_scanf_float+0x418>)
 8009064:	f000 f9e0 	bl	8009428 <nanf>
 8009068:	f8c8 0000 	str.w	r0, [r8]
 800906c:	e7cf      	b.n	800900e <_scanf_float+0x3a6>
 800906e:	4630      	mov	r0, r6
 8009070:	4639      	mov	r1, r7
 8009072:	f7f7 fd29 	bl	8000ac8 <__aeabi_d2f>
 8009076:	e7f7      	b.n	8009068 <_scanf_float+0x400>
 8009078:	2500      	movs	r5, #0
 800907a:	e638      	b.n	8008cee <_scanf_float+0x86>
 800907c:	0800f992 	.word	0x0800f992
 8009080:	0800fd25 	.word	0x0800fd25

08009084 <std>:
 8009084:	2300      	movs	r3, #0
 8009086:	b510      	push	{r4, lr}
 8009088:	4604      	mov	r4, r0
 800908a:	e9c0 3300 	strd	r3, r3, [r0]
 800908e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009092:	6083      	str	r3, [r0, #8]
 8009094:	8181      	strh	r1, [r0, #12]
 8009096:	6643      	str	r3, [r0, #100]	; 0x64
 8009098:	81c2      	strh	r2, [r0, #14]
 800909a:	6183      	str	r3, [r0, #24]
 800909c:	4619      	mov	r1, r3
 800909e:	2208      	movs	r2, #8
 80090a0:	305c      	adds	r0, #92	; 0x5c
 80090a2:	f000 f924 	bl	80092ee <memset>
 80090a6:	4b0d      	ldr	r3, [pc, #52]	; (80090dc <std+0x58>)
 80090a8:	6224      	str	r4, [r4, #32]
 80090aa:	6263      	str	r3, [r4, #36]	; 0x24
 80090ac:	4b0c      	ldr	r3, [pc, #48]	; (80090e0 <std+0x5c>)
 80090ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80090b0:	4b0c      	ldr	r3, [pc, #48]	; (80090e4 <std+0x60>)
 80090b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090b4:	4b0c      	ldr	r3, [pc, #48]	; (80090e8 <std+0x64>)
 80090b6:	6323      	str	r3, [r4, #48]	; 0x30
 80090b8:	4b0c      	ldr	r3, [pc, #48]	; (80090ec <std+0x68>)
 80090ba:	429c      	cmp	r4, r3
 80090bc:	d006      	beq.n	80090cc <std+0x48>
 80090be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80090c2:	4294      	cmp	r4, r2
 80090c4:	d002      	beq.n	80090cc <std+0x48>
 80090c6:	33d0      	adds	r3, #208	; 0xd0
 80090c8:	429c      	cmp	r4, r3
 80090ca:	d105      	bne.n	80090d8 <std+0x54>
 80090cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80090d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090d4:	f000 b988 	b.w	80093e8 <__retarget_lock_init_recursive>
 80090d8:	bd10      	pop	{r4, pc}
 80090da:	bf00      	nop
 80090dc:	08009249 	.word	0x08009249
 80090e0:	0800926b 	.word	0x0800926b
 80090e4:	080092a3 	.word	0x080092a3
 80090e8:	080092c7 	.word	0x080092c7
 80090ec:	20000894 	.word	0x20000894

080090f0 <stdio_exit_handler>:
 80090f0:	4a02      	ldr	r2, [pc, #8]	; (80090fc <stdio_exit_handler+0xc>)
 80090f2:	4903      	ldr	r1, [pc, #12]	; (8009100 <stdio_exit_handler+0x10>)
 80090f4:	4803      	ldr	r0, [pc, #12]	; (8009104 <stdio_exit_handler+0x14>)
 80090f6:	f000 b869 	b.w	80091cc <_fwalk_sglue>
 80090fa:	bf00      	nop
 80090fc:	20000028 	.word	0x20000028
 8009100:	0800bd31 	.word	0x0800bd31
 8009104:	20000034 	.word	0x20000034

08009108 <cleanup_stdio>:
 8009108:	6841      	ldr	r1, [r0, #4]
 800910a:	4b0c      	ldr	r3, [pc, #48]	; (800913c <cleanup_stdio+0x34>)
 800910c:	b510      	push	{r4, lr}
 800910e:	4299      	cmp	r1, r3
 8009110:	4604      	mov	r4, r0
 8009112:	d001      	beq.n	8009118 <cleanup_stdio+0x10>
 8009114:	f002 fe0c 	bl	800bd30 <_fflush_r>
 8009118:	68a1      	ldr	r1, [r4, #8]
 800911a:	4b09      	ldr	r3, [pc, #36]	; (8009140 <cleanup_stdio+0x38>)
 800911c:	4299      	cmp	r1, r3
 800911e:	d002      	beq.n	8009126 <cleanup_stdio+0x1e>
 8009120:	4620      	mov	r0, r4
 8009122:	f002 fe05 	bl	800bd30 <_fflush_r>
 8009126:	68e1      	ldr	r1, [r4, #12]
 8009128:	4b06      	ldr	r3, [pc, #24]	; (8009144 <cleanup_stdio+0x3c>)
 800912a:	4299      	cmp	r1, r3
 800912c:	d004      	beq.n	8009138 <cleanup_stdio+0x30>
 800912e:	4620      	mov	r0, r4
 8009130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009134:	f002 bdfc 	b.w	800bd30 <_fflush_r>
 8009138:	bd10      	pop	{r4, pc}
 800913a:	bf00      	nop
 800913c:	20000894 	.word	0x20000894
 8009140:	200008fc 	.word	0x200008fc
 8009144:	20000964 	.word	0x20000964

08009148 <global_stdio_init.part.0>:
 8009148:	b510      	push	{r4, lr}
 800914a:	4b0b      	ldr	r3, [pc, #44]	; (8009178 <global_stdio_init.part.0+0x30>)
 800914c:	4c0b      	ldr	r4, [pc, #44]	; (800917c <global_stdio_init.part.0+0x34>)
 800914e:	4a0c      	ldr	r2, [pc, #48]	; (8009180 <global_stdio_init.part.0+0x38>)
 8009150:	4620      	mov	r0, r4
 8009152:	601a      	str	r2, [r3, #0]
 8009154:	2104      	movs	r1, #4
 8009156:	2200      	movs	r2, #0
 8009158:	f7ff ff94 	bl	8009084 <std>
 800915c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009160:	2201      	movs	r2, #1
 8009162:	2109      	movs	r1, #9
 8009164:	f7ff ff8e 	bl	8009084 <std>
 8009168:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800916c:	2202      	movs	r2, #2
 800916e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009172:	2112      	movs	r1, #18
 8009174:	f7ff bf86 	b.w	8009084 <std>
 8009178:	200009cc 	.word	0x200009cc
 800917c:	20000894 	.word	0x20000894
 8009180:	080090f1 	.word	0x080090f1

08009184 <__sfp_lock_acquire>:
 8009184:	4801      	ldr	r0, [pc, #4]	; (800918c <__sfp_lock_acquire+0x8>)
 8009186:	f000 b930 	b.w	80093ea <__retarget_lock_acquire_recursive>
 800918a:	bf00      	nop
 800918c:	200009d5 	.word	0x200009d5

08009190 <__sfp_lock_release>:
 8009190:	4801      	ldr	r0, [pc, #4]	; (8009198 <__sfp_lock_release+0x8>)
 8009192:	f000 b92b 	b.w	80093ec <__retarget_lock_release_recursive>
 8009196:	bf00      	nop
 8009198:	200009d5 	.word	0x200009d5

0800919c <__sinit>:
 800919c:	b510      	push	{r4, lr}
 800919e:	4604      	mov	r4, r0
 80091a0:	f7ff fff0 	bl	8009184 <__sfp_lock_acquire>
 80091a4:	6a23      	ldr	r3, [r4, #32]
 80091a6:	b11b      	cbz	r3, 80091b0 <__sinit+0x14>
 80091a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091ac:	f7ff bff0 	b.w	8009190 <__sfp_lock_release>
 80091b0:	4b04      	ldr	r3, [pc, #16]	; (80091c4 <__sinit+0x28>)
 80091b2:	6223      	str	r3, [r4, #32]
 80091b4:	4b04      	ldr	r3, [pc, #16]	; (80091c8 <__sinit+0x2c>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d1f5      	bne.n	80091a8 <__sinit+0xc>
 80091bc:	f7ff ffc4 	bl	8009148 <global_stdio_init.part.0>
 80091c0:	e7f2      	b.n	80091a8 <__sinit+0xc>
 80091c2:	bf00      	nop
 80091c4:	08009109 	.word	0x08009109
 80091c8:	200009cc 	.word	0x200009cc

080091cc <_fwalk_sglue>:
 80091cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091d0:	4607      	mov	r7, r0
 80091d2:	4688      	mov	r8, r1
 80091d4:	4614      	mov	r4, r2
 80091d6:	2600      	movs	r6, #0
 80091d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091dc:	f1b9 0901 	subs.w	r9, r9, #1
 80091e0:	d505      	bpl.n	80091ee <_fwalk_sglue+0x22>
 80091e2:	6824      	ldr	r4, [r4, #0]
 80091e4:	2c00      	cmp	r4, #0
 80091e6:	d1f7      	bne.n	80091d8 <_fwalk_sglue+0xc>
 80091e8:	4630      	mov	r0, r6
 80091ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091ee:	89ab      	ldrh	r3, [r5, #12]
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d907      	bls.n	8009204 <_fwalk_sglue+0x38>
 80091f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091f8:	3301      	adds	r3, #1
 80091fa:	d003      	beq.n	8009204 <_fwalk_sglue+0x38>
 80091fc:	4629      	mov	r1, r5
 80091fe:	4638      	mov	r0, r7
 8009200:	47c0      	blx	r8
 8009202:	4306      	orrs	r6, r0
 8009204:	3568      	adds	r5, #104	; 0x68
 8009206:	e7e9      	b.n	80091dc <_fwalk_sglue+0x10>

08009208 <siprintf>:
 8009208:	b40e      	push	{r1, r2, r3}
 800920a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800920e:	b500      	push	{lr}
 8009210:	b09c      	sub	sp, #112	; 0x70
 8009212:	ab1d      	add	r3, sp, #116	; 0x74
 8009214:	9002      	str	r0, [sp, #8]
 8009216:	9006      	str	r0, [sp, #24]
 8009218:	9107      	str	r1, [sp, #28]
 800921a:	9104      	str	r1, [sp, #16]
 800921c:	4808      	ldr	r0, [pc, #32]	; (8009240 <siprintf+0x38>)
 800921e:	4909      	ldr	r1, [pc, #36]	; (8009244 <siprintf+0x3c>)
 8009220:	f853 2b04 	ldr.w	r2, [r3], #4
 8009224:	9105      	str	r1, [sp, #20]
 8009226:	6800      	ldr	r0, [r0, #0]
 8009228:	a902      	add	r1, sp, #8
 800922a:	9301      	str	r3, [sp, #4]
 800922c:	f002 fc00 	bl	800ba30 <_svfiprintf_r>
 8009230:	2200      	movs	r2, #0
 8009232:	9b02      	ldr	r3, [sp, #8]
 8009234:	701a      	strb	r2, [r3, #0]
 8009236:	b01c      	add	sp, #112	; 0x70
 8009238:	f85d eb04 	ldr.w	lr, [sp], #4
 800923c:	b003      	add	sp, #12
 800923e:	4770      	bx	lr
 8009240:	20000080 	.word	0x20000080
 8009244:	ffff0208 	.word	0xffff0208

08009248 <__sread>:
 8009248:	b510      	push	{r4, lr}
 800924a:	460c      	mov	r4, r1
 800924c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009250:	f000 f87c 	bl	800934c <_read_r>
 8009254:	2800      	cmp	r0, #0
 8009256:	bfab      	itete	ge
 8009258:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800925a:	89a3      	ldrhlt	r3, [r4, #12]
 800925c:	181b      	addge	r3, r3, r0
 800925e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009262:	bfac      	ite	ge
 8009264:	6563      	strge	r3, [r4, #84]	; 0x54
 8009266:	81a3      	strhlt	r3, [r4, #12]
 8009268:	bd10      	pop	{r4, pc}

0800926a <__swrite>:
 800926a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800926e:	461f      	mov	r7, r3
 8009270:	898b      	ldrh	r3, [r1, #12]
 8009272:	4605      	mov	r5, r0
 8009274:	05db      	lsls	r3, r3, #23
 8009276:	460c      	mov	r4, r1
 8009278:	4616      	mov	r6, r2
 800927a:	d505      	bpl.n	8009288 <__swrite+0x1e>
 800927c:	2302      	movs	r3, #2
 800927e:	2200      	movs	r2, #0
 8009280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009284:	f000 f850 	bl	8009328 <_lseek_r>
 8009288:	89a3      	ldrh	r3, [r4, #12]
 800928a:	4632      	mov	r2, r6
 800928c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009290:	81a3      	strh	r3, [r4, #12]
 8009292:	4628      	mov	r0, r5
 8009294:	463b      	mov	r3, r7
 8009296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800929a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800929e:	f000 b867 	b.w	8009370 <_write_r>

080092a2 <__sseek>:
 80092a2:	b510      	push	{r4, lr}
 80092a4:	460c      	mov	r4, r1
 80092a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092aa:	f000 f83d 	bl	8009328 <_lseek_r>
 80092ae:	1c43      	adds	r3, r0, #1
 80092b0:	89a3      	ldrh	r3, [r4, #12]
 80092b2:	bf15      	itete	ne
 80092b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80092b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092be:	81a3      	strheq	r3, [r4, #12]
 80092c0:	bf18      	it	ne
 80092c2:	81a3      	strhne	r3, [r4, #12]
 80092c4:	bd10      	pop	{r4, pc}

080092c6 <__sclose>:
 80092c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ca:	f000 b81d 	b.w	8009308 <_close_r>

080092ce <memcmp>:
 80092ce:	b510      	push	{r4, lr}
 80092d0:	3901      	subs	r1, #1
 80092d2:	4402      	add	r2, r0
 80092d4:	4290      	cmp	r0, r2
 80092d6:	d101      	bne.n	80092dc <memcmp+0xe>
 80092d8:	2000      	movs	r0, #0
 80092da:	e005      	b.n	80092e8 <memcmp+0x1a>
 80092dc:	7803      	ldrb	r3, [r0, #0]
 80092de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80092e2:	42a3      	cmp	r3, r4
 80092e4:	d001      	beq.n	80092ea <memcmp+0x1c>
 80092e6:	1b18      	subs	r0, r3, r4
 80092e8:	bd10      	pop	{r4, pc}
 80092ea:	3001      	adds	r0, #1
 80092ec:	e7f2      	b.n	80092d4 <memcmp+0x6>

080092ee <memset>:
 80092ee:	4603      	mov	r3, r0
 80092f0:	4402      	add	r2, r0
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d100      	bne.n	80092f8 <memset+0xa>
 80092f6:	4770      	bx	lr
 80092f8:	f803 1b01 	strb.w	r1, [r3], #1
 80092fc:	e7f9      	b.n	80092f2 <memset+0x4>
	...

08009300 <_localeconv_r>:
 8009300:	4800      	ldr	r0, [pc, #0]	; (8009304 <_localeconv_r+0x4>)
 8009302:	4770      	bx	lr
 8009304:	20000174 	.word	0x20000174

08009308 <_close_r>:
 8009308:	b538      	push	{r3, r4, r5, lr}
 800930a:	2300      	movs	r3, #0
 800930c:	4d05      	ldr	r5, [pc, #20]	; (8009324 <_close_r+0x1c>)
 800930e:	4604      	mov	r4, r0
 8009310:	4608      	mov	r0, r1
 8009312:	602b      	str	r3, [r5, #0]
 8009314:	f7f8 fef8 	bl	8002108 <_close>
 8009318:	1c43      	adds	r3, r0, #1
 800931a:	d102      	bne.n	8009322 <_close_r+0x1a>
 800931c:	682b      	ldr	r3, [r5, #0]
 800931e:	b103      	cbz	r3, 8009322 <_close_r+0x1a>
 8009320:	6023      	str	r3, [r4, #0]
 8009322:	bd38      	pop	{r3, r4, r5, pc}
 8009324:	200009d0 	.word	0x200009d0

08009328 <_lseek_r>:
 8009328:	b538      	push	{r3, r4, r5, lr}
 800932a:	4604      	mov	r4, r0
 800932c:	4608      	mov	r0, r1
 800932e:	4611      	mov	r1, r2
 8009330:	2200      	movs	r2, #0
 8009332:	4d05      	ldr	r5, [pc, #20]	; (8009348 <_lseek_r+0x20>)
 8009334:	602a      	str	r2, [r5, #0]
 8009336:	461a      	mov	r2, r3
 8009338:	f7f8 ff0a 	bl	8002150 <_lseek>
 800933c:	1c43      	adds	r3, r0, #1
 800933e:	d102      	bne.n	8009346 <_lseek_r+0x1e>
 8009340:	682b      	ldr	r3, [r5, #0]
 8009342:	b103      	cbz	r3, 8009346 <_lseek_r+0x1e>
 8009344:	6023      	str	r3, [r4, #0]
 8009346:	bd38      	pop	{r3, r4, r5, pc}
 8009348:	200009d0 	.word	0x200009d0

0800934c <_read_r>:
 800934c:	b538      	push	{r3, r4, r5, lr}
 800934e:	4604      	mov	r4, r0
 8009350:	4608      	mov	r0, r1
 8009352:	4611      	mov	r1, r2
 8009354:	2200      	movs	r2, #0
 8009356:	4d05      	ldr	r5, [pc, #20]	; (800936c <_read_r+0x20>)
 8009358:	602a      	str	r2, [r5, #0]
 800935a:	461a      	mov	r2, r3
 800935c:	f7f8 fe9b 	bl	8002096 <_read>
 8009360:	1c43      	adds	r3, r0, #1
 8009362:	d102      	bne.n	800936a <_read_r+0x1e>
 8009364:	682b      	ldr	r3, [r5, #0]
 8009366:	b103      	cbz	r3, 800936a <_read_r+0x1e>
 8009368:	6023      	str	r3, [r4, #0]
 800936a:	bd38      	pop	{r3, r4, r5, pc}
 800936c:	200009d0 	.word	0x200009d0

08009370 <_write_r>:
 8009370:	b538      	push	{r3, r4, r5, lr}
 8009372:	4604      	mov	r4, r0
 8009374:	4608      	mov	r0, r1
 8009376:	4611      	mov	r1, r2
 8009378:	2200      	movs	r2, #0
 800937a:	4d05      	ldr	r5, [pc, #20]	; (8009390 <_write_r+0x20>)
 800937c:	602a      	str	r2, [r5, #0]
 800937e:	461a      	mov	r2, r3
 8009380:	f7f8 fea6 	bl	80020d0 <_write>
 8009384:	1c43      	adds	r3, r0, #1
 8009386:	d102      	bne.n	800938e <_write_r+0x1e>
 8009388:	682b      	ldr	r3, [r5, #0]
 800938a:	b103      	cbz	r3, 800938e <_write_r+0x1e>
 800938c:	6023      	str	r3, [r4, #0]
 800938e:	bd38      	pop	{r3, r4, r5, pc}
 8009390:	200009d0 	.word	0x200009d0

08009394 <__errno>:
 8009394:	4b01      	ldr	r3, [pc, #4]	; (800939c <__errno+0x8>)
 8009396:	6818      	ldr	r0, [r3, #0]
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	20000080 	.word	0x20000080

080093a0 <__libc_init_array>:
 80093a0:	b570      	push	{r4, r5, r6, lr}
 80093a2:	2600      	movs	r6, #0
 80093a4:	4d0c      	ldr	r5, [pc, #48]	; (80093d8 <__libc_init_array+0x38>)
 80093a6:	4c0d      	ldr	r4, [pc, #52]	; (80093dc <__libc_init_array+0x3c>)
 80093a8:	1b64      	subs	r4, r4, r5
 80093aa:	10a4      	asrs	r4, r4, #2
 80093ac:	42a6      	cmp	r6, r4
 80093ae:	d109      	bne.n	80093c4 <__libc_init_array+0x24>
 80093b0:	f004 facc 	bl	800d94c <_init>
 80093b4:	2600      	movs	r6, #0
 80093b6:	4d0a      	ldr	r5, [pc, #40]	; (80093e0 <__libc_init_array+0x40>)
 80093b8:	4c0a      	ldr	r4, [pc, #40]	; (80093e4 <__libc_init_array+0x44>)
 80093ba:	1b64      	subs	r4, r4, r5
 80093bc:	10a4      	asrs	r4, r4, #2
 80093be:	42a6      	cmp	r6, r4
 80093c0:	d105      	bne.n	80093ce <__libc_init_array+0x2e>
 80093c2:	bd70      	pop	{r4, r5, r6, pc}
 80093c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80093c8:	4798      	blx	r3
 80093ca:	3601      	adds	r6, #1
 80093cc:	e7ee      	b.n	80093ac <__libc_init_array+0xc>
 80093ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80093d2:	4798      	blx	r3
 80093d4:	3601      	adds	r6, #1
 80093d6:	e7f2      	b.n	80093be <__libc_init_array+0x1e>
 80093d8:	0800fdb8 	.word	0x0800fdb8
 80093dc:	0800fdb8 	.word	0x0800fdb8
 80093e0:	0800fdb8 	.word	0x0800fdb8
 80093e4:	0800fdbc 	.word	0x0800fdbc

080093e8 <__retarget_lock_init_recursive>:
 80093e8:	4770      	bx	lr

080093ea <__retarget_lock_acquire_recursive>:
 80093ea:	4770      	bx	lr

080093ec <__retarget_lock_release_recursive>:
 80093ec:	4770      	bx	lr

080093ee <memchr>:
 80093ee:	4603      	mov	r3, r0
 80093f0:	b510      	push	{r4, lr}
 80093f2:	b2c9      	uxtb	r1, r1
 80093f4:	4402      	add	r2, r0
 80093f6:	4293      	cmp	r3, r2
 80093f8:	4618      	mov	r0, r3
 80093fa:	d101      	bne.n	8009400 <memchr+0x12>
 80093fc:	2000      	movs	r0, #0
 80093fe:	e003      	b.n	8009408 <memchr+0x1a>
 8009400:	7804      	ldrb	r4, [r0, #0]
 8009402:	3301      	adds	r3, #1
 8009404:	428c      	cmp	r4, r1
 8009406:	d1f6      	bne.n	80093f6 <memchr+0x8>
 8009408:	bd10      	pop	{r4, pc}

0800940a <memcpy>:
 800940a:	440a      	add	r2, r1
 800940c:	4291      	cmp	r1, r2
 800940e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009412:	d100      	bne.n	8009416 <memcpy+0xc>
 8009414:	4770      	bx	lr
 8009416:	b510      	push	{r4, lr}
 8009418:	f811 4b01 	ldrb.w	r4, [r1], #1
 800941c:	4291      	cmp	r1, r2
 800941e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009422:	d1f9      	bne.n	8009418 <memcpy+0xe>
 8009424:	bd10      	pop	{r4, pc}
	...

08009428 <nanf>:
 8009428:	4800      	ldr	r0, [pc, #0]	; (800942c <nanf+0x4>)
 800942a:	4770      	bx	lr
 800942c:	7fc00000 	.word	0x7fc00000

08009430 <quorem>:
 8009430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009434:	6903      	ldr	r3, [r0, #16]
 8009436:	690c      	ldr	r4, [r1, #16]
 8009438:	4607      	mov	r7, r0
 800943a:	42a3      	cmp	r3, r4
 800943c:	db7f      	blt.n	800953e <quorem+0x10e>
 800943e:	3c01      	subs	r4, #1
 8009440:	f100 0514 	add.w	r5, r0, #20
 8009444:	f101 0814 	add.w	r8, r1, #20
 8009448:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800944c:	9301      	str	r3, [sp, #4]
 800944e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009452:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009456:	3301      	adds	r3, #1
 8009458:	429a      	cmp	r2, r3
 800945a:	fbb2 f6f3 	udiv	r6, r2, r3
 800945e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009462:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009466:	d331      	bcc.n	80094cc <quorem+0x9c>
 8009468:	f04f 0e00 	mov.w	lr, #0
 800946c:	4640      	mov	r0, r8
 800946e:	46ac      	mov	ip, r5
 8009470:	46f2      	mov	sl, lr
 8009472:	f850 2b04 	ldr.w	r2, [r0], #4
 8009476:	b293      	uxth	r3, r2
 8009478:	fb06 e303 	mla	r3, r6, r3, lr
 800947c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009480:	0c1a      	lsrs	r2, r3, #16
 8009482:	b29b      	uxth	r3, r3
 8009484:	fb06 220e 	mla	r2, r6, lr, r2
 8009488:	ebaa 0303 	sub.w	r3, sl, r3
 800948c:	f8dc a000 	ldr.w	sl, [ip]
 8009490:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009494:	fa1f fa8a 	uxth.w	sl, sl
 8009498:	4453      	add	r3, sl
 800949a:	f8dc a000 	ldr.w	sl, [ip]
 800949e:	b292      	uxth	r2, r2
 80094a0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80094a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094ae:	4581      	cmp	r9, r0
 80094b0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80094b4:	f84c 3b04 	str.w	r3, [ip], #4
 80094b8:	d2db      	bcs.n	8009472 <quorem+0x42>
 80094ba:	f855 300b 	ldr.w	r3, [r5, fp]
 80094be:	b92b      	cbnz	r3, 80094cc <quorem+0x9c>
 80094c0:	9b01      	ldr	r3, [sp, #4]
 80094c2:	3b04      	subs	r3, #4
 80094c4:	429d      	cmp	r5, r3
 80094c6:	461a      	mov	r2, r3
 80094c8:	d32d      	bcc.n	8009526 <quorem+0xf6>
 80094ca:	613c      	str	r4, [r7, #16]
 80094cc:	4638      	mov	r0, r7
 80094ce:	f001 f9df 	bl	800a890 <__mcmp>
 80094d2:	2800      	cmp	r0, #0
 80094d4:	db23      	blt.n	800951e <quorem+0xee>
 80094d6:	4629      	mov	r1, r5
 80094d8:	2000      	movs	r0, #0
 80094da:	3601      	adds	r6, #1
 80094dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80094e0:	f8d1 c000 	ldr.w	ip, [r1]
 80094e4:	b293      	uxth	r3, r2
 80094e6:	1ac3      	subs	r3, r0, r3
 80094e8:	0c12      	lsrs	r2, r2, #16
 80094ea:	fa1f f08c 	uxth.w	r0, ip
 80094ee:	4403      	add	r3, r0
 80094f0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80094f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094fe:	45c1      	cmp	r9, r8
 8009500:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009504:	f841 3b04 	str.w	r3, [r1], #4
 8009508:	d2e8      	bcs.n	80094dc <quorem+0xac>
 800950a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800950e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009512:	b922      	cbnz	r2, 800951e <quorem+0xee>
 8009514:	3b04      	subs	r3, #4
 8009516:	429d      	cmp	r5, r3
 8009518:	461a      	mov	r2, r3
 800951a:	d30a      	bcc.n	8009532 <quorem+0x102>
 800951c:	613c      	str	r4, [r7, #16]
 800951e:	4630      	mov	r0, r6
 8009520:	b003      	add	sp, #12
 8009522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009526:	6812      	ldr	r2, [r2, #0]
 8009528:	3b04      	subs	r3, #4
 800952a:	2a00      	cmp	r2, #0
 800952c:	d1cd      	bne.n	80094ca <quorem+0x9a>
 800952e:	3c01      	subs	r4, #1
 8009530:	e7c8      	b.n	80094c4 <quorem+0x94>
 8009532:	6812      	ldr	r2, [r2, #0]
 8009534:	3b04      	subs	r3, #4
 8009536:	2a00      	cmp	r2, #0
 8009538:	d1f0      	bne.n	800951c <quorem+0xec>
 800953a:	3c01      	subs	r4, #1
 800953c:	e7eb      	b.n	8009516 <quorem+0xe6>
 800953e:	2000      	movs	r0, #0
 8009540:	e7ee      	b.n	8009520 <quorem+0xf0>
 8009542:	0000      	movs	r0, r0
 8009544:	0000      	movs	r0, r0
	...

08009548 <_dtoa_r>:
 8009548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800954c:	4616      	mov	r6, r2
 800954e:	461f      	mov	r7, r3
 8009550:	69c4      	ldr	r4, [r0, #28]
 8009552:	b099      	sub	sp, #100	; 0x64
 8009554:	4605      	mov	r5, r0
 8009556:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800955a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800955e:	b974      	cbnz	r4, 800957e <_dtoa_r+0x36>
 8009560:	2010      	movs	r0, #16
 8009562:	f000 fe1d 	bl	800a1a0 <malloc>
 8009566:	4602      	mov	r2, r0
 8009568:	61e8      	str	r0, [r5, #28]
 800956a:	b920      	cbnz	r0, 8009576 <_dtoa_r+0x2e>
 800956c:	21ef      	movs	r1, #239	; 0xef
 800956e:	4bac      	ldr	r3, [pc, #688]	; (8009820 <_dtoa_r+0x2d8>)
 8009570:	48ac      	ldr	r0, [pc, #688]	; (8009824 <_dtoa_r+0x2dc>)
 8009572:	f002 fc47 	bl	800be04 <__assert_func>
 8009576:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800957a:	6004      	str	r4, [r0, #0]
 800957c:	60c4      	str	r4, [r0, #12]
 800957e:	69eb      	ldr	r3, [r5, #28]
 8009580:	6819      	ldr	r1, [r3, #0]
 8009582:	b151      	cbz	r1, 800959a <_dtoa_r+0x52>
 8009584:	685a      	ldr	r2, [r3, #4]
 8009586:	2301      	movs	r3, #1
 8009588:	4093      	lsls	r3, r2
 800958a:	604a      	str	r2, [r1, #4]
 800958c:	608b      	str	r3, [r1, #8]
 800958e:	4628      	mov	r0, r5
 8009590:	f000 fefa 	bl	800a388 <_Bfree>
 8009594:	2200      	movs	r2, #0
 8009596:	69eb      	ldr	r3, [r5, #28]
 8009598:	601a      	str	r2, [r3, #0]
 800959a:	1e3b      	subs	r3, r7, #0
 800959c:	bfaf      	iteee	ge
 800959e:	2300      	movge	r3, #0
 80095a0:	2201      	movlt	r2, #1
 80095a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80095a6:	9305      	strlt	r3, [sp, #20]
 80095a8:	bfa8      	it	ge
 80095aa:	f8c8 3000 	strge.w	r3, [r8]
 80095ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80095b2:	4b9d      	ldr	r3, [pc, #628]	; (8009828 <_dtoa_r+0x2e0>)
 80095b4:	bfb8      	it	lt
 80095b6:	f8c8 2000 	strlt.w	r2, [r8]
 80095ba:	ea33 0309 	bics.w	r3, r3, r9
 80095be:	d119      	bne.n	80095f4 <_dtoa_r+0xac>
 80095c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80095c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80095c6:	6013      	str	r3, [r2, #0]
 80095c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095cc:	4333      	orrs	r3, r6
 80095ce:	f000 8589 	beq.w	800a0e4 <_dtoa_r+0xb9c>
 80095d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80095d4:	b953      	cbnz	r3, 80095ec <_dtoa_r+0xa4>
 80095d6:	4b95      	ldr	r3, [pc, #596]	; (800982c <_dtoa_r+0x2e4>)
 80095d8:	e023      	b.n	8009622 <_dtoa_r+0xda>
 80095da:	4b95      	ldr	r3, [pc, #596]	; (8009830 <_dtoa_r+0x2e8>)
 80095dc:	9303      	str	r3, [sp, #12]
 80095de:	3308      	adds	r3, #8
 80095e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80095e2:	6013      	str	r3, [r2, #0]
 80095e4:	9803      	ldr	r0, [sp, #12]
 80095e6:	b019      	add	sp, #100	; 0x64
 80095e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ec:	4b8f      	ldr	r3, [pc, #572]	; (800982c <_dtoa_r+0x2e4>)
 80095ee:	9303      	str	r3, [sp, #12]
 80095f0:	3303      	adds	r3, #3
 80095f2:	e7f5      	b.n	80095e0 <_dtoa_r+0x98>
 80095f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80095f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80095fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009600:	2200      	movs	r2, #0
 8009602:	2300      	movs	r3, #0
 8009604:	f7f7 f9d0 	bl	80009a8 <__aeabi_dcmpeq>
 8009608:	4680      	mov	r8, r0
 800960a:	b160      	cbz	r0, 8009626 <_dtoa_r+0xde>
 800960c:	2301      	movs	r3, #1
 800960e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009610:	6013      	str	r3, [r2, #0]
 8009612:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009614:	2b00      	cmp	r3, #0
 8009616:	f000 8562 	beq.w	800a0de <_dtoa_r+0xb96>
 800961a:	4b86      	ldr	r3, [pc, #536]	; (8009834 <_dtoa_r+0x2ec>)
 800961c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800961e:	6013      	str	r3, [r2, #0]
 8009620:	3b01      	subs	r3, #1
 8009622:	9303      	str	r3, [sp, #12]
 8009624:	e7de      	b.n	80095e4 <_dtoa_r+0x9c>
 8009626:	ab16      	add	r3, sp, #88	; 0x58
 8009628:	9301      	str	r3, [sp, #4]
 800962a:	ab17      	add	r3, sp, #92	; 0x5c
 800962c:	9300      	str	r3, [sp, #0]
 800962e:	4628      	mov	r0, r5
 8009630:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009634:	f001 fa3c 	bl	800aab0 <__d2b>
 8009638:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800963c:	4682      	mov	sl, r0
 800963e:	2c00      	cmp	r4, #0
 8009640:	d07e      	beq.n	8009740 <_dtoa_r+0x1f8>
 8009642:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009646:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009648:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800964c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009650:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009654:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009658:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800965c:	4619      	mov	r1, r3
 800965e:	2200      	movs	r2, #0
 8009660:	4b75      	ldr	r3, [pc, #468]	; (8009838 <_dtoa_r+0x2f0>)
 8009662:	f7f6 fd81 	bl	8000168 <__aeabi_dsub>
 8009666:	a368      	add	r3, pc, #416	; (adr r3, 8009808 <_dtoa_r+0x2c0>)
 8009668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966c:	f7f6 ff34 	bl	80004d8 <__aeabi_dmul>
 8009670:	a367      	add	r3, pc, #412	; (adr r3, 8009810 <_dtoa_r+0x2c8>)
 8009672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009676:	f7f6 fd79 	bl	800016c <__adddf3>
 800967a:	4606      	mov	r6, r0
 800967c:	4620      	mov	r0, r4
 800967e:	460f      	mov	r7, r1
 8009680:	f7f6 fec0 	bl	8000404 <__aeabi_i2d>
 8009684:	a364      	add	r3, pc, #400	; (adr r3, 8009818 <_dtoa_r+0x2d0>)
 8009686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968a:	f7f6 ff25 	bl	80004d8 <__aeabi_dmul>
 800968e:	4602      	mov	r2, r0
 8009690:	460b      	mov	r3, r1
 8009692:	4630      	mov	r0, r6
 8009694:	4639      	mov	r1, r7
 8009696:	f7f6 fd69 	bl	800016c <__adddf3>
 800969a:	4606      	mov	r6, r0
 800969c:	460f      	mov	r7, r1
 800969e:	f7f7 f9cb 	bl	8000a38 <__aeabi_d2iz>
 80096a2:	2200      	movs	r2, #0
 80096a4:	4683      	mov	fp, r0
 80096a6:	2300      	movs	r3, #0
 80096a8:	4630      	mov	r0, r6
 80096aa:	4639      	mov	r1, r7
 80096ac:	f7f7 f986 	bl	80009bc <__aeabi_dcmplt>
 80096b0:	b148      	cbz	r0, 80096c6 <_dtoa_r+0x17e>
 80096b2:	4658      	mov	r0, fp
 80096b4:	f7f6 fea6 	bl	8000404 <__aeabi_i2d>
 80096b8:	4632      	mov	r2, r6
 80096ba:	463b      	mov	r3, r7
 80096bc:	f7f7 f974 	bl	80009a8 <__aeabi_dcmpeq>
 80096c0:	b908      	cbnz	r0, 80096c6 <_dtoa_r+0x17e>
 80096c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80096c6:	f1bb 0f16 	cmp.w	fp, #22
 80096ca:	d857      	bhi.n	800977c <_dtoa_r+0x234>
 80096cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80096d0:	4b5a      	ldr	r3, [pc, #360]	; (800983c <_dtoa_r+0x2f4>)
 80096d2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80096d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096da:	f7f7 f96f 	bl	80009bc <__aeabi_dcmplt>
 80096de:	2800      	cmp	r0, #0
 80096e0:	d04e      	beq.n	8009780 <_dtoa_r+0x238>
 80096e2:	2300      	movs	r3, #0
 80096e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80096e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80096ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80096ec:	1b1b      	subs	r3, r3, r4
 80096ee:	1e5a      	subs	r2, r3, #1
 80096f0:	bf46      	itte	mi
 80096f2:	f1c3 0901 	rsbmi	r9, r3, #1
 80096f6:	2300      	movmi	r3, #0
 80096f8:	f04f 0900 	movpl.w	r9, #0
 80096fc:	9209      	str	r2, [sp, #36]	; 0x24
 80096fe:	bf48      	it	mi
 8009700:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009702:	f1bb 0f00 	cmp.w	fp, #0
 8009706:	db3d      	blt.n	8009784 <_dtoa_r+0x23c>
 8009708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800970a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800970e:	445b      	add	r3, fp
 8009710:	9309      	str	r3, [sp, #36]	; 0x24
 8009712:	2300      	movs	r3, #0
 8009714:	930a      	str	r3, [sp, #40]	; 0x28
 8009716:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009718:	2b09      	cmp	r3, #9
 800971a:	d867      	bhi.n	80097ec <_dtoa_r+0x2a4>
 800971c:	2b05      	cmp	r3, #5
 800971e:	bfc4      	itt	gt
 8009720:	3b04      	subgt	r3, #4
 8009722:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009724:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009726:	bfc8      	it	gt
 8009728:	2400      	movgt	r4, #0
 800972a:	f1a3 0302 	sub.w	r3, r3, #2
 800972e:	bfd8      	it	le
 8009730:	2401      	movle	r4, #1
 8009732:	2b03      	cmp	r3, #3
 8009734:	f200 8086 	bhi.w	8009844 <_dtoa_r+0x2fc>
 8009738:	e8df f003 	tbb	[pc, r3]
 800973c:	5637392c 	.word	0x5637392c
 8009740:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009744:	441c      	add	r4, r3
 8009746:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800974a:	2b20      	cmp	r3, #32
 800974c:	bfc1      	itttt	gt
 800974e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009752:	fa09 f903 	lslgt.w	r9, r9, r3
 8009756:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800975a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800975e:	bfd6      	itet	le
 8009760:	f1c3 0320 	rsble	r3, r3, #32
 8009764:	ea49 0003 	orrgt.w	r0, r9, r3
 8009768:	fa06 f003 	lslle.w	r0, r6, r3
 800976c:	f7f6 fe3a 	bl	80003e4 <__aeabi_ui2d>
 8009770:	2201      	movs	r2, #1
 8009772:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009776:	3c01      	subs	r4, #1
 8009778:	9213      	str	r2, [sp, #76]	; 0x4c
 800977a:	e76f      	b.n	800965c <_dtoa_r+0x114>
 800977c:	2301      	movs	r3, #1
 800977e:	e7b3      	b.n	80096e8 <_dtoa_r+0x1a0>
 8009780:	900f      	str	r0, [sp, #60]	; 0x3c
 8009782:	e7b2      	b.n	80096ea <_dtoa_r+0x1a2>
 8009784:	f1cb 0300 	rsb	r3, fp, #0
 8009788:	930a      	str	r3, [sp, #40]	; 0x28
 800978a:	2300      	movs	r3, #0
 800978c:	eba9 090b 	sub.w	r9, r9, fp
 8009790:	930e      	str	r3, [sp, #56]	; 0x38
 8009792:	e7c0      	b.n	8009716 <_dtoa_r+0x1ce>
 8009794:	2300      	movs	r3, #0
 8009796:	930b      	str	r3, [sp, #44]	; 0x2c
 8009798:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800979a:	2b00      	cmp	r3, #0
 800979c:	dc55      	bgt.n	800984a <_dtoa_r+0x302>
 800979e:	2301      	movs	r3, #1
 80097a0:	461a      	mov	r2, r3
 80097a2:	9306      	str	r3, [sp, #24]
 80097a4:	9308      	str	r3, [sp, #32]
 80097a6:	9223      	str	r2, [sp, #140]	; 0x8c
 80097a8:	e00b      	b.n	80097c2 <_dtoa_r+0x27a>
 80097aa:	2301      	movs	r3, #1
 80097ac:	e7f3      	b.n	8009796 <_dtoa_r+0x24e>
 80097ae:	2300      	movs	r3, #0
 80097b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80097b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80097b4:	445b      	add	r3, fp
 80097b6:	9306      	str	r3, [sp, #24]
 80097b8:	3301      	adds	r3, #1
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	9308      	str	r3, [sp, #32]
 80097be:	bfb8      	it	lt
 80097c0:	2301      	movlt	r3, #1
 80097c2:	2100      	movs	r1, #0
 80097c4:	2204      	movs	r2, #4
 80097c6:	69e8      	ldr	r0, [r5, #28]
 80097c8:	f102 0614 	add.w	r6, r2, #20
 80097cc:	429e      	cmp	r6, r3
 80097ce:	d940      	bls.n	8009852 <_dtoa_r+0x30a>
 80097d0:	6041      	str	r1, [r0, #4]
 80097d2:	4628      	mov	r0, r5
 80097d4:	f000 fd98 	bl	800a308 <_Balloc>
 80097d8:	9003      	str	r0, [sp, #12]
 80097da:	2800      	cmp	r0, #0
 80097dc:	d13c      	bne.n	8009858 <_dtoa_r+0x310>
 80097de:	4602      	mov	r2, r0
 80097e0:	f240 11af 	movw	r1, #431	; 0x1af
 80097e4:	4b16      	ldr	r3, [pc, #88]	; (8009840 <_dtoa_r+0x2f8>)
 80097e6:	e6c3      	b.n	8009570 <_dtoa_r+0x28>
 80097e8:	2301      	movs	r3, #1
 80097ea:	e7e1      	b.n	80097b0 <_dtoa_r+0x268>
 80097ec:	2401      	movs	r4, #1
 80097ee:	2300      	movs	r3, #0
 80097f0:	940b      	str	r4, [sp, #44]	; 0x2c
 80097f2:	9322      	str	r3, [sp, #136]	; 0x88
 80097f4:	f04f 33ff 	mov.w	r3, #4294967295
 80097f8:	2200      	movs	r2, #0
 80097fa:	9306      	str	r3, [sp, #24]
 80097fc:	9308      	str	r3, [sp, #32]
 80097fe:	2312      	movs	r3, #18
 8009800:	e7d1      	b.n	80097a6 <_dtoa_r+0x25e>
 8009802:	bf00      	nop
 8009804:	f3af 8000 	nop.w
 8009808:	636f4361 	.word	0x636f4361
 800980c:	3fd287a7 	.word	0x3fd287a7
 8009810:	8b60c8b3 	.word	0x8b60c8b3
 8009814:	3fc68a28 	.word	0x3fc68a28
 8009818:	509f79fb 	.word	0x509f79fb
 800981c:	3fd34413 	.word	0x3fd34413
 8009820:	0800f9a4 	.word	0x0800f9a4
 8009824:	0800f9bb 	.word	0x0800f9bb
 8009828:	7ff00000 	.word	0x7ff00000
 800982c:	0800f9a0 	.word	0x0800f9a0
 8009830:	0800f997 	.word	0x0800f997
 8009834:	0800f96f 	.word	0x0800f96f
 8009838:	3ff80000 	.word	0x3ff80000
 800983c:	0800faa8 	.word	0x0800faa8
 8009840:	0800fa13 	.word	0x0800fa13
 8009844:	2301      	movs	r3, #1
 8009846:	930b      	str	r3, [sp, #44]	; 0x2c
 8009848:	e7d4      	b.n	80097f4 <_dtoa_r+0x2ac>
 800984a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800984c:	9306      	str	r3, [sp, #24]
 800984e:	9308      	str	r3, [sp, #32]
 8009850:	e7b7      	b.n	80097c2 <_dtoa_r+0x27a>
 8009852:	3101      	adds	r1, #1
 8009854:	0052      	lsls	r2, r2, #1
 8009856:	e7b7      	b.n	80097c8 <_dtoa_r+0x280>
 8009858:	69eb      	ldr	r3, [r5, #28]
 800985a:	9a03      	ldr	r2, [sp, #12]
 800985c:	601a      	str	r2, [r3, #0]
 800985e:	9b08      	ldr	r3, [sp, #32]
 8009860:	2b0e      	cmp	r3, #14
 8009862:	f200 80a8 	bhi.w	80099b6 <_dtoa_r+0x46e>
 8009866:	2c00      	cmp	r4, #0
 8009868:	f000 80a5 	beq.w	80099b6 <_dtoa_r+0x46e>
 800986c:	f1bb 0f00 	cmp.w	fp, #0
 8009870:	dd34      	ble.n	80098dc <_dtoa_r+0x394>
 8009872:	4b9a      	ldr	r3, [pc, #616]	; (8009adc <_dtoa_r+0x594>)
 8009874:	f00b 020f 	and.w	r2, fp, #15
 8009878:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800987c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009880:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009884:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009888:	ea4f 142b 	mov.w	r4, fp, asr #4
 800988c:	d016      	beq.n	80098bc <_dtoa_r+0x374>
 800988e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009892:	4b93      	ldr	r3, [pc, #588]	; (8009ae0 <_dtoa_r+0x598>)
 8009894:	2703      	movs	r7, #3
 8009896:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800989a:	f7f6 ff47 	bl	800072c <__aeabi_ddiv>
 800989e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098a2:	f004 040f 	and.w	r4, r4, #15
 80098a6:	4e8e      	ldr	r6, [pc, #568]	; (8009ae0 <_dtoa_r+0x598>)
 80098a8:	b954      	cbnz	r4, 80098c0 <_dtoa_r+0x378>
 80098aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80098ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098b2:	f7f6 ff3b 	bl	800072c <__aeabi_ddiv>
 80098b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098ba:	e029      	b.n	8009910 <_dtoa_r+0x3c8>
 80098bc:	2702      	movs	r7, #2
 80098be:	e7f2      	b.n	80098a6 <_dtoa_r+0x35e>
 80098c0:	07e1      	lsls	r1, r4, #31
 80098c2:	d508      	bpl.n	80098d6 <_dtoa_r+0x38e>
 80098c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80098c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80098cc:	f7f6 fe04 	bl	80004d8 <__aeabi_dmul>
 80098d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80098d4:	3701      	adds	r7, #1
 80098d6:	1064      	asrs	r4, r4, #1
 80098d8:	3608      	adds	r6, #8
 80098da:	e7e5      	b.n	80098a8 <_dtoa_r+0x360>
 80098dc:	f000 80a5 	beq.w	8009a2a <_dtoa_r+0x4e2>
 80098e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098e4:	f1cb 0400 	rsb	r4, fp, #0
 80098e8:	4b7c      	ldr	r3, [pc, #496]	; (8009adc <_dtoa_r+0x594>)
 80098ea:	f004 020f 	and.w	r2, r4, #15
 80098ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f6:	f7f6 fdef 	bl	80004d8 <__aeabi_dmul>
 80098fa:	2702      	movs	r7, #2
 80098fc:	2300      	movs	r3, #0
 80098fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009902:	4e77      	ldr	r6, [pc, #476]	; (8009ae0 <_dtoa_r+0x598>)
 8009904:	1124      	asrs	r4, r4, #4
 8009906:	2c00      	cmp	r4, #0
 8009908:	f040 8084 	bne.w	8009a14 <_dtoa_r+0x4cc>
 800990c:	2b00      	cmp	r3, #0
 800990e:	d1d2      	bne.n	80098b6 <_dtoa_r+0x36e>
 8009910:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009914:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009918:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800991a:	2b00      	cmp	r3, #0
 800991c:	f000 8087 	beq.w	8009a2e <_dtoa_r+0x4e6>
 8009920:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009924:	2200      	movs	r2, #0
 8009926:	4b6f      	ldr	r3, [pc, #444]	; (8009ae4 <_dtoa_r+0x59c>)
 8009928:	f7f7 f848 	bl	80009bc <__aeabi_dcmplt>
 800992c:	2800      	cmp	r0, #0
 800992e:	d07e      	beq.n	8009a2e <_dtoa_r+0x4e6>
 8009930:	9b08      	ldr	r3, [sp, #32]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d07b      	beq.n	8009a2e <_dtoa_r+0x4e6>
 8009936:	9b06      	ldr	r3, [sp, #24]
 8009938:	2b00      	cmp	r3, #0
 800993a:	dd38      	ble.n	80099ae <_dtoa_r+0x466>
 800993c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009940:	2200      	movs	r2, #0
 8009942:	4b69      	ldr	r3, [pc, #420]	; (8009ae8 <_dtoa_r+0x5a0>)
 8009944:	f7f6 fdc8 	bl	80004d8 <__aeabi_dmul>
 8009948:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800994c:	9c06      	ldr	r4, [sp, #24]
 800994e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8009952:	3701      	adds	r7, #1
 8009954:	4638      	mov	r0, r7
 8009956:	f7f6 fd55 	bl	8000404 <__aeabi_i2d>
 800995a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800995e:	f7f6 fdbb 	bl	80004d8 <__aeabi_dmul>
 8009962:	2200      	movs	r2, #0
 8009964:	4b61      	ldr	r3, [pc, #388]	; (8009aec <_dtoa_r+0x5a4>)
 8009966:	f7f6 fc01 	bl	800016c <__adddf3>
 800996a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800996e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009972:	9611      	str	r6, [sp, #68]	; 0x44
 8009974:	2c00      	cmp	r4, #0
 8009976:	d15d      	bne.n	8009a34 <_dtoa_r+0x4ec>
 8009978:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800997c:	2200      	movs	r2, #0
 800997e:	4b5c      	ldr	r3, [pc, #368]	; (8009af0 <_dtoa_r+0x5a8>)
 8009980:	f7f6 fbf2 	bl	8000168 <__aeabi_dsub>
 8009984:	4602      	mov	r2, r0
 8009986:	460b      	mov	r3, r1
 8009988:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800998c:	4633      	mov	r3, r6
 800998e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009990:	f7f7 f832 	bl	80009f8 <__aeabi_dcmpgt>
 8009994:	2800      	cmp	r0, #0
 8009996:	f040 8295 	bne.w	8009ec4 <_dtoa_r+0x97c>
 800999a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800999e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80099a0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80099a4:	f7f7 f80a 	bl	80009bc <__aeabi_dcmplt>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	f040 8289 	bne.w	8009ec0 <_dtoa_r+0x978>
 80099ae:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80099b2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80099b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f2c0 8151 	blt.w	8009c60 <_dtoa_r+0x718>
 80099be:	f1bb 0f0e 	cmp.w	fp, #14
 80099c2:	f300 814d 	bgt.w	8009c60 <_dtoa_r+0x718>
 80099c6:	4b45      	ldr	r3, [pc, #276]	; (8009adc <_dtoa_r+0x594>)
 80099c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80099cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80099d0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80099d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	f280 80da 	bge.w	8009b90 <_dtoa_r+0x648>
 80099dc:	9b08      	ldr	r3, [sp, #32]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f300 80d6 	bgt.w	8009b90 <_dtoa_r+0x648>
 80099e4:	f040 826b 	bne.w	8009ebe <_dtoa_r+0x976>
 80099e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099ec:	2200      	movs	r2, #0
 80099ee:	4b40      	ldr	r3, [pc, #256]	; (8009af0 <_dtoa_r+0x5a8>)
 80099f0:	f7f6 fd72 	bl	80004d8 <__aeabi_dmul>
 80099f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099f8:	f7f6 fff4 	bl	80009e4 <__aeabi_dcmpge>
 80099fc:	9c08      	ldr	r4, [sp, #32]
 80099fe:	4626      	mov	r6, r4
 8009a00:	2800      	cmp	r0, #0
 8009a02:	f040 8241 	bne.w	8009e88 <_dtoa_r+0x940>
 8009a06:	2331      	movs	r3, #49	; 0x31
 8009a08:	9f03      	ldr	r7, [sp, #12]
 8009a0a:	f10b 0b01 	add.w	fp, fp, #1
 8009a0e:	f807 3b01 	strb.w	r3, [r7], #1
 8009a12:	e23d      	b.n	8009e90 <_dtoa_r+0x948>
 8009a14:	07e2      	lsls	r2, r4, #31
 8009a16:	d505      	bpl.n	8009a24 <_dtoa_r+0x4dc>
 8009a18:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009a1c:	f7f6 fd5c 	bl	80004d8 <__aeabi_dmul>
 8009a20:	2301      	movs	r3, #1
 8009a22:	3701      	adds	r7, #1
 8009a24:	1064      	asrs	r4, r4, #1
 8009a26:	3608      	adds	r6, #8
 8009a28:	e76d      	b.n	8009906 <_dtoa_r+0x3be>
 8009a2a:	2702      	movs	r7, #2
 8009a2c:	e770      	b.n	8009910 <_dtoa_r+0x3c8>
 8009a2e:	46d8      	mov	r8, fp
 8009a30:	9c08      	ldr	r4, [sp, #32]
 8009a32:	e78f      	b.n	8009954 <_dtoa_r+0x40c>
 8009a34:	9903      	ldr	r1, [sp, #12]
 8009a36:	4b29      	ldr	r3, [pc, #164]	; (8009adc <_dtoa_r+0x594>)
 8009a38:	4421      	add	r1, r4
 8009a3a:	9112      	str	r1, [sp, #72]	; 0x48
 8009a3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a3e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a42:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009a46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a4a:	2900      	cmp	r1, #0
 8009a4c:	d054      	beq.n	8009af8 <_dtoa_r+0x5b0>
 8009a4e:	2000      	movs	r0, #0
 8009a50:	4928      	ldr	r1, [pc, #160]	; (8009af4 <_dtoa_r+0x5ac>)
 8009a52:	f7f6 fe6b 	bl	800072c <__aeabi_ddiv>
 8009a56:	463b      	mov	r3, r7
 8009a58:	4632      	mov	r2, r6
 8009a5a:	f7f6 fb85 	bl	8000168 <__aeabi_dsub>
 8009a5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009a62:	9f03      	ldr	r7, [sp, #12]
 8009a64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a68:	f7f6 ffe6 	bl	8000a38 <__aeabi_d2iz>
 8009a6c:	4604      	mov	r4, r0
 8009a6e:	f7f6 fcc9 	bl	8000404 <__aeabi_i2d>
 8009a72:	4602      	mov	r2, r0
 8009a74:	460b      	mov	r3, r1
 8009a76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a7a:	f7f6 fb75 	bl	8000168 <__aeabi_dsub>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	460b      	mov	r3, r1
 8009a82:	3430      	adds	r4, #48	; 0x30
 8009a84:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009a8c:	f807 4b01 	strb.w	r4, [r7], #1
 8009a90:	f7f6 ff94 	bl	80009bc <__aeabi_dcmplt>
 8009a94:	2800      	cmp	r0, #0
 8009a96:	d173      	bne.n	8009b80 <_dtoa_r+0x638>
 8009a98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	4911      	ldr	r1, [pc, #68]	; (8009ae4 <_dtoa_r+0x59c>)
 8009aa0:	f7f6 fb62 	bl	8000168 <__aeabi_dsub>
 8009aa4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009aa8:	f7f6 ff88 	bl	80009bc <__aeabi_dcmplt>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	f040 80b6 	bne.w	8009c1e <_dtoa_r+0x6d6>
 8009ab2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ab4:	429f      	cmp	r7, r3
 8009ab6:	f43f af7a 	beq.w	80099ae <_dtoa_r+0x466>
 8009aba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009abe:	2200      	movs	r2, #0
 8009ac0:	4b09      	ldr	r3, [pc, #36]	; (8009ae8 <_dtoa_r+0x5a0>)
 8009ac2:	f7f6 fd09 	bl	80004d8 <__aeabi_dmul>
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009acc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ad0:	4b05      	ldr	r3, [pc, #20]	; (8009ae8 <_dtoa_r+0x5a0>)
 8009ad2:	f7f6 fd01 	bl	80004d8 <__aeabi_dmul>
 8009ad6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ada:	e7c3      	b.n	8009a64 <_dtoa_r+0x51c>
 8009adc:	0800faa8 	.word	0x0800faa8
 8009ae0:	0800fa80 	.word	0x0800fa80
 8009ae4:	3ff00000 	.word	0x3ff00000
 8009ae8:	40240000 	.word	0x40240000
 8009aec:	401c0000 	.word	0x401c0000
 8009af0:	40140000 	.word	0x40140000
 8009af4:	3fe00000 	.word	0x3fe00000
 8009af8:	4630      	mov	r0, r6
 8009afa:	4639      	mov	r1, r7
 8009afc:	f7f6 fcec 	bl	80004d8 <__aeabi_dmul>
 8009b00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b02:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009b06:	9c03      	ldr	r4, [sp, #12]
 8009b08:	9314      	str	r3, [sp, #80]	; 0x50
 8009b0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b0e:	f7f6 ff93 	bl	8000a38 <__aeabi_d2iz>
 8009b12:	9015      	str	r0, [sp, #84]	; 0x54
 8009b14:	f7f6 fc76 	bl	8000404 <__aeabi_i2d>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b20:	f7f6 fb22 	bl	8000168 <__aeabi_dsub>
 8009b24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b26:	4606      	mov	r6, r0
 8009b28:	3330      	adds	r3, #48	; 0x30
 8009b2a:	f804 3b01 	strb.w	r3, [r4], #1
 8009b2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b30:	460f      	mov	r7, r1
 8009b32:	429c      	cmp	r4, r3
 8009b34:	f04f 0200 	mov.w	r2, #0
 8009b38:	d124      	bne.n	8009b84 <_dtoa_r+0x63c>
 8009b3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b3e:	4baf      	ldr	r3, [pc, #700]	; (8009dfc <_dtoa_r+0x8b4>)
 8009b40:	f7f6 fb14 	bl	800016c <__adddf3>
 8009b44:	4602      	mov	r2, r0
 8009b46:	460b      	mov	r3, r1
 8009b48:	4630      	mov	r0, r6
 8009b4a:	4639      	mov	r1, r7
 8009b4c:	f7f6 ff54 	bl	80009f8 <__aeabi_dcmpgt>
 8009b50:	2800      	cmp	r0, #0
 8009b52:	d163      	bne.n	8009c1c <_dtoa_r+0x6d4>
 8009b54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b58:	2000      	movs	r0, #0
 8009b5a:	49a8      	ldr	r1, [pc, #672]	; (8009dfc <_dtoa_r+0x8b4>)
 8009b5c:	f7f6 fb04 	bl	8000168 <__aeabi_dsub>
 8009b60:	4602      	mov	r2, r0
 8009b62:	460b      	mov	r3, r1
 8009b64:	4630      	mov	r0, r6
 8009b66:	4639      	mov	r1, r7
 8009b68:	f7f6 ff28 	bl	80009bc <__aeabi_dcmplt>
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	f43f af1e 	beq.w	80099ae <_dtoa_r+0x466>
 8009b72:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009b74:	1e7b      	subs	r3, r7, #1
 8009b76:	9314      	str	r3, [sp, #80]	; 0x50
 8009b78:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009b7c:	2b30      	cmp	r3, #48	; 0x30
 8009b7e:	d0f8      	beq.n	8009b72 <_dtoa_r+0x62a>
 8009b80:	46c3      	mov	fp, r8
 8009b82:	e03b      	b.n	8009bfc <_dtoa_r+0x6b4>
 8009b84:	4b9e      	ldr	r3, [pc, #632]	; (8009e00 <_dtoa_r+0x8b8>)
 8009b86:	f7f6 fca7 	bl	80004d8 <__aeabi_dmul>
 8009b8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b8e:	e7bc      	b.n	8009b0a <_dtoa_r+0x5c2>
 8009b90:	9f03      	ldr	r7, [sp, #12]
 8009b92:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009b96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b9a:	4640      	mov	r0, r8
 8009b9c:	4649      	mov	r1, r9
 8009b9e:	f7f6 fdc5 	bl	800072c <__aeabi_ddiv>
 8009ba2:	f7f6 ff49 	bl	8000a38 <__aeabi_d2iz>
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	f7f6 fc2c 	bl	8000404 <__aeabi_i2d>
 8009bac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bb0:	f7f6 fc92 	bl	80004d8 <__aeabi_dmul>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	4640      	mov	r0, r8
 8009bba:	4649      	mov	r1, r9
 8009bbc:	f7f6 fad4 	bl	8000168 <__aeabi_dsub>
 8009bc0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009bc4:	f807 6b01 	strb.w	r6, [r7], #1
 8009bc8:	9e03      	ldr	r6, [sp, #12]
 8009bca:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009bce:	1bbe      	subs	r6, r7, r6
 8009bd0:	45b4      	cmp	ip, r6
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	d136      	bne.n	8009c46 <_dtoa_r+0x6fe>
 8009bd8:	f7f6 fac8 	bl	800016c <__adddf3>
 8009bdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009be0:	4680      	mov	r8, r0
 8009be2:	4689      	mov	r9, r1
 8009be4:	f7f6 ff08 	bl	80009f8 <__aeabi_dcmpgt>
 8009be8:	bb58      	cbnz	r0, 8009c42 <_dtoa_r+0x6fa>
 8009bea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bee:	4640      	mov	r0, r8
 8009bf0:	4649      	mov	r1, r9
 8009bf2:	f7f6 fed9 	bl	80009a8 <__aeabi_dcmpeq>
 8009bf6:	b108      	cbz	r0, 8009bfc <_dtoa_r+0x6b4>
 8009bf8:	07e3      	lsls	r3, r4, #31
 8009bfa:	d422      	bmi.n	8009c42 <_dtoa_r+0x6fa>
 8009bfc:	4651      	mov	r1, sl
 8009bfe:	4628      	mov	r0, r5
 8009c00:	f000 fbc2 	bl	800a388 <_Bfree>
 8009c04:	2300      	movs	r3, #0
 8009c06:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009c08:	703b      	strb	r3, [r7, #0]
 8009c0a:	f10b 0301 	add.w	r3, fp, #1
 8009c0e:	6013      	str	r3, [r2, #0]
 8009c10:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f43f ace6 	beq.w	80095e4 <_dtoa_r+0x9c>
 8009c18:	601f      	str	r7, [r3, #0]
 8009c1a:	e4e3      	b.n	80095e4 <_dtoa_r+0x9c>
 8009c1c:	4627      	mov	r7, r4
 8009c1e:	463b      	mov	r3, r7
 8009c20:	461f      	mov	r7, r3
 8009c22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c26:	2a39      	cmp	r2, #57	; 0x39
 8009c28:	d107      	bne.n	8009c3a <_dtoa_r+0x6f2>
 8009c2a:	9a03      	ldr	r2, [sp, #12]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d1f7      	bne.n	8009c20 <_dtoa_r+0x6d8>
 8009c30:	2230      	movs	r2, #48	; 0x30
 8009c32:	9903      	ldr	r1, [sp, #12]
 8009c34:	f108 0801 	add.w	r8, r8, #1
 8009c38:	700a      	strb	r2, [r1, #0]
 8009c3a:	781a      	ldrb	r2, [r3, #0]
 8009c3c:	3201      	adds	r2, #1
 8009c3e:	701a      	strb	r2, [r3, #0]
 8009c40:	e79e      	b.n	8009b80 <_dtoa_r+0x638>
 8009c42:	46d8      	mov	r8, fp
 8009c44:	e7eb      	b.n	8009c1e <_dtoa_r+0x6d6>
 8009c46:	2200      	movs	r2, #0
 8009c48:	4b6d      	ldr	r3, [pc, #436]	; (8009e00 <_dtoa_r+0x8b8>)
 8009c4a:	f7f6 fc45 	bl	80004d8 <__aeabi_dmul>
 8009c4e:	2200      	movs	r2, #0
 8009c50:	2300      	movs	r3, #0
 8009c52:	4680      	mov	r8, r0
 8009c54:	4689      	mov	r9, r1
 8009c56:	f7f6 fea7 	bl	80009a8 <__aeabi_dcmpeq>
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	d09b      	beq.n	8009b96 <_dtoa_r+0x64e>
 8009c5e:	e7cd      	b.n	8009bfc <_dtoa_r+0x6b4>
 8009c60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c62:	2a00      	cmp	r2, #0
 8009c64:	f000 80c4 	beq.w	8009df0 <_dtoa_r+0x8a8>
 8009c68:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009c6a:	2a01      	cmp	r2, #1
 8009c6c:	f300 80a8 	bgt.w	8009dc0 <_dtoa_r+0x878>
 8009c70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009c72:	2a00      	cmp	r2, #0
 8009c74:	f000 80a0 	beq.w	8009db8 <_dtoa_r+0x870>
 8009c78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009c7c:	464f      	mov	r7, r9
 8009c7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009c80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c82:	2101      	movs	r1, #1
 8009c84:	441a      	add	r2, r3
 8009c86:	4628      	mov	r0, r5
 8009c88:	4499      	add	r9, r3
 8009c8a:	9209      	str	r2, [sp, #36]	; 0x24
 8009c8c:	f000 fc7c 	bl	800a588 <__i2b>
 8009c90:	4606      	mov	r6, r0
 8009c92:	b15f      	cbz	r7, 8009cac <_dtoa_r+0x764>
 8009c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	dd08      	ble.n	8009cac <_dtoa_r+0x764>
 8009c9a:	42bb      	cmp	r3, r7
 8009c9c:	bfa8      	it	ge
 8009c9e:	463b      	movge	r3, r7
 8009ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ca2:	eba9 0903 	sub.w	r9, r9, r3
 8009ca6:	1aff      	subs	r7, r7, r3
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	9309      	str	r3, [sp, #36]	; 0x24
 8009cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cae:	b1f3      	cbz	r3, 8009cee <_dtoa_r+0x7a6>
 8009cb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	f000 80a0 	beq.w	8009df8 <_dtoa_r+0x8b0>
 8009cb8:	2c00      	cmp	r4, #0
 8009cba:	dd10      	ble.n	8009cde <_dtoa_r+0x796>
 8009cbc:	4631      	mov	r1, r6
 8009cbe:	4622      	mov	r2, r4
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	f000 fd1f 	bl	800a704 <__pow5mult>
 8009cc6:	4652      	mov	r2, sl
 8009cc8:	4601      	mov	r1, r0
 8009cca:	4606      	mov	r6, r0
 8009ccc:	4628      	mov	r0, r5
 8009cce:	f000 fc71 	bl	800a5b4 <__multiply>
 8009cd2:	4680      	mov	r8, r0
 8009cd4:	4651      	mov	r1, sl
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	f000 fb56 	bl	800a388 <_Bfree>
 8009cdc:	46c2      	mov	sl, r8
 8009cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ce0:	1b1a      	subs	r2, r3, r4
 8009ce2:	d004      	beq.n	8009cee <_dtoa_r+0x7a6>
 8009ce4:	4651      	mov	r1, sl
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	f000 fd0c 	bl	800a704 <__pow5mult>
 8009cec:	4682      	mov	sl, r0
 8009cee:	2101      	movs	r1, #1
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	f000 fc49 	bl	800a588 <__i2b>
 8009cf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f340 8082 	ble.w	8009e04 <_dtoa_r+0x8bc>
 8009d00:	461a      	mov	r2, r3
 8009d02:	4601      	mov	r1, r0
 8009d04:	4628      	mov	r0, r5
 8009d06:	f000 fcfd 	bl	800a704 <__pow5mult>
 8009d0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	dd7b      	ble.n	8009e0a <_dtoa_r+0x8c2>
 8009d12:	f04f 0800 	mov.w	r8, #0
 8009d16:	6923      	ldr	r3, [r4, #16]
 8009d18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009d1c:	6918      	ldr	r0, [r3, #16]
 8009d1e:	f000 fbe5 	bl	800a4ec <__hi0bits>
 8009d22:	f1c0 0020 	rsb	r0, r0, #32
 8009d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d28:	4418      	add	r0, r3
 8009d2a:	f010 001f 	ands.w	r0, r0, #31
 8009d2e:	f000 8092 	beq.w	8009e56 <_dtoa_r+0x90e>
 8009d32:	f1c0 0320 	rsb	r3, r0, #32
 8009d36:	2b04      	cmp	r3, #4
 8009d38:	f340 8085 	ble.w	8009e46 <_dtoa_r+0x8fe>
 8009d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d3e:	f1c0 001c 	rsb	r0, r0, #28
 8009d42:	4403      	add	r3, r0
 8009d44:	4481      	add	r9, r0
 8009d46:	4407      	add	r7, r0
 8009d48:	9309      	str	r3, [sp, #36]	; 0x24
 8009d4a:	f1b9 0f00 	cmp.w	r9, #0
 8009d4e:	dd05      	ble.n	8009d5c <_dtoa_r+0x814>
 8009d50:	4651      	mov	r1, sl
 8009d52:	464a      	mov	r2, r9
 8009d54:	4628      	mov	r0, r5
 8009d56:	f000 fd2f 	bl	800a7b8 <__lshift>
 8009d5a:	4682      	mov	sl, r0
 8009d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	dd05      	ble.n	8009d6e <_dtoa_r+0x826>
 8009d62:	4621      	mov	r1, r4
 8009d64:	461a      	mov	r2, r3
 8009d66:	4628      	mov	r0, r5
 8009d68:	f000 fd26 	bl	800a7b8 <__lshift>
 8009d6c:	4604      	mov	r4, r0
 8009d6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d072      	beq.n	8009e5a <_dtoa_r+0x912>
 8009d74:	4621      	mov	r1, r4
 8009d76:	4650      	mov	r0, sl
 8009d78:	f000 fd8a 	bl	800a890 <__mcmp>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	da6c      	bge.n	8009e5a <_dtoa_r+0x912>
 8009d80:	2300      	movs	r3, #0
 8009d82:	4651      	mov	r1, sl
 8009d84:	220a      	movs	r2, #10
 8009d86:	4628      	mov	r0, r5
 8009d88:	f000 fb20 	bl	800a3cc <__multadd>
 8009d8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d8e:	4682      	mov	sl, r0
 8009d90:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	f000 81ac 	beq.w	800a0f2 <_dtoa_r+0xbaa>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	4631      	mov	r1, r6
 8009d9e:	220a      	movs	r2, #10
 8009da0:	4628      	mov	r0, r5
 8009da2:	f000 fb13 	bl	800a3cc <__multadd>
 8009da6:	9b06      	ldr	r3, [sp, #24]
 8009da8:	4606      	mov	r6, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f300 8093 	bgt.w	8009ed6 <_dtoa_r+0x98e>
 8009db0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009db2:	2b02      	cmp	r3, #2
 8009db4:	dc59      	bgt.n	8009e6a <_dtoa_r+0x922>
 8009db6:	e08e      	b.n	8009ed6 <_dtoa_r+0x98e>
 8009db8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009dba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009dbe:	e75d      	b.n	8009c7c <_dtoa_r+0x734>
 8009dc0:	9b08      	ldr	r3, [sp, #32]
 8009dc2:	1e5c      	subs	r4, r3, #1
 8009dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dc6:	42a3      	cmp	r3, r4
 8009dc8:	bfbf      	itttt	lt
 8009dca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009dcc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009dce:	1ae3      	sublt	r3, r4, r3
 8009dd0:	18d2      	addlt	r2, r2, r3
 8009dd2:	bfa8      	it	ge
 8009dd4:	1b1c      	subge	r4, r3, r4
 8009dd6:	9b08      	ldr	r3, [sp, #32]
 8009dd8:	bfbe      	ittt	lt
 8009dda:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009ddc:	920e      	strlt	r2, [sp, #56]	; 0x38
 8009dde:	2400      	movlt	r4, #0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	bfb5      	itete	lt
 8009de4:	eba9 0703 	sublt.w	r7, r9, r3
 8009de8:	464f      	movge	r7, r9
 8009dea:	2300      	movlt	r3, #0
 8009dec:	9b08      	ldrge	r3, [sp, #32]
 8009dee:	e747      	b.n	8009c80 <_dtoa_r+0x738>
 8009df0:	464f      	mov	r7, r9
 8009df2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009df4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009df6:	e74c      	b.n	8009c92 <_dtoa_r+0x74a>
 8009df8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009dfa:	e773      	b.n	8009ce4 <_dtoa_r+0x79c>
 8009dfc:	3fe00000 	.word	0x3fe00000
 8009e00:	40240000 	.word	0x40240000
 8009e04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	dc18      	bgt.n	8009e3c <_dtoa_r+0x8f4>
 8009e0a:	9b04      	ldr	r3, [sp, #16]
 8009e0c:	b9b3      	cbnz	r3, 8009e3c <_dtoa_r+0x8f4>
 8009e0e:	9b05      	ldr	r3, [sp, #20]
 8009e10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e14:	b993      	cbnz	r3, 8009e3c <_dtoa_r+0x8f4>
 8009e16:	9b05      	ldr	r3, [sp, #20]
 8009e18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e1c:	0d1b      	lsrs	r3, r3, #20
 8009e1e:	051b      	lsls	r3, r3, #20
 8009e20:	b17b      	cbz	r3, 8009e42 <_dtoa_r+0x8fa>
 8009e22:	f04f 0801 	mov.w	r8, #1
 8009e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e28:	f109 0901 	add.w	r9, r9, #1
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	f47f af6f 	bne.w	8009d16 <_dtoa_r+0x7ce>
 8009e38:	2001      	movs	r0, #1
 8009e3a:	e774      	b.n	8009d26 <_dtoa_r+0x7de>
 8009e3c:	f04f 0800 	mov.w	r8, #0
 8009e40:	e7f6      	b.n	8009e30 <_dtoa_r+0x8e8>
 8009e42:	4698      	mov	r8, r3
 8009e44:	e7f4      	b.n	8009e30 <_dtoa_r+0x8e8>
 8009e46:	d080      	beq.n	8009d4a <_dtoa_r+0x802>
 8009e48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e4a:	331c      	adds	r3, #28
 8009e4c:	441a      	add	r2, r3
 8009e4e:	4499      	add	r9, r3
 8009e50:	441f      	add	r7, r3
 8009e52:	9209      	str	r2, [sp, #36]	; 0x24
 8009e54:	e779      	b.n	8009d4a <_dtoa_r+0x802>
 8009e56:	4603      	mov	r3, r0
 8009e58:	e7f6      	b.n	8009e48 <_dtoa_r+0x900>
 8009e5a:	9b08      	ldr	r3, [sp, #32]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	dc34      	bgt.n	8009eca <_dtoa_r+0x982>
 8009e60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e62:	2b02      	cmp	r3, #2
 8009e64:	dd31      	ble.n	8009eca <_dtoa_r+0x982>
 8009e66:	9b08      	ldr	r3, [sp, #32]
 8009e68:	9306      	str	r3, [sp, #24]
 8009e6a:	9b06      	ldr	r3, [sp, #24]
 8009e6c:	b963      	cbnz	r3, 8009e88 <_dtoa_r+0x940>
 8009e6e:	4621      	mov	r1, r4
 8009e70:	2205      	movs	r2, #5
 8009e72:	4628      	mov	r0, r5
 8009e74:	f000 faaa 	bl	800a3cc <__multadd>
 8009e78:	4601      	mov	r1, r0
 8009e7a:	4604      	mov	r4, r0
 8009e7c:	4650      	mov	r0, sl
 8009e7e:	f000 fd07 	bl	800a890 <__mcmp>
 8009e82:	2800      	cmp	r0, #0
 8009e84:	f73f adbf 	bgt.w	8009a06 <_dtoa_r+0x4be>
 8009e88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009e8a:	9f03      	ldr	r7, [sp, #12]
 8009e8c:	ea6f 0b03 	mvn.w	fp, r3
 8009e90:	f04f 0800 	mov.w	r8, #0
 8009e94:	4621      	mov	r1, r4
 8009e96:	4628      	mov	r0, r5
 8009e98:	f000 fa76 	bl	800a388 <_Bfree>
 8009e9c:	2e00      	cmp	r6, #0
 8009e9e:	f43f aead 	beq.w	8009bfc <_dtoa_r+0x6b4>
 8009ea2:	f1b8 0f00 	cmp.w	r8, #0
 8009ea6:	d005      	beq.n	8009eb4 <_dtoa_r+0x96c>
 8009ea8:	45b0      	cmp	r8, r6
 8009eaa:	d003      	beq.n	8009eb4 <_dtoa_r+0x96c>
 8009eac:	4641      	mov	r1, r8
 8009eae:	4628      	mov	r0, r5
 8009eb0:	f000 fa6a 	bl	800a388 <_Bfree>
 8009eb4:	4631      	mov	r1, r6
 8009eb6:	4628      	mov	r0, r5
 8009eb8:	f000 fa66 	bl	800a388 <_Bfree>
 8009ebc:	e69e      	b.n	8009bfc <_dtoa_r+0x6b4>
 8009ebe:	2400      	movs	r4, #0
 8009ec0:	4626      	mov	r6, r4
 8009ec2:	e7e1      	b.n	8009e88 <_dtoa_r+0x940>
 8009ec4:	46c3      	mov	fp, r8
 8009ec6:	4626      	mov	r6, r4
 8009ec8:	e59d      	b.n	8009a06 <_dtoa_r+0x4be>
 8009eca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f000 80c8 	beq.w	800a062 <_dtoa_r+0xb1a>
 8009ed2:	9b08      	ldr	r3, [sp, #32]
 8009ed4:	9306      	str	r3, [sp, #24]
 8009ed6:	2f00      	cmp	r7, #0
 8009ed8:	dd05      	ble.n	8009ee6 <_dtoa_r+0x99e>
 8009eda:	4631      	mov	r1, r6
 8009edc:	463a      	mov	r2, r7
 8009ede:	4628      	mov	r0, r5
 8009ee0:	f000 fc6a 	bl	800a7b8 <__lshift>
 8009ee4:	4606      	mov	r6, r0
 8009ee6:	f1b8 0f00 	cmp.w	r8, #0
 8009eea:	d05b      	beq.n	8009fa4 <_dtoa_r+0xa5c>
 8009eec:	4628      	mov	r0, r5
 8009eee:	6871      	ldr	r1, [r6, #4]
 8009ef0:	f000 fa0a 	bl	800a308 <_Balloc>
 8009ef4:	4607      	mov	r7, r0
 8009ef6:	b928      	cbnz	r0, 8009f04 <_dtoa_r+0x9bc>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009efe:	4b81      	ldr	r3, [pc, #516]	; (800a104 <_dtoa_r+0xbbc>)
 8009f00:	f7ff bb36 	b.w	8009570 <_dtoa_r+0x28>
 8009f04:	6932      	ldr	r2, [r6, #16]
 8009f06:	f106 010c 	add.w	r1, r6, #12
 8009f0a:	3202      	adds	r2, #2
 8009f0c:	0092      	lsls	r2, r2, #2
 8009f0e:	300c      	adds	r0, #12
 8009f10:	f7ff fa7b 	bl	800940a <memcpy>
 8009f14:	2201      	movs	r2, #1
 8009f16:	4639      	mov	r1, r7
 8009f18:	4628      	mov	r0, r5
 8009f1a:	f000 fc4d 	bl	800a7b8 <__lshift>
 8009f1e:	46b0      	mov	r8, r6
 8009f20:	4606      	mov	r6, r0
 8009f22:	9b03      	ldr	r3, [sp, #12]
 8009f24:	9a03      	ldr	r2, [sp, #12]
 8009f26:	3301      	adds	r3, #1
 8009f28:	9308      	str	r3, [sp, #32]
 8009f2a:	9b06      	ldr	r3, [sp, #24]
 8009f2c:	4413      	add	r3, r2
 8009f2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f30:	9b04      	ldr	r3, [sp, #16]
 8009f32:	f003 0301 	and.w	r3, r3, #1
 8009f36:	930a      	str	r3, [sp, #40]	; 0x28
 8009f38:	9b08      	ldr	r3, [sp, #32]
 8009f3a:	4621      	mov	r1, r4
 8009f3c:	3b01      	subs	r3, #1
 8009f3e:	4650      	mov	r0, sl
 8009f40:	9304      	str	r3, [sp, #16]
 8009f42:	f7ff fa75 	bl	8009430 <quorem>
 8009f46:	4641      	mov	r1, r8
 8009f48:	9006      	str	r0, [sp, #24]
 8009f4a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009f4e:	4650      	mov	r0, sl
 8009f50:	f000 fc9e 	bl	800a890 <__mcmp>
 8009f54:	4632      	mov	r2, r6
 8009f56:	9009      	str	r0, [sp, #36]	; 0x24
 8009f58:	4621      	mov	r1, r4
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	f000 fcb4 	bl	800a8c8 <__mdiff>
 8009f60:	68c2      	ldr	r2, [r0, #12]
 8009f62:	4607      	mov	r7, r0
 8009f64:	bb02      	cbnz	r2, 8009fa8 <_dtoa_r+0xa60>
 8009f66:	4601      	mov	r1, r0
 8009f68:	4650      	mov	r0, sl
 8009f6a:	f000 fc91 	bl	800a890 <__mcmp>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	4639      	mov	r1, r7
 8009f72:	4628      	mov	r0, r5
 8009f74:	920c      	str	r2, [sp, #48]	; 0x30
 8009f76:	f000 fa07 	bl	800a388 <_Bfree>
 8009f7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f7e:	9f08      	ldr	r7, [sp, #32]
 8009f80:	ea43 0102 	orr.w	r1, r3, r2
 8009f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f86:	4319      	orrs	r1, r3
 8009f88:	d110      	bne.n	8009fac <_dtoa_r+0xa64>
 8009f8a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009f8e:	d029      	beq.n	8009fe4 <_dtoa_r+0xa9c>
 8009f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	dd02      	ble.n	8009f9c <_dtoa_r+0xa54>
 8009f96:	9b06      	ldr	r3, [sp, #24]
 8009f98:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009f9c:	9b04      	ldr	r3, [sp, #16]
 8009f9e:	f883 9000 	strb.w	r9, [r3]
 8009fa2:	e777      	b.n	8009e94 <_dtoa_r+0x94c>
 8009fa4:	4630      	mov	r0, r6
 8009fa6:	e7ba      	b.n	8009f1e <_dtoa_r+0x9d6>
 8009fa8:	2201      	movs	r2, #1
 8009faa:	e7e1      	b.n	8009f70 <_dtoa_r+0xa28>
 8009fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	db04      	blt.n	8009fbc <_dtoa_r+0xa74>
 8009fb2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009fb4:	430b      	orrs	r3, r1
 8009fb6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009fb8:	430b      	orrs	r3, r1
 8009fba:	d120      	bne.n	8009ffe <_dtoa_r+0xab6>
 8009fbc:	2a00      	cmp	r2, #0
 8009fbe:	dded      	ble.n	8009f9c <_dtoa_r+0xa54>
 8009fc0:	4651      	mov	r1, sl
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	f000 fbf7 	bl	800a7b8 <__lshift>
 8009fca:	4621      	mov	r1, r4
 8009fcc:	4682      	mov	sl, r0
 8009fce:	f000 fc5f 	bl	800a890 <__mcmp>
 8009fd2:	2800      	cmp	r0, #0
 8009fd4:	dc03      	bgt.n	8009fde <_dtoa_r+0xa96>
 8009fd6:	d1e1      	bne.n	8009f9c <_dtoa_r+0xa54>
 8009fd8:	f019 0f01 	tst.w	r9, #1
 8009fdc:	d0de      	beq.n	8009f9c <_dtoa_r+0xa54>
 8009fde:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009fe2:	d1d8      	bne.n	8009f96 <_dtoa_r+0xa4e>
 8009fe4:	2339      	movs	r3, #57	; 0x39
 8009fe6:	9a04      	ldr	r2, [sp, #16]
 8009fe8:	7013      	strb	r3, [r2, #0]
 8009fea:	463b      	mov	r3, r7
 8009fec:	461f      	mov	r7, r3
 8009fee:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	2a39      	cmp	r2, #57	; 0x39
 8009ff6:	d06b      	beq.n	800a0d0 <_dtoa_r+0xb88>
 8009ff8:	3201      	adds	r2, #1
 8009ffa:	701a      	strb	r2, [r3, #0]
 8009ffc:	e74a      	b.n	8009e94 <_dtoa_r+0x94c>
 8009ffe:	2a00      	cmp	r2, #0
 800a000:	dd07      	ble.n	800a012 <_dtoa_r+0xaca>
 800a002:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a006:	d0ed      	beq.n	8009fe4 <_dtoa_r+0xa9c>
 800a008:	9a04      	ldr	r2, [sp, #16]
 800a00a:	f109 0301 	add.w	r3, r9, #1
 800a00e:	7013      	strb	r3, [r2, #0]
 800a010:	e740      	b.n	8009e94 <_dtoa_r+0x94c>
 800a012:	9b08      	ldr	r3, [sp, #32]
 800a014:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a016:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d042      	beq.n	800a0a4 <_dtoa_r+0xb5c>
 800a01e:	4651      	mov	r1, sl
 800a020:	2300      	movs	r3, #0
 800a022:	220a      	movs	r2, #10
 800a024:	4628      	mov	r0, r5
 800a026:	f000 f9d1 	bl	800a3cc <__multadd>
 800a02a:	45b0      	cmp	r8, r6
 800a02c:	4682      	mov	sl, r0
 800a02e:	f04f 0300 	mov.w	r3, #0
 800a032:	f04f 020a 	mov.w	r2, #10
 800a036:	4641      	mov	r1, r8
 800a038:	4628      	mov	r0, r5
 800a03a:	d107      	bne.n	800a04c <_dtoa_r+0xb04>
 800a03c:	f000 f9c6 	bl	800a3cc <__multadd>
 800a040:	4680      	mov	r8, r0
 800a042:	4606      	mov	r6, r0
 800a044:	9b08      	ldr	r3, [sp, #32]
 800a046:	3301      	adds	r3, #1
 800a048:	9308      	str	r3, [sp, #32]
 800a04a:	e775      	b.n	8009f38 <_dtoa_r+0x9f0>
 800a04c:	f000 f9be 	bl	800a3cc <__multadd>
 800a050:	4631      	mov	r1, r6
 800a052:	4680      	mov	r8, r0
 800a054:	2300      	movs	r3, #0
 800a056:	220a      	movs	r2, #10
 800a058:	4628      	mov	r0, r5
 800a05a:	f000 f9b7 	bl	800a3cc <__multadd>
 800a05e:	4606      	mov	r6, r0
 800a060:	e7f0      	b.n	800a044 <_dtoa_r+0xafc>
 800a062:	9b08      	ldr	r3, [sp, #32]
 800a064:	9306      	str	r3, [sp, #24]
 800a066:	9f03      	ldr	r7, [sp, #12]
 800a068:	4621      	mov	r1, r4
 800a06a:	4650      	mov	r0, sl
 800a06c:	f7ff f9e0 	bl	8009430 <quorem>
 800a070:	9b03      	ldr	r3, [sp, #12]
 800a072:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a076:	f807 9b01 	strb.w	r9, [r7], #1
 800a07a:	1afa      	subs	r2, r7, r3
 800a07c:	9b06      	ldr	r3, [sp, #24]
 800a07e:	4293      	cmp	r3, r2
 800a080:	dd07      	ble.n	800a092 <_dtoa_r+0xb4a>
 800a082:	4651      	mov	r1, sl
 800a084:	2300      	movs	r3, #0
 800a086:	220a      	movs	r2, #10
 800a088:	4628      	mov	r0, r5
 800a08a:	f000 f99f 	bl	800a3cc <__multadd>
 800a08e:	4682      	mov	sl, r0
 800a090:	e7ea      	b.n	800a068 <_dtoa_r+0xb20>
 800a092:	9b06      	ldr	r3, [sp, #24]
 800a094:	f04f 0800 	mov.w	r8, #0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	bfcc      	ite	gt
 800a09c:	461f      	movgt	r7, r3
 800a09e:	2701      	movle	r7, #1
 800a0a0:	9b03      	ldr	r3, [sp, #12]
 800a0a2:	441f      	add	r7, r3
 800a0a4:	4651      	mov	r1, sl
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	f000 fb85 	bl	800a7b8 <__lshift>
 800a0ae:	4621      	mov	r1, r4
 800a0b0:	4682      	mov	sl, r0
 800a0b2:	f000 fbed 	bl	800a890 <__mcmp>
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	dc97      	bgt.n	8009fea <_dtoa_r+0xaa2>
 800a0ba:	d102      	bne.n	800a0c2 <_dtoa_r+0xb7a>
 800a0bc:	f019 0f01 	tst.w	r9, #1
 800a0c0:	d193      	bne.n	8009fea <_dtoa_r+0xaa2>
 800a0c2:	463b      	mov	r3, r7
 800a0c4:	461f      	mov	r7, r3
 800a0c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0ca:	2a30      	cmp	r2, #48	; 0x30
 800a0cc:	d0fa      	beq.n	800a0c4 <_dtoa_r+0xb7c>
 800a0ce:	e6e1      	b.n	8009e94 <_dtoa_r+0x94c>
 800a0d0:	9a03      	ldr	r2, [sp, #12]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d18a      	bne.n	8009fec <_dtoa_r+0xaa4>
 800a0d6:	2331      	movs	r3, #49	; 0x31
 800a0d8:	f10b 0b01 	add.w	fp, fp, #1
 800a0dc:	e797      	b.n	800a00e <_dtoa_r+0xac6>
 800a0de:	4b0a      	ldr	r3, [pc, #40]	; (800a108 <_dtoa_r+0xbc0>)
 800a0e0:	f7ff ba9f 	b.w	8009622 <_dtoa_r+0xda>
 800a0e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	f47f aa77 	bne.w	80095da <_dtoa_r+0x92>
 800a0ec:	4b07      	ldr	r3, [pc, #28]	; (800a10c <_dtoa_r+0xbc4>)
 800a0ee:	f7ff ba98 	b.w	8009622 <_dtoa_r+0xda>
 800a0f2:	9b06      	ldr	r3, [sp, #24]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	dcb6      	bgt.n	800a066 <_dtoa_r+0xb1e>
 800a0f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0fa:	2b02      	cmp	r3, #2
 800a0fc:	f73f aeb5 	bgt.w	8009e6a <_dtoa_r+0x922>
 800a100:	e7b1      	b.n	800a066 <_dtoa_r+0xb1e>
 800a102:	bf00      	nop
 800a104:	0800fa13 	.word	0x0800fa13
 800a108:	0800f96e 	.word	0x0800f96e
 800a10c:	0800f997 	.word	0x0800f997

0800a110 <_free_r>:
 800a110:	b538      	push	{r3, r4, r5, lr}
 800a112:	4605      	mov	r5, r0
 800a114:	2900      	cmp	r1, #0
 800a116:	d040      	beq.n	800a19a <_free_r+0x8a>
 800a118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a11c:	1f0c      	subs	r4, r1, #4
 800a11e:	2b00      	cmp	r3, #0
 800a120:	bfb8      	it	lt
 800a122:	18e4      	addlt	r4, r4, r3
 800a124:	f000 f8e4 	bl	800a2f0 <__malloc_lock>
 800a128:	4a1c      	ldr	r2, [pc, #112]	; (800a19c <_free_r+0x8c>)
 800a12a:	6813      	ldr	r3, [r2, #0]
 800a12c:	b933      	cbnz	r3, 800a13c <_free_r+0x2c>
 800a12e:	6063      	str	r3, [r4, #4]
 800a130:	6014      	str	r4, [r2, #0]
 800a132:	4628      	mov	r0, r5
 800a134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a138:	f000 b8e0 	b.w	800a2fc <__malloc_unlock>
 800a13c:	42a3      	cmp	r3, r4
 800a13e:	d908      	bls.n	800a152 <_free_r+0x42>
 800a140:	6820      	ldr	r0, [r4, #0]
 800a142:	1821      	adds	r1, r4, r0
 800a144:	428b      	cmp	r3, r1
 800a146:	bf01      	itttt	eq
 800a148:	6819      	ldreq	r1, [r3, #0]
 800a14a:	685b      	ldreq	r3, [r3, #4]
 800a14c:	1809      	addeq	r1, r1, r0
 800a14e:	6021      	streq	r1, [r4, #0]
 800a150:	e7ed      	b.n	800a12e <_free_r+0x1e>
 800a152:	461a      	mov	r2, r3
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	b10b      	cbz	r3, 800a15c <_free_r+0x4c>
 800a158:	42a3      	cmp	r3, r4
 800a15a:	d9fa      	bls.n	800a152 <_free_r+0x42>
 800a15c:	6811      	ldr	r1, [r2, #0]
 800a15e:	1850      	adds	r0, r2, r1
 800a160:	42a0      	cmp	r0, r4
 800a162:	d10b      	bne.n	800a17c <_free_r+0x6c>
 800a164:	6820      	ldr	r0, [r4, #0]
 800a166:	4401      	add	r1, r0
 800a168:	1850      	adds	r0, r2, r1
 800a16a:	4283      	cmp	r3, r0
 800a16c:	6011      	str	r1, [r2, #0]
 800a16e:	d1e0      	bne.n	800a132 <_free_r+0x22>
 800a170:	6818      	ldr	r0, [r3, #0]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	4408      	add	r0, r1
 800a176:	6010      	str	r0, [r2, #0]
 800a178:	6053      	str	r3, [r2, #4]
 800a17a:	e7da      	b.n	800a132 <_free_r+0x22>
 800a17c:	d902      	bls.n	800a184 <_free_r+0x74>
 800a17e:	230c      	movs	r3, #12
 800a180:	602b      	str	r3, [r5, #0]
 800a182:	e7d6      	b.n	800a132 <_free_r+0x22>
 800a184:	6820      	ldr	r0, [r4, #0]
 800a186:	1821      	adds	r1, r4, r0
 800a188:	428b      	cmp	r3, r1
 800a18a:	bf01      	itttt	eq
 800a18c:	6819      	ldreq	r1, [r3, #0]
 800a18e:	685b      	ldreq	r3, [r3, #4]
 800a190:	1809      	addeq	r1, r1, r0
 800a192:	6021      	streq	r1, [r4, #0]
 800a194:	6063      	str	r3, [r4, #4]
 800a196:	6054      	str	r4, [r2, #4]
 800a198:	e7cb      	b.n	800a132 <_free_r+0x22>
 800a19a:	bd38      	pop	{r3, r4, r5, pc}
 800a19c:	200009d8 	.word	0x200009d8

0800a1a0 <malloc>:
 800a1a0:	4b02      	ldr	r3, [pc, #8]	; (800a1ac <malloc+0xc>)
 800a1a2:	4601      	mov	r1, r0
 800a1a4:	6818      	ldr	r0, [r3, #0]
 800a1a6:	f000 b823 	b.w	800a1f0 <_malloc_r>
 800a1aa:	bf00      	nop
 800a1ac:	20000080 	.word	0x20000080

0800a1b0 <sbrk_aligned>:
 800a1b0:	b570      	push	{r4, r5, r6, lr}
 800a1b2:	4e0e      	ldr	r6, [pc, #56]	; (800a1ec <sbrk_aligned+0x3c>)
 800a1b4:	460c      	mov	r4, r1
 800a1b6:	6831      	ldr	r1, [r6, #0]
 800a1b8:	4605      	mov	r5, r0
 800a1ba:	b911      	cbnz	r1, 800a1c2 <sbrk_aligned+0x12>
 800a1bc:	f001 fe0c 	bl	800bdd8 <_sbrk_r>
 800a1c0:	6030      	str	r0, [r6, #0]
 800a1c2:	4621      	mov	r1, r4
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	f001 fe07 	bl	800bdd8 <_sbrk_r>
 800a1ca:	1c43      	adds	r3, r0, #1
 800a1cc:	d00a      	beq.n	800a1e4 <sbrk_aligned+0x34>
 800a1ce:	1cc4      	adds	r4, r0, #3
 800a1d0:	f024 0403 	bic.w	r4, r4, #3
 800a1d4:	42a0      	cmp	r0, r4
 800a1d6:	d007      	beq.n	800a1e8 <sbrk_aligned+0x38>
 800a1d8:	1a21      	subs	r1, r4, r0
 800a1da:	4628      	mov	r0, r5
 800a1dc:	f001 fdfc 	bl	800bdd8 <_sbrk_r>
 800a1e0:	3001      	adds	r0, #1
 800a1e2:	d101      	bne.n	800a1e8 <sbrk_aligned+0x38>
 800a1e4:	f04f 34ff 	mov.w	r4, #4294967295
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	bd70      	pop	{r4, r5, r6, pc}
 800a1ec:	200009dc 	.word	0x200009dc

0800a1f0 <_malloc_r>:
 800a1f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1f4:	1ccd      	adds	r5, r1, #3
 800a1f6:	f025 0503 	bic.w	r5, r5, #3
 800a1fa:	3508      	adds	r5, #8
 800a1fc:	2d0c      	cmp	r5, #12
 800a1fe:	bf38      	it	cc
 800a200:	250c      	movcc	r5, #12
 800a202:	2d00      	cmp	r5, #0
 800a204:	4607      	mov	r7, r0
 800a206:	db01      	blt.n	800a20c <_malloc_r+0x1c>
 800a208:	42a9      	cmp	r1, r5
 800a20a:	d905      	bls.n	800a218 <_malloc_r+0x28>
 800a20c:	230c      	movs	r3, #12
 800a20e:	2600      	movs	r6, #0
 800a210:	603b      	str	r3, [r7, #0]
 800a212:	4630      	mov	r0, r6
 800a214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a218:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a2ec <_malloc_r+0xfc>
 800a21c:	f000 f868 	bl	800a2f0 <__malloc_lock>
 800a220:	f8d8 3000 	ldr.w	r3, [r8]
 800a224:	461c      	mov	r4, r3
 800a226:	bb5c      	cbnz	r4, 800a280 <_malloc_r+0x90>
 800a228:	4629      	mov	r1, r5
 800a22a:	4638      	mov	r0, r7
 800a22c:	f7ff ffc0 	bl	800a1b0 <sbrk_aligned>
 800a230:	1c43      	adds	r3, r0, #1
 800a232:	4604      	mov	r4, r0
 800a234:	d155      	bne.n	800a2e2 <_malloc_r+0xf2>
 800a236:	f8d8 4000 	ldr.w	r4, [r8]
 800a23a:	4626      	mov	r6, r4
 800a23c:	2e00      	cmp	r6, #0
 800a23e:	d145      	bne.n	800a2cc <_malloc_r+0xdc>
 800a240:	2c00      	cmp	r4, #0
 800a242:	d048      	beq.n	800a2d6 <_malloc_r+0xe6>
 800a244:	6823      	ldr	r3, [r4, #0]
 800a246:	4631      	mov	r1, r6
 800a248:	4638      	mov	r0, r7
 800a24a:	eb04 0903 	add.w	r9, r4, r3
 800a24e:	f001 fdc3 	bl	800bdd8 <_sbrk_r>
 800a252:	4581      	cmp	r9, r0
 800a254:	d13f      	bne.n	800a2d6 <_malloc_r+0xe6>
 800a256:	6821      	ldr	r1, [r4, #0]
 800a258:	4638      	mov	r0, r7
 800a25a:	1a6d      	subs	r5, r5, r1
 800a25c:	4629      	mov	r1, r5
 800a25e:	f7ff ffa7 	bl	800a1b0 <sbrk_aligned>
 800a262:	3001      	adds	r0, #1
 800a264:	d037      	beq.n	800a2d6 <_malloc_r+0xe6>
 800a266:	6823      	ldr	r3, [r4, #0]
 800a268:	442b      	add	r3, r5
 800a26a:	6023      	str	r3, [r4, #0]
 800a26c:	f8d8 3000 	ldr.w	r3, [r8]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d038      	beq.n	800a2e6 <_malloc_r+0xf6>
 800a274:	685a      	ldr	r2, [r3, #4]
 800a276:	42a2      	cmp	r2, r4
 800a278:	d12b      	bne.n	800a2d2 <_malloc_r+0xe2>
 800a27a:	2200      	movs	r2, #0
 800a27c:	605a      	str	r2, [r3, #4]
 800a27e:	e00f      	b.n	800a2a0 <_malloc_r+0xb0>
 800a280:	6822      	ldr	r2, [r4, #0]
 800a282:	1b52      	subs	r2, r2, r5
 800a284:	d41f      	bmi.n	800a2c6 <_malloc_r+0xd6>
 800a286:	2a0b      	cmp	r2, #11
 800a288:	d917      	bls.n	800a2ba <_malloc_r+0xca>
 800a28a:	1961      	adds	r1, r4, r5
 800a28c:	42a3      	cmp	r3, r4
 800a28e:	6025      	str	r5, [r4, #0]
 800a290:	bf18      	it	ne
 800a292:	6059      	strne	r1, [r3, #4]
 800a294:	6863      	ldr	r3, [r4, #4]
 800a296:	bf08      	it	eq
 800a298:	f8c8 1000 	streq.w	r1, [r8]
 800a29c:	5162      	str	r2, [r4, r5]
 800a29e:	604b      	str	r3, [r1, #4]
 800a2a0:	4638      	mov	r0, r7
 800a2a2:	f104 060b 	add.w	r6, r4, #11
 800a2a6:	f000 f829 	bl	800a2fc <__malloc_unlock>
 800a2aa:	f026 0607 	bic.w	r6, r6, #7
 800a2ae:	1d23      	adds	r3, r4, #4
 800a2b0:	1af2      	subs	r2, r6, r3
 800a2b2:	d0ae      	beq.n	800a212 <_malloc_r+0x22>
 800a2b4:	1b9b      	subs	r3, r3, r6
 800a2b6:	50a3      	str	r3, [r4, r2]
 800a2b8:	e7ab      	b.n	800a212 <_malloc_r+0x22>
 800a2ba:	42a3      	cmp	r3, r4
 800a2bc:	6862      	ldr	r2, [r4, #4]
 800a2be:	d1dd      	bne.n	800a27c <_malloc_r+0x8c>
 800a2c0:	f8c8 2000 	str.w	r2, [r8]
 800a2c4:	e7ec      	b.n	800a2a0 <_malloc_r+0xb0>
 800a2c6:	4623      	mov	r3, r4
 800a2c8:	6864      	ldr	r4, [r4, #4]
 800a2ca:	e7ac      	b.n	800a226 <_malloc_r+0x36>
 800a2cc:	4634      	mov	r4, r6
 800a2ce:	6876      	ldr	r6, [r6, #4]
 800a2d0:	e7b4      	b.n	800a23c <_malloc_r+0x4c>
 800a2d2:	4613      	mov	r3, r2
 800a2d4:	e7cc      	b.n	800a270 <_malloc_r+0x80>
 800a2d6:	230c      	movs	r3, #12
 800a2d8:	4638      	mov	r0, r7
 800a2da:	603b      	str	r3, [r7, #0]
 800a2dc:	f000 f80e 	bl	800a2fc <__malloc_unlock>
 800a2e0:	e797      	b.n	800a212 <_malloc_r+0x22>
 800a2e2:	6025      	str	r5, [r4, #0]
 800a2e4:	e7dc      	b.n	800a2a0 <_malloc_r+0xb0>
 800a2e6:	605b      	str	r3, [r3, #4]
 800a2e8:	deff      	udf	#255	; 0xff
 800a2ea:	bf00      	nop
 800a2ec:	200009d8 	.word	0x200009d8

0800a2f0 <__malloc_lock>:
 800a2f0:	4801      	ldr	r0, [pc, #4]	; (800a2f8 <__malloc_lock+0x8>)
 800a2f2:	f7ff b87a 	b.w	80093ea <__retarget_lock_acquire_recursive>
 800a2f6:	bf00      	nop
 800a2f8:	200009d4 	.word	0x200009d4

0800a2fc <__malloc_unlock>:
 800a2fc:	4801      	ldr	r0, [pc, #4]	; (800a304 <__malloc_unlock+0x8>)
 800a2fe:	f7ff b875 	b.w	80093ec <__retarget_lock_release_recursive>
 800a302:	bf00      	nop
 800a304:	200009d4 	.word	0x200009d4

0800a308 <_Balloc>:
 800a308:	b570      	push	{r4, r5, r6, lr}
 800a30a:	69c6      	ldr	r6, [r0, #28]
 800a30c:	4604      	mov	r4, r0
 800a30e:	460d      	mov	r5, r1
 800a310:	b976      	cbnz	r6, 800a330 <_Balloc+0x28>
 800a312:	2010      	movs	r0, #16
 800a314:	f7ff ff44 	bl	800a1a0 <malloc>
 800a318:	4602      	mov	r2, r0
 800a31a:	61e0      	str	r0, [r4, #28]
 800a31c:	b920      	cbnz	r0, 800a328 <_Balloc+0x20>
 800a31e:	216b      	movs	r1, #107	; 0x6b
 800a320:	4b17      	ldr	r3, [pc, #92]	; (800a380 <_Balloc+0x78>)
 800a322:	4818      	ldr	r0, [pc, #96]	; (800a384 <_Balloc+0x7c>)
 800a324:	f001 fd6e 	bl	800be04 <__assert_func>
 800a328:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a32c:	6006      	str	r6, [r0, #0]
 800a32e:	60c6      	str	r6, [r0, #12]
 800a330:	69e6      	ldr	r6, [r4, #28]
 800a332:	68f3      	ldr	r3, [r6, #12]
 800a334:	b183      	cbz	r3, 800a358 <_Balloc+0x50>
 800a336:	69e3      	ldr	r3, [r4, #28]
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a33e:	b9b8      	cbnz	r0, 800a370 <_Balloc+0x68>
 800a340:	2101      	movs	r1, #1
 800a342:	fa01 f605 	lsl.w	r6, r1, r5
 800a346:	1d72      	adds	r2, r6, #5
 800a348:	4620      	mov	r0, r4
 800a34a:	0092      	lsls	r2, r2, #2
 800a34c:	f001 fd78 	bl	800be40 <_calloc_r>
 800a350:	b160      	cbz	r0, 800a36c <_Balloc+0x64>
 800a352:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a356:	e00e      	b.n	800a376 <_Balloc+0x6e>
 800a358:	2221      	movs	r2, #33	; 0x21
 800a35a:	2104      	movs	r1, #4
 800a35c:	4620      	mov	r0, r4
 800a35e:	f001 fd6f 	bl	800be40 <_calloc_r>
 800a362:	69e3      	ldr	r3, [r4, #28]
 800a364:	60f0      	str	r0, [r6, #12]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d1e4      	bne.n	800a336 <_Balloc+0x2e>
 800a36c:	2000      	movs	r0, #0
 800a36e:	bd70      	pop	{r4, r5, r6, pc}
 800a370:	6802      	ldr	r2, [r0, #0]
 800a372:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a376:	2300      	movs	r3, #0
 800a378:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a37c:	e7f7      	b.n	800a36e <_Balloc+0x66>
 800a37e:	bf00      	nop
 800a380:	0800f9a4 	.word	0x0800f9a4
 800a384:	0800fa24 	.word	0x0800fa24

0800a388 <_Bfree>:
 800a388:	b570      	push	{r4, r5, r6, lr}
 800a38a:	69c6      	ldr	r6, [r0, #28]
 800a38c:	4605      	mov	r5, r0
 800a38e:	460c      	mov	r4, r1
 800a390:	b976      	cbnz	r6, 800a3b0 <_Bfree+0x28>
 800a392:	2010      	movs	r0, #16
 800a394:	f7ff ff04 	bl	800a1a0 <malloc>
 800a398:	4602      	mov	r2, r0
 800a39a:	61e8      	str	r0, [r5, #28]
 800a39c:	b920      	cbnz	r0, 800a3a8 <_Bfree+0x20>
 800a39e:	218f      	movs	r1, #143	; 0x8f
 800a3a0:	4b08      	ldr	r3, [pc, #32]	; (800a3c4 <_Bfree+0x3c>)
 800a3a2:	4809      	ldr	r0, [pc, #36]	; (800a3c8 <_Bfree+0x40>)
 800a3a4:	f001 fd2e 	bl	800be04 <__assert_func>
 800a3a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3ac:	6006      	str	r6, [r0, #0]
 800a3ae:	60c6      	str	r6, [r0, #12]
 800a3b0:	b13c      	cbz	r4, 800a3c2 <_Bfree+0x3a>
 800a3b2:	69eb      	ldr	r3, [r5, #28]
 800a3b4:	6862      	ldr	r2, [r4, #4]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a3bc:	6021      	str	r1, [r4, #0]
 800a3be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a3c2:	bd70      	pop	{r4, r5, r6, pc}
 800a3c4:	0800f9a4 	.word	0x0800f9a4
 800a3c8:	0800fa24 	.word	0x0800fa24

0800a3cc <__multadd>:
 800a3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3d0:	4607      	mov	r7, r0
 800a3d2:	460c      	mov	r4, r1
 800a3d4:	461e      	mov	r6, r3
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	690d      	ldr	r5, [r1, #16]
 800a3da:	f101 0c14 	add.w	ip, r1, #20
 800a3de:	f8dc 3000 	ldr.w	r3, [ip]
 800a3e2:	3001      	adds	r0, #1
 800a3e4:	b299      	uxth	r1, r3
 800a3e6:	fb02 6101 	mla	r1, r2, r1, r6
 800a3ea:	0c1e      	lsrs	r6, r3, #16
 800a3ec:	0c0b      	lsrs	r3, r1, #16
 800a3ee:	fb02 3306 	mla	r3, r2, r6, r3
 800a3f2:	b289      	uxth	r1, r1
 800a3f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a3f8:	4285      	cmp	r5, r0
 800a3fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a3fe:	f84c 1b04 	str.w	r1, [ip], #4
 800a402:	dcec      	bgt.n	800a3de <__multadd+0x12>
 800a404:	b30e      	cbz	r6, 800a44a <__multadd+0x7e>
 800a406:	68a3      	ldr	r3, [r4, #8]
 800a408:	42ab      	cmp	r3, r5
 800a40a:	dc19      	bgt.n	800a440 <__multadd+0x74>
 800a40c:	6861      	ldr	r1, [r4, #4]
 800a40e:	4638      	mov	r0, r7
 800a410:	3101      	adds	r1, #1
 800a412:	f7ff ff79 	bl	800a308 <_Balloc>
 800a416:	4680      	mov	r8, r0
 800a418:	b928      	cbnz	r0, 800a426 <__multadd+0x5a>
 800a41a:	4602      	mov	r2, r0
 800a41c:	21ba      	movs	r1, #186	; 0xba
 800a41e:	4b0c      	ldr	r3, [pc, #48]	; (800a450 <__multadd+0x84>)
 800a420:	480c      	ldr	r0, [pc, #48]	; (800a454 <__multadd+0x88>)
 800a422:	f001 fcef 	bl	800be04 <__assert_func>
 800a426:	6922      	ldr	r2, [r4, #16]
 800a428:	f104 010c 	add.w	r1, r4, #12
 800a42c:	3202      	adds	r2, #2
 800a42e:	0092      	lsls	r2, r2, #2
 800a430:	300c      	adds	r0, #12
 800a432:	f7fe ffea 	bl	800940a <memcpy>
 800a436:	4621      	mov	r1, r4
 800a438:	4638      	mov	r0, r7
 800a43a:	f7ff ffa5 	bl	800a388 <_Bfree>
 800a43e:	4644      	mov	r4, r8
 800a440:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a444:	3501      	adds	r5, #1
 800a446:	615e      	str	r6, [r3, #20]
 800a448:	6125      	str	r5, [r4, #16]
 800a44a:	4620      	mov	r0, r4
 800a44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a450:	0800fa13 	.word	0x0800fa13
 800a454:	0800fa24 	.word	0x0800fa24

0800a458 <__s2b>:
 800a458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a45c:	4615      	mov	r5, r2
 800a45e:	2209      	movs	r2, #9
 800a460:	461f      	mov	r7, r3
 800a462:	3308      	adds	r3, #8
 800a464:	460c      	mov	r4, r1
 800a466:	fb93 f3f2 	sdiv	r3, r3, r2
 800a46a:	4606      	mov	r6, r0
 800a46c:	2201      	movs	r2, #1
 800a46e:	2100      	movs	r1, #0
 800a470:	429a      	cmp	r2, r3
 800a472:	db09      	blt.n	800a488 <__s2b+0x30>
 800a474:	4630      	mov	r0, r6
 800a476:	f7ff ff47 	bl	800a308 <_Balloc>
 800a47a:	b940      	cbnz	r0, 800a48e <__s2b+0x36>
 800a47c:	4602      	mov	r2, r0
 800a47e:	21d3      	movs	r1, #211	; 0xd3
 800a480:	4b18      	ldr	r3, [pc, #96]	; (800a4e4 <__s2b+0x8c>)
 800a482:	4819      	ldr	r0, [pc, #100]	; (800a4e8 <__s2b+0x90>)
 800a484:	f001 fcbe 	bl	800be04 <__assert_func>
 800a488:	0052      	lsls	r2, r2, #1
 800a48a:	3101      	adds	r1, #1
 800a48c:	e7f0      	b.n	800a470 <__s2b+0x18>
 800a48e:	9b08      	ldr	r3, [sp, #32]
 800a490:	2d09      	cmp	r5, #9
 800a492:	6143      	str	r3, [r0, #20]
 800a494:	f04f 0301 	mov.w	r3, #1
 800a498:	6103      	str	r3, [r0, #16]
 800a49a:	dd16      	ble.n	800a4ca <__s2b+0x72>
 800a49c:	f104 0909 	add.w	r9, r4, #9
 800a4a0:	46c8      	mov	r8, r9
 800a4a2:	442c      	add	r4, r5
 800a4a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a4a8:	4601      	mov	r1, r0
 800a4aa:	220a      	movs	r2, #10
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	3b30      	subs	r3, #48	; 0x30
 800a4b0:	f7ff ff8c 	bl	800a3cc <__multadd>
 800a4b4:	45a0      	cmp	r8, r4
 800a4b6:	d1f5      	bne.n	800a4a4 <__s2b+0x4c>
 800a4b8:	f1a5 0408 	sub.w	r4, r5, #8
 800a4bc:	444c      	add	r4, r9
 800a4be:	1b2d      	subs	r5, r5, r4
 800a4c0:	1963      	adds	r3, r4, r5
 800a4c2:	42bb      	cmp	r3, r7
 800a4c4:	db04      	blt.n	800a4d0 <__s2b+0x78>
 800a4c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ca:	2509      	movs	r5, #9
 800a4cc:	340a      	adds	r4, #10
 800a4ce:	e7f6      	b.n	800a4be <__s2b+0x66>
 800a4d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a4d4:	4601      	mov	r1, r0
 800a4d6:	220a      	movs	r2, #10
 800a4d8:	4630      	mov	r0, r6
 800a4da:	3b30      	subs	r3, #48	; 0x30
 800a4dc:	f7ff ff76 	bl	800a3cc <__multadd>
 800a4e0:	e7ee      	b.n	800a4c0 <__s2b+0x68>
 800a4e2:	bf00      	nop
 800a4e4:	0800fa13 	.word	0x0800fa13
 800a4e8:	0800fa24 	.word	0x0800fa24

0800a4ec <__hi0bits>:
 800a4ec:	0c02      	lsrs	r2, r0, #16
 800a4ee:	0412      	lsls	r2, r2, #16
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	b9ca      	cbnz	r2, 800a528 <__hi0bits+0x3c>
 800a4f4:	0403      	lsls	r3, r0, #16
 800a4f6:	2010      	movs	r0, #16
 800a4f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a4fc:	bf04      	itt	eq
 800a4fe:	021b      	lsleq	r3, r3, #8
 800a500:	3008      	addeq	r0, #8
 800a502:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a506:	bf04      	itt	eq
 800a508:	011b      	lsleq	r3, r3, #4
 800a50a:	3004      	addeq	r0, #4
 800a50c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a510:	bf04      	itt	eq
 800a512:	009b      	lsleq	r3, r3, #2
 800a514:	3002      	addeq	r0, #2
 800a516:	2b00      	cmp	r3, #0
 800a518:	db05      	blt.n	800a526 <__hi0bits+0x3a>
 800a51a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a51e:	f100 0001 	add.w	r0, r0, #1
 800a522:	bf08      	it	eq
 800a524:	2020      	moveq	r0, #32
 800a526:	4770      	bx	lr
 800a528:	2000      	movs	r0, #0
 800a52a:	e7e5      	b.n	800a4f8 <__hi0bits+0xc>

0800a52c <__lo0bits>:
 800a52c:	6803      	ldr	r3, [r0, #0]
 800a52e:	4602      	mov	r2, r0
 800a530:	f013 0007 	ands.w	r0, r3, #7
 800a534:	d00b      	beq.n	800a54e <__lo0bits+0x22>
 800a536:	07d9      	lsls	r1, r3, #31
 800a538:	d421      	bmi.n	800a57e <__lo0bits+0x52>
 800a53a:	0798      	lsls	r0, r3, #30
 800a53c:	bf49      	itett	mi
 800a53e:	085b      	lsrmi	r3, r3, #1
 800a540:	089b      	lsrpl	r3, r3, #2
 800a542:	2001      	movmi	r0, #1
 800a544:	6013      	strmi	r3, [r2, #0]
 800a546:	bf5c      	itt	pl
 800a548:	2002      	movpl	r0, #2
 800a54a:	6013      	strpl	r3, [r2, #0]
 800a54c:	4770      	bx	lr
 800a54e:	b299      	uxth	r1, r3
 800a550:	b909      	cbnz	r1, 800a556 <__lo0bits+0x2a>
 800a552:	2010      	movs	r0, #16
 800a554:	0c1b      	lsrs	r3, r3, #16
 800a556:	b2d9      	uxtb	r1, r3
 800a558:	b909      	cbnz	r1, 800a55e <__lo0bits+0x32>
 800a55a:	3008      	adds	r0, #8
 800a55c:	0a1b      	lsrs	r3, r3, #8
 800a55e:	0719      	lsls	r1, r3, #28
 800a560:	bf04      	itt	eq
 800a562:	091b      	lsreq	r3, r3, #4
 800a564:	3004      	addeq	r0, #4
 800a566:	0799      	lsls	r1, r3, #30
 800a568:	bf04      	itt	eq
 800a56a:	089b      	lsreq	r3, r3, #2
 800a56c:	3002      	addeq	r0, #2
 800a56e:	07d9      	lsls	r1, r3, #31
 800a570:	d403      	bmi.n	800a57a <__lo0bits+0x4e>
 800a572:	085b      	lsrs	r3, r3, #1
 800a574:	f100 0001 	add.w	r0, r0, #1
 800a578:	d003      	beq.n	800a582 <__lo0bits+0x56>
 800a57a:	6013      	str	r3, [r2, #0]
 800a57c:	4770      	bx	lr
 800a57e:	2000      	movs	r0, #0
 800a580:	4770      	bx	lr
 800a582:	2020      	movs	r0, #32
 800a584:	4770      	bx	lr
	...

0800a588 <__i2b>:
 800a588:	b510      	push	{r4, lr}
 800a58a:	460c      	mov	r4, r1
 800a58c:	2101      	movs	r1, #1
 800a58e:	f7ff febb 	bl	800a308 <_Balloc>
 800a592:	4602      	mov	r2, r0
 800a594:	b928      	cbnz	r0, 800a5a2 <__i2b+0x1a>
 800a596:	f240 1145 	movw	r1, #325	; 0x145
 800a59a:	4b04      	ldr	r3, [pc, #16]	; (800a5ac <__i2b+0x24>)
 800a59c:	4804      	ldr	r0, [pc, #16]	; (800a5b0 <__i2b+0x28>)
 800a59e:	f001 fc31 	bl	800be04 <__assert_func>
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	6144      	str	r4, [r0, #20]
 800a5a6:	6103      	str	r3, [r0, #16]
 800a5a8:	bd10      	pop	{r4, pc}
 800a5aa:	bf00      	nop
 800a5ac:	0800fa13 	.word	0x0800fa13
 800a5b0:	0800fa24 	.word	0x0800fa24

0800a5b4 <__multiply>:
 800a5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b8:	4691      	mov	r9, r2
 800a5ba:	690a      	ldr	r2, [r1, #16]
 800a5bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a5c0:	460c      	mov	r4, r1
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	bfbe      	ittt	lt
 800a5c6:	460b      	movlt	r3, r1
 800a5c8:	464c      	movlt	r4, r9
 800a5ca:	4699      	movlt	r9, r3
 800a5cc:	6927      	ldr	r7, [r4, #16]
 800a5ce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a5d2:	68a3      	ldr	r3, [r4, #8]
 800a5d4:	6861      	ldr	r1, [r4, #4]
 800a5d6:	eb07 060a 	add.w	r6, r7, sl
 800a5da:	42b3      	cmp	r3, r6
 800a5dc:	b085      	sub	sp, #20
 800a5de:	bfb8      	it	lt
 800a5e0:	3101      	addlt	r1, #1
 800a5e2:	f7ff fe91 	bl	800a308 <_Balloc>
 800a5e6:	b930      	cbnz	r0, 800a5f6 <__multiply+0x42>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a5ee:	4b43      	ldr	r3, [pc, #268]	; (800a6fc <__multiply+0x148>)
 800a5f0:	4843      	ldr	r0, [pc, #268]	; (800a700 <__multiply+0x14c>)
 800a5f2:	f001 fc07 	bl	800be04 <__assert_func>
 800a5f6:	f100 0514 	add.w	r5, r0, #20
 800a5fa:	462b      	mov	r3, r5
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a602:	4543      	cmp	r3, r8
 800a604:	d321      	bcc.n	800a64a <__multiply+0x96>
 800a606:	f104 0314 	add.w	r3, r4, #20
 800a60a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a60e:	f109 0314 	add.w	r3, r9, #20
 800a612:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a616:	9202      	str	r2, [sp, #8]
 800a618:	1b3a      	subs	r2, r7, r4
 800a61a:	3a15      	subs	r2, #21
 800a61c:	f022 0203 	bic.w	r2, r2, #3
 800a620:	3204      	adds	r2, #4
 800a622:	f104 0115 	add.w	r1, r4, #21
 800a626:	428f      	cmp	r7, r1
 800a628:	bf38      	it	cc
 800a62a:	2204      	movcc	r2, #4
 800a62c:	9201      	str	r2, [sp, #4]
 800a62e:	9a02      	ldr	r2, [sp, #8]
 800a630:	9303      	str	r3, [sp, #12]
 800a632:	429a      	cmp	r2, r3
 800a634:	d80c      	bhi.n	800a650 <__multiply+0x9c>
 800a636:	2e00      	cmp	r6, #0
 800a638:	dd03      	ble.n	800a642 <__multiply+0x8e>
 800a63a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d05a      	beq.n	800a6f8 <__multiply+0x144>
 800a642:	6106      	str	r6, [r0, #16]
 800a644:	b005      	add	sp, #20
 800a646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a64a:	f843 2b04 	str.w	r2, [r3], #4
 800a64e:	e7d8      	b.n	800a602 <__multiply+0x4e>
 800a650:	f8b3 a000 	ldrh.w	sl, [r3]
 800a654:	f1ba 0f00 	cmp.w	sl, #0
 800a658:	d023      	beq.n	800a6a2 <__multiply+0xee>
 800a65a:	46a9      	mov	r9, r5
 800a65c:	f04f 0c00 	mov.w	ip, #0
 800a660:	f104 0e14 	add.w	lr, r4, #20
 800a664:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a668:	f8d9 1000 	ldr.w	r1, [r9]
 800a66c:	fa1f fb82 	uxth.w	fp, r2
 800a670:	b289      	uxth	r1, r1
 800a672:	fb0a 110b 	mla	r1, sl, fp, r1
 800a676:	4461      	add	r1, ip
 800a678:	f8d9 c000 	ldr.w	ip, [r9]
 800a67c:	0c12      	lsrs	r2, r2, #16
 800a67e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a682:	fb0a c202 	mla	r2, sl, r2, ip
 800a686:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a68a:	b289      	uxth	r1, r1
 800a68c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a690:	4577      	cmp	r7, lr
 800a692:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a696:	f849 1b04 	str.w	r1, [r9], #4
 800a69a:	d8e3      	bhi.n	800a664 <__multiply+0xb0>
 800a69c:	9a01      	ldr	r2, [sp, #4]
 800a69e:	f845 c002 	str.w	ip, [r5, r2]
 800a6a2:	9a03      	ldr	r2, [sp, #12]
 800a6a4:	3304      	adds	r3, #4
 800a6a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a6aa:	f1b9 0f00 	cmp.w	r9, #0
 800a6ae:	d021      	beq.n	800a6f4 <__multiply+0x140>
 800a6b0:	46ae      	mov	lr, r5
 800a6b2:	f04f 0a00 	mov.w	sl, #0
 800a6b6:	6829      	ldr	r1, [r5, #0]
 800a6b8:	f104 0c14 	add.w	ip, r4, #20
 800a6bc:	f8bc b000 	ldrh.w	fp, [ip]
 800a6c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a6c4:	b289      	uxth	r1, r1
 800a6c6:	fb09 220b 	mla	r2, r9, fp, r2
 800a6ca:	4452      	add	r2, sl
 800a6cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a6d0:	f84e 1b04 	str.w	r1, [lr], #4
 800a6d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a6d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a6dc:	f8be 1000 	ldrh.w	r1, [lr]
 800a6e0:	4567      	cmp	r7, ip
 800a6e2:	fb09 110a 	mla	r1, r9, sl, r1
 800a6e6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a6ea:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a6ee:	d8e5      	bhi.n	800a6bc <__multiply+0x108>
 800a6f0:	9a01      	ldr	r2, [sp, #4]
 800a6f2:	50a9      	str	r1, [r5, r2]
 800a6f4:	3504      	adds	r5, #4
 800a6f6:	e79a      	b.n	800a62e <__multiply+0x7a>
 800a6f8:	3e01      	subs	r6, #1
 800a6fa:	e79c      	b.n	800a636 <__multiply+0x82>
 800a6fc:	0800fa13 	.word	0x0800fa13
 800a700:	0800fa24 	.word	0x0800fa24

0800a704 <__pow5mult>:
 800a704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a708:	4615      	mov	r5, r2
 800a70a:	f012 0203 	ands.w	r2, r2, #3
 800a70e:	4606      	mov	r6, r0
 800a710:	460f      	mov	r7, r1
 800a712:	d007      	beq.n	800a724 <__pow5mult+0x20>
 800a714:	4c25      	ldr	r4, [pc, #148]	; (800a7ac <__pow5mult+0xa8>)
 800a716:	3a01      	subs	r2, #1
 800a718:	2300      	movs	r3, #0
 800a71a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a71e:	f7ff fe55 	bl	800a3cc <__multadd>
 800a722:	4607      	mov	r7, r0
 800a724:	10ad      	asrs	r5, r5, #2
 800a726:	d03d      	beq.n	800a7a4 <__pow5mult+0xa0>
 800a728:	69f4      	ldr	r4, [r6, #28]
 800a72a:	b97c      	cbnz	r4, 800a74c <__pow5mult+0x48>
 800a72c:	2010      	movs	r0, #16
 800a72e:	f7ff fd37 	bl	800a1a0 <malloc>
 800a732:	4602      	mov	r2, r0
 800a734:	61f0      	str	r0, [r6, #28]
 800a736:	b928      	cbnz	r0, 800a744 <__pow5mult+0x40>
 800a738:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a73c:	4b1c      	ldr	r3, [pc, #112]	; (800a7b0 <__pow5mult+0xac>)
 800a73e:	481d      	ldr	r0, [pc, #116]	; (800a7b4 <__pow5mult+0xb0>)
 800a740:	f001 fb60 	bl	800be04 <__assert_func>
 800a744:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a748:	6004      	str	r4, [r0, #0]
 800a74a:	60c4      	str	r4, [r0, #12]
 800a74c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a750:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a754:	b94c      	cbnz	r4, 800a76a <__pow5mult+0x66>
 800a756:	f240 2171 	movw	r1, #625	; 0x271
 800a75a:	4630      	mov	r0, r6
 800a75c:	f7ff ff14 	bl	800a588 <__i2b>
 800a760:	2300      	movs	r3, #0
 800a762:	4604      	mov	r4, r0
 800a764:	f8c8 0008 	str.w	r0, [r8, #8]
 800a768:	6003      	str	r3, [r0, #0]
 800a76a:	f04f 0900 	mov.w	r9, #0
 800a76e:	07eb      	lsls	r3, r5, #31
 800a770:	d50a      	bpl.n	800a788 <__pow5mult+0x84>
 800a772:	4639      	mov	r1, r7
 800a774:	4622      	mov	r2, r4
 800a776:	4630      	mov	r0, r6
 800a778:	f7ff ff1c 	bl	800a5b4 <__multiply>
 800a77c:	4680      	mov	r8, r0
 800a77e:	4639      	mov	r1, r7
 800a780:	4630      	mov	r0, r6
 800a782:	f7ff fe01 	bl	800a388 <_Bfree>
 800a786:	4647      	mov	r7, r8
 800a788:	106d      	asrs	r5, r5, #1
 800a78a:	d00b      	beq.n	800a7a4 <__pow5mult+0xa0>
 800a78c:	6820      	ldr	r0, [r4, #0]
 800a78e:	b938      	cbnz	r0, 800a7a0 <__pow5mult+0x9c>
 800a790:	4622      	mov	r2, r4
 800a792:	4621      	mov	r1, r4
 800a794:	4630      	mov	r0, r6
 800a796:	f7ff ff0d 	bl	800a5b4 <__multiply>
 800a79a:	6020      	str	r0, [r4, #0]
 800a79c:	f8c0 9000 	str.w	r9, [r0]
 800a7a0:	4604      	mov	r4, r0
 800a7a2:	e7e4      	b.n	800a76e <__pow5mult+0x6a>
 800a7a4:	4638      	mov	r0, r7
 800a7a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7aa:	bf00      	nop
 800a7ac:	0800fb70 	.word	0x0800fb70
 800a7b0:	0800f9a4 	.word	0x0800f9a4
 800a7b4:	0800fa24 	.word	0x0800fa24

0800a7b8 <__lshift>:
 800a7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7bc:	460c      	mov	r4, r1
 800a7be:	4607      	mov	r7, r0
 800a7c0:	4691      	mov	r9, r2
 800a7c2:	6923      	ldr	r3, [r4, #16]
 800a7c4:	6849      	ldr	r1, [r1, #4]
 800a7c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7ca:	68a3      	ldr	r3, [r4, #8]
 800a7cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a7d0:	f108 0601 	add.w	r6, r8, #1
 800a7d4:	42b3      	cmp	r3, r6
 800a7d6:	db0b      	blt.n	800a7f0 <__lshift+0x38>
 800a7d8:	4638      	mov	r0, r7
 800a7da:	f7ff fd95 	bl	800a308 <_Balloc>
 800a7de:	4605      	mov	r5, r0
 800a7e0:	b948      	cbnz	r0, 800a7f6 <__lshift+0x3e>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a7e8:	4b27      	ldr	r3, [pc, #156]	; (800a888 <__lshift+0xd0>)
 800a7ea:	4828      	ldr	r0, [pc, #160]	; (800a88c <__lshift+0xd4>)
 800a7ec:	f001 fb0a 	bl	800be04 <__assert_func>
 800a7f0:	3101      	adds	r1, #1
 800a7f2:	005b      	lsls	r3, r3, #1
 800a7f4:	e7ee      	b.n	800a7d4 <__lshift+0x1c>
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	f100 0114 	add.w	r1, r0, #20
 800a7fc:	f100 0210 	add.w	r2, r0, #16
 800a800:	4618      	mov	r0, r3
 800a802:	4553      	cmp	r3, sl
 800a804:	db33      	blt.n	800a86e <__lshift+0xb6>
 800a806:	6920      	ldr	r0, [r4, #16]
 800a808:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a80c:	f104 0314 	add.w	r3, r4, #20
 800a810:	f019 091f 	ands.w	r9, r9, #31
 800a814:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a818:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a81c:	d02b      	beq.n	800a876 <__lshift+0xbe>
 800a81e:	468a      	mov	sl, r1
 800a820:	2200      	movs	r2, #0
 800a822:	f1c9 0e20 	rsb	lr, r9, #32
 800a826:	6818      	ldr	r0, [r3, #0]
 800a828:	fa00 f009 	lsl.w	r0, r0, r9
 800a82c:	4310      	orrs	r0, r2
 800a82e:	f84a 0b04 	str.w	r0, [sl], #4
 800a832:	f853 2b04 	ldr.w	r2, [r3], #4
 800a836:	459c      	cmp	ip, r3
 800a838:	fa22 f20e 	lsr.w	r2, r2, lr
 800a83c:	d8f3      	bhi.n	800a826 <__lshift+0x6e>
 800a83e:	ebac 0304 	sub.w	r3, ip, r4
 800a842:	3b15      	subs	r3, #21
 800a844:	f023 0303 	bic.w	r3, r3, #3
 800a848:	3304      	adds	r3, #4
 800a84a:	f104 0015 	add.w	r0, r4, #21
 800a84e:	4584      	cmp	ip, r0
 800a850:	bf38      	it	cc
 800a852:	2304      	movcc	r3, #4
 800a854:	50ca      	str	r2, [r1, r3]
 800a856:	b10a      	cbz	r2, 800a85c <__lshift+0xa4>
 800a858:	f108 0602 	add.w	r6, r8, #2
 800a85c:	3e01      	subs	r6, #1
 800a85e:	4638      	mov	r0, r7
 800a860:	4621      	mov	r1, r4
 800a862:	612e      	str	r6, [r5, #16]
 800a864:	f7ff fd90 	bl	800a388 <_Bfree>
 800a868:	4628      	mov	r0, r5
 800a86a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a86e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a872:	3301      	adds	r3, #1
 800a874:	e7c5      	b.n	800a802 <__lshift+0x4a>
 800a876:	3904      	subs	r1, #4
 800a878:	f853 2b04 	ldr.w	r2, [r3], #4
 800a87c:	459c      	cmp	ip, r3
 800a87e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a882:	d8f9      	bhi.n	800a878 <__lshift+0xc0>
 800a884:	e7ea      	b.n	800a85c <__lshift+0xa4>
 800a886:	bf00      	nop
 800a888:	0800fa13 	.word	0x0800fa13
 800a88c:	0800fa24 	.word	0x0800fa24

0800a890 <__mcmp>:
 800a890:	4603      	mov	r3, r0
 800a892:	690a      	ldr	r2, [r1, #16]
 800a894:	6900      	ldr	r0, [r0, #16]
 800a896:	b530      	push	{r4, r5, lr}
 800a898:	1a80      	subs	r0, r0, r2
 800a89a:	d10d      	bne.n	800a8b8 <__mcmp+0x28>
 800a89c:	3314      	adds	r3, #20
 800a89e:	3114      	adds	r1, #20
 800a8a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a8a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a8a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a8ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a8b0:	4295      	cmp	r5, r2
 800a8b2:	d002      	beq.n	800a8ba <__mcmp+0x2a>
 800a8b4:	d304      	bcc.n	800a8c0 <__mcmp+0x30>
 800a8b6:	2001      	movs	r0, #1
 800a8b8:	bd30      	pop	{r4, r5, pc}
 800a8ba:	42a3      	cmp	r3, r4
 800a8bc:	d3f4      	bcc.n	800a8a8 <__mcmp+0x18>
 800a8be:	e7fb      	b.n	800a8b8 <__mcmp+0x28>
 800a8c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8c4:	e7f8      	b.n	800a8b8 <__mcmp+0x28>
	...

0800a8c8 <__mdiff>:
 800a8c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8cc:	460d      	mov	r5, r1
 800a8ce:	4607      	mov	r7, r0
 800a8d0:	4611      	mov	r1, r2
 800a8d2:	4628      	mov	r0, r5
 800a8d4:	4614      	mov	r4, r2
 800a8d6:	f7ff ffdb 	bl	800a890 <__mcmp>
 800a8da:	1e06      	subs	r6, r0, #0
 800a8dc:	d111      	bne.n	800a902 <__mdiff+0x3a>
 800a8de:	4631      	mov	r1, r6
 800a8e0:	4638      	mov	r0, r7
 800a8e2:	f7ff fd11 	bl	800a308 <_Balloc>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	b928      	cbnz	r0, 800a8f6 <__mdiff+0x2e>
 800a8ea:	f240 2137 	movw	r1, #567	; 0x237
 800a8ee:	4b3a      	ldr	r3, [pc, #232]	; (800a9d8 <__mdiff+0x110>)
 800a8f0:	483a      	ldr	r0, [pc, #232]	; (800a9dc <__mdiff+0x114>)
 800a8f2:	f001 fa87 	bl	800be04 <__assert_func>
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a8fc:	4610      	mov	r0, r2
 800a8fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a902:	bfa4      	itt	ge
 800a904:	4623      	movge	r3, r4
 800a906:	462c      	movge	r4, r5
 800a908:	4638      	mov	r0, r7
 800a90a:	6861      	ldr	r1, [r4, #4]
 800a90c:	bfa6      	itte	ge
 800a90e:	461d      	movge	r5, r3
 800a910:	2600      	movge	r6, #0
 800a912:	2601      	movlt	r6, #1
 800a914:	f7ff fcf8 	bl	800a308 <_Balloc>
 800a918:	4602      	mov	r2, r0
 800a91a:	b918      	cbnz	r0, 800a924 <__mdiff+0x5c>
 800a91c:	f240 2145 	movw	r1, #581	; 0x245
 800a920:	4b2d      	ldr	r3, [pc, #180]	; (800a9d8 <__mdiff+0x110>)
 800a922:	e7e5      	b.n	800a8f0 <__mdiff+0x28>
 800a924:	f102 0814 	add.w	r8, r2, #20
 800a928:	46c2      	mov	sl, r8
 800a92a:	f04f 0c00 	mov.w	ip, #0
 800a92e:	6927      	ldr	r7, [r4, #16]
 800a930:	60c6      	str	r6, [r0, #12]
 800a932:	692e      	ldr	r6, [r5, #16]
 800a934:	f104 0014 	add.w	r0, r4, #20
 800a938:	f105 0914 	add.w	r9, r5, #20
 800a93c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a940:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a944:	3410      	adds	r4, #16
 800a946:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a94a:	f859 3b04 	ldr.w	r3, [r9], #4
 800a94e:	fa1f f18b 	uxth.w	r1, fp
 800a952:	4461      	add	r1, ip
 800a954:	fa1f fc83 	uxth.w	ip, r3
 800a958:	0c1b      	lsrs	r3, r3, #16
 800a95a:	eba1 010c 	sub.w	r1, r1, ip
 800a95e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a962:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a966:	b289      	uxth	r1, r1
 800a968:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800a96c:	454e      	cmp	r6, r9
 800a96e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a972:	f84a 1b04 	str.w	r1, [sl], #4
 800a976:	d8e6      	bhi.n	800a946 <__mdiff+0x7e>
 800a978:	1b73      	subs	r3, r6, r5
 800a97a:	3b15      	subs	r3, #21
 800a97c:	f023 0303 	bic.w	r3, r3, #3
 800a980:	3515      	adds	r5, #21
 800a982:	3304      	adds	r3, #4
 800a984:	42ae      	cmp	r6, r5
 800a986:	bf38      	it	cc
 800a988:	2304      	movcc	r3, #4
 800a98a:	4418      	add	r0, r3
 800a98c:	4443      	add	r3, r8
 800a98e:	461e      	mov	r6, r3
 800a990:	4605      	mov	r5, r0
 800a992:	4575      	cmp	r5, lr
 800a994:	d30e      	bcc.n	800a9b4 <__mdiff+0xec>
 800a996:	f10e 0103 	add.w	r1, lr, #3
 800a99a:	1a09      	subs	r1, r1, r0
 800a99c:	f021 0103 	bic.w	r1, r1, #3
 800a9a0:	3803      	subs	r0, #3
 800a9a2:	4586      	cmp	lr, r0
 800a9a4:	bf38      	it	cc
 800a9a6:	2100      	movcc	r1, #0
 800a9a8:	440b      	add	r3, r1
 800a9aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a9ae:	b189      	cbz	r1, 800a9d4 <__mdiff+0x10c>
 800a9b0:	6117      	str	r7, [r2, #16]
 800a9b2:	e7a3      	b.n	800a8fc <__mdiff+0x34>
 800a9b4:	f855 8b04 	ldr.w	r8, [r5], #4
 800a9b8:	fa1f f188 	uxth.w	r1, r8
 800a9bc:	4461      	add	r1, ip
 800a9be:	140c      	asrs	r4, r1, #16
 800a9c0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a9c4:	b289      	uxth	r1, r1
 800a9c6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a9ca:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a9ce:	f846 1b04 	str.w	r1, [r6], #4
 800a9d2:	e7de      	b.n	800a992 <__mdiff+0xca>
 800a9d4:	3f01      	subs	r7, #1
 800a9d6:	e7e8      	b.n	800a9aa <__mdiff+0xe2>
 800a9d8:	0800fa13 	.word	0x0800fa13
 800a9dc:	0800fa24 	.word	0x0800fa24

0800a9e0 <__ulp>:
 800a9e0:	4b0e      	ldr	r3, [pc, #56]	; (800aa1c <__ulp+0x3c>)
 800a9e2:	400b      	ands	r3, r1
 800a9e4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	dc08      	bgt.n	800a9fe <__ulp+0x1e>
 800a9ec:	425b      	negs	r3, r3
 800a9ee:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a9f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a9f6:	da04      	bge.n	800aa02 <__ulp+0x22>
 800a9f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a9fc:	4113      	asrs	r3, r2
 800a9fe:	2200      	movs	r2, #0
 800aa00:	e008      	b.n	800aa14 <__ulp+0x34>
 800aa02:	f1a2 0314 	sub.w	r3, r2, #20
 800aa06:	2b1e      	cmp	r3, #30
 800aa08:	bfd6      	itet	le
 800aa0a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800aa0e:	2201      	movgt	r2, #1
 800aa10:	40da      	lsrle	r2, r3
 800aa12:	2300      	movs	r3, #0
 800aa14:	4619      	mov	r1, r3
 800aa16:	4610      	mov	r0, r2
 800aa18:	4770      	bx	lr
 800aa1a:	bf00      	nop
 800aa1c:	7ff00000 	.word	0x7ff00000

0800aa20 <__b2d>:
 800aa20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa22:	6905      	ldr	r5, [r0, #16]
 800aa24:	f100 0714 	add.w	r7, r0, #20
 800aa28:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800aa2c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800aa30:	1f2e      	subs	r6, r5, #4
 800aa32:	4620      	mov	r0, r4
 800aa34:	f7ff fd5a 	bl	800a4ec <__hi0bits>
 800aa38:	f1c0 0220 	rsb	r2, r0, #32
 800aa3c:	280a      	cmp	r0, #10
 800aa3e:	4603      	mov	r3, r0
 800aa40:	f8df c068 	ldr.w	ip, [pc, #104]	; 800aaac <__b2d+0x8c>
 800aa44:	600a      	str	r2, [r1, #0]
 800aa46:	dc12      	bgt.n	800aa6e <__b2d+0x4e>
 800aa48:	f1c0 0e0b 	rsb	lr, r0, #11
 800aa4c:	fa24 f20e 	lsr.w	r2, r4, lr
 800aa50:	42b7      	cmp	r7, r6
 800aa52:	ea42 010c 	orr.w	r1, r2, ip
 800aa56:	bf2c      	ite	cs
 800aa58:	2200      	movcs	r2, #0
 800aa5a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800aa5e:	3315      	adds	r3, #21
 800aa60:	fa04 f303 	lsl.w	r3, r4, r3
 800aa64:	fa22 f20e 	lsr.w	r2, r2, lr
 800aa68:	431a      	orrs	r2, r3
 800aa6a:	4610      	mov	r0, r2
 800aa6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa6e:	42b7      	cmp	r7, r6
 800aa70:	bf2e      	itee	cs
 800aa72:	2200      	movcs	r2, #0
 800aa74:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800aa78:	f1a5 0608 	subcc.w	r6, r5, #8
 800aa7c:	3b0b      	subs	r3, #11
 800aa7e:	d012      	beq.n	800aaa6 <__b2d+0x86>
 800aa80:	f1c3 0520 	rsb	r5, r3, #32
 800aa84:	fa22 f105 	lsr.w	r1, r2, r5
 800aa88:	409c      	lsls	r4, r3
 800aa8a:	430c      	orrs	r4, r1
 800aa8c:	42be      	cmp	r6, r7
 800aa8e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800aa92:	bf94      	ite	ls
 800aa94:	2400      	movls	r4, #0
 800aa96:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800aa9a:	409a      	lsls	r2, r3
 800aa9c:	40ec      	lsrs	r4, r5
 800aa9e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800aaa2:	4322      	orrs	r2, r4
 800aaa4:	e7e1      	b.n	800aa6a <__b2d+0x4a>
 800aaa6:	ea44 010c 	orr.w	r1, r4, ip
 800aaaa:	e7de      	b.n	800aa6a <__b2d+0x4a>
 800aaac:	3ff00000 	.word	0x3ff00000

0800aab0 <__d2b>:
 800aab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aab2:	2101      	movs	r1, #1
 800aab4:	4617      	mov	r7, r2
 800aab6:	461c      	mov	r4, r3
 800aab8:	9e08      	ldr	r6, [sp, #32]
 800aaba:	f7ff fc25 	bl	800a308 <_Balloc>
 800aabe:	4605      	mov	r5, r0
 800aac0:	b930      	cbnz	r0, 800aad0 <__d2b+0x20>
 800aac2:	4602      	mov	r2, r0
 800aac4:	f240 310f 	movw	r1, #783	; 0x30f
 800aac8:	4b22      	ldr	r3, [pc, #136]	; (800ab54 <__d2b+0xa4>)
 800aaca:	4823      	ldr	r0, [pc, #140]	; (800ab58 <__d2b+0xa8>)
 800aacc:	f001 f99a 	bl	800be04 <__assert_func>
 800aad0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800aad4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800aad8:	bb24      	cbnz	r4, 800ab24 <__d2b+0x74>
 800aada:	2f00      	cmp	r7, #0
 800aadc:	9301      	str	r3, [sp, #4]
 800aade:	d026      	beq.n	800ab2e <__d2b+0x7e>
 800aae0:	4668      	mov	r0, sp
 800aae2:	9700      	str	r7, [sp, #0]
 800aae4:	f7ff fd22 	bl	800a52c <__lo0bits>
 800aae8:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aaec:	b1e8      	cbz	r0, 800ab2a <__d2b+0x7a>
 800aaee:	f1c0 0320 	rsb	r3, r0, #32
 800aaf2:	fa02 f303 	lsl.w	r3, r2, r3
 800aaf6:	430b      	orrs	r3, r1
 800aaf8:	40c2      	lsrs	r2, r0
 800aafa:	616b      	str	r3, [r5, #20]
 800aafc:	9201      	str	r2, [sp, #4]
 800aafe:	9b01      	ldr	r3, [sp, #4]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	bf14      	ite	ne
 800ab04:	2102      	movne	r1, #2
 800ab06:	2101      	moveq	r1, #1
 800ab08:	61ab      	str	r3, [r5, #24]
 800ab0a:	6129      	str	r1, [r5, #16]
 800ab0c:	b1bc      	cbz	r4, 800ab3e <__d2b+0x8e>
 800ab0e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ab12:	4404      	add	r4, r0
 800ab14:	6034      	str	r4, [r6, #0]
 800ab16:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab1c:	6018      	str	r0, [r3, #0]
 800ab1e:	4628      	mov	r0, r5
 800ab20:	b003      	add	sp, #12
 800ab22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab28:	e7d7      	b.n	800aada <__d2b+0x2a>
 800ab2a:	6169      	str	r1, [r5, #20]
 800ab2c:	e7e7      	b.n	800aafe <__d2b+0x4e>
 800ab2e:	a801      	add	r0, sp, #4
 800ab30:	f7ff fcfc 	bl	800a52c <__lo0bits>
 800ab34:	9b01      	ldr	r3, [sp, #4]
 800ab36:	2101      	movs	r1, #1
 800ab38:	616b      	str	r3, [r5, #20]
 800ab3a:	3020      	adds	r0, #32
 800ab3c:	e7e5      	b.n	800ab0a <__d2b+0x5a>
 800ab3e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab42:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800ab46:	6030      	str	r0, [r6, #0]
 800ab48:	6918      	ldr	r0, [r3, #16]
 800ab4a:	f7ff fccf 	bl	800a4ec <__hi0bits>
 800ab4e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ab52:	e7e2      	b.n	800ab1a <__d2b+0x6a>
 800ab54:	0800fa13 	.word	0x0800fa13
 800ab58:	0800fa24 	.word	0x0800fa24

0800ab5c <__ratio>:
 800ab5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab60:	4688      	mov	r8, r1
 800ab62:	4669      	mov	r1, sp
 800ab64:	4681      	mov	r9, r0
 800ab66:	f7ff ff5b 	bl	800aa20 <__b2d>
 800ab6a:	460f      	mov	r7, r1
 800ab6c:	4604      	mov	r4, r0
 800ab6e:	460d      	mov	r5, r1
 800ab70:	4640      	mov	r0, r8
 800ab72:	a901      	add	r1, sp, #4
 800ab74:	f7ff ff54 	bl	800aa20 <__b2d>
 800ab78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab7c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ab80:	468b      	mov	fp, r1
 800ab82:	eba3 0c02 	sub.w	ip, r3, r2
 800ab86:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ab8a:	1a9b      	subs	r3, r3, r2
 800ab8c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	bfd5      	itete	le
 800ab94:	460a      	movle	r2, r1
 800ab96:	462a      	movgt	r2, r5
 800ab98:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ab9c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aba0:	bfd8      	it	le
 800aba2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800aba6:	465b      	mov	r3, fp
 800aba8:	4602      	mov	r2, r0
 800abaa:	4639      	mov	r1, r7
 800abac:	4620      	mov	r0, r4
 800abae:	f7f5 fdbd 	bl	800072c <__aeabi_ddiv>
 800abb2:	b003      	add	sp, #12
 800abb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abb8 <__copybits>:
 800abb8:	3901      	subs	r1, #1
 800abba:	b570      	push	{r4, r5, r6, lr}
 800abbc:	1149      	asrs	r1, r1, #5
 800abbe:	6914      	ldr	r4, [r2, #16]
 800abc0:	3101      	adds	r1, #1
 800abc2:	f102 0314 	add.w	r3, r2, #20
 800abc6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800abca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800abce:	1f05      	subs	r5, r0, #4
 800abd0:	42a3      	cmp	r3, r4
 800abd2:	d30c      	bcc.n	800abee <__copybits+0x36>
 800abd4:	1aa3      	subs	r3, r4, r2
 800abd6:	3b11      	subs	r3, #17
 800abd8:	f023 0303 	bic.w	r3, r3, #3
 800abdc:	3211      	adds	r2, #17
 800abde:	42a2      	cmp	r2, r4
 800abe0:	bf88      	it	hi
 800abe2:	2300      	movhi	r3, #0
 800abe4:	4418      	add	r0, r3
 800abe6:	2300      	movs	r3, #0
 800abe8:	4288      	cmp	r0, r1
 800abea:	d305      	bcc.n	800abf8 <__copybits+0x40>
 800abec:	bd70      	pop	{r4, r5, r6, pc}
 800abee:	f853 6b04 	ldr.w	r6, [r3], #4
 800abf2:	f845 6f04 	str.w	r6, [r5, #4]!
 800abf6:	e7eb      	b.n	800abd0 <__copybits+0x18>
 800abf8:	f840 3b04 	str.w	r3, [r0], #4
 800abfc:	e7f4      	b.n	800abe8 <__copybits+0x30>

0800abfe <__any_on>:
 800abfe:	f100 0214 	add.w	r2, r0, #20
 800ac02:	6900      	ldr	r0, [r0, #16]
 800ac04:	114b      	asrs	r3, r1, #5
 800ac06:	4298      	cmp	r0, r3
 800ac08:	b510      	push	{r4, lr}
 800ac0a:	db11      	blt.n	800ac30 <__any_on+0x32>
 800ac0c:	dd0a      	ble.n	800ac24 <__any_on+0x26>
 800ac0e:	f011 011f 	ands.w	r1, r1, #31
 800ac12:	d007      	beq.n	800ac24 <__any_on+0x26>
 800ac14:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ac18:	fa24 f001 	lsr.w	r0, r4, r1
 800ac1c:	fa00 f101 	lsl.w	r1, r0, r1
 800ac20:	428c      	cmp	r4, r1
 800ac22:	d10b      	bne.n	800ac3c <__any_on+0x3e>
 800ac24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d803      	bhi.n	800ac34 <__any_on+0x36>
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	bd10      	pop	{r4, pc}
 800ac30:	4603      	mov	r3, r0
 800ac32:	e7f7      	b.n	800ac24 <__any_on+0x26>
 800ac34:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac38:	2900      	cmp	r1, #0
 800ac3a:	d0f5      	beq.n	800ac28 <__any_on+0x2a>
 800ac3c:	2001      	movs	r0, #1
 800ac3e:	e7f6      	b.n	800ac2e <__any_on+0x30>

0800ac40 <sulp>:
 800ac40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac44:	460f      	mov	r7, r1
 800ac46:	4690      	mov	r8, r2
 800ac48:	f7ff feca 	bl	800a9e0 <__ulp>
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	460d      	mov	r5, r1
 800ac50:	f1b8 0f00 	cmp.w	r8, #0
 800ac54:	d011      	beq.n	800ac7a <sulp+0x3a>
 800ac56:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800ac5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	dd0b      	ble.n	800ac7a <sulp+0x3a>
 800ac62:	2400      	movs	r4, #0
 800ac64:	051b      	lsls	r3, r3, #20
 800ac66:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ac6a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ac6e:	4622      	mov	r2, r4
 800ac70:	462b      	mov	r3, r5
 800ac72:	f7f5 fc31 	bl	80004d8 <__aeabi_dmul>
 800ac76:	4604      	mov	r4, r0
 800ac78:	460d      	mov	r5, r1
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	4629      	mov	r1, r5
 800ac7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac82:	0000      	movs	r0, r0
 800ac84:	0000      	movs	r0, r0
	...

0800ac88 <_strtod_l>:
 800ac88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8c:	b09f      	sub	sp, #124	; 0x7c
 800ac8e:	9217      	str	r2, [sp, #92]	; 0x5c
 800ac90:	2200      	movs	r2, #0
 800ac92:	4604      	mov	r4, r0
 800ac94:	921a      	str	r2, [sp, #104]	; 0x68
 800ac96:	460d      	mov	r5, r1
 800ac98:	f04f 0800 	mov.w	r8, #0
 800ac9c:	f04f 0900 	mov.w	r9, #0
 800aca0:	460a      	mov	r2, r1
 800aca2:	9219      	str	r2, [sp, #100]	; 0x64
 800aca4:	7811      	ldrb	r1, [r2, #0]
 800aca6:	292b      	cmp	r1, #43	; 0x2b
 800aca8:	d04a      	beq.n	800ad40 <_strtod_l+0xb8>
 800acaa:	d838      	bhi.n	800ad1e <_strtod_l+0x96>
 800acac:	290d      	cmp	r1, #13
 800acae:	d832      	bhi.n	800ad16 <_strtod_l+0x8e>
 800acb0:	2908      	cmp	r1, #8
 800acb2:	d832      	bhi.n	800ad1a <_strtod_l+0x92>
 800acb4:	2900      	cmp	r1, #0
 800acb6:	d03b      	beq.n	800ad30 <_strtod_l+0xa8>
 800acb8:	2200      	movs	r2, #0
 800acba:	920e      	str	r2, [sp, #56]	; 0x38
 800acbc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800acbe:	7832      	ldrb	r2, [r6, #0]
 800acc0:	2a30      	cmp	r2, #48	; 0x30
 800acc2:	f040 80b2 	bne.w	800ae2a <_strtod_l+0x1a2>
 800acc6:	7872      	ldrb	r2, [r6, #1]
 800acc8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800accc:	2a58      	cmp	r2, #88	; 0x58
 800acce:	d16e      	bne.n	800adae <_strtod_l+0x126>
 800acd0:	9302      	str	r3, [sp, #8]
 800acd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acd4:	4620      	mov	r0, r4
 800acd6:	9301      	str	r3, [sp, #4]
 800acd8:	ab1a      	add	r3, sp, #104	; 0x68
 800acda:	9300      	str	r3, [sp, #0]
 800acdc:	4a8c      	ldr	r2, [pc, #560]	; (800af10 <_strtod_l+0x288>)
 800acde:	ab1b      	add	r3, sp, #108	; 0x6c
 800ace0:	a919      	add	r1, sp, #100	; 0x64
 800ace2:	f001 f929 	bl	800bf38 <__gethex>
 800ace6:	f010 070f 	ands.w	r7, r0, #15
 800acea:	4605      	mov	r5, r0
 800acec:	d005      	beq.n	800acfa <_strtod_l+0x72>
 800acee:	2f06      	cmp	r7, #6
 800acf0:	d128      	bne.n	800ad44 <_strtod_l+0xbc>
 800acf2:	2300      	movs	r3, #0
 800acf4:	3601      	adds	r6, #1
 800acf6:	9619      	str	r6, [sp, #100]	; 0x64
 800acf8:	930e      	str	r3, [sp, #56]	; 0x38
 800acfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	f040 85a0 	bne.w	800b842 <_strtod_l+0xbba>
 800ad02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad04:	b1cb      	cbz	r3, 800ad3a <_strtod_l+0xb2>
 800ad06:	4642      	mov	r2, r8
 800ad08:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ad0c:	4610      	mov	r0, r2
 800ad0e:	4619      	mov	r1, r3
 800ad10:	b01f      	add	sp, #124	; 0x7c
 800ad12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad16:	2920      	cmp	r1, #32
 800ad18:	d1ce      	bne.n	800acb8 <_strtod_l+0x30>
 800ad1a:	3201      	adds	r2, #1
 800ad1c:	e7c1      	b.n	800aca2 <_strtod_l+0x1a>
 800ad1e:	292d      	cmp	r1, #45	; 0x2d
 800ad20:	d1ca      	bne.n	800acb8 <_strtod_l+0x30>
 800ad22:	2101      	movs	r1, #1
 800ad24:	910e      	str	r1, [sp, #56]	; 0x38
 800ad26:	1c51      	adds	r1, r2, #1
 800ad28:	9119      	str	r1, [sp, #100]	; 0x64
 800ad2a:	7852      	ldrb	r2, [r2, #1]
 800ad2c:	2a00      	cmp	r2, #0
 800ad2e:	d1c5      	bne.n	800acbc <_strtod_l+0x34>
 800ad30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad32:	9519      	str	r5, [sp, #100]	; 0x64
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	f040 8582 	bne.w	800b83e <_strtod_l+0xbb6>
 800ad3a:	4642      	mov	r2, r8
 800ad3c:	464b      	mov	r3, r9
 800ad3e:	e7e5      	b.n	800ad0c <_strtod_l+0x84>
 800ad40:	2100      	movs	r1, #0
 800ad42:	e7ef      	b.n	800ad24 <_strtod_l+0x9c>
 800ad44:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ad46:	b13a      	cbz	r2, 800ad58 <_strtod_l+0xd0>
 800ad48:	2135      	movs	r1, #53	; 0x35
 800ad4a:	a81c      	add	r0, sp, #112	; 0x70
 800ad4c:	f7ff ff34 	bl	800abb8 <__copybits>
 800ad50:	4620      	mov	r0, r4
 800ad52:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ad54:	f7ff fb18 	bl	800a388 <_Bfree>
 800ad58:	3f01      	subs	r7, #1
 800ad5a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ad5c:	2f04      	cmp	r7, #4
 800ad5e:	d806      	bhi.n	800ad6e <_strtod_l+0xe6>
 800ad60:	e8df f007 	tbb	[pc, r7]
 800ad64:	201d0314 	.word	0x201d0314
 800ad68:	14          	.byte	0x14
 800ad69:	00          	.byte	0x00
 800ad6a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800ad6e:	05e9      	lsls	r1, r5, #23
 800ad70:	bf48      	it	mi
 800ad72:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ad76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ad7a:	0d1b      	lsrs	r3, r3, #20
 800ad7c:	051b      	lsls	r3, r3, #20
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d1bb      	bne.n	800acfa <_strtod_l+0x72>
 800ad82:	f7fe fb07 	bl	8009394 <__errno>
 800ad86:	2322      	movs	r3, #34	; 0x22
 800ad88:	6003      	str	r3, [r0, #0]
 800ad8a:	e7b6      	b.n	800acfa <_strtod_l+0x72>
 800ad8c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ad90:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800ad94:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ad98:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ad9c:	e7e7      	b.n	800ad6e <_strtod_l+0xe6>
 800ad9e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800af14 <_strtod_l+0x28c>
 800ada2:	e7e4      	b.n	800ad6e <_strtod_l+0xe6>
 800ada4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ada8:	f04f 38ff 	mov.w	r8, #4294967295
 800adac:	e7df      	b.n	800ad6e <_strtod_l+0xe6>
 800adae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800adb0:	1c5a      	adds	r2, r3, #1
 800adb2:	9219      	str	r2, [sp, #100]	; 0x64
 800adb4:	785b      	ldrb	r3, [r3, #1]
 800adb6:	2b30      	cmp	r3, #48	; 0x30
 800adb8:	d0f9      	beq.n	800adae <_strtod_l+0x126>
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d09d      	beq.n	800acfa <_strtod_l+0x72>
 800adbe:	2301      	movs	r3, #1
 800adc0:	f04f 0a00 	mov.w	sl, #0
 800adc4:	220a      	movs	r2, #10
 800adc6:	46d3      	mov	fp, sl
 800adc8:	9305      	str	r3, [sp, #20]
 800adca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800adcc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800add0:	930b      	str	r3, [sp, #44]	; 0x2c
 800add2:	9819      	ldr	r0, [sp, #100]	; 0x64
 800add4:	7806      	ldrb	r6, [r0, #0]
 800add6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800adda:	b2d9      	uxtb	r1, r3
 800addc:	2909      	cmp	r1, #9
 800adde:	d926      	bls.n	800ae2e <_strtod_l+0x1a6>
 800ade0:	2201      	movs	r2, #1
 800ade2:	494d      	ldr	r1, [pc, #308]	; (800af18 <_strtod_l+0x290>)
 800ade4:	f000 ffe6 	bl	800bdb4 <strncmp>
 800ade8:	2800      	cmp	r0, #0
 800adea:	d030      	beq.n	800ae4e <_strtod_l+0x1c6>
 800adec:	2000      	movs	r0, #0
 800adee:	4632      	mov	r2, r6
 800adf0:	4603      	mov	r3, r0
 800adf2:	465e      	mov	r6, fp
 800adf4:	9008      	str	r0, [sp, #32]
 800adf6:	2a65      	cmp	r2, #101	; 0x65
 800adf8:	d001      	beq.n	800adfe <_strtod_l+0x176>
 800adfa:	2a45      	cmp	r2, #69	; 0x45
 800adfc:	d113      	bne.n	800ae26 <_strtod_l+0x19e>
 800adfe:	b91e      	cbnz	r6, 800ae08 <_strtod_l+0x180>
 800ae00:	9a05      	ldr	r2, [sp, #20]
 800ae02:	4302      	orrs	r2, r0
 800ae04:	d094      	beq.n	800ad30 <_strtod_l+0xa8>
 800ae06:	2600      	movs	r6, #0
 800ae08:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800ae0a:	1c6a      	adds	r2, r5, #1
 800ae0c:	9219      	str	r2, [sp, #100]	; 0x64
 800ae0e:	786a      	ldrb	r2, [r5, #1]
 800ae10:	2a2b      	cmp	r2, #43	; 0x2b
 800ae12:	d074      	beq.n	800aefe <_strtod_l+0x276>
 800ae14:	2a2d      	cmp	r2, #45	; 0x2d
 800ae16:	d078      	beq.n	800af0a <_strtod_l+0x282>
 800ae18:	f04f 0c00 	mov.w	ip, #0
 800ae1c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ae20:	2909      	cmp	r1, #9
 800ae22:	d97f      	bls.n	800af24 <_strtod_l+0x29c>
 800ae24:	9519      	str	r5, [sp, #100]	; 0x64
 800ae26:	2700      	movs	r7, #0
 800ae28:	e09e      	b.n	800af68 <_strtod_l+0x2e0>
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	e7c8      	b.n	800adc0 <_strtod_l+0x138>
 800ae2e:	f1bb 0f08 	cmp.w	fp, #8
 800ae32:	bfd8      	it	le
 800ae34:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800ae36:	f100 0001 	add.w	r0, r0, #1
 800ae3a:	bfd6      	itet	le
 800ae3c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ae40:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ae44:	930a      	strle	r3, [sp, #40]	; 0x28
 800ae46:	f10b 0b01 	add.w	fp, fp, #1
 800ae4a:	9019      	str	r0, [sp, #100]	; 0x64
 800ae4c:	e7c1      	b.n	800add2 <_strtod_l+0x14a>
 800ae4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ae50:	1c5a      	adds	r2, r3, #1
 800ae52:	9219      	str	r2, [sp, #100]	; 0x64
 800ae54:	785a      	ldrb	r2, [r3, #1]
 800ae56:	f1bb 0f00 	cmp.w	fp, #0
 800ae5a:	d037      	beq.n	800aecc <_strtod_l+0x244>
 800ae5c:	465e      	mov	r6, fp
 800ae5e:	9008      	str	r0, [sp, #32]
 800ae60:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ae64:	2b09      	cmp	r3, #9
 800ae66:	d912      	bls.n	800ae8e <_strtod_l+0x206>
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e7c4      	b.n	800adf6 <_strtod_l+0x16e>
 800ae6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ae6e:	3001      	adds	r0, #1
 800ae70:	1c5a      	adds	r2, r3, #1
 800ae72:	9219      	str	r2, [sp, #100]	; 0x64
 800ae74:	785a      	ldrb	r2, [r3, #1]
 800ae76:	2a30      	cmp	r2, #48	; 0x30
 800ae78:	d0f8      	beq.n	800ae6c <_strtod_l+0x1e4>
 800ae7a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ae7e:	2b08      	cmp	r3, #8
 800ae80:	f200 84e4 	bhi.w	800b84c <_strtod_l+0xbc4>
 800ae84:	9008      	str	r0, [sp, #32]
 800ae86:	2000      	movs	r0, #0
 800ae88:	4606      	mov	r6, r0
 800ae8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ae8c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae8e:	3a30      	subs	r2, #48	; 0x30
 800ae90:	f100 0301 	add.w	r3, r0, #1
 800ae94:	d014      	beq.n	800aec0 <_strtod_l+0x238>
 800ae96:	9908      	ldr	r1, [sp, #32]
 800ae98:	eb00 0c06 	add.w	ip, r0, r6
 800ae9c:	4419      	add	r1, r3
 800ae9e:	9108      	str	r1, [sp, #32]
 800aea0:	4633      	mov	r3, r6
 800aea2:	210a      	movs	r1, #10
 800aea4:	4563      	cmp	r3, ip
 800aea6:	d113      	bne.n	800aed0 <_strtod_l+0x248>
 800aea8:	1833      	adds	r3, r6, r0
 800aeaa:	2b08      	cmp	r3, #8
 800aeac:	f106 0601 	add.w	r6, r6, #1
 800aeb0:	4406      	add	r6, r0
 800aeb2:	dc1a      	bgt.n	800aeea <_strtod_l+0x262>
 800aeb4:	230a      	movs	r3, #10
 800aeb6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aeb8:	fb03 2301 	mla	r3, r3, r1, r2
 800aebc:	930a      	str	r3, [sp, #40]	; 0x28
 800aebe:	2300      	movs	r3, #0
 800aec0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800aec2:	4618      	mov	r0, r3
 800aec4:	1c51      	adds	r1, r2, #1
 800aec6:	9119      	str	r1, [sp, #100]	; 0x64
 800aec8:	7852      	ldrb	r2, [r2, #1]
 800aeca:	e7c9      	b.n	800ae60 <_strtod_l+0x1d8>
 800aecc:	4658      	mov	r0, fp
 800aece:	e7d2      	b.n	800ae76 <_strtod_l+0x1ee>
 800aed0:	2b08      	cmp	r3, #8
 800aed2:	f103 0301 	add.w	r3, r3, #1
 800aed6:	dc03      	bgt.n	800aee0 <_strtod_l+0x258>
 800aed8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800aeda:	434f      	muls	r7, r1
 800aedc:	970a      	str	r7, [sp, #40]	; 0x28
 800aede:	e7e1      	b.n	800aea4 <_strtod_l+0x21c>
 800aee0:	2b10      	cmp	r3, #16
 800aee2:	bfd8      	it	le
 800aee4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800aee8:	e7dc      	b.n	800aea4 <_strtod_l+0x21c>
 800aeea:	2e10      	cmp	r6, #16
 800aeec:	bfdc      	itt	le
 800aeee:	230a      	movle	r3, #10
 800aef0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800aef4:	e7e3      	b.n	800aebe <_strtod_l+0x236>
 800aef6:	2300      	movs	r3, #0
 800aef8:	9308      	str	r3, [sp, #32]
 800aefa:	2301      	movs	r3, #1
 800aefc:	e780      	b.n	800ae00 <_strtod_l+0x178>
 800aefe:	f04f 0c00 	mov.w	ip, #0
 800af02:	1caa      	adds	r2, r5, #2
 800af04:	9219      	str	r2, [sp, #100]	; 0x64
 800af06:	78aa      	ldrb	r2, [r5, #2]
 800af08:	e788      	b.n	800ae1c <_strtod_l+0x194>
 800af0a:	f04f 0c01 	mov.w	ip, #1
 800af0e:	e7f8      	b.n	800af02 <_strtod_l+0x27a>
 800af10:	0800fb80 	.word	0x0800fb80
 800af14:	7ff00000 	.word	0x7ff00000
 800af18:	0800fb7c 	.word	0x0800fb7c
 800af1c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800af1e:	1c51      	adds	r1, r2, #1
 800af20:	9119      	str	r1, [sp, #100]	; 0x64
 800af22:	7852      	ldrb	r2, [r2, #1]
 800af24:	2a30      	cmp	r2, #48	; 0x30
 800af26:	d0f9      	beq.n	800af1c <_strtod_l+0x294>
 800af28:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800af2c:	2908      	cmp	r1, #8
 800af2e:	f63f af7a 	bhi.w	800ae26 <_strtod_l+0x19e>
 800af32:	3a30      	subs	r2, #48	; 0x30
 800af34:	9209      	str	r2, [sp, #36]	; 0x24
 800af36:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800af38:	920c      	str	r2, [sp, #48]	; 0x30
 800af3a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800af3c:	1c57      	adds	r7, r2, #1
 800af3e:	9719      	str	r7, [sp, #100]	; 0x64
 800af40:	7852      	ldrb	r2, [r2, #1]
 800af42:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800af46:	f1be 0f09 	cmp.w	lr, #9
 800af4a:	d938      	bls.n	800afbe <_strtod_l+0x336>
 800af4c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800af4e:	1a7f      	subs	r7, r7, r1
 800af50:	2f08      	cmp	r7, #8
 800af52:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800af56:	dc03      	bgt.n	800af60 <_strtod_l+0x2d8>
 800af58:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af5a:	428f      	cmp	r7, r1
 800af5c:	bfa8      	it	ge
 800af5e:	460f      	movge	r7, r1
 800af60:	f1bc 0f00 	cmp.w	ip, #0
 800af64:	d000      	beq.n	800af68 <_strtod_l+0x2e0>
 800af66:	427f      	negs	r7, r7
 800af68:	2e00      	cmp	r6, #0
 800af6a:	d14f      	bne.n	800b00c <_strtod_l+0x384>
 800af6c:	9905      	ldr	r1, [sp, #20]
 800af6e:	4301      	orrs	r1, r0
 800af70:	f47f aec3 	bne.w	800acfa <_strtod_l+0x72>
 800af74:	2b00      	cmp	r3, #0
 800af76:	f47f aedb 	bne.w	800ad30 <_strtod_l+0xa8>
 800af7a:	2a69      	cmp	r2, #105	; 0x69
 800af7c:	d029      	beq.n	800afd2 <_strtod_l+0x34a>
 800af7e:	dc26      	bgt.n	800afce <_strtod_l+0x346>
 800af80:	2a49      	cmp	r2, #73	; 0x49
 800af82:	d026      	beq.n	800afd2 <_strtod_l+0x34a>
 800af84:	2a4e      	cmp	r2, #78	; 0x4e
 800af86:	f47f aed3 	bne.w	800ad30 <_strtod_l+0xa8>
 800af8a:	499a      	ldr	r1, [pc, #616]	; (800b1f4 <_strtod_l+0x56c>)
 800af8c:	a819      	add	r0, sp, #100	; 0x64
 800af8e:	f001 fa15 	bl	800c3bc <__match>
 800af92:	2800      	cmp	r0, #0
 800af94:	f43f aecc 	beq.w	800ad30 <_strtod_l+0xa8>
 800af98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	2b28      	cmp	r3, #40	; 0x28
 800af9e:	d12f      	bne.n	800b000 <_strtod_l+0x378>
 800afa0:	4995      	ldr	r1, [pc, #596]	; (800b1f8 <_strtod_l+0x570>)
 800afa2:	aa1c      	add	r2, sp, #112	; 0x70
 800afa4:	a819      	add	r0, sp, #100	; 0x64
 800afa6:	f001 fa1d 	bl	800c3e4 <__hexnan>
 800afaa:	2805      	cmp	r0, #5
 800afac:	d128      	bne.n	800b000 <_strtod_l+0x378>
 800afae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800afb0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800afb4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800afb8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800afbc:	e69d      	b.n	800acfa <_strtod_l+0x72>
 800afbe:	210a      	movs	r1, #10
 800afc0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800afc2:	fb01 2107 	mla	r1, r1, r7, r2
 800afc6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800afca:	9209      	str	r2, [sp, #36]	; 0x24
 800afcc:	e7b5      	b.n	800af3a <_strtod_l+0x2b2>
 800afce:	2a6e      	cmp	r2, #110	; 0x6e
 800afd0:	e7d9      	b.n	800af86 <_strtod_l+0x2fe>
 800afd2:	498a      	ldr	r1, [pc, #552]	; (800b1fc <_strtod_l+0x574>)
 800afd4:	a819      	add	r0, sp, #100	; 0x64
 800afd6:	f001 f9f1 	bl	800c3bc <__match>
 800afda:	2800      	cmp	r0, #0
 800afdc:	f43f aea8 	beq.w	800ad30 <_strtod_l+0xa8>
 800afe0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800afe2:	4987      	ldr	r1, [pc, #540]	; (800b200 <_strtod_l+0x578>)
 800afe4:	3b01      	subs	r3, #1
 800afe6:	a819      	add	r0, sp, #100	; 0x64
 800afe8:	9319      	str	r3, [sp, #100]	; 0x64
 800afea:	f001 f9e7 	bl	800c3bc <__match>
 800afee:	b910      	cbnz	r0, 800aff6 <_strtod_l+0x36e>
 800aff0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aff2:	3301      	adds	r3, #1
 800aff4:	9319      	str	r3, [sp, #100]	; 0x64
 800aff6:	f04f 0800 	mov.w	r8, #0
 800affa:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800b204 <_strtod_l+0x57c>
 800affe:	e67c      	b.n	800acfa <_strtod_l+0x72>
 800b000:	4881      	ldr	r0, [pc, #516]	; (800b208 <_strtod_l+0x580>)
 800b002:	f000 fef9 	bl	800bdf8 <nan>
 800b006:	4680      	mov	r8, r0
 800b008:	4689      	mov	r9, r1
 800b00a:	e676      	b.n	800acfa <_strtod_l+0x72>
 800b00c:	9b08      	ldr	r3, [sp, #32]
 800b00e:	f1bb 0f00 	cmp.w	fp, #0
 800b012:	bf08      	it	eq
 800b014:	46b3      	moveq	fp, r6
 800b016:	1afb      	subs	r3, r7, r3
 800b018:	2e10      	cmp	r6, #16
 800b01a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b01c:	4635      	mov	r5, r6
 800b01e:	9309      	str	r3, [sp, #36]	; 0x24
 800b020:	bfa8      	it	ge
 800b022:	2510      	movge	r5, #16
 800b024:	f7f5 f9de 	bl	80003e4 <__aeabi_ui2d>
 800b028:	2e09      	cmp	r6, #9
 800b02a:	4680      	mov	r8, r0
 800b02c:	4689      	mov	r9, r1
 800b02e:	dd13      	ble.n	800b058 <_strtod_l+0x3d0>
 800b030:	4b76      	ldr	r3, [pc, #472]	; (800b20c <_strtod_l+0x584>)
 800b032:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b036:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b03a:	f7f5 fa4d 	bl	80004d8 <__aeabi_dmul>
 800b03e:	4680      	mov	r8, r0
 800b040:	4650      	mov	r0, sl
 800b042:	4689      	mov	r9, r1
 800b044:	f7f5 f9ce 	bl	80003e4 <__aeabi_ui2d>
 800b048:	4602      	mov	r2, r0
 800b04a:	460b      	mov	r3, r1
 800b04c:	4640      	mov	r0, r8
 800b04e:	4649      	mov	r1, r9
 800b050:	f7f5 f88c 	bl	800016c <__adddf3>
 800b054:	4680      	mov	r8, r0
 800b056:	4689      	mov	r9, r1
 800b058:	2e0f      	cmp	r6, #15
 800b05a:	dc36      	bgt.n	800b0ca <_strtod_l+0x442>
 800b05c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b05e:	2b00      	cmp	r3, #0
 800b060:	f43f ae4b 	beq.w	800acfa <_strtod_l+0x72>
 800b064:	dd22      	ble.n	800b0ac <_strtod_l+0x424>
 800b066:	2b16      	cmp	r3, #22
 800b068:	dc09      	bgt.n	800b07e <_strtod_l+0x3f6>
 800b06a:	4968      	ldr	r1, [pc, #416]	; (800b20c <_strtod_l+0x584>)
 800b06c:	4642      	mov	r2, r8
 800b06e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b072:	464b      	mov	r3, r9
 800b074:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b078:	f7f5 fa2e 	bl	80004d8 <__aeabi_dmul>
 800b07c:	e7c3      	b.n	800b006 <_strtod_l+0x37e>
 800b07e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b080:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b084:	4293      	cmp	r3, r2
 800b086:	db20      	blt.n	800b0ca <_strtod_l+0x442>
 800b088:	4c60      	ldr	r4, [pc, #384]	; (800b20c <_strtod_l+0x584>)
 800b08a:	f1c6 060f 	rsb	r6, r6, #15
 800b08e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b092:	4642      	mov	r2, r8
 800b094:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b098:	464b      	mov	r3, r9
 800b09a:	f7f5 fa1d 	bl	80004d8 <__aeabi_dmul>
 800b09e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0a0:	1b9e      	subs	r6, r3, r6
 800b0a2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b0a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b0aa:	e7e5      	b.n	800b078 <_strtod_l+0x3f0>
 800b0ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0ae:	3316      	adds	r3, #22
 800b0b0:	db0b      	blt.n	800b0ca <_strtod_l+0x442>
 800b0b2:	9b08      	ldr	r3, [sp, #32]
 800b0b4:	4640      	mov	r0, r8
 800b0b6:	1bdf      	subs	r7, r3, r7
 800b0b8:	4b54      	ldr	r3, [pc, #336]	; (800b20c <_strtod_l+0x584>)
 800b0ba:	4649      	mov	r1, r9
 800b0bc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b0c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0c4:	f7f5 fb32 	bl	800072c <__aeabi_ddiv>
 800b0c8:	e79d      	b.n	800b006 <_strtod_l+0x37e>
 800b0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0cc:	1b75      	subs	r5, r6, r5
 800b0ce:	441d      	add	r5, r3
 800b0d0:	2d00      	cmp	r5, #0
 800b0d2:	dd70      	ble.n	800b1b6 <_strtod_l+0x52e>
 800b0d4:	f015 030f 	ands.w	r3, r5, #15
 800b0d8:	d00a      	beq.n	800b0f0 <_strtod_l+0x468>
 800b0da:	494c      	ldr	r1, [pc, #304]	; (800b20c <_strtod_l+0x584>)
 800b0dc:	4642      	mov	r2, r8
 800b0de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b0e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0e6:	464b      	mov	r3, r9
 800b0e8:	f7f5 f9f6 	bl	80004d8 <__aeabi_dmul>
 800b0ec:	4680      	mov	r8, r0
 800b0ee:	4689      	mov	r9, r1
 800b0f0:	f035 050f 	bics.w	r5, r5, #15
 800b0f4:	d04d      	beq.n	800b192 <_strtod_l+0x50a>
 800b0f6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b0fa:	dd22      	ble.n	800b142 <_strtod_l+0x4ba>
 800b0fc:	2600      	movs	r6, #0
 800b0fe:	46b3      	mov	fp, r6
 800b100:	960b      	str	r6, [sp, #44]	; 0x2c
 800b102:	9608      	str	r6, [sp, #32]
 800b104:	2322      	movs	r3, #34	; 0x22
 800b106:	f04f 0800 	mov.w	r8, #0
 800b10a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800b204 <_strtod_l+0x57c>
 800b10e:	6023      	str	r3, [r4, #0]
 800b110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b112:	2b00      	cmp	r3, #0
 800b114:	f43f adf1 	beq.w	800acfa <_strtod_l+0x72>
 800b118:	4620      	mov	r0, r4
 800b11a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b11c:	f7ff f934 	bl	800a388 <_Bfree>
 800b120:	4620      	mov	r0, r4
 800b122:	9908      	ldr	r1, [sp, #32]
 800b124:	f7ff f930 	bl	800a388 <_Bfree>
 800b128:	4659      	mov	r1, fp
 800b12a:	4620      	mov	r0, r4
 800b12c:	f7ff f92c 	bl	800a388 <_Bfree>
 800b130:	4620      	mov	r0, r4
 800b132:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b134:	f7ff f928 	bl	800a388 <_Bfree>
 800b138:	4631      	mov	r1, r6
 800b13a:	4620      	mov	r0, r4
 800b13c:	f7ff f924 	bl	800a388 <_Bfree>
 800b140:	e5db      	b.n	800acfa <_strtod_l+0x72>
 800b142:	4b33      	ldr	r3, [pc, #204]	; (800b210 <_strtod_l+0x588>)
 800b144:	4640      	mov	r0, r8
 800b146:	9305      	str	r3, [sp, #20]
 800b148:	2300      	movs	r3, #0
 800b14a:	4649      	mov	r1, r9
 800b14c:	469a      	mov	sl, r3
 800b14e:	112d      	asrs	r5, r5, #4
 800b150:	2d01      	cmp	r5, #1
 800b152:	dc21      	bgt.n	800b198 <_strtod_l+0x510>
 800b154:	b10b      	cbz	r3, 800b15a <_strtod_l+0x4d2>
 800b156:	4680      	mov	r8, r0
 800b158:	4689      	mov	r9, r1
 800b15a:	492d      	ldr	r1, [pc, #180]	; (800b210 <_strtod_l+0x588>)
 800b15c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b160:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b164:	4642      	mov	r2, r8
 800b166:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b16a:	464b      	mov	r3, r9
 800b16c:	f7f5 f9b4 	bl	80004d8 <__aeabi_dmul>
 800b170:	4b24      	ldr	r3, [pc, #144]	; (800b204 <_strtod_l+0x57c>)
 800b172:	460a      	mov	r2, r1
 800b174:	400b      	ands	r3, r1
 800b176:	4927      	ldr	r1, [pc, #156]	; (800b214 <_strtod_l+0x58c>)
 800b178:	4680      	mov	r8, r0
 800b17a:	428b      	cmp	r3, r1
 800b17c:	d8be      	bhi.n	800b0fc <_strtod_l+0x474>
 800b17e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b182:	428b      	cmp	r3, r1
 800b184:	bf86      	itte	hi
 800b186:	f04f 38ff 	movhi.w	r8, #4294967295
 800b18a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800b218 <_strtod_l+0x590>
 800b18e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b192:	2300      	movs	r3, #0
 800b194:	9305      	str	r3, [sp, #20]
 800b196:	e07b      	b.n	800b290 <_strtod_l+0x608>
 800b198:	07ea      	lsls	r2, r5, #31
 800b19a:	d505      	bpl.n	800b1a8 <_strtod_l+0x520>
 800b19c:	9b05      	ldr	r3, [sp, #20]
 800b19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a2:	f7f5 f999 	bl	80004d8 <__aeabi_dmul>
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	9a05      	ldr	r2, [sp, #20]
 800b1aa:	f10a 0a01 	add.w	sl, sl, #1
 800b1ae:	3208      	adds	r2, #8
 800b1b0:	106d      	asrs	r5, r5, #1
 800b1b2:	9205      	str	r2, [sp, #20]
 800b1b4:	e7cc      	b.n	800b150 <_strtod_l+0x4c8>
 800b1b6:	d0ec      	beq.n	800b192 <_strtod_l+0x50a>
 800b1b8:	426d      	negs	r5, r5
 800b1ba:	f015 020f 	ands.w	r2, r5, #15
 800b1be:	d00a      	beq.n	800b1d6 <_strtod_l+0x54e>
 800b1c0:	4b12      	ldr	r3, [pc, #72]	; (800b20c <_strtod_l+0x584>)
 800b1c2:	4640      	mov	r0, r8
 800b1c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1c8:	4649      	mov	r1, r9
 800b1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ce:	f7f5 faad 	bl	800072c <__aeabi_ddiv>
 800b1d2:	4680      	mov	r8, r0
 800b1d4:	4689      	mov	r9, r1
 800b1d6:	112d      	asrs	r5, r5, #4
 800b1d8:	d0db      	beq.n	800b192 <_strtod_l+0x50a>
 800b1da:	2d1f      	cmp	r5, #31
 800b1dc:	dd1e      	ble.n	800b21c <_strtod_l+0x594>
 800b1de:	2600      	movs	r6, #0
 800b1e0:	46b3      	mov	fp, r6
 800b1e2:	960b      	str	r6, [sp, #44]	; 0x2c
 800b1e4:	9608      	str	r6, [sp, #32]
 800b1e6:	2322      	movs	r3, #34	; 0x22
 800b1e8:	f04f 0800 	mov.w	r8, #0
 800b1ec:	f04f 0900 	mov.w	r9, #0
 800b1f0:	6023      	str	r3, [r4, #0]
 800b1f2:	e78d      	b.n	800b110 <_strtod_l+0x488>
 800b1f4:	0800f96b 	.word	0x0800f96b
 800b1f8:	0800fb94 	.word	0x0800fb94
 800b1fc:	0800f963 	.word	0x0800f963
 800b200:	0800f99a 	.word	0x0800f99a
 800b204:	7ff00000 	.word	0x7ff00000
 800b208:	0800fd25 	.word	0x0800fd25
 800b20c:	0800faa8 	.word	0x0800faa8
 800b210:	0800fa80 	.word	0x0800fa80
 800b214:	7ca00000 	.word	0x7ca00000
 800b218:	7fefffff 	.word	0x7fefffff
 800b21c:	f015 0310 	ands.w	r3, r5, #16
 800b220:	bf18      	it	ne
 800b222:	236a      	movne	r3, #106	; 0x6a
 800b224:	4640      	mov	r0, r8
 800b226:	9305      	str	r3, [sp, #20]
 800b228:	4649      	mov	r1, r9
 800b22a:	2300      	movs	r3, #0
 800b22c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800b4f8 <_strtod_l+0x870>
 800b230:	07ea      	lsls	r2, r5, #31
 800b232:	d504      	bpl.n	800b23e <_strtod_l+0x5b6>
 800b234:	e9da 2300 	ldrd	r2, r3, [sl]
 800b238:	f7f5 f94e 	bl	80004d8 <__aeabi_dmul>
 800b23c:	2301      	movs	r3, #1
 800b23e:	106d      	asrs	r5, r5, #1
 800b240:	f10a 0a08 	add.w	sl, sl, #8
 800b244:	d1f4      	bne.n	800b230 <_strtod_l+0x5a8>
 800b246:	b10b      	cbz	r3, 800b24c <_strtod_l+0x5c4>
 800b248:	4680      	mov	r8, r0
 800b24a:	4689      	mov	r9, r1
 800b24c:	9b05      	ldr	r3, [sp, #20]
 800b24e:	b1bb      	cbz	r3, 800b280 <_strtod_l+0x5f8>
 800b250:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b254:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b258:	2b00      	cmp	r3, #0
 800b25a:	4649      	mov	r1, r9
 800b25c:	dd10      	ble.n	800b280 <_strtod_l+0x5f8>
 800b25e:	2b1f      	cmp	r3, #31
 800b260:	f340 8128 	ble.w	800b4b4 <_strtod_l+0x82c>
 800b264:	2b34      	cmp	r3, #52	; 0x34
 800b266:	bfd8      	it	le
 800b268:	f04f 33ff 	movle.w	r3, #4294967295
 800b26c:	f04f 0800 	mov.w	r8, #0
 800b270:	bfcf      	iteee	gt
 800b272:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b276:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b27a:	4093      	lslle	r3, r2
 800b27c:	ea03 0901 	andle.w	r9, r3, r1
 800b280:	2200      	movs	r2, #0
 800b282:	2300      	movs	r3, #0
 800b284:	4640      	mov	r0, r8
 800b286:	4649      	mov	r1, r9
 800b288:	f7f5 fb8e 	bl	80009a8 <__aeabi_dcmpeq>
 800b28c:	2800      	cmp	r0, #0
 800b28e:	d1a6      	bne.n	800b1de <_strtod_l+0x556>
 800b290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b292:	465a      	mov	r2, fp
 800b294:	9300      	str	r3, [sp, #0]
 800b296:	4620      	mov	r0, r4
 800b298:	4633      	mov	r3, r6
 800b29a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b29c:	f7ff f8dc 	bl	800a458 <__s2b>
 800b2a0:	900b      	str	r0, [sp, #44]	; 0x2c
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	f43f af2a 	beq.w	800b0fc <_strtod_l+0x474>
 800b2a8:	2600      	movs	r6, #0
 800b2aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2ac:	9b08      	ldr	r3, [sp, #32]
 800b2ae:	2a00      	cmp	r2, #0
 800b2b0:	eba3 0307 	sub.w	r3, r3, r7
 800b2b4:	bfa8      	it	ge
 800b2b6:	2300      	movge	r3, #0
 800b2b8:	46b3      	mov	fp, r6
 800b2ba:	9312      	str	r3, [sp, #72]	; 0x48
 800b2bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b2c0:	9316      	str	r3, [sp, #88]	; 0x58
 800b2c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	6859      	ldr	r1, [r3, #4]
 800b2c8:	f7ff f81e 	bl	800a308 <_Balloc>
 800b2cc:	9008      	str	r0, [sp, #32]
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	f43f af18 	beq.w	800b104 <_strtod_l+0x47c>
 800b2d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2d6:	300c      	adds	r0, #12
 800b2d8:	691a      	ldr	r2, [r3, #16]
 800b2da:	f103 010c 	add.w	r1, r3, #12
 800b2de:	3202      	adds	r2, #2
 800b2e0:	0092      	lsls	r2, r2, #2
 800b2e2:	f7fe f892 	bl	800940a <memcpy>
 800b2e6:	ab1c      	add	r3, sp, #112	; 0x70
 800b2e8:	9301      	str	r3, [sp, #4]
 800b2ea:	ab1b      	add	r3, sp, #108	; 0x6c
 800b2ec:	9300      	str	r3, [sp, #0]
 800b2ee:	4642      	mov	r2, r8
 800b2f0:	464b      	mov	r3, r9
 800b2f2:	4620      	mov	r0, r4
 800b2f4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800b2f8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800b2fc:	f7ff fbd8 	bl	800aab0 <__d2b>
 800b300:	901a      	str	r0, [sp, #104]	; 0x68
 800b302:	2800      	cmp	r0, #0
 800b304:	f43f aefe 	beq.w	800b104 <_strtod_l+0x47c>
 800b308:	2101      	movs	r1, #1
 800b30a:	4620      	mov	r0, r4
 800b30c:	f7ff f93c 	bl	800a588 <__i2b>
 800b310:	4683      	mov	fp, r0
 800b312:	2800      	cmp	r0, #0
 800b314:	f43f aef6 	beq.w	800b104 <_strtod_l+0x47c>
 800b318:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b31a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b31c:	2f00      	cmp	r7, #0
 800b31e:	bfab      	itete	ge
 800b320:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800b322:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800b324:	eb07 0a03 	addge.w	sl, r7, r3
 800b328:	1bdd      	sublt	r5, r3, r7
 800b32a:	9b05      	ldr	r3, [sp, #20]
 800b32c:	bfa8      	it	ge
 800b32e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800b330:	eba7 0703 	sub.w	r7, r7, r3
 800b334:	4417      	add	r7, r2
 800b336:	4b71      	ldr	r3, [pc, #452]	; (800b4fc <_strtod_l+0x874>)
 800b338:	f107 37ff 	add.w	r7, r7, #4294967295
 800b33c:	bfb8      	it	lt
 800b33e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800b342:	429f      	cmp	r7, r3
 800b344:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b348:	f280 80c7 	bge.w	800b4da <_strtod_l+0x852>
 800b34c:	1bdb      	subs	r3, r3, r7
 800b34e:	2b1f      	cmp	r3, #31
 800b350:	f04f 0101 	mov.w	r1, #1
 800b354:	eba2 0203 	sub.w	r2, r2, r3
 800b358:	f300 80b3 	bgt.w	800b4c2 <_strtod_l+0x83a>
 800b35c:	fa01 f303 	lsl.w	r3, r1, r3
 800b360:	9313      	str	r3, [sp, #76]	; 0x4c
 800b362:	2300      	movs	r3, #0
 800b364:	9310      	str	r3, [sp, #64]	; 0x40
 800b366:	eb0a 0702 	add.w	r7, sl, r2
 800b36a:	9b05      	ldr	r3, [sp, #20]
 800b36c:	45ba      	cmp	sl, r7
 800b36e:	4415      	add	r5, r2
 800b370:	441d      	add	r5, r3
 800b372:	4653      	mov	r3, sl
 800b374:	bfa8      	it	ge
 800b376:	463b      	movge	r3, r7
 800b378:	42ab      	cmp	r3, r5
 800b37a:	bfa8      	it	ge
 800b37c:	462b      	movge	r3, r5
 800b37e:	2b00      	cmp	r3, #0
 800b380:	bfc2      	ittt	gt
 800b382:	1aff      	subgt	r7, r7, r3
 800b384:	1aed      	subgt	r5, r5, r3
 800b386:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b38a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	dd17      	ble.n	800b3c0 <_strtod_l+0x738>
 800b390:	4659      	mov	r1, fp
 800b392:	461a      	mov	r2, r3
 800b394:	4620      	mov	r0, r4
 800b396:	f7ff f9b5 	bl	800a704 <__pow5mult>
 800b39a:	4683      	mov	fp, r0
 800b39c:	2800      	cmp	r0, #0
 800b39e:	f43f aeb1 	beq.w	800b104 <_strtod_l+0x47c>
 800b3a2:	4601      	mov	r1, r0
 800b3a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	f7ff f904 	bl	800a5b4 <__multiply>
 800b3ac:	900a      	str	r0, [sp, #40]	; 0x28
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	f43f aea8 	beq.w	800b104 <_strtod_l+0x47c>
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b3b8:	f7fe ffe6 	bl	800a388 <_Bfree>
 800b3bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3be:	931a      	str	r3, [sp, #104]	; 0x68
 800b3c0:	2f00      	cmp	r7, #0
 800b3c2:	f300 808f 	bgt.w	800b4e4 <_strtod_l+0x85c>
 800b3c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	dd08      	ble.n	800b3de <_strtod_l+0x756>
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b3d0:	9908      	ldr	r1, [sp, #32]
 800b3d2:	f7ff f997 	bl	800a704 <__pow5mult>
 800b3d6:	9008      	str	r0, [sp, #32]
 800b3d8:	2800      	cmp	r0, #0
 800b3da:	f43f ae93 	beq.w	800b104 <_strtod_l+0x47c>
 800b3de:	2d00      	cmp	r5, #0
 800b3e0:	dd08      	ble.n	800b3f4 <_strtod_l+0x76c>
 800b3e2:	462a      	mov	r2, r5
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	9908      	ldr	r1, [sp, #32]
 800b3e8:	f7ff f9e6 	bl	800a7b8 <__lshift>
 800b3ec:	9008      	str	r0, [sp, #32]
 800b3ee:	2800      	cmp	r0, #0
 800b3f0:	f43f ae88 	beq.w	800b104 <_strtod_l+0x47c>
 800b3f4:	f1ba 0f00 	cmp.w	sl, #0
 800b3f8:	dd08      	ble.n	800b40c <_strtod_l+0x784>
 800b3fa:	4659      	mov	r1, fp
 800b3fc:	4652      	mov	r2, sl
 800b3fe:	4620      	mov	r0, r4
 800b400:	f7ff f9da 	bl	800a7b8 <__lshift>
 800b404:	4683      	mov	fp, r0
 800b406:	2800      	cmp	r0, #0
 800b408:	f43f ae7c 	beq.w	800b104 <_strtod_l+0x47c>
 800b40c:	4620      	mov	r0, r4
 800b40e:	9a08      	ldr	r2, [sp, #32]
 800b410:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b412:	f7ff fa59 	bl	800a8c8 <__mdiff>
 800b416:	4606      	mov	r6, r0
 800b418:	2800      	cmp	r0, #0
 800b41a:	f43f ae73 	beq.w	800b104 <_strtod_l+0x47c>
 800b41e:	2500      	movs	r5, #0
 800b420:	68c3      	ldr	r3, [r0, #12]
 800b422:	4659      	mov	r1, fp
 800b424:	60c5      	str	r5, [r0, #12]
 800b426:	930a      	str	r3, [sp, #40]	; 0x28
 800b428:	f7ff fa32 	bl	800a890 <__mcmp>
 800b42c:	42a8      	cmp	r0, r5
 800b42e:	da6b      	bge.n	800b508 <_strtod_l+0x880>
 800b430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b432:	ea53 0308 	orrs.w	r3, r3, r8
 800b436:	f040 808f 	bne.w	800b558 <_strtod_l+0x8d0>
 800b43a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b43e:	2b00      	cmp	r3, #0
 800b440:	f040 808a 	bne.w	800b558 <_strtod_l+0x8d0>
 800b444:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b448:	0d1b      	lsrs	r3, r3, #20
 800b44a:	051b      	lsls	r3, r3, #20
 800b44c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b450:	f240 8082 	bls.w	800b558 <_strtod_l+0x8d0>
 800b454:	6973      	ldr	r3, [r6, #20]
 800b456:	b913      	cbnz	r3, 800b45e <_strtod_l+0x7d6>
 800b458:	6933      	ldr	r3, [r6, #16]
 800b45a:	2b01      	cmp	r3, #1
 800b45c:	dd7c      	ble.n	800b558 <_strtod_l+0x8d0>
 800b45e:	4631      	mov	r1, r6
 800b460:	2201      	movs	r2, #1
 800b462:	4620      	mov	r0, r4
 800b464:	f7ff f9a8 	bl	800a7b8 <__lshift>
 800b468:	4659      	mov	r1, fp
 800b46a:	4606      	mov	r6, r0
 800b46c:	f7ff fa10 	bl	800a890 <__mcmp>
 800b470:	2800      	cmp	r0, #0
 800b472:	dd71      	ble.n	800b558 <_strtod_l+0x8d0>
 800b474:	9905      	ldr	r1, [sp, #20]
 800b476:	464b      	mov	r3, r9
 800b478:	4a21      	ldr	r2, [pc, #132]	; (800b500 <_strtod_l+0x878>)
 800b47a:	2900      	cmp	r1, #0
 800b47c:	f000 808d 	beq.w	800b59a <_strtod_l+0x912>
 800b480:	ea02 0109 	and.w	r1, r2, r9
 800b484:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b488:	f300 8087 	bgt.w	800b59a <_strtod_l+0x912>
 800b48c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b490:	f77f aea9 	ble.w	800b1e6 <_strtod_l+0x55e>
 800b494:	4640      	mov	r0, r8
 800b496:	4649      	mov	r1, r9
 800b498:	4b1a      	ldr	r3, [pc, #104]	; (800b504 <_strtod_l+0x87c>)
 800b49a:	2200      	movs	r2, #0
 800b49c:	f7f5 f81c 	bl	80004d8 <__aeabi_dmul>
 800b4a0:	4b17      	ldr	r3, [pc, #92]	; (800b500 <_strtod_l+0x878>)
 800b4a2:	4680      	mov	r8, r0
 800b4a4:	400b      	ands	r3, r1
 800b4a6:	4689      	mov	r9, r1
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f47f ae35 	bne.w	800b118 <_strtod_l+0x490>
 800b4ae:	2322      	movs	r3, #34	; 0x22
 800b4b0:	6023      	str	r3, [r4, #0]
 800b4b2:	e631      	b.n	800b118 <_strtod_l+0x490>
 800b4b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b4b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b4bc:	ea03 0808 	and.w	r8, r3, r8
 800b4c0:	e6de      	b.n	800b280 <_strtod_l+0x5f8>
 800b4c2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800b4c6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800b4ca:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800b4ce:	37e2      	adds	r7, #226	; 0xe2
 800b4d0:	fa01 f307 	lsl.w	r3, r1, r7
 800b4d4:	9310      	str	r3, [sp, #64]	; 0x40
 800b4d6:	9113      	str	r1, [sp, #76]	; 0x4c
 800b4d8:	e745      	b.n	800b366 <_strtod_l+0x6de>
 800b4da:	2300      	movs	r3, #0
 800b4dc:	9310      	str	r3, [sp, #64]	; 0x40
 800b4de:	2301      	movs	r3, #1
 800b4e0:	9313      	str	r3, [sp, #76]	; 0x4c
 800b4e2:	e740      	b.n	800b366 <_strtod_l+0x6de>
 800b4e4:	463a      	mov	r2, r7
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b4ea:	f7ff f965 	bl	800a7b8 <__lshift>
 800b4ee:	901a      	str	r0, [sp, #104]	; 0x68
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	f47f af68 	bne.w	800b3c6 <_strtod_l+0x73e>
 800b4f6:	e605      	b.n	800b104 <_strtod_l+0x47c>
 800b4f8:	0800fba8 	.word	0x0800fba8
 800b4fc:	fffffc02 	.word	0xfffffc02
 800b500:	7ff00000 	.word	0x7ff00000
 800b504:	39500000 	.word	0x39500000
 800b508:	46ca      	mov	sl, r9
 800b50a:	d165      	bne.n	800b5d8 <_strtod_l+0x950>
 800b50c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b50e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b512:	b352      	cbz	r2, 800b56a <_strtod_l+0x8e2>
 800b514:	4a9e      	ldr	r2, [pc, #632]	; (800b790 <_strtod_l+0xb08>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d12a      	bne.n	800b570 <_strtod_l+0x8e8>
 800b51a:	9b05      	ldr	r3, [sp, #20]
 800b51c:	4641      	mov	r1, r8
 800b51e:	b1fb      	cbz	r3, 800b560 <_strtod_l+0x8d8>
 800b520:	4b9c      	ldr	r3, [pc, #624]	; (800b794 <_strtod_l+0xb0c>)
 800b522:	f04f 32ff 	mov.w	r2, #4294967295
 800b526:	ea09 0303 	and.w	r3, r9, r3
 800b52a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b52e:	d81a      	bhi.n	800b566 <_strtod_l+0x8de>
 800b530:	0d1b      	lsrs	r3, r3, #20
 800b532:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b536:	fa02 f303 	lsl.w	r3, r2, r3
 800b53a:	4299      	cmp	r1, r3
 800b53c:	d118      	bne.n	800b570 <_strtod_l+0x8e8>
 800b53e:	4b96      	ldr	r3, [pc, #600]	; (800b798 <_strtod_l+0xb10>)
 800b540:	459a      	cmp	sl, r3
 800b542:	d102      	bne.n	800b54a <_strtod_l+0x8c2>
 800b544:	3101      	adds	r1, #1
 800b546:	f43f addd 	beq.w	800b104 <_strtod_l+0x47c>
 800b54a:	f04f 0800 	mov.w	r8, #0
 800b54e:	4b91      	ldr	r3, [pc, #580]	; (800b794 <_strtod_l+0xb0c>)
 800b550:	ea0a 0303 	and.w	r3, sl, r3
 800b554:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b558:	9b05      	ldr	r3, [sp, #20]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d19a      	bne.n	800b494 <_strtod_l+0x80c>
 800b55e:	e5db      	b.n	800b118 <_strtod_l+0x490>
 800b560:	f04f 33ff 	mov.w	r3, #4294967295
 800b564:	e7e9      	b.n	800b53a <_strtod_l+0x8b2>
 800b566:	4613      	mov	r3, r2
 800b568:	e7e7      	b.n	800b53a <_strtod_l+0x8b2>
 800b56a:	ea53 0308 	orrs.w	r3, r3, r8
 800b56e:	d081      	beq.n	800b474 <_strtod_l+0x7ec>
 800b570:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b572:	b1e3      	cbz	r3, 800b5ae <_strtod_l+0x926>
 800b574:	ea13 0f0a 	tst.w	r3, sl
 800b578:	d0ee      	beq.n	800b558 <_strtod_l+0x8d0>
 800b57a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b57c:	4640      	mov	r0, r8
 800b57e:	4649      	mov	r1, r9
 800b580:	9a05      	ldr	r2, [sp, #20]
 800b582:	b1c3      	cbz	r3, 800b5b6 <_strtod_l+0x92e>
 800b584:	f7ff fb5c 	bl	800ac40 <sulp>
 800b588:	4602      	mov	r2, r0
 800b58a:	460b      	mov	r3, r1
 800b58c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b58e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b590:	f7f4 fdec 	bl	800016c <__adddf3>
 800b594:	4680      	mov	r8, r0
 800b596:	4689      	mov	r9, r1
 800b598:	e7de      	b.n	800b558 <_strtod_l+0x8d0>
 800b59a:	4013      	ands	r3, r2
 800b59c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b5a0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b5a4:	f04f 38ff 	mov.w	r8, #4294967295
 800b5a8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b5ac:	e7d4      	b.n	800b558 <_strtod_l+0x8d0>
 800b5ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b5b0:	ea13 0f08 	tst.w	r3, r8
 800b5b4:	e7e0      	b.n	800b578 <_strtod_l+0x8f0>
 800b5b6:	f7ff fb43 	bl	800ac40 <sulp>
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	460b      	mov	r3, r1
 800b5be:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b5c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b5c2:	f7f4 fdd1 	bl	8000168 <__aeabi_dsub>
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	4680      	mov	r8, r0
 800b5cc:	4689      	mov	r9, r1
 800b5ce:	f7f5 f9eb 	bl	80009a8 <__aeabi_dcmpeq>
 800b5d2:	2800      	cmp	r0, #0
 800b5d4:	d0c0      	beq.n	800b558 <_strtod_l+0x8d0>
 800b5d6:	e606      	b.n	800b1e6 <_strtod_l+0x55e>
 800b5d8:	4659      	mov	r1, fp
 800b5da:	4630      	mov	r0, r6
 800b5dc:	f7ff fabe 	bl	800ab5c <__ratio>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b5ee:	f7f5 f9ef 	bl	80009d0 <__aeabi_dcmple>
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	d06f      	beq.n	800b6d6 <_strtod_l+0xa4e>
 800b5f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d17c      	bne.n	800b6f6 <_strtod_l+0xa6e>
 800b5fc:	f1b8 0f00 	cmp.w	r8, #0
 800b600:	d159      	bne.n	800b6b6 <_strtod_l+0xa2e>
 800b602:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b606:	2b00      	cmp	r3, #0
 800b608:	d17b      	bne.n	800b702 <_strtod_l+0xa7a>
 800b60a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b60e:	2200      	movs	r2, #0
 800b610:	4b62      	ldr	r3, [pc, #392]	; (800b79c <_strtod_l+0xb14>)
 800b612:	f7f5 f9d3 	bl	80009bc <__aeabi_dcmplt>
 800b616:	2800      	cmp	r0, #0
 800b618:	d15a      	bne.n	800b6d0 <_strtod_l+0xa48>
 800b61a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b61e:	2200      	movs	r2, #0
 800b620:	4b5f      	ldr	r3, [pc, #380]	; (800b7a0 <_strtod_l+0xb18>)
 800b622:	f7f4 ff59 	bl	80004d8 <__aeabi_dmul>
 800b626:	4605      	mov	r5, r0
 800b628:	460f      	mov	r7, r1
 800b62a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b62e:	9506      	str	r5, [sp, #24]
 800b630:	9307      	str	r3, [sp, #28]
 800b632:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b636:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b63a:	4b56      	ldr	r3, [pc, #344]	; (800b794 <_strtod_l+0xb0c>)
 800b63c:	4a55      	ldr	r2, [pc, #340]	; (800b794 <_strtod_l+0xb0c>)
 800b63e:	ea0a 0303 	and.w	r3, sl, r3
 800b642:	9313      	str	r3, [sp, #76]	; 0x4c
 800b644:	4b57      	ldr	r3, [pc, #348]	; (800b7a4 <_strtod_l+0xb1c>)
 800b646:	ea0a 0202 	and.w	r2, sl, r2
 800b64a:	429a      	cmp	r2, r3
 800b64c:	f040 80b0 	bne.w	800b7b0 <_strtod_l+0xb28>
 800b650:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b654:	4640      	mov	r0, r8
 800b656:	4649      	mov	r1, r9
 800b658:	f7ff f9c2 	bl	800a9e0 <__ulp>
 800b65c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b660:	f7f4 ff3a 	bl	80004d8 <__aeabi_dmul>
 800b664:	4642      	mov	r2, r8
 800b666:	464b      	mov	r3, r9
 800b668:	f7f4 fd80 	bl	800016c <__adddf3>
 800b66c:	f8df a124 	ldr.w	sl, [pc, #292]	; 800b794 <_strtod_l+0xb0c>
 800b670:	4a4d      	ldr	r2, [pc, #308]	; (800b7a8 <_strtod_l+0xb20>)
 800b672:	ea01 0a0a 	and.w	sl, r1, sl
 800b676:	4592      	cmp	sl, r2
 800b678:	4680      	mov	r8, r0
 800b67a:	d948      	bls.n	800b70e <_strtod_l+0xa86>
 800b67c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b67e:	4b46      	ldr	r3, [pc, #280]	; (800b798 <_strtod_l+0xb10>)
 800b680:	429a      	cmp	r2, r3
 800b682:	d103      	bne.n	800b68c <_strtod_l+0xa04>
 800b684:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b686:	3301      	adds	r3, #1
 800b688:	f43f ad3c 	beq.w	800b104 <_strtod_l+0x47c>
 800b68c:	f04f 38ff 	mov.w	r8, #4294967295
 800b690:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800b798 <_strtod_l+0xb10>
 800b694:	4620      	mov	r0, r4
 800b696:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b698:	f7fe fe76 	bl	800a388 <_Bfree>
 800b69c:	4620      	mov	r0, r4
 800b69e:	9908      	ldr	r1, [sp, #32]
 800b6a0:	f7fe fe72 	bl	800a388 <_Bfree>
 800b6a4:	4659      	mov	r1, fp
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	f7fe fe6e 	bl	800a388 <_Bfree>
 800b6ac:	4631      	mov	r1, r6
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	f7fe fe6a 	bl	800a388 <_Bfree>
 800b6b4:	e605      	b.n	800b2c2 <_strtod_l+0x63a>
 800b6b6:	f1b8 0f01 	cmp.w	r8, #1
 800b6ba:	d103      	bne.n	800b6c4 <_strtod_l+0xa3c>
 800b6bc:	f1b9 0f00 	cmp.w	r9, #0
 800b6c0:	f43f ad91 	beq.w	800b1e6 <_strtod_l+0x55e>
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	4b39      	ldr	r3, [pc, #228]	; (800b7ac <_strtod_l+0xb24>)
 800b6c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b6ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b6ce:	e016      	b.n	800b6fe <_strtod_l+0xa76>
 800b6d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b6d2:	4f33      	ldr	r7, [pc, #204]	; (800b7a0 <_strtod_l+0xb18>)
 800b6d4:	e7a9      	b.n	800b62a <_strtod_l+0x9a2>
 800b6d6:	4b32      	ldr	r3, [pc, #200]	; (800b7a0 <_strtod_l+0xb18>)
 800b6d8:	2200      	movs	r2, #0
 800b6da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b6de:	f7f4 fefb 	bl	80004d8 <__aeabi_dmul>
 800b6e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6e4:	4605      	mov	r5, r0
 800b6e6:	460f      	mov	r7, r1
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d09e      	beq.n	800b62a <_strtod_l+0x9a2>
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	460b      	mov	r3, r1
 800b6f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b6f4:	e79d      	b.n	800b632 <_strtod_l+0x9aa>
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	4b28      	ldr	r3, [pc, #160]	; (800b79c <_strtod_l+0xb14>)
 800b6fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b6fe:	4f27      	ldr	r7, [pc, #156]	; (800b79c <_strtod_l+0xb14>)
 800b700:	e797      	b.n	800b632 <_strtod_l+0x9aa>
 800b702:	2200      	movs	r2, #0
 800b704:	4b29      	ldr	r3, [pc, #164]	; (800b7ac <_strtod_l+0xb24>)
 800b706:	4645      	mov	r5, r8
 800b708:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b70c:	e7f7      	b.n	800b6fe <_strtod_l+0xa76>
 800b70e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800b712:	9b05      	ldr	r3, [sp, #20]
 800b714:	46ca      	mov	sl, r9
 800b716:	2b00      	cmp	r3, #0
 800b718:	d1bc      	bne.n	800b694 <_strtod_l+0xa0c>
 800b71a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b71e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b720:	0d1b      	lsrs	r3, r3, #20
 800b722:	051b      	lsls	r3, r3, #20
 800b724:	429a      	cmp	r2, r3
 800b726:	d1b5      	bne.n	800b694 <_strtod_l+0xa0c>
 800b728:	4628      	mov	r0, r5
 800b72a:	4639      	mov	r1, r7
 800b72c:	f7f5 fa1c 	bl	8000b68 <__aeabi_d2lz>
 800b730:	f7f4 fea4 	bl	800047c <__aeabi_l2d>
 800b734:	4602      	mov	r2, r0
 800b736:	460b      	mov	r3, r1
 800b738:	4628      	mov	r0, r5
 800b73a:	4639      	mov	r1, r7
 800b73c:	f7f4 fd14 	bl	8000168 <__aeabi_dsub>
 800b740:	460b      	mov	r3, r1
 800b742:	4602      	mov	r2, r0
 800b744:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800b748:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b74c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b74e:	ea4a 0a08 	orr.w	sl, sl, r8
 800b752:	ea5a 0a03 	orrs.w	sl, sl, r3
 800b756:	d06c      	beq.n	800b832 <_strtod_l+0xbaa>
 800b758:	a309      	add	r3, pc, #36	; (adr r3, 800b780 <_strtod_l+0xaf8>)
 800b75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75e:	f7f5 f92d 	bl	80009bc <__aeabi_dcmplt>
 800b762:	2800      	cmp	r0, #0
 800b764:	f47f acd8 	bne.w	800b118 <_strtod_l+0x490>
 800b768:	a307      	add	r3, pc, #28	; (adr r3, 800b788 <_strtod_l+0xb00>)
 800b76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b772:	f7f5 f941 	bl	80009f8 <__aeabi_dcmpgt>
 800b776:	2800      	cmp	r0, #0
 800b778:	d08c      	beq.n	800b694 <_strtod_l+0xa0c>
 800b77a:	e4cd      	b.n	800b118 <_strtod_l+0x490>
 800b77c:	f3af 8000 	nop.w
 800b780:	94a03595 	.word	0x94a03595
 800b784:	3fdfffff 	.word	0x3fdfffff
 800b788:	35afe535 	.word	0x35afe535
 800b78c:	3fe00000 	.word	0x3fe00000
 800b790:	000fffff 	.word	0x000fffff
 800b794:	7ff00000 	.word	0x7ff00000
 800b798:	7fefffff 	.word	0x7fefffff
 800b79c:	3ff00000 	.word	0x3ff00000
 800b7a0:	3fe00000 	.word	0x3fe00000
 800b7a4:	7fe00000 	.word	0x7fe00000
 800b7a8:	7c9fffff 	.word	0x7c9fffff
 800b7ac:	bff00000 	.word	0xbff00000
 800b7b0:	9b05      	ldr	r3, [sp, #20]
 800b7b2:	b333      	cbz	r3, 800b802 <_strtod_l+0xb7a>
 800b7b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b7b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b7ba:	d822      	bhi.n	800b802 <_strtod_l+0xb7a>
 800b7bc:	a328      	add	r3, pc, #160	; (adr r3, 800b860 <_strtod_l+0xbd8>)
 800b7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c2:	4628      	mov	r0, r5
 800b7c4:	4639      	mov	r1, r7
 800b7c6:	f7f5 f903 	bl	80009d0 <__aeabi_dcmple>
 800b7ca:	b1a0      	cbz	r0, 800b7f6 <_strtod_l+0xb6e>
 800b7cc:	4639      	mov	r1, r7
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	f7f5 f95a 	bl	8000a88 <__aeabi_d2uiz>
 800b7d4:	2801      	cmp	r0, #1
 800b7d6:	bf38      	it	cc
 800b7d8:	2001      	movcc	r0, #1
 800b7da:	f7f4 fe03 	bl	80003e4 <__aeabi_ui2d>
 800b7de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7e0:	4605      	mov	r5, r0
 800b7e2:	460f      	mov	r7, r1
 800b7e4:	bb03      	cbnz	r3, 800b828 <_strtod_l+0xba0>
 800b7e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7ea:	9014      	str	r0, [sp, #80]	; 0x50
 800b7ec:	9315      	str	r3, [sp, #84]	; 0x54
 800b7ee:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b7f2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b7f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b7f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b7fa:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b7fe:	1a9b      	subs	r3, r3, r2
 800b800:	9311      	str	r3, [sp, #68]	; 0x44
 800b802:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b804:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b806:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800b80a:	f7ff f8e9 	bl	800a9e0 <__ulp>
 800b80e:	4602      	mov	r2, r0
 800b810:	460b      	mov	r3, r1
 800b812:	4640      	mov	r0, r8
 800b814:	4649      	mov	r1, r9
 800b816:	f7f4 fe5f 	bl	80004d8 <__aeabi_dmul>
 800b81a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b81c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b81e:	f7f4 fca5 	bl	800016c <__adddf3>
 800b822:	4680      	mov	r8, r0
 800b824:	4689      	mov	r9, r1
 800b826:	e774      	b.n	800b712 <_strtod_l+0xa8a>
 800b828:	4602      	mov	r2, r0
 800b82a:	460b      	mov	r3, r1
 800b82c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b830:	e7dd      	b.n	800b7ee <_strtod_l+0xb66>
 800b832:	a30d      	add	r3, pc, #52	; (adr r3, 800b868 <_strtod_l+0xbe0>)
 800b834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b838:	f7f5 f8c0 	bl	80009bc <__aeabi_dcmplt>
 800b83c:	e79b      	b.n	800b776 <_strtod_l+0xaee>
 800b83e:	2300      	movs	r3, #0
 800b840:	930e      	str	r3, [sp, #56]	; 0x38
 800b842:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b844:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b846:	6013      	str	r3, [r2, #0]
 800b848:	f7ff ba5b 	b.w	800ad02 <_strtod_l+0x7a>
 800b84c:	2a65      	cmp	r2, #101	; 0x65
 800b84e:	f43f ab52 	beq.w	800aef6 <_strtod_l+0x26e>
 800b852:	2a45      	cmp	r2, #69	; 0x45
 800b854:	f43f ab4f 	beq.w	800aef6 <_strtod_l+0x26e>
 800b858:	2301      	movs	r3, #1
 800b85a:	f7ff bb87 	b.w	800af6c <_strtod_l+0x2e4>
 800b85e:	bf00      	nop
 800b860:	ffc00000 	.word	0xffc00000
 800b864:	41dfffff 	.word	0x41dfffff
 800b868:	94a03595 	.word	0x94a03595
 800b86c:	3fcfffff 	.word	0x3fcfffff

0800b870 <_strtod_r>:
 800b870:	4b01      	ldr	r3, [pc, #4]	; (800b878 <_strtod_r+0x8>)
 800b872:	f7ff ba09 	b.w	800ac88 <_strtod_l>
 800b876:	bf00      	nop
 800b878:	20000084 	.word	0x20000084

0800b87c <_strtol_l.constprop.0>:
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b882:	4686      	mov	lr, r0
 800b884:	4690      	mov	r8, r2
 800b886:	d001      	beq.n	800b88c <_strtol_l.constprop.0+0x10>
 800b888:	2b24      	cmp	r3, #36	; 0x24
 800b88a:	d906      	bls.n	800b89a <_strtol_l.constprop.0+0x1e>
 800b88c:	f7fd fd82 	bl	8009394 <__errno>
 800b890:	2316      	movs	r3, #22
 800b892:	6003      	str	r3, [r0, #0]
 800b894:	2000      	movs	r0, #0
 800b896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b89a:	460d      	mov	r5, r1
 800b89c:	4835      	ldr	r0, [pc, #212]	; (800b974 <_strtol_l.constprop.0+0xf8>)
 800b89e:	462a      	mov	r2, r5
 800b8a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b8a4:	5d06      	ldrb	r6, [r0, r4]
 800b8a6:	f016 0608 	ands.w	r6, r6, #8
 800b8aa:	d1f8      	bne.n	800b89e <_strtol_l.constprop.0+0x22>
 800b8ac:	2c2d      	cmp	r4, #45	; 0x2d
 800b8ae:	d12e      	bne.n	800b90e <_strtol_l.constprop.0+0x92>
 800b8b0:	2601      	movs	r6, #1
 800b8b2:	782c      	ldrb	r4, [r5, #0]
 800b8b4:	1c95      	adds	r5, r2, #2
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d057      	beq.n	800b96a <_strtol_l.constprop.0+0xee>
 800b8ba:	2b10      	cmp	r3, #16
 800b8bc:	d109      	bne.n	800b8d2 <_strtol_l.constprop.0+0x56>
 800b8be:	2c30      	cmp	r4, #48	; 0x30
 800b8c0:	d107      	bne.n	800b8d2 <_strtol_l.constprop.0+0x56>
 800b8c2:	782a      	ldrb	r2, [r5, #0]
 800b8c4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b8c8:	2a58      	cmp	r2, #88	; 0x58
 800b8ca:	d149      	bne.n	800b960 <_strtol_l.constprop.0+0xe4>
 800b8cc:	2310      	movs	r3, #16
 800b8ce:	786c      	ldrb	r4, [r5, #1]
 800b8d0:	3502      	adds	r5, #2
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800b8d8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b8dc:	fbbc f9f3 	udiv	r9, ip, r3
 800b8e0:	4610      	mov	r0, r2
 800b8e2:	fb03 ca19 	mls	sl, r3, r9, ip
 800b8e6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b8ea:	2f09      	cmp	r7, #9
 800b8ec:	d814      	bhi.n	800b918 <_strtol_l.constprop.0+0x9c>
 800b8ee:	463c      	mov	r4, r7
 800b8f0:	42a3      	cmp	r3, r4
 800b8f2:	dd20      	ble.n	800b936 <_strtol_l.constprop.0+0xba>
 800b8f4:	1c57      	adds	r7, r2, #1
 800b8f6:	d007      	beq.n	800b908 <_strtol_l.constprop.0+0x8c>
 800b8f8:	4581      	cmp	r9, r0
 800b8fa:	d319      	bcc.n	800b930 <_strtol_l.constprop.0+0xb4>
 800b8fc:	d101      	bne.n	800b902 <_strtol_l.constprop.0+0x86>
 800b8fe:	45a2      	cmp	sl, r4
 800b900:	db16      	blt.n	800b930 <_strtol_l.constprop.0+0xb4>
 800b902:	2201      	movs	r2, #1
 800b904:	fb00 4003 	mla	r0, r0, r3, r4
 800b908:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b90c:	e7eb      	b.n	800b8e6 <_strtol_l.constprop.0+0x6a>
 800b90e:	2c2b      	cmp	r4, #43	; 0x2b
 800b910:	bf04      	itt	eq
 800b912:	782c      	ldrbeq	r4, [r5, #0]
 800b914:	1c95      	addeq	r5, r2, #2
 800b916:	e7ce      	b.n	800b8b6 <_strtol_l.constprop.0+0x3a>
 800b918:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b91c:	2f19      	cmp	r7, #25
 800b91e:	d801      	bhi.n	800b924 <_strtol_l.constprop.0+0xa8>
 800b920:	3c37      	subs	r4, #55	; 0x37
 800b922:	e7e5      	b.n	800b8f0 <_strtol_l.constprop.0+0x74>
 800b924:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b928:	2f19      	cmp	r7, #25
 800b92a:	d804      	bhi.n	800b936 <_strtol_l.constprop.0+0xba>
 800b92c:	3c57      	subs	r4, #87	; 0x57
 800b92e:	e7df      	b.n	800b8f0 <_strtol_l.constprop.0+0x74>
 800b930:	f04f 32ff 	mov.w	r2, #4294967295
 800b934:	e7e8      	b.n	800b908 <_strtol_l.constprop.0+0x8c>
 800b936:	1c53      	adds	r3, r2, #1
 800b938:	d108      	bne.n	800b94c <_strtol_l.constprop.0+0xd0>
 800b93a:	2322      	movs	r3, #34	; 0x22
 800b93c:	4660      	mov	r0, ip
 800b93e:	f8ce 3000 	str.w	r3, [lr]
 800b942:	f1b8 0f00 	cmp.w	r8, #0
 800b946:	d0a6      	beq.n	800b896 <_strtol_l.constprop.0+0x1a>
 800b948:	1e69      	subs	r1, r5, #1
 800b94a:	e006      	b.n	800b95a <_strtol_l.constprop.0+0xde>
 800b94c:	b106      	cbz	r6, 800b950 <_strtol_l.constprop.0+0xd4>
 800b94e:	4240      	negs	r0, r0
 800b950:	f1b8 0f00 	cmp.w	r8, #0
 800b954:	d09f      	beq.n	800b896 <_strtol_l.constprop.0+0x1a>
 800b956:	2a00      	cmp	r2, #0
 800b958:	d1f6      	bne.n	800b948 <_strtol_l.constprop.0+0xcc>
 800b95a:	f8c8 1000 	str.w	r1, [r8]
 800b95e:	e79a      	b.n	800b896 <_strtol_l.constprop.0+0x1a>
 800b960:	2430      	movs	r4, #48	; 0x30
 800b962:	2b00      	cmp	r3, #0
 800b964:	d1b5      	bne.n	800b8d2 <_strtol_l.constprop.0+0x56>
 800b966:	2308      	movs	r3, #8
 800b968:	e7b3      	b.n	800b8d2 <_strtol_l.constprop.0+0x56>
 800b96a:	2c30      	cmp	r4, #48	; 0x30
 800b96c:	d0a9      	beq.n	800b8c2 <_strtol_l.constprop.0+0x46>
 800b96e:	230a      	movs	r3, #10
 800b970:	e7af      	b.n	800b8d2 <_strtol_l.constprop.0+0x56>
 800b972:	bf00      	nop
 800b974:	0800fbd1 	.word	0x0800fbd1

0800b978 <_strtol_r>:
 800b978:	f7ff bf80 	b.w	800b87c <_strtol_l.constprop.0>

0800b97c <__ssputs_r>:
 800b97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b980:	461f      	mov	r7, r3
 800b982:	688e      	ldr	r6, [r1, #8]
 800b984:	4682      	mov	sl, r0
 800b986:	42be      	cmp	r6, r7
 800b988:	460c      	mov	r4, r1
 800b98a:	4690      	mov	r8, r2
 800b98c:	680b      	ldr	r3, [r1, #0]
 800b98e:	d82c      	bhi.n	800b9ea <__ssputs_r+0x6e>
 800b990:	898a      	ldrh	r2, [r1, #12]
 800b992:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b996:	d026      	beq.n	800b9e6 <__ssputs_r+0x6a>
 800b998:	6965      	ldr	r5, [r4, #20]
 800b99a:	6909      	ldr	r1, [r1, #16]
 800b99c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b9a0:	eba3 0901 	sub.w	r9, r3, r1
 800b9a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b9a8:	1c7b      	adds	r3, r7, #1
 800b9aa:	444b      	add	r3, r9
 800b9ac:	106d      	asrs	r5, r5, #1
 800b9ae:	429d      	cmp	r5, r3
 800b9b0:	bf38      	it	cc
 800b9b2:	461d      	movcc	r5, r3
 800b9b4:	0553      	lsls	r3, r2, #21
 800b9b6:	d527      	bpl.n	800ba08 <__ssputs_r+0x8c>
 800b9b8:	4629      	mov	r1, r5
 800b9ba:	f7fe fc19 	bl	800a1f0 <_malloc_r>
 800b9be:	4606      	mov	r6, r0
 800b9c0:	b360      	cbz	r0, 800ba1c <__ssputs_r+0xa0>
 800b9c2:	464a      	mov	r2, r9
 800b9c4:	6921      	ldr	r1, [r4, #16]
 800b9c6:	f7fd fd20 	bl	800940a <memcpy>
 800b9ca:	89a3      	ldrh	r3, [r4, #12]
 800b9cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b9d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9d4:	81a3      	strh	r3, [r4, #12]
 800b9d6:	6126      	str	r6, [r4, #16]
 800b9d8:	444e      	add	r6, r9
 800b9da:	6026      	str	r6, [r4, #0]
 800b9dc:	463e      	mov	r6, r7
 800b9de:	6165      	str	r5, [r4, #20]
 800b9e0:	eba5 0509 	sub.w	r5, r5, r9
 800b9e4:	60a5      	str	r5, [r4, #8]
 800b9e6:	42be      	cmp	r6, r7
 800b9e8:	d900      	bls.n	800b9ec <__ssputs_r+0x70>
 800b9ea:	463e      	mov	r6, r7
 800b9ec:	4632      	mov	r2, r6
 800b9ee:	4641      	mov	r1, r8
 800b9f0:	6820      	ldr	r0, [r4, #0]
 800b9f2:	f000 f9c5 	bl	800bd80 <memmove>
 800b9f6:	2000      	movs	r0, #0
 800b9f8:	68a3      	ldr	r3, [r4, #8]
 800b9fa:	1b9b      	subs	r3, r3, r6
 800b9fc:	60a3      	str	r3, [r4, #8]
 800b9fe:	6823      	ldr	r3, [r4, #0]
 800ba00:	4433      	add	r3, r6
 800ba02:	6023      	str	r3, [r4, #0]
 800ba04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba08:	462a      	mov	r2, r5
 800ba0a:	f000 fd98 	bl	800c53e <_realloc_r>
 800ba0e:	4606      	mov	r6, r0
 800ba10:	2800      	cmp	r0, #0
 800ba12:	d1e0      	bne.n	800b9d6 <__ssputs_r+0x5a>
 800ba14:	4650      	mov	r0, sl
 800ba16:	6921      	ldr	r1, [r4, #16]
 800ba18:	f7fe fb7a 	bl	800a110 <_free_r>
 800ba1c:	230c      	movs	r3, #12
 800ba1e:	f8ca 3000 	str.w	r3, [sl]
 800ba22:	89a3      	ldrh	r3, [r4, #12]
 800ba24:	f04f 30ff 	mov.w	r0, #4294967295
 800ba28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba2c:	81a3      	strh	r3, [r4, #12]
 800ba2e:	e7e9      	b.n	800ba04 <__ssputs_r+0x88>

0800ba30 <_svfiprintf_r>:
 800ba30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba34:	4698      	mov	r8, r3
 800ba36:	898b      	ldrh	r3, [r1, #12]
 800ba38:	4607      	mov	r7, r0
 800ba3a:	061b      	lsls	r3, r3, #24
 800ba3c:	460d      	mov	r5, r1
 800ba3e:	4614      	mov	r4, r2
 800ba40:	b09d      	sub	sp, #116	; 0x74
 800ba42:	d50e      	bpl.n	800ba62 <_svfiprintf_r+0x32>
 800ba44:	690b      	ldr	r3, [r1, #16]
 800ba46:	b963      	cbnz	r3, 800ba62 <_svfiprintf_r+0x32>
 800ba48:	2140      	movs	r1, #64	; 0x40
 800ba4a:	f7fe fbd1 	bl	800a1f0 <_malloc_r>
 800ba4e:	6028      	str	r0, [r5, #0]
 800ba50:	6128      	str	r0, [r5, #16]
 800ba52:	b920      	cbnz	r0, 800ba5e <_svfiprintf_r+0x2e>
 800ba54:	230c      	movs	r3, #12
 800ba56:	603b      	str	r3, [r7, #0]
 800ba58:	f04f 30ff 	mov.w	r0, #4294967295
 800ba5c:	e0d0      	b.n	800bc00 <_svfiprintf_r+0x1d0>
 800ba5e:	2340      	movs	r3, #64	; 0x40
 800ba60:	616b      	str	r3, [r5, #20]
 800ba62:	2300      	movs	r3, #0
 800ba64:	9309      	str	r3, [sp, #36]	; 0x24
 800ba66:	2320      	movs	r3, #32
 800ba68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba6c:	2330      	movs	r3, #48	; 0x30
 800ba6e:	f04f 0901 	mov.w	r9, #1
 800ba72:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba76:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800bc18 <_svfiprintf_r+0x1e8>
 800ba7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba7e:	4623      	mov	r3, r4
 800ba80:	469a      	mov	sl, r3
 800ba82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba86:	b10a      	cbz	r2, 800ba8c <_svfiprintf_r+0x5c>
 800ba88:	2a25      	cmp	r2, #37	; 0x25
 800ba8a:	d1f9      	bne.n	800ba80 <_svfiprintf_r+0x50>
 800ba8c:	ebba 0b04 	subs.w	fp, sl, r4
 800ba90:	d00b      	beq.n	800baaa <_svfiprintf_r+0x7a>
 800ba92:	465b      	mov	r3, fp
 800ba94:	4622      	mov	r2, r4
 800ba96:	4629      	mov	r1, r5
 800ba98:	4638      	mov	r0, r7
 800ba9a:	f7ff ff6f 	bl	800b97c <__ssputs_r>
 800ba9e:	3001      	adds	r0, #1
 800baa0:	f000 80a9 	beq.w	800bbf6 <_svfiprintf_r+0x1c6>
 800baa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baa6:	445a      	add	r2, fp
 800baa8:	9209      	str	r2, [sp, #36]	; 0x24
 800baaa:	f89a 3000 	ldrb.w	r3, [sl]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	f000 80a1 	beq.w	800bbf6 <_svfiprintf_r+0x1c6>
 800bab4:	2300      	movs	r3, #0
 800bab6:	f04f 32ff 	mov.w	r2, #4294967295
 800baba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800babe:	f10a 0a01 	add.w	sl, sl, #1
 800bac2:	9304      	str	r3, [sp, #16]
 800bac4:	9307      	str	r3, [sp, #28]
 800bac6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800baca:	931a      	str	r3, [sp, #104]	; 0x68
 800bacc:	4654      	mov	r4, sl
 800bace:	2205      	movs	r2, #5
 800bad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bad4:	4850      	ldr	r0, [pc, #320]	; (800bc18 <_svfiprintf_r+0x1e8>)
 800bad6:	f7fd fc8a 	bl	80093ee <memchr>
 800bada:	9a04      	ldr	r2, [sp, #16]
 800badc:	b9d8      	cbnz	r0, 800bb16 <_svfiprintf_r+0xe6>
 800bade:	06d0      	lsls	r0, r2, #27
 800bae0:	bf44      	itt	mi
 800bae2:	2320      	movmi	r3, #32
 800bae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bae8:	0711      	lsls	r1, r2, #28
 800baea:	bf44      	itt	mi
 800baec:	232b      	movmi	r3, #43	; 0x2b
 800baee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baf2:	f89a 3000 	ldrb.w	r3, [sl]
 800baf6:	2b2a      	cmp	r3, #42	; 0x2a
 800baf8:	d015      	beq.n	800bb26 <_svfiprintf_r+0xf6>
 800bafa:	4654      	mov	r4, sl
 800bafc:	2000      	movs	r0, #0
 800bafe:	f04f 0c0a 	mov.w	ip, #10
 800bb02:	9a07      	ldr	r2, [sp, #28]
 800bb04:	4621      	mov	r1, r4
 800bb06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb0a:	3b30      	subs	r3, #48	; 0x30
 800bb0c:	2b09      	cmp	r3, #9
 800bb0e:	d94d      	bls.n	800bbac <_svfiprintf_r+0x17c>
 800bb10:	b1b0      	cbz	r0, 800bb40 <_svfiprintf_r+0x110>
 800bb12:	9207      	str	r2, [sp, #28]
 800bb14:	e014      	b.n	800bb40 <_svfiprintf_r+0x110>
 800bb16:	eba0 0308 	sub.w	r3, r0, r8
 800bb1a:	fa09 f303 	lsl.w	r3, r9, r3
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	46a2      	mov	sl, r4
 800bb22:	9304      	str	r3, [sp, #16]
 800bb24:	e7d2      	b.n	800bacc <_svfiprintf_r+0x9c>
 800bb26:	9b03      	ldr	r3, [sp, #12]
 800bb28:	1d19      	adds	r1, r3, #4
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	9103      	str	r1, [sp, #12]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	bfbb      	ittet	lt
 800bb32:	425b      	neglt	r3, r3
 800bb34:	f042 0202 	orrlt.w	r2, r2, #2
 800bb38:	9307      	strge	r3, [sp, #28]
 800bb3a:	9307      	strlt	r3, [sp, #28]
 800bb3c:	bfb8      	it	lt
 800bb3e:	9204      	strlt	r2, [sp, #16]
 800bb40:	7823      	ldrb	r3, [r4, #0]
 800bb42:	2b2e      	cmp	r3, #46	; 0x2e
 800bb44:	d10c      	bne.n	800bb60 <_svfiprintf_r+0x130>
 800bb46:	7863      	ldrb	r3, [r4, #1]
 800bb48:	2b2a      	cmp	r3, #42	; 0x2a
 800bb4a:	d134      	bne.n	800bbb6 <_svfiprintf_r+0x186>
 800bb4c:	9b03      	ldr	r3, [sp, #12]
 800bb4e:	3402      	adds	r4, #2
 800bb50:	1d1a      	adds	r2, r3, #4
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	9203      	str	r2, [sp, #12]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	bfb8      	it	lt
 800bb5a:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb5e:	9305      	str	r3, [sp, #20]
 800bb60:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800bc1c <_svfiprintf_r+0x1ec>
 800bb64:	2203      	movs	r2, #3
 800bb66:	4650      	mov	r0, sl
 800bb68:	7821      	ldrb	r1, [r4, #0]
 800bb6a:	f7fd fc40 	bl	80093ee <memchr>
 800bb6e:	b138      	cbz	r0, 800bb80 <_svfiprintf_r+0x150>
 800bb70:	2240      	movs	r2, #64	; 0x40
 800bb72:	9b04      	ldr	r3, [sp, #16]
 800bb74:	eba0 000a 	sub.w	r0, r0, sl
 800bb78:	4082      	lsls	r2, r0
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	3401      	adds	r4, #1
 800bb7e:	9304      	str	r3, [sp, #16]
 800bb80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb84:	2206      	movs	r2, #6
 800bb86:	4826      	ldr	r0, [pc, #152]	; (800bc20 <_svfiprintf_r+0x1f0>)
 800bb88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb8c:	f7fd fc2f 	bl	80093ee <memchr>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	d038      	beq.n	800bc06 <_svfiprintf_r+0x1d6>
 800bb94:	4b23      	ldr	r3, [pc, #140]	; (800bc24 <_svfiprintf_r+0x1f4>)
 800bb96:	bb1b      	cbnz	r3, 800bbe0 <_svfiprintf_r+0x1b0>
 800bb98:	9b03      	ldr	r3, [sp, #12]
 800bb9a:	3307      	adds	r3, #7
 800bb9c:	f023 0307 	bic.w	r3, r3, #7
 800bba0:	3308      	adds	r3, #8
 800bba2:	9303      	str	r3, [sp, #12]
 800bba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bba6:	4433      	add	r3, r6
 800bba8:	9309      	str	r3, [sp, #36]	; 0x24
 800bbaa:	e768      	b.n	800ba7e <_svfiprintf_r+0x4e>
 800bbac:	460c      	mov	r4, r1
 800bbae:	2001      	movs	r0, #1
 800bbb0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbb4:	e7a6      	b.n	800bb04 <_svfiprintf_r+0xd4>
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	f04f 0c0a 	mov.w	ip, #10
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	3401      	adds	r4, #1
 800bbc0:	9305      	str	r3, [sp, #20]
 800bbc2:	4620      	mov	r0, r4
 800bbc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbc8:	3a30      	subs	r2, #48	; 0x30
 800bbca:	2a09      	cmp	r2, #9
 800bbcc:	d903      	bls.n	800bbd6 <_svfiprintf_r+0x1a6>
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d0c6      	beq.n	800bb60 <_svfiprintf_r+0x130>
 800bbd2:	9105      	str	r1, [sp, #20]
 800bbd4:	e7c4      	b.n	800bb60 <_svfiprintf_r+0x130>
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	2301      	movs	r3, #1
 800bbda:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbde:	e7f0      	b.n	800bbc2 <_svfiprintf_r+0x192>
 800bbe0:	ab03      	add	r3, sp, #12
 800bbe2:	9300      	str	r3, [sp, #0]
 800bbe4:	462a      	mov	r2, r5
 800bbe6:	4638      	mov	r0, r7
 800bbe8:	4b0f      	ldr	r3, [pc, #60]	; (800bc28 <_svfiprintf_r+0x1f8>)
 800bbea:	a904      	add	r1, sp, #16
 800bbec:	f7fc fc7a 	bl	80084e4 <_printf_float>
 800bbf0:	1c42      	adds	r2, r0, #1
 800bbf2:	4606      	mov	r6, r0
 800bbf4:	d1d6      	bne.n	800bba4 <_svfiprintf_r+0x174>
 800bbf6:	89ab      	ldrh	r3, [r5, #12]
 800bbf8:	065b      	lsls	r3, r3, #25
 800bbfa:	f53f af2d 	bmi.w	800ba58 <_svfiprintf_r+0x28>
 800bbfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc00:	b01d      	add	sp, #116	; 0x74
 800bc02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc06:	ab03      	add	r3, sp, #12
 800bc08:	9300      	str	r3, [sp, #0]
 800bc0a:	462a      	mov	r2, r5
 800bc0c:	4638      	mov	r0, r7
 800bc0e:	4b06      	ldr	r3, [pc, #24]	; (800bc28 <_svfiprintf_r+0x1f8>)
 800bc10:	a904      	add	r1, sp, #16
 800bc12:	f7fc ff07 	bl	8008a24 <_printf_i>
 800bc16:	e7eb      	b.n	800bbf0 <_svfiprintf_r+0x1c0>
 800bc18:	0800fcd1 	.word	0x0800fcd1
 800bc1c:	0800fcd7 	.word	0x0800fcd7
 800bc20:	0800fcdb 	.word	0x0800fcdb
 800bc24:	080084e5 	.word	0x080084e5
 800bc28:	0800b97d 	.word	0x0800b97d

0800bc2c <__sflush_r>:
 800bc2c:	898a      	ldrh	r2, [r1, #12]
 800bc2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc30:	4605      	mov	r5, r0
 800bc32:	0710      	lsls	r0, r2, #28
 800bc34:	460c      	mov	r4, r1
 800bc36:	d457      	bmi.n	800bce8 <__sflush_r+0xbc>
 800bc38:	684b      	ldr	r3, [r1, #4]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	dc04      	bgt.n	800bc48 <__sflush_r+0x1c>
 800bc3e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	dc01      	bgt.n	800bc48 <__sflush_r+0x1c>
 800bc44:	2000      	movs	r0, #0
 800bc46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc4a:	2e00      	cmp	r6, #0
 800bc4c:	d0fa      	beq.n	800bc44 <__sflush_r+0x18>
 800bc4e:	2300      	movs	r3, #0
 800bc50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc54:	682f      	ldr	r7, [r5, #0]
 800bc56:	6a21      	ldr	r1, [r4, #32]
 800bc58:	602b      	str	r3, [r5, #0]
 800bc5a:	d032      	beq.n	800bcc2 <__sflush_r+0x96>
 800bc5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc5e:	89a3      	ldrh	r3, [r4, #12]
 800bc60:	075a      	lsls	r2, r3, #29
 800bc62:	d505      	bpl.n	800bc70 <__sflush_r+0x44>
 800bc64:	6863      	ldr	r3, [r4, #4]
 800bc66:	1ac0      	subs	r0, r0, r3
 800bc68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc6a:	b10b      	cbz	r3, 800bc70 <__sflush_r+0x44>
 800bc6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc6e:	1ac0      	subs	r0, r0, r3
 800bc70:	2300      	movs	r3, #0
 800bc72:	4602      	mov	r2, r0
 800bc74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc76:	4628      	mov	r0, r5
 800bc78:	6a21      	ldr	r1, [r4, #32]
 800bc7a:	47b0      	blx	r6
 800bc7c:	1c43      	adds	r3, r0, #1
 800bc7e:	89a3      	ldrh	r3, [r4, #12]
 800bc80:	d106      	bne.n	800bc90 <__sflush_r+0x64>
 800bc82:	6829      	ldr	r1, [r5, #0]
 800bc84:	291d      	cmp	r1, #29
 800bc86:	d82b      	bhi.n	800bce0 <__sflush_r+0xb4>
 800bc88:	4a28      	ldr	r2, [pc, #160]	; (800bd2c <__sflush_r+0x100>)
 800bc8a:	410a      	asrs	r2, r1
 800bc8c:	07d6      	lsls	r6, r2, #31
 800bc8e:	d427      	bmi.n	800bce0 <__sflush_r+0xb4>
 800bc90:	2200      	movs	r2, #0
 800bc92:	6062      	str	r2, [r4, #4]
 800bc94:	6922      	ldr	r2, [r4, #16]
 800bc96:	04d9      	lsls	r1, r3, #19
 800bc98:	6022      	str	r2, [r4, #0]
 800bc9a:	d504      	bpl.n	800bca6 <__sflush_r+0x7a>
 800bc9c:	1c42      	adds	r2, r0, #1
 800bc9e:	d101      	bne.n	800bca4 <__sflush_r+0x78>
 800bca0:	682b      	ldr	r3, [r5, #0]
 800bca2:	b903      	cbnz	r3, 800bca6 <__sflush_r+0x7a>
 800bca4:	6560      	str	r0, [r4, #84]	; 0x54
 800bca6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bca8:	602f      	str	r7, [r5, #0]
 800bcaa:	2900      	cmp	r1, #0
 800bcac:	d0ca      	beq.n	800bc44 <__sflush_r+0x18>
 800bcae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcb2:	4299      	cmp	r1, r3
 800bcb4:	d002      	beq.n	800bcbc <__sflush_r+0x90>
 800bcb6:	4628      	mov	r0, r5
 800bcb8:	f7fe fa2a 	bl	800a110 <_free_r>
 800bcbc:	2000      	movs	r0, #0
 800bcbe:	6360      	str	r0, [r4, #52]	; 0x34
 800bcc0:	e7c1      	b.n	800bc46 <__sflush_r+0x1a>
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	4628      	mov	r0, r5
 800bcc6:	47b0      	blx	r6
 800bcc8:	1c41      	adds	r1, r0, #1
 800bcca:	d1c8      	bne.n	800bc5e <__sflush_r+0x32>
 800bccc:	682b      	ldr	r3, [r5, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d0c5      	beq.n	800bc5e <__sflush_r+0x32>
 800bcd2:	2b1d      	cmp	r3, #29
 800bcd4:	d001      	beq.n	800bcda <__sflush_r+0xae>
 800bcd6:	2b16      	cmp	r3, #22
 800bcd8:	d101      	bne.n	800bcde <__sflush_r+0xb2>
 800bcda:	602f      	str	r7, [r5, #0]
 800bcdc:	e7b2      	b.n	800bc44 <__sflush_r+0x18>
 800bcde:	89a3      	ldrh	r3, [r4, #12]
 800bce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bce4:	81a3      	strh	r3, [r4, #12]
 800bce6:	e7ae      	b.n	800bc46 <__sflush_r+0x1a>
 800bce8:	690f      	ldr	r7, [r1, #16]
 800bcea:	2f00      	cmp	r7, #0
 800bcec:	d0aa      	beq.n	800bc44 <__sflush_r+0x18>
 800bcee:	0793      	lsls	r3, r2, #30
 800bcf0:	bf18      	it	ne
 800bcf2:	2300      	movne	r3, #0
 800bcf4:	680e      	ldr	r6, [r1, #0]
 800bcf6:	bf08      	it	eq
 800bcf8:	694b      	ldreq	r3, [r1, #20]
 800bcfa:	1bf6      	subs	r6, r6, r7
 800bcfc:	600f      	str	r7, [r1, #0]
 800bcfe:	608b      	str	r3, [r1, #8]
 800bd00:	2e00      	cmp	r6, #0
 800bd02:	dd9f      	ble.n	800bc44 <__sflush_r+0x18>
 800bd04:	4633      	mov	r3, r6
 800bd06:	463a      	mov	r2, r7
 800bd08:	4628      	mov	r0, r5
 800bd0a:	6a21      	ldr	r1, [r4, #32]
 800bd0c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800bd10:	47e0      	blx	ip
 800bd12:	2800      	cmp	r0, #0
 800bd14:	dc06      	bgt.n	800bd24 <__sflush_r+0xf8>
 800bd16:	89a3      	ldrh	r3, [r4, #12]
 800bd18:	f04f 30ff 	mov.w	r0, #4294967295
 800bd1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd20:	81a3      	strh	r3, [r4, #12]
 800bd22:	e790      	b.n	800bc46 <__sflush_r+0x1a>
 800bd24:	4407      	add	r7, r0
 800bd26:	1a36      	subs	r6, r6, r0
 800bd28:	e7ea      	b.n	800bd00 <__sflush_r+0xd4>
 800bd2a:	bf00      	nop
 800bd2c:	dfbffffe 	.word	0xdfbffffe

0800bd30 <_fflush_r>:
 800bd30:	b538      	push	{r3, r4, r5, lr}
 800bd32:	690b      	ldr	r3, [r1, #16]
 800bd34:	4605      	mov	r5, r0
 800bd36:	460c      	mov	r4, r1
 800bd38:	b913      	cbnz	r3, 800bd40 <_fflush_r+0x10>
 800bd3a:	2500      	movs	r5, #0
 800bd3c:	4628      	mov	r0, r5
 800bd3e:	bd38      	pop	{r3, r4, r5, pc}
 800bd40:	b118      	cbz	r0, 800bd4a <_fflush_r+0x1a>
 800bd42:	6a03      	ldr	r3, [r0, #32]
 800bd44:	b90b      	cbnz	r3, 800bd4a <_fflush_r+0x1a>
 800bd46:	f7fd fa29 	bl	800919c <__sinit>
 800bd4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d0f3      	beq.n	800bd3a <_fflush_r+0xa>
 800bd52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd54:	07d0      	lsls	r0, r2, #31
 800bd56:	d404      	bmi.n	800bd62 <_fflush_r+0x32>
 800bd58:	0599      	lsls	r1, r3, #22
 800bd5a:	d402      	bmi.n	800bd62 <_fflush_r+0x32>
 800bd5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd5e:	f7fd fb44 	bl	80093ea <__retarget_lock_acquire_recursive>
 800bd62:	4628      	mov	r0, r5
 800bd64:	4621      	mov	r1, r4
 800bd66:	f7ff ff61 	bl	800bc2c <__sflush_r>
 800bd6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd6c:	4605      	mov	r5, r0
 800bd6e:	07da      	lsls	r2, r3, #31
 800bd70:	d4e4      	bmi.n	800bd3c <_fflush_r+0xc>
 800bd72:	89a3      	ldrh	r3, [r4, #12]
 800bd74:	059b      	lsls	r3, r3, #22
 800bd76:	d4e1      	bmi.n	800bd3c <_fflush_r+0xc>
 800bd78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd7a:	f7fd fb37 	bl	80093ec <__retarget_lock_release_recursive>
 800bd7e:	e7dd      	b.n	800bd3c <_fflush_r+0xc>

0800bd80 <memmove>:
 800bd80:	4288      	cmp	r0, r1
 800bd82:	b510      	push	{r4, lr}
 800bd84:	eb01 0402 	add.w	r4, r1, r2
 800bd88:	d902      	bls.n	800bd90 <memmove+0x10>
 800bd8a:	4284      	cmp	r4, r0
 800bd8c:	4623      	mov	r3, r4
 800bd8e:	d807      	bhi.n	800bda0 <memmove+0x20>
 800bd90:	1e43      	subs	r3, r0, #1
 800bd92:	42a1      	cmp	r1, r4
 800bd94:	d008      	beq.n	800bda8 <memmove+0x28>
 800bd96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd9e:	e7f8      	b.n	800bd92 <memmove+0x12>
 800bda0:	4601      	mov	r1, r0
 800bda2:	4402      	add	r2, r0
 800bda4:	428a      	cmp	r2, r1
 800bda6:	d100      	bne.n	800bdaa <memmove+0x2a>
 800bda8:	bd10      	pop	{r4, pc}
 800bdaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bdae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bdb2:	e7f7      	b.n	800bda4 <memmove+0x24>

0800bdb4 <strncmp>:
 800bdb4:	b510      	push	{r4, lr}
 800bdb6:	b16a      	cbz	r2, 800bdd4 <strncmp+0x20>
 800bdb8:	3901      	subs	r1, #1
 800bdba:	1884      	adds	r4, r0, r2
 800bdbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdc0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d103      	bne.n	800bdd0 <strncmp+0x1c>
 800bdc8:	42a0      	cmp	r0, r4
 800bdca:	d001      	beq.n	800bdd0 <strncmp+0x1c>
 800bdcc:	2a00      	cmp	r2, #0
 800bdce:	d1f5      	bne.n	800bdbc <strncmp+0x8>
 800bdd0:	1ad0      	subs	r0, r2, r3
 800bdd2:	bd10      	pop	{r4, pc}
 800bdd4:	4610      	mov	r0, r2
 800bdd6:	e7fc      	b.n	800bdd2 <strncmp+0x1e>

0800bdd8 <_sbrk_r>:
 800bdd8:	b538      	push	{r3, r4, r5, lr}
 800bdda:	2300      	movs	r3, #0
 800bddc:	4d05      	ldr	r5, [pc, #20]	; (800bdf4 <_sbrk_r+0x1c>)
 800bdde:	4604      	mov	r4, r0
 800bde0:	4608      	mov	r0, r1
 800bde2:	602b      	str	r3, [r5, #0]
 800bde4:	f7f6 f9c0 	bl	8002168 <_sbrk>
 800bde8:	1c43      	adds	r3, r0, #1
 800bdea:	d102      	bne.n	800bdf2 <_sbrk_r+0x1a>
 800bdec:	682b      	ldr	r3, [r5, #0]
 800bdee:	b103      	cbz	r3, 800bdf2 <_sbrk_r+0x1a>
 800bdf0:	6023      	str	r3, [r4, #0]
 800bdf2:	bd38      	pop	{r3, r4, r5, pc}
 800bdf4:	200009d0 	.word	0x200009d0

0800bdf8 <nan>:
 800bdf8:	2000      	movs	r0, #0
 800bdfa:	4901      	ldr	r1, [pc, #4]	; (800be00 <nan+0x8>)
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop
 800be00:	7ff80000 	.word	0x7ff80000

0800be04 <__assert_func>:
 800be04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be06:	4614      	mov	r4, r2
 800be08:	461a      	mov	r2, r3
 800be0a:	4b09      	ldr	r3, [pc, #36]	; (800be30 <__assert_func+0x2c>)
 800be0c:	4605      	mov	r5, r0
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	68d8      	ldr	r0, [r3, #12]
 800be12:	b14c      	cbz	r4, 800be28 <__assert_func+0x24>
 800be14:	4b07      	ldr	r3, [pc, #28]	; (800be34 <__assert_func+0x30>)
 800be16:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be1a:	9100      	str	r1, [sp, #0]
 800be1c:	462b      	mov	r3, r5
 800be1e:	4906      	ldr	r1, [pc, #24]	; (800be38 <__assert_func+0x34>)
 800be20:	f000 fbca 	bl	800c5b8 <fiprintf>
 800be24:	f000 fbda 	bl	800c5dc <abort>
 800be28:	4b04      	ldr	r3, [pc, #16]	; (800be3c <__assert_func+0x38>)
 800be2a:	461c      	mov	r4, r3
 800be2c:	e7f3      	b.n	800be16 <__assert_func+0x12>
 800be2e:	bf00      	nop
 800be30:	20000080 	.word	0x20000080
 800be34:	0800fcea 	.word	0x0800fcea
 800be38:	0800fcf7 	.word	0x0800fcf7
 800be3c:	0800fd25 	.word	0x0800fd25

0800be40 <_calloc_r>:
 800be40:	b570      	push	{r4, r5, r6, lr}
 800be42:	fba1 5402 	umull	r5, r4, r1, r2
 800be46:	b934      	cbnz	r4, 800be56 <_calloc_r+0x16>
 800be48:	4629      	mov	r1, r5
 800be4a:	f7fe f9d1 	bl	800a1f0 <_malloc_r>
 800be4e:	4606      	mov	r6, r0
 800be50:	b928      	cbnz	r0, 800be5e <_calloc_r+0x1e>
 800be52:	4630      	mov	r0, r6
 800be54:	bd70      	pop	{r4, r5, r6, pc}
 800be56:	220c      	movs	r2, #12
 800be58:	2600      	movs	r6, #0
 800be5a:	6002      	str	r2, [r0, #0]
 800be5c:	e7f9      	b.n	800be52 <_calloc_r+0x12>
 800be5e:	462a      	mov	r2, r5
 800be60:	4621      	mov	r1, r4
 800be62:	f7fd fa44 	bl	80092ee <memset>
 800be66:	e7f4      	b.n	800be52 <_calloc_r+0x12>

0800be68 <rshift>:
 800be68:	6903      	ldr	r3, [r0, #16]
 800be6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800be72:	f100 0414 	add.w	r4, r0, #20
 800be76:	ea4f 1261 	mov.w	r2, r1, asr #5
 800be7a:	dd46      	ble.n	800bf0a <rshift+0xa2>
 800be7c:	f011 011f 	ands.w	r1, r1, #31
 800be80:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800be84:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800be88:	d10c      	bne.n	800bea4 <rshift+0x3c>
 800be8a:	4629      	mov	r1, r5
 800be8c:	f100 0710 	add.w	r7, r0, #16
 800be90:	42b1      	cmp	r1, r6
 800be92:	d335      	bcc.n	800bf00 <rshift+0x98>
 800be94:	1a9b      	subs	r3, r3, r2
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	1eea      	subs	r2, r5, #3
 800be9a:	4296      	cmp	r6, r2
 800be9c:	bf38      	it	cc
 800be9e:	2300      	movcc	r3, #0
 800bea0:	4423      	add	r3, r4
 800bea2:	e015      	b.n	800bed0 <rshift+0x68>
 800bea4:	46a1      	mov	r9, r4
 800bea6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800beaa:	f1c1 0820 	rsb	r8, r1, #32
 800beae:	40cf      	lsrs	r7, r1
 800beb0:	f105 0e04 	add.w	lr, r5, #4
 800beb4:	4576      	cmp	r6, lr
 800beb6:	46f4      	mov	ip, lr
 800beb8:	d816      	bhi.n	800bee8 <rshift+0x80>
 800beba:	1a9a      	subs	r2, r3, r2
 800bebc:	0092      	lsls	r2, r2, #2
 800bebe:	3a04      	subs	r2, #4
 800bec0:	3501      	adds	r5, #1
 800bec2:	42ae      	cmp	r6, r5
 800bec4:	bf38      	it	cc
 800bec6:	2200      	movcc	r2, #0
 800bec8:	18a3      	adds	r3, r4, r2
 800beca:	50a7      	str	r7, [r4, r2]
 800becc:	b107      	cbz	r7, 800bed0 <rshift+0x68>
 800bece:	3304      	adds	r3, #4
 800bed0:	42a3      	cmp	r3, r4
 800bed2:	eba3 0204 	sub.w	r2, r3, r4
 800bed6:	bf08      	it	eq
 800bed8:	2300      	moveq	r3, #0
 800beda:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bede:	6102      	str	r2, [r0, #16]
 800bee0:	bf08      	it	eq
 800bee2:	6143      	streq	r3, [r0, #20]
 800bee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bee8:	f8dc c000 	ldr.w	ip, [ip]
 800beec:	fa0c fc08 	lsl.w	ip, ip, r8
 800bef0:	ea4c 0707 	orr.w	r7, ip, r7
 800bef4:	f849 7b04 	str.w	r7, [r9], #4
 800bef8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800befc:	40cf      	lsrs	r7, r1
 800befe:	e7d9      	b.n	800beb4 <rshift+0x4c>
 800bf00:	f851 cb04 	ldr.w	ip, [r1], #4
 800bf04:	f847 cf04 	str.w	ip, [r7, #4]!
 800bf08:	e7c2      	b.n	800be90 <rshift+0x28>
 800bf0a:	4623      	mov	r3, r4
 800bf0c:	e7e0      	b.n	800bed0 <rshift+0x68>

0800bf0e <__hexdig_fun>:
 800bf0e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bf12:	2b09      	cmp	r3, #9
 800bf14:	d802      	bhi.n	800bf1c <__hexdig_fun+0xe>
 800bf16:	3820      	subs	r0, #32
 800bf18:	b2c0      	uxtb	r0, r0
 800bf1a:	4770      	bx	lr
 800bf1c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bf20:	2b05      	cmp	r3, #5
 800bf22:	d801      	bhi.n	800bf28 <__hexdig_fun+0x1a>
 800bf24:	3847      	subs	r0, #71	; 0x47
 800bf26:	e7f7      	b.n	800bf18 <__hexdig_fun+0xa>
 800bf28:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bf2c:	2b05      	cmp	r3, #5
 800bf2e:	d801      	bhi.n	800bf34 <__hexdig_fun+0x26>
 800bf30:	3827      	subs	r0, #39	; 0x27
 800bf32:	e7f1      	b.n	800bf18 <__hexdig_fun+0xa>
 800bf34:	2000      	movs	r0, #0
 800bf36:	4770      	bx	lr

0800bf38 <__gethex>:
 800bf38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf3c:	4681      	mov	r9, r0
 800bf3e:	468a      	mov	sl, r1
 800bf40:	4617      	mov	r7, r2
 800bf42:	680a      	ldr	r2, [r1, #0]
 800bf44:	b085      	sub	sp, #20
 800bf46:	f102 0b02 	add.w	fp, r2, #2
 800bf4a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bf4e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bf52:	9302      	str	r3, [sp, #8]
 800bf54:	32fe      	adds	r2, #254	; 0xfe
 800bf56:	eb02 030b 	add.w	r3, r2, fp
 800bf5a:	46d8      	mov	r8, fp
 800bf5c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800bf60:	9301      	str	r3, [sp, #4]
 800bf62:	2830      	cmp	r0, #48	; 0x30
 800bf64:	d0f7      	beq.n	800bf56 <__gethex+0x1e>
 800bf66:	f7ff ffd2 	bl	800bf0e <__hexdig_fun>
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	2800      	cmp	r0, #0
 800bf6e:	d138      	bne.n	800bfe2 <__gethex+0xaa>
 800bf70:	2201      	movs	r2, #1
 800bf72:	4640      	mov	r0, r8
 800bf74:	49a7      	ldr	r1, [pc, #668]	; (800c214 <__gethex+0x2dc>)
 800bf76:	f7ff ff1d 	bl	800bdb4 <strncmp>
 800bf7a:	4606      	mov	r6, r0
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	d169      	bne.n	800c054 <__gethex+0x11c>
 800bf80:	f898 0001 	ldrb.w	r0, [r8, #1]
 800bf84:	465d      	mov	r5, fp
 800bf86:	f7ff ffc2 	bl	800bf0e <__hexdig_fun>
 800bf8a:	2800      	cmp	r0, #0
 800bf8c:	d064      	beq.n	800c058 <__gethex+0x120>
 800bf8e:	465a      	mov	r2, fp
 800bf90:	7810      	ldrb	r0, [r2, #0]
 800bf92:	4690      	mov	r8, r2
 800bf94:	2830      	cmp	r0, #48	; 0x30
 800bf96:	f102 0201 	add.w	r2, r2, #1
 800bf9a:	d0f9      	beq.n	800bf90 <__gethex+0x58>
 800bf9c:	f7ff ffb7 	bl	800bf0e <__hexdig_fun>
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	fab0 f480 	clz	r4, r0
 800bfa6:	465e      	mov	r6, fp
 800bfa8:	0964      	lsrs	r4, r4, #5
 800bfaa:	9301      	str	r3, [sp, #4]
 800bfac:	4642      	mov	r2, r8
 800bfae:	4615      	mov	r5, r2
 800bfb0:	7828      	ldrb	r0, [r5, #0]
 800bfb2:	3201      	adds	r2, #1
 800bfb4:	f7ff ffab 	bl	800bf0e <__hexdig_fun>
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	d1f8      	bne.n	800bfae <__gethex+0x76>
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	4628      	mov	r0, r5
 800bfc0:	4994      	ldr	r1, [pc, #592]	; (800c214 <__gethex+0x2dc>)
 800bfc2:	f7ff fef7 	bl	800bdb4 <strncmp>
 800bfc6:	b978      	cbnz	r0, 800bfe8 <__gethex+0xb0>
 800bfc8:	b946      	cbnz	r6, 800bfdc <__gethex+0xa4>
 800bfca:	1c6e      	adds	r6, r5, #1
 800bfcc:	4632      	mov	r2, r6
 800bfce:	4615      	mov	r5, r2
 800bfd0:	7828      	ldrb	r0, [r5, #0]
 800bfd2:	3201      	adds	r2, #1
 800bfd4:	f7ff ff9b 	bl	800bf0e <__hexdig_fun>
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	d1f8      	bne.n	800bfce <__gethex+0x96>
 800bfdc:	1b73      	subs	r3, r6, r5
 800bfde:	009e      	lsls	r6, r3, #2
 800bfe0:	e004      	b.n	800bfec <__gethex+0xb4>
 800bfe2:	2400      	movs	r4, #0
 800bfe4:	4626      	mov	r6, r4
 800bfe6:	e7e1      	b.n	800bfac <__gethex+0x74>
 800bfe8:	2e00      	cmp	r6, #0
 800bfea:	d1f7      	bne.n	800bfdc <__gethex+0xa4>
 800bfec:	782b      	ldrb	r3, [r5, #0]
 800bfee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bff2:	2b50      	cmp	r3, #80	; 0x50
 800bff4:	d13d      	bne.n	800c072 <__gethex+0x13a>
 800bff6:	786b      	ldrb	r3, [r5, #1]
 800bff8:	2b2b      	cmp	r3, #43	; 0x2b
 800bffa:	d02f      	beq.n	800c05c <__gethex+0x124>
 800bffc:	2b2d      	cmp	r3, #45	; 0x2d
 800bffe:	d031      	beq.n	800c064 <__gethex+0x12c>
 800c000:	f04f 0b00 	mov.w	fp, #0
 800c004:	1c69      	adds	r1, r5, #1
 800c006:	7808      	ldrb	r0, [r1, #0]
 800c008:	f7ff ff81 	bl	800bf0e <__hexdig_fun>
 800c00c:	1e42      	subs	r2, r0, #1
 800c00e:	b2d2      	uxtb	r2, r2
 800c010:	2a18      	cmp	r2, #24
 800c012:	d82e      	bhi.n	800c072 <__gethex+0x13a>
 800c014:	f1a0 0210 	sub.w	r2, r0, #16
 800c018:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c01c:	f7ff ff77 	bl	800bf0e <__hexdig_fun>
 800c020:	f100 3cff 	add.w	ip, r0, #4294967295
 800c024:	fa5f fc8c 	uxtb.w	ip, ip
 800c028:	f1bc 0f18 	cmp.w	ip, #24
 800c02c:	d91d      	bls.n	800c06a <__gethex+0x132>
 800c02e:	f1bb 0f00 	cmp.w	fp, #0
 800c032:	d000      	beq.n	800c036 <__gethex+0xfe>
 800c034:	4252      	negs	r2, r2
 800c036:	4416      	add	r6, r2
 800c038:	f8ca 1000 	str.w	r1, [sl]
 800c03c:	b1dc      	cbz	r4, 800c076 <__gethex+0x13e>
 800c03e:	9b01      	ldr	r3, [sp, #4]
 800c040:	2b00      	cmp	r3, #0
 800c042:	bf14      	ite	ne
 800c044:	f04f 0800 	movne.w	r8, #0
 800c048:	f04f 0806 	moveq.w	r8, #6
 800c04c:	4640      	mov	r0, r8
 800c04e:	b005      	add	sp, #20
 800c050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c054:	4645      	mov	r5, r8
 800c056:	4626      	mov	r6, r4
 800c058:	2401      	movs	r4, #1
 800c05a:	e7c7      	b.n	800bfec <__gethex+0xb4>
 800c05c:	f04f 0b00 	mov.w	fp, #0
 800c060:	1ca9      	adds	r1, r5, #2
 800c062:	e7d0      	b.n	800c006 <__gethex+0xce>
 800c064:	f04f 0b01 	mov.w	fp, #1
 800c068:	e7fa      	b.n	800c060 <__gethex+0x128>
 800c06a:	230a      	movs	r3, #10
 800c06c:	fb03 0002 	mla	r0, r3, r2, r0
 800c070:	e7d0      	b.n	800c014 <__gethex+0xdc>
 800c072:	4629      	mov	r1, r5
 800c074:	e7e0      	b.n	800c038 <__gethex+0x100>
 800c076:	4621      	mov	r1, r4
 800c078:	eba5 0308 	sub.w	r3, r5, r8
 800c07c:	3b01      	subs	r3, #1
 800c07e:	2b07      	cmp	r3, #7
 800c080:	dc0a      	bgt.n	800c098 <__gethex+0x160>
 800c082:	4648      	mov	r0, r9
 800c084:	f7fe f940 	bl	800a308 <_Balloc>
 800c088:	4604      	mov	r4, r0
 800c08a:	b940      	cbnz	r0, 800c09e <__gethex+0x166>
 800c08c:	4602      	mov	r2, r0
 800c08e:	21e4      	movs	r1, #228	; 0xe4
 800c090:	4b61      	ldr	r3, [pc, #388]	; (800c218 <__gethex+0x2e0>)
 800c092:	4862      	ldr	r0, [pc, #392]	; (800c21c <__gethex+0x2e4>)
 800c094:	f7ff feb6 	bl	800be04 <__assert_func>
 800c098:	3101      	adds	r1, #1
 800c09a:	105b      	asrs	r3, r3, #1
 800c09c:	e7ef      	b.n	800c07e <__gethex+0x146>
 800c09e:	2300      	movs	r3, #0
 800c0a0:	469b      	mov	fp, r3
 800c0a2:	f100 0a14 	add.w	sl, r0, #20
 800c0a6:	f8cd a004 	str.w	sl, [sp, #4]
 800c0aa:	45a8      	cmp	r8, r5
 800c0ac:	d344      	bcc.n	800c138 <__gethex+0x200>
 800c0ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c0b2:	4658      	mov	r0, fp
 800c0b4:	f848 bb04 	str.w	fp, [r8], #4
 800c0b8:	eba8 080a 	sub.w	r8, r8, sl
 800c0bc:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800c0c0:	6122      	str	r2, [r4, #16]
 800c0c2:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800c0c6:	f7fe fa11 	bl	800a4ec <__hi0bits>
 800c0ca:	683d      	ldr	r5, [r7, #0]
 800c0cc:	eba8 0800 	sub.w	r8, r8, r0
 800c0d0:	45a8      	cmp	r8, r5
 800c0d2:	dd59      	ble.n	800c188 <__gethex+0x250>
 800c0d4:	eba8 0805 	sub.w	r8, r8, r5
 800c0d8:	4641      	mov	r1, r8
 800c0da:	4620      	mov	r0, r4
 800c0dc:	f7fe fd8f 	bl	800abfe <__any_on>
 800c0e0:	4683      	mov	fp, r0
 800c0e2:	b1b8      	cbz	r0, 800c114 <__gethex+0x1dc>
 800c0e4:	f04f 0b01 	mov.w	fp, #1
 800c0e8:	f108 33ff 	add.w	r3, r8, #4294967295
 800c0ec:	1159      	asrs	r1, r3, #5
 800c0ee:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c0f2:	f003 021f 	and.w	r2, r3, #31
 800c0f6:	fa0b f202 	lsl.w	r2, fp, r2
 800c0fa:	420a      	tst	r2, r1
 800c0fc:	d00a      	beq.n	800c114 <__gethex+0x1dc>
 800c0fe:	455b      	cmp	r3, fp
 800c100:	dd06      	ble.n	800c110 <__gethex+0x1d8>
 800c102:	4620      	mov	r0, r4
 800c104:	f1a8 0102 	sub.w	r1, r8, #2
 800c108:	f7fe fd79 	bl	800abfe <__any_on>
 800c10c:	2800      	cmp	r0, #0
 800c10e:	d138      	bne.n	800c182 <__gethex+0x24a>
 800c110:	f04f 0b02 	mov.w	fp, #2
 800c114:	4641      	mov	r1, r8
 800c116:	4620      	mov	r0, r4
 800c118:	f7ff fea6 	bl	800be68 <rshift>
 800c11c:	4446      	add	r6, r8
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	42b3      	cmp	r3, r6
 800c122:	da41      	bge.n	800c1a8 <__gethex+0x270>
 800c124:	4621      	mov	r1, r4
 800c126:	4648      	mov	r0, r9
 800c128:	f7fe f92e 	bl	800a388 <_Bfree>
 800c12c:	2300      	movs	r3, #0
 800c12e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c130:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c134:	6013      	str	r3, [r2, #0]
 800c136:	e789      	b.n	800c04c <__gethex+0x114>
 800c138:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c13c:	2a2e      	cmp	r2, #46	; 0x2e
 800c13e:	d014      	beq.n	800c16a <__gethex+0x232>
 800c140:	2b20      	cmp	r3, #32
 800c142:	d106      	bne.n	800c152 <__gethex+0x21a>
 800c144:	9b01      	ldr	r3, [sp, #4]
 800c146:	f843 bb04 	str.w	fp, [r3], #4
 800c14a:	f04f 0b00 	mov.w	fp, #0
 800c14e:	9301      	str	r3, [sp, #4]
 800c150:	465b      	mov	r3, fp
 800c152:	7828      	ldrb	r0, [r5, #0]
 800c154:	9303      	str	r3, [sp, #12]
 800c156:	f7ff feda 	bl	800bf0e <__hexdig_fun>
 800c15a:	9b03      	ldr	r3, [sp, #12]
 800c15c:	f000 000f 	and.w	r0, r0, #15
 800c160:	4098      	lsls	r0, r3
 800c162:	ea4b 0b00 	orr.w	fp, fp, r0
 800c166:	3304      	adds	r3, #4
 800c168:	e79f      	b.n	800c0aa <__gethex+0x172>
 800c16a:	45a8      	cmp	r8, r5
 800c16c:	d8e8      	bhi.n	800c140 <__gethex+0x208>
 800c16e:	2201      	movs	r2, #1
 800c170:	4628      	mov	r0, r5
 800c172:	4928      	ldr	r1, [pc, #160]	; (800c214 <__gethex+0x2dc>)
 800c174:	9303      	str	r3, [sp, #12]
 800c176:	f7ff fe1d 	bl	800bdb4 <strncmp>
 800c17a:	9b03      	ldr	r3, [sp, #12]
 800c17c:	2800      	cmp	r0, #0
 800c17e:	d1df      	bne.n	800c140 <__gethex+0x208>
 800c180:	e793      	b.n	800c0aa <__gethex+0x172>
 800c182:	f04f 0b03 	mov.w	fp, #3
 800c186:	e7c5      	b.n	800c114 <__gethex+0x1dc>
 800c188:	da0b      	bge.n	800c1a2 <__gethex+0x26a>
 800c18a:	eba5 0808 	sub.w	r8, r5, r8
 800c18e:	4621      	mov	r1, r4
 800c190:	4642      	mov	r2, r8
 800c192:	4648      	mov	r0, r9
 800c194:	f7fe fb10 	bl	800a7b8 <__lshift>
 800c198:	4604      	mov	r4, r0
 800c19a:	eba6 0608 	sub.w	r6, r6, r8
 800c19e:	f100 0a14 	add.w	sl, r0, #20
 800c1a2:	f04f 0b00 	mov.w	fp, #0
 800c1a6:	e7ba      	b.n	800c11e <__gethex+0x1e6>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	42b3      	cmp	r3, r6
 800c1ac:	dd74      	ble.n	800c298 <__gethex+0x360>
 800c1ae:	1b9e      	subs	r6, r3, r6
 800c1b0:	42b5      	cmp	r5, r6
 800c1b2:	dc35      	bgt.n	800c220 <__gethex+0x2e8>
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2b02      	cmp	r3, #2
 800c1b8:	d023      	beq.n	800c202 <__gethex+0x2ca>
 800c1ba:	2b03      	cmp	r3, #3
 800c1bc:	d025      	beq.n	800c20a <__gethex+0x2d2>
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d115      	bne.n	800c1ee <__gethex+0x2b6>
 800c1c2:	42b5      	cmp	r5, r6
 800c1c4:	d113      	bne.n	800c1ee <__gethex+0x2b6>
 800c1c6:	2d01      	cmp	r5, #1
 800c1c8:	d10b      	bne.n	800c1e2 <__gethex+0x2aa>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	9a02      	ldr	r2, [sp, #8]
 800c1ce:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c1d2:	6013      	str	r3, [r2, #0]
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	6123      	str	r3, [r4, #16]
 800c1d8:	f8ca 3000 	str.w	r3, [sl]
 800c1dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1de:	601c      	str	r4, [r3, #0]
 800c1e0:	e734      	b.n	800c04c <__gethex+0x114>
 800c1e2:	4620      	mov	r0, r4
 800c1e4:	1e69      	subs	r1, r5, #1
 800c1e6:	f7fe fd0a 	bl	800abfe <__any_on>
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	d1ed      	bne.n	800c1ca <__gethex+0x292>
 800c1ee:	4621      	mov	r1, r4
 800c1f0:	4648      	mov	r0, r9
 800c1f2:	f7fe f8c9 	bl	800a388 <_Bfree>
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1fa:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c1fe:	6013      	str	r3, [r2, #0]
 800c200:	e724      	b.n	800c04c <__gethex+0x114>
 800c202:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c204:	2b00      	cmp	r3, #0
 800c206:	d1f2      	bne.n	800c1ee <__gethex+0x2b6>
 800c208:	e7df      	b.n	800c1ca <__gethex+0x292>
 800c20a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d1dc      	bne.n	800c1ca <__gethex+0x292>
 800c210:	e7ed      	b.n	800c1ee <__gethex+0x2b6>
 800c212:	bf00      	nop
 800c214:	0800fb7c 	.word	0x0800fb7c
 800c218:	0800fa13 	.word	0x0800fa13
 800c21c:	0800fd26 	.word	0x0800fd26
 800c220:	f106 38ff 	add.w	r8, r6, #4294967295
 800c224:	f1bb 0f00 	cmp.w	fp, #0
 800c228:	d133      	bne.n	800c292 <__gethex+0x35a>
 800c22a:	f1b8 0f00 	cmp.w	r8, #0
 800c22e:	d004      	beq.n	800c23a <__gethex+0x302>
 800c230:	4641      	mov	r1, r8
 800c232:	4620      	mov	r0, r4
 800c234:	f7fe fce3 	bl	800abfe <__any_on>
 800c238:	4683      	mov	fp, r0
 800c23a:	2301      	movs	r3, #1
 800c23c:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c240:	f008 081f 	and.w	r8, r8, #31
 800c244:	fa03 f308 	lsl.w	r3, r3, r8
 800c248:	f04f 0802 	mov.w	r8, #2
 800c24c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c250:	4631      	mov	r1, r6
 800c252:	4213      	tst	r3, r2
 800c254:	4620      	mov	r0, r4
 800c256:	bf18      	it	ne
 800c258:	f04b 0b02 	orrne.w	fp, fp, #2
 800c25c:	1bad      	subs	r5, r5, r6
 800c25e:	f7ff fe03 	bl	800be68 <rshift>
 800c262:	687e      	ldr	r6, [r7, #4]
 800c264:	f1bb 0f00 	cmp.w	fp, #0
 800c268:	d04a      	beq.n	800c300 <__gethex+0x3c8>
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2b02      	cmp	r3, #2
 800c26e:	d016      	beq.n	800c29e <__gethex+0x366>
 800c270:	2b03      	cmp	r3, #3
 800c272:	d018      	beq.n	800c2a6 <__gethex+0x36e>
 800c274:	2b01      	cmp	r3, #1
 800c276:	d109      	bne.n	800c28c <__gethex+0x354>
 800c278:	f01b 0f02 	tst.w	fp, #2
 800c27c:	d006      	beq.n	800c28c <__gethex+0x354>
 800c27e:	f8da 3000 	ldr.w	r3, [sl]
 800c282:	ea4b 0b03 	orr.w	fp, fp, r3
 800c286:	f01b 0f01 	tst.w	fp, #1
 800c28a:	d10f      	bne.n	800c2ac <__gethex+0x374>
 800c28c:	f048 0810 	orr.w	r8, r8, #16
 800c290:	e036      	b.n	800c300 <__gethex+0x3c8>
 800c292:	f04f 0b01 	mov.w	fp, #1
 800c296:	e7d0      	b.n	800c23a <__gethex+0x302>
 800c298:	f04f 0801 	mov.w	r8, #1
 800c29c:	e7e2      	b.n	800c264 <__gethex+0x32c>
 800c29e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2a0:	f1c3 0301 	rsb	r3, r3, #1
 800c2a4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d0ef      	beq.n	800c28c <__gethex+0x354>
 800c2ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c2b0:	f104 0214 	add.w	r2, r4, #20
 800c2b4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c2b8:	9301      	str	r3, [sp, #4]
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c2c0:	4694      	mov	ip, r2
 800c2c2:	f852 1b04 	ldr.w	r1, [r2], #4
 800c2c6:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c2ca:	d01e      	beq.n	800c30a <__gethex+0x3d2>
 800c2cc:	3101      	adds	r1, #1
 800c2ce:	f8cc 1000 	str.w	r1, [ip]
 800c2d2:	f1b8 0f02 	cmp.w	r8, #2
 800c2d6:	f104 0214 	add.w	r2, r4, #20
 800c2da:	d13d      	bne.n	800c358 <__gethex+0x420>
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	3b01      	subs	r3, #1
 800c2e0:	42ab      	cmp	r3, r5
 800c2e2:	d10b      	bne.n	800c2fc <__gethex+0x3c4>
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	1169      	asrs	r1, r5, #5
 800c2e8:	f005 051f 	and.w	r5, r5, #31
 800c2ec:	fa03 f505 	lsl.w	r5, r3, r5
 800c2f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c2f4:	421d      	tst	r5, r3
 800c2f6:	bf18      	it	ne
 800c2f8:	f04f 0801 	movne.w	r8, #1
 800c2fc:	f048 0820 	orr.w	r8, r8, #32
 800c300:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c302:	601c      	str	r4, [r3, #0]
 800c304:	9b02      	ldr	r3, [sp, #8]
 800c306:	601e      	str	r6, [r3, #0]
 800c308:	e6a0      	b.n	800c04c <__gethex+0x114>
 800c30a:	4290      	cmp	r0, r2
 800c30c:	f842 3c04 	str.w	r3, [r2, #-4]
 800c310:	d8d6      	bhi.n	800c2c0 <__gethex+0x388>
 800c312:	68a2      	ldr	r2, [r4, #8]
 800c314:	4593      	cmp	fp, r2
 800c316:	db17      	blt.n	800c348 <__gethex+0x410>
 800c318:	6861      	ldr	r1, [r4, #4]
 800c31a:	4648      	mov	r0, r9
 800c31c:	3101      	adds	r1, #1
 800c31e:	f7fd fff3 	bl	800a308 <_Balloc>
 800c322:	4682      	mov	sl, r0
 800c324:	b918      	cbnz	r0, 800c32e <__gethex+0x3f6>
 800c326:	4602      	mov	r2, r0
 800c328:	2184      	movs	r1, #132	; 0x84
 800c32a:	4b1a      	ldr	r3, [pc, #104]	; (800c394 <__gethex+0x45c>)
 800c32c:	e6b1      	b.n	800c092 <__gethex+0x15a>
 800c32e:	6922      	ldr	r2, [r4, #16]
 800c330:	f104 010c 	add.w	r1, r4, #12
 800c334:	3202      	adds	r2, #2
 800c336:	0092      	lsls	r2, r2, #2
 800c338:	300c      	adds	r0, #12
 800c33a:	f7fd f866 	bl	800940a <memcpy>
 800c33e:	4621      	mov	r1, r4
 800c340:	4648      	mov	r0, r9
 800c342:	f7fe f821 	bl	800a388 <_Bfree>
 800c346:	4654      	mov	r4, sl
 800c348:	6922      	ldr	r2, [r4, #16]
 800c34a:	1c51      	adds	r1, r2, #1
 800c34c:	6121      	str	r1, [r4, #16]
 800c34e:	2101      	movs	r1, #1
 800c350:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c354:	6151      	str	r1, [r2, #20]
 800c356:	e7bc      	b.n	800c2d2 <__gethex+0x39a>
 800c358:	6921      	ldr	r1, [r4, #16]
 800c35a:	4559      	cmp	r1, fp
 800c35c:	dd0b      	ble.n	800c376 <__gethex+0x43e>
 800c35e:	2101      	movs	r1, #1
 800c360:	4620      	mov	r0, r4
 800c362:	f7ff fd81 	bl	800be68 <rshift>
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	3601      	adds	r6, #1
 800c36a:	42b3      	cmp	r3, r6
 800c36c:	f6ff aeda 	blt.w	800c124 <__gethex+0x1ec>
 800c370:	f04f 0801 	mov.w	r8, #1
 800c374:	e7c2      	b.n	800c2fc <__gethex+0x3c4>
 800c376:	f015 051f 	ands.w	r5, r5, #31
 800c37a:	d0f9      	beq.n	800c370 <__gethex+0x438>
 800c37c:	9b01      	ldr	r3, [sp, #4]
 800c37e:	f1c5 0520 	rsb	r5, r5, #32
 800c382:	441a      	add	r2, r3
 800c384:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c388:	f7fe f8b0 	bl	800a4ec <__hi0bits>
 800c38c:	42a8      	cmp	r0, r5
 800c38e:	dbe6      	blt.n	800c35e <__gethex+0x426>
 800c390:	e7ee      	b.n	800c370 <__gethex+0x438>
 800c392:	bf00      	nop
 800c394:	0800fa13 	.word	0x0800fa13

0800c398 <L_shift>:
 800c398:	f1c2 0208 	rsb	r2, r2, #8
 800c39c:	0092      	lsls	r2, r2, #2
 800c39e:	b570      	push	{r4, r5, r6, lr}
 800c3a0:	f1c2 0620 	rsb	r6, r2, #32
 800c3a4:	6843      	ldr	r3, [r0, #4]
 800c3a6:	6804      	ldr	r4, [r0, #0]
 800c3a8:	fa03 f506 	lsl.w	r5, r3, r6
 800c3ac:	432c      	orrs	r4, r5
 800c3ae:	40d3      	lsrs	r3, r2
 800c3b0:	6004      	str	r4, [r0, #0]
 800c3b2:	f840 3f04 	str.w	r3, [r0, #4]!
 800c3b6:	4288      	cmp	r0, r1
 800c3b8:	d3f4      	bcc.n	800c3a4 <L_shift+0xc>
 800c3ba:	bd70      	pop	{r4, r5, r6, pc}

0800c3bc <__match>:
 800c3bc:	b530      	push	{r4, r5, lr}
 800c3be:	6803      	ldr	r3, [r0, #0]
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3c6:	b914      	cbnz	r4, 800c3ce <__match+0x12>
 800c3c8:	6003      	str	r3, [r0, #0]
 800c3ca:	2001      	movs	r0, #1
 800c3cc:	bd30      	pop	{r4, r5, pc}
 800c3ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c3d6:	2d19      	cmp	r5, #25
 800c3d8:	bf98      	it	ls
 800c3da:	3220      	addls	r2, #32
 800c3dc:	42a2      	cmp	r2, r4
 800c3de:	d0f0      	beq.n	800c3c2 <__match+0x6>
 800c3e0:	2000      	movs	r0, #0
 800c3e2:	e7f3      	b.n	800c3cc <__match+0x10>

0800c3e4 <__hexnan>:
 800c3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e8:	2500      	movs	r5, #0
 800c3ea:	680b      	ldr	r3, [r1, #0]
 800c3ec:	4682      	mov	sl, r0
 800c3ee:	115e      	asrs	r6, r3, #5
 800c3f0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c3f4:	f013 031f 	ands.w	r3, r3, #31
 800c3f8:	bf18      	it	ne
 800c3fa:	3604      	addne	r6, #4
 800c3fc:	1f37      	subs	r7, r6, #4
 800c3fe:	4690      	mov	r8, r2
 800c400:	46b9      	mov	r9, r7
 800c402:	463c      	mov	r4, r7
 800c404:	46ab      	mov	fp, r5
 800c406:	b087      	sub	sp, #28
 800c408:	6801      	ldr	r1, [r0, #0]
 800c40a:	9301      	str	r3, [sp, #4]
 800c40c:	f846 5c04 	str.w	r5, [r6, #-4]
 800c410:	9502      	str	r5, [sp, #8]
 800c412:	784a      	ldrb	r2, [r1, #1]
 800c414:	1c4b      	adds	r3, r1, #1
 800c416:	9303      	str	r3, [sp, #12]
 800c418:	b342      	cbz	r2, 800c46c <__hexnan+0x88>
 800c41a:	4610      	mov	r0, r2
 800c41c:	9105      	str	r1, [sp, #20]
 800c41e:	9204      	str	r2, [sp, #16]
 800c420:	f7ff fd75 	bl	800bf0e <__hexdig_fun>
 800c424:	2800      	cmp	r0, #0
 800c426:	d14f      	bne.n	800c4c8 <__hexnan+0xe4>
 800c428:	9a04      	ldr	r2, [sp, #16]
 800c42a:	9905      	ldr	r1, [sp, #20]
 800c42c:	2a20      	cmp	r2, #32
 800c42e:	d818      	bhi.n	800c462 <__hexnan+0x7e>
 800c430:	9b02      	ldr	r3, [sp, #8]
 800c432:	459b      	cmp	fp, r3
 800c434:	dd13      	ble.n	800c45e <__hexnan+0x7a>
 800c436:	454c      	cmp	r4, r9
 800c438:	d206      	bcs.n	800c448 <__hexnan+0x64>
 800c43a:	2d07      	cmp	r5, #7
 800c43c:	dc04      	bgt.n	800c448 <__hexnan+0x64>
 800c43e:	462a      	mov	r2, r5
 800c440:	4649      	mov	r1, r9
 800c442:	4620      	mov	r0, r4
 800c444:	f7ff ffa8 	bl	800c398 <L_shift>
 800c448:	4544      	cmp	r4, r8
 800c44a:	d950      	bls.n	800c4ee <__hexnan+0x10a>
 800c44c:	2300      	movs	r3, #0
 800c44e:	f1a4 0904 	sub.w	r9, r4, #4
 800c452:	f844 3c04 	str.w	r3, [r4, #-4]
 800c456:	461d      	mov	r5, r3
 800c458:	464c      	mov	r4, r9
 800c45a:	f8cd b008 	str.w	fp, [sp, #8]
 800c45e:	9903      	ldr	r1, [sp, #12]
 800c460:	e7d7      	b.n	800c412 <__hexnan+0x2e>
 800c462:	2a29      	cmp	r2, #41	; 0x29
 800c464:	d155      	bne.n	800c512 <__hexnan+0x12e>
 800c466:	3102      	adds	r1, #2
 800c468:	f8ca 1000 	str.w	r1, [sl]
 800c46c:	f1bb 0f00 	cmp.w	fp, #0
 800c470:	d04f      	beq.n	800c512 <__hexnan+0x12e>
 800c472:	454c      	cmp	r4, r9
 800c474:	d206      	bcs.n	800c484 <__hexnan+0xa0>
 800c476:	2d07      	cmp	r5, #7
 800c478:	dc04      	bgt.n	800c484 <__hexnan+0xa0>
 800c47a:	462a      	mov	r2, r5
 800c47c:	4649      	mov	r1, r9
 800c47e:	4620      	mov	r0, r4
 800c480:	f7ff ff8a 	bl	800c398 <L_shift>
 800c484:	4544      	cmp	r4, r8
 800c486:	d934      	bls.n	800c4f2 <__hexnan+0x10e>
 800c488:	4623      	mov	r3, r4
 800c48a:	f1a8 0204 	sub.w	r2, r8, #4
 800c48e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c492:	429f      	cmp	r7, r3
 800c494:	f842 1f04 	str.w	r1, [r2, #4]!
 800c498:	d2f9      	bcs.n	800c48e <__hexnan+0xaa>
 800c49a:	1b3b      	subs	r3, r7, r4
 800c49c:	f023 0303 	bic.w	r3, r3, #3
 800c4a0:	3304      	adds	r3, #4
 800c4a2:	3e03      	subs	r6, #3
 800c4a4:	3401      	adds	r4, #1
 800c4a6:	42a6      	cmp	r6, r4
 800c4a8:	bf38      	it	cc
 800c4aa:	2304      	movcc	r3, #4
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	4443      	add	r3, r8
 800c4b0:	f843 2b04 	str.w	r2, [r3], #4
 800c4b4:	429f      	cmp	r7, r3
 800c4b6:	d2fb      	bcs.n	800c4b0 <__hexnan+0xcc>
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	b91b      	cbnz	r3, 800c4c4 <__hexnan+0xe0>
 800c4bc:	4547      	cmp	r7, r8
 800c4be:	d126      	bne.n	800c50e <__hexnan+0x12a>
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	603b      	str	r3, [r7, #0]
 800c4c4:	2005      	movs	r0, #5
 800c4c6:	e025      	b.n	800c514 <__hexnan+0x130>
 800c4c8:	3501      	adds	r5, #1
 800c4ca:	2d08      	cmp	r5, #8
 800c4cc:	f10b 0b01 	add.w	fp, fp, #1
 800c4d0:	dd06      	ble.n	800c4e0 <__hexnan+0xfc>
 800c4d2:	4544      	cmp	r4, r8
 800c4d4:	d9c3      	bls.n	800c45e <__hexnan+0x7a>
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	2501      	movs	r5, #1
 800c4da:	f844 3c04 	str.w	r3, [r4, #-4]
 800c4de:	3c04      	subs	r4, #4
 800c4e0:	6822      	ldr	r2, [r4, #0]
 800c4e2:	f000 000f 	and.w	r0, r0, #15
 800c4e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c4ea:	6020      	str	r0, [r4, #0]
 800c4ec:	e7b7      	b.n	800c45e <__hexnan+0x7a>
 800c4ee:	2508      	movs	r5, #8
 800c4f0:	e7b5      	b.n	800c45e <__hexnan+0x7a>
 800c4f2:	9b01      	ldr	r3, [sp, #4]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d0df      	beq.n	800c4b8 <__hexnan+0xd4>
 800c4f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c4fc:	f1c3 0320 	rsb	r3, r3, #32
 800c500:	40da      	lsrs	r2, r3
 800c502:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c506:	4013      	ands	r3, r2
 800c508:	f846 3c04 	str.w	r3, [r6, #-4]
 800c50c:	e7d4      	b.n	800c4b8 <__hexnan+0xd4>
 800c50e:	3f04      	subs	r7, #4
 800c510:	e7d2      	b.n	800c4b8 <__hexnan+0xd4>
 800c512:	2004      	movs	r0, #4
 800c514:	b007      	add	sp, #28
 800c516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c51a <__ascii_mbtowc>:
 800c51a:	b082      	sub	sp, #8
 800c51c:	b901      	cbnz	r1, 800c520 <__ascii_mbtowc+0x6>
 800c51e:	a901      	add	r1, sp, #4
 800c520:	b142      	cbz	r2, 800c534 <__ascii_mbtowc+0x1a>
 800c522:	b14b      	cbz	r3, 800c538 <__ascii_mbtowc+0x1e>
 800c524:	7813      	ldrb	r3, [r2, #0]
 800c526:	600b      	str	r3, [r1, #0]
 800c528:	7812      	ldrb	r2, [r2, #0]
 800c52a:	1e10      	subs	r0, r2, #0
 800c52c:	bf18      	it	ne
 800c52e:	2001      	movne	r0, #1
 800c530:	b002      	add	sp, #8
 800c532:	4770      	bx	lr
 800c534:	4610      	mov	r0, r2
 800c536:	e7fb      	b.n	800c530 <__ascii_mbtowc+0x16>
 800c538:	f06f 0001 	mvn.w	r0, #1
 800c53c:	e7f8      	b.n	800c530 <__ascii_mbtowc+0x16>

0800c53e <_realloc_r>:
 800c53e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c542:	4680      	mov	r8, r0
 800c544:	4614      	mov	r4, r2
 800c546:	460e      	mov	r6, r1
 800c548:	b921      	cbnz	r1, 800c554 <_realloc_r+0x16>
 800c54a:	4611      	mov	r1, r2
 800c54c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c550:	f7fd be4e 	b.w	800a1f0 <_malloc_r>
 800c554:	b92a      	cbnz	r2, 800c562 <_realloc_r+0x24>
 800c556:	f7fd fddb 	bl	800a110 <_free_r>
 800c55a:	4625      	mov	r5, r4
 800c55c:	4628      	mov	r0, r5
 800c55e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c562:	f000 f842 	bl	800c5ea <_malloc_usable_size_r>
 800c566:	4284      	cmp	r4, r0
 800c568:	4607      	mov	r7, r0
 800c56a:	d802      	bhi.n	800c572 <_realloc_r+0x34>
 800c56c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c570:	d812      	bhi.n	800c598 <_realloc_r+0x5a>
 800c572:	4621      	mov	r1, r4
 800c574:	4640      	mov	r0, r8
 800c576:	f7fd fe3b 	bl	800a1f0 <_malloc_r>
 800c57a:	4605      	mov	r5, r0
 800c57c:	2800      	cmp	r0, #0
 800c57e:	d0ed      	beq.n	800c55c <_realloc_r+0x1e>
 800c580:	42bc      	cmp	r4, r7
 800c582:	4622      	mov	r2, r4
 800c584:	4631      	mov	r1, r6
 800c586:	bf28      	it	cs
 800c588:	463a      	movcs	r2, r7
 800c58a:	f7fc ff3e 	bl	800940a <memcpy>
 800c58e:	4631      	mov	r1, r6
 800c590:	4640      	mov	r0, r8
 800c592:	f7fd fdbd 	bl	800a110 <_free_r>
 800c596:	e7e1      	b.n	800c55c <_realloc_r+0x1e>
 800c598:	4635      	mov	r5, r6
 800c59a:	e7df      	b.n	800c55c <_realloc_r+0x1e>

0800c59c <__ascii_wctomb>:
 800c59c:	4603      	mov	r3, r0
 800c59e:	4608      	mov	r0, r1
 800c5a0:	b141      	cbz	r1, 800c5b4 <__ascii_wctomb+0x18>
 800c5a2:	2aff      	cmp	r2, #255	; 0xff
 800c5a4:	d904      	bls.n	800c5b0 <__ascii_wctomb+0x14>
 800c5a6:	228a      	movs	r2, #138	; 0x8a
 800c5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5ac:	601a      	str	r2, [r3, #0]
 800c5ae:	4770      	bx	lr
 800c5b0:	2001      	movs	r0, #1
 800c5b2:	700a      	strb	r2, [r1, #0]
 800c5b4:	4770      	bx	lr
	...

0800c5b8 <fiprintf>:
 800c5b8:	b40e      	push	{r1, r2, r3}
 800c5ba:	b503      	push	{r0, r1, lr}
 800c5bc:	4601      	mov	r1, r0
 800c5be:	ab03      	add	r3, sp, #12
 800c5c0:	4805      	ldr	r0, [pc, #20]	; (800c5d8 <fiprintf+0x20>)
 800c5c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5c6:	6800      	ldr	r0, [r0, #0]
 800c5c8:	9301      	str	r3, [sp, #4]
 800c5ca:	f000 f83d 	bl	800c648 <_vfiprintf_r>
 800c5ce:	b002      	add	sp, #8
 800c5d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5d4:	b003      	add	sp, #12
 800c5d6:	4770      	bx	lr
 800c5d8:	20000080 	.word	0x20000080

0800c5dc <abort>:
 800c5dc:	2006      	movs	r0, #6
 800c5de:	b508      	push	{r3, lr}
 800c5e0:	f000 fa0a 	bl	800c9f8 <raise>
 800c5e4:	2001      	movs	r0, #1
 800c5e6:	f7f5 fd4c 	bl	8002082 <_exit>

0800c5ea <_malloc_usable_size_r>:
 800c5ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5ee:	1f18      	subs	r0, r3, #4
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	bfbc      	itt	lt
 800c5f4:	580b      	ldrlt	r3, [r1, r0]
 800c5f6:	18c0      	addlt	r0, r0, r3
 800c5f8:	4770      	bx	lr

0800c5fa <__sfputc_r>:
 800c5fa:	6893      	ldr	r3, [r2, #8]
 800c5fc:	b410      	push	{r4}
 800c5fe:	3b01      	subs	r3, #1
 800c600:	2b00      	cmp	r3, #0
 800c602:	6093      	str	r3, [r2, #8]
 800c604:	da07      	bge.n	800c616 <__sfputc_r+0x1c>
 800c606:	6994      	ldr	r4, [r2, #24]
 800c608:	42a3      	cmp	r3, r4
 800c60a:	db01      	blt.n	800c610 <__sfputc_r+0x16>
 800c60c:	290a      	cmp	r1, #10
 800c60e:	d102      	bne.n	800c616 <__sfputc_r+0x1c>
 800c610:	bc10      	pop	{r4}
 800c612:	f000 b933 	b.w	800c87c <__swbuf_r>
 800c616:	6813      	ldr	r3, [r2, #0]
 800c618:	1c58      	adds	r0, r3, #1
 800c61a:	6010      	str	r0, [r2, #0]
 800c61c:	7019      	strb	r1, [r3, #0]
 800c61e:	4608      	mov	r0, r1
 800c620:	bc10      	pop	{r4}
 800c622:	4770      	bx	lr

0800c624 <__sfputs_r>:
 800c624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c626:	4606      	mov	r6, r0
 800c628:	460f      	mov	r7, r1
 800c62a:	4614      	mov	r4, r2
 800c62c:	18d5      	adds	r5, r2, r3
 800c62e:	42ac      	cmp	r4, r5
 800c630:	d101      	bne.n	800c636 <__sfputs_r+0x12>
 800c632:	2000      	movs	r0, #0
 800c634:	e007      	b.n	800c646 <__sfputs_r+0x22>
 800c636:	463a      	mov	r2, r7
 800c638:	4630      	mov	r0, r6
 800c63a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c63e:	f7ff ffdc 	bl	800c5fa <__sfputc_r>
 800c642:	1c43      	adds	r3, r0, #1
 800c644:	d1f3      	bne.n	800c62e <__sfputs_r+0xa>
 800c646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c648 <_vfiprintf_r>:
 800c648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c64c:	460d      	mov	r5, r1
 800c64e:	4614      	mov	r4, r2
 800c650:	4698      	mov	r8, r3
 800c652:	4606      	mov	r6, r0
 800c654:	b09d      	sub	sp, #116	; 0x74
 800c656:	b118      	cbz	r0, 800c660 <_vfiprintf_r+0x18>
 800c658:	6a03      	ldr	r3, [r0, #32]
 800c65a:	b90b      	cbnz	r3, 800c660 <_vfiprintf_r+0x18>
 800c65c:	f7fc fd9e 	bl	800919c <__sinit>
 800c660:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c662:	07d9      	lsls	r1, r3, #31
 800c664:	d405      	bmi.n	800c672 <_vfiprintf_r+0x2a>
 800c666:	89ab      	ldrh	r3, [r5, #12]
 800c668:	059a      	lsls	r2, r3, #22
 800c66a:	d402      	bmi.n	800c672 <_vfiprintf_r+0x2a>
 800c66c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c66e:	f7fc febc 	bl	80093ea <__retarget_lock_acquire_recursive>
 800c672:	89ab      	ldrh	r3, [r5, #12]
 800c674:	071b      	lsls	r3, r3, #28
 800c676:	d501      	bpl.n	800c67c <_vfiprintf_r+0x34>
 800c678:	692b      	ldr	r3, [r5, #16]
 800c67a:	b99b      	cbnz	r3, 800c6a4 <_vfiprintf_r+0x5c>
 800c67c:	4629      	mov	r1, r5
 800c67e:	4630      	mov	r0, r6
 800c680:	f000 f93a 	bl	800c8f8 <__swsetup_r>
 800c684:	b170      	cbz	r0, 800c6a4 <_vfiprintf_r+0x5c>
 800c686:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c688:	07dc      	lsls	r4, r3, #31
 800c68a:	d504      	bpl.n	800c696 <_vfiprintf_r+0x4e>
 800c68c:	f04f 30ff 	mov.w	r0, #4294967295
 800c690:	b01d      	add	sp, #116	; 0x74
 800c692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c696:	89ab      	ldrh	r3, [r5, #12]
 800c698:	0598      	lsls	r0, r3, #22
 800c69a:	d4f7      	bmi.n	800c68c <_vfiprintf_r+0x44>
 800c69c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c69e:	f7fc fea5 	bl	80093ec <__retarget_lock_release_recursive>
 800c6a2:	e7f3      	b.n	800c68c <_vfiprintf_r+0x44>
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c6a8:	2320      	movs	r3, #32
 800c6aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6ae:	2330      	movs	r3, #48	; 0x30
 800c6b0:	f04f 0901 	mov.w	r9, #1
 800c6b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800c868 <_vfiprintf_r+0x220>
 800c6bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6c0:	4623      	mov	r3, r4
 800c6c2:	469a      	mov	sl, r3
 800c6c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6c8:	b10a      	cbz	r2, 800c6ce <_vfiprintf_r+0x86>
 800c6ca:	2a25      	cmp	r2, #37	; 0x25
 800c6cc:	d1f9      	bne.n	800c6c2 <_vfiprintf_r+0x7a>
 800c6ce:	ebba 0b04 	subs.w	fp, sl, r4
 800c6d2:	d00b      	beq.n	800c6ec <_vfiprintf_r+0xa4>
 800c6d4:	465b      	mov	r3, fp
 800c6d6:	4622      	mov	r2, r4
 800c6d8:	4629      	mov	r1, r5
 800c6da:	4630      	mov	r0, r6
 800c6dc:	f7ff ffa2 	bl	800c624 <__sfputs_r>
 800c6e0:	3001      	adds	r0, #1
 800c6e2:	f000 80a9 	beq.w	800c838 <_vfiprintf_r+0x1f0>
 800c6e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6e8:	445a      	add	r2, fp
 800c6ea:	9209      	str	r2, [sp, #36]	; 0x24
 800c6ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	f000 80a1 	beq.w	800c838 <_vfiprintf_r+0x1f0>
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c6fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c700:	f10a 0a01 	add.w	sl, sl, #1
 800c704:	9304      	str	r3, [sp, #16]
 800c706:	9307      	str	r3, [sp, #28]
 800c708:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c70c:	931a      	str	r3, [sp, #104]	; 0x68
 800c70e:	4654      	mov	r4, sl
 800c710:	2205      	movs	r2, #5
 800c712:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c716:	4854      	ldr	r0, [pc, #336]	; (800c868 <_vfiprintf_r+0x220>)
 800c718:	f7fc fe69 	bl	80093ee <memchr>
 800c71c:	9a04      	ldr	r2, [sp, #16]
 800c71e:	b9d8      	cbnz	r0, 800c758 <_vfiprintf_r+0x110>
 800c720:	06d1      	lsls	r1, r2, #27
 800c722:	bf44      	itt	mi
 800c724:	2320      	movmi	r3, #32
 800c726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c72a:	0713      	lsls	r3, r2, #28
 800c72c:	bf44      	itt	mi
 800c72e:	232b      	movmi	r3, #43	; 0x2b
 800c730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c734:	f89a 3000 	ldrb.w	r3, [sl]
 800c738:	2b2a      	cmp	r3, #42	; 0x2a
 800c73a:	d015      	beq.n	800c768 <_vfiprintf_r+0x120>
 800c73c:	4654      	mov	r4, sl
 800c73e:	2000      	movs	r0, #0
 800c740:	f04f 0c0a 	mov.w	ip, #10
 800c744:	9a07      	ldr	r2, [sp, #28]
 800c746:	4621      	mov	r1, r4
 800c748:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c74c:	3b30      	subs	r3, #48	; 0x30
 800c74e:	2b09      	cmp	r3, #9
 800c750:	d94d      	bls.n	800c7ee <_vfiprintf_r+0x1a6>
 800c752:	b1b0      	cbz	r0, 800c782 <_vfiprintf_r+0x13a>
 800c754:	9207      	str	r2, [sp, #28]
 800c756:	e014      	b.n	800c782 <_vfiprintf_r+0x13a>
 800c758:	eba0 0308 	sub.w	r3, r0, r8
 800c75c:	fa09 f303 	lsl.w	r3, r9, r3
 800c760:	4313      	orrs	r3, r2
 800c762:	46a2      	mov	sl, r4
 800c764:	9304      	str	r3, [sp, #16]
 800c766:	e7d2      	b.n	800c70e <_vfiprintf_r+0xc6>
 800c768:	9b03      	ldr	r3, [sp, #12]
 800c76a:	1d19      	adds	r1, r3, #4
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	9103      	str	r1, [sp, #12]
 800c770:	2b00      	cmp	r3, #0
 800c772:	bfbb      	ittet	lt
 800c774:	425b      	neglt	r3, r3
 800c776:	f042 0202 	orrlt.w	r2, r2, #2
 800c77a:	9307      	strge	r3, [sp, #28]
 800c77c:	9307      	strlt	r3, [sp, #28]
 800c77e:	bfb8      	it	lt
 800c780:	9204      	strlt	r2, [sp, #16]
 800c782:	7823      	ldrb	r3, [r4, #0]
 800c784:	2b2e      	cmp	r3, #46	; 0x2e
 800c786:	d10c      	bne.n	800c7a2 <_vfiprintf_r+0x15a>
 800c788:	7863      	ldrb	r3, [r4, #1]
 800c78a:	2b2a      	cmp	r3, #42	; 0x2a
 800c78c:	d134      	bne.n	800c7f8 <_vfiprintf_r+0x1b0>
 800c78e:	9b03      	ldr	r3, [sp, #12]
 800c790:	3402      	adds	r4, #2
 800c792:	1d1a      	adds	r2, r3, #4
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	9203      	str	r2, [sp, #12]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	bfb8      	it	lt
 800c79c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7a0:	9305      	str	r3, [sp, #20]
 800c7a2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c86c <_vfiprintf_r+0x224>
 800c7a6:	2203      	movs	r2, #3
 800c7a8:	4650      	mov	r0, sl
 800c7aa:	7821      	ldrb	r1, [r4, #0]
 800c7ac:	f7fc fe1f 	bl	80093ee <memchr>
 800c7b0:	b138      	cbz	r0, 800c7c2 <_vfiprintf_r+0x17a>
 800c7b2:	2240      	movs	r2, #64	; 0x40
 800c7b4:	9b04      	ldr	r3, [sp, #16]
 800c7b6:	eba0 000a 	sub.w	r0, r0, sl
 800c7ba:	4082      	lsls	r2, r0
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	3401      	adds	r4, #1
 800c7c0:	9304      	str	r3, [sp, #16]
 800c7c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7c6:	2206      	movs	r2, #6
 800c7c8:	4829      	ldr	r0, [pc, #164]	; (800c870 <_vfiprintf_r+0x228>)
 800c7ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7ce:	f7fc fe0e 	bl	80093ee <memchr>
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	d03f      	beq.n	800c856 <_vfiprintf_r+0x20e>
 800c7d6:	4b27      	ldr	r3, [pc, #156]	; (800c874 <_vfiprintf_r+0x22c>)
 800c7d8:	bb1b      	cbnz	r3, 800c822 <_vfiprintf_r+0x1da>
 800c7da:	9b03      	ldr	r3, [sp, #12]
 800c7dc:	3307      	adds	r3, #7
 800c7de:	f023 0307 	bic.w	r3, r3, #7
 800c7e2:	3308      	adds	r3, #8
 800c7e4:	9303      	str	r3, [sp, #12]
 800c7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7e8:	443b      	add	r3, r7
 800c7ea:	9309      	str	r3, [sp, #36]	; 0x24
 800c7ec:	e768      	b.n	800c6c0 <_vfiprintf_r+0x78>
 800c7ee:	460c      	mov	r4, r1
 800c7f0:	2001      	movs	r0, #1
 800c7f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7f6:	e7a6      	b.n	800c746 <_vfiprintf_r+0xfe>
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	f04f 0c0a 	mov.w	ip, #10
 800c7fe:	4619      	mov	r1, r3
 800c800:	3401      	adds	r4, #1
 800c802:	9305      	str	r3, [sp, #20]
 800c804:	4620      	mov	r0, r4
 800c806:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c80a:	3a30      	subs	r2, #48	; 0x30
 800c80c:	2a09      	cmp	r2, #9
 800c80e:	d903      	bls.n	800c818 <_vfiprintf_r+0x1d0>
 800c810:	2b00      	cmp	r3, #0
 800c812:	d0c6      	beq.n	800c7a2 <_vfiprintf_r+0x15a>
 800c814:	9105      	str	r1, [sp, #20]
 800c816:	e7c4      	b.n	800c7a2 <_vfiprintf_r+0x15a>
 800c818:	4604      	mov	r4, r0
 800c81a:	2301      	movs	r3, #1
 800c81c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c820:	e7f0      	b.n	800c804 <_vfiprintf_r+0x1bc>
 800c822:	ab03      	add	r3, sp, #12
 800c824:	9300      	str	r3, [sp, #0]
 800c826:	462a      	mov	r2, r5
 800c828:	4630      	mov	r0, r6
 800c82a:	4b13      	ldr	r3, [pc, #76]	; (800c878 <_vfiprintf_r+0x230>)
 800c82c:	a904      	add	r1, sp, #16
 800c82e:	f7fb fe59 	bl	80084e4 <_printf_float>
 800c832:	4607      	mov	r7, r0
 800c834:	1c78      	adds	r0, r7, #1
 800c836:	d1d6      	bne.n	800c7e6 <_vfiprintf_r+0x19e>
 800c838:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c83a:	07d9      	lsls	r1, r3, #31
 800c83c:	d405      	bmi.n	800c84a <_vfiprintf_r+0x202>
 800c83e:	89ab      	ldrh	r3, [r5, #12]
 800c840:	059a      	lsls	r2, r3, #22
 800c842:	d402      	bmi.n	800c84a <_vfiprintf_r+0x202>
 800c844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c846:	f7fc fdd1 	bl	80093ec <__retarget_lock_release_recursive>
 800c84a:	89ab      	ldrh	r3, [r5, #12]
 800c84c:	065b      	lsls	r3, r3, #25
 800c84e:	f53f af1d 	bmi.w	800c68c <_vfiprintf_r+0x44>
 800c852:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c854:	e71c      	b.n	800c690 <_vfiprintf_r+0x48>
 800c856:	ab03      	add	r3, sp, #12
 800c858:	9300      	str	r3, [sp, #0]
 800c85a:	462a      	mov	r2, r5
 800c85c:	4630      	mov	r0, r6
 800c85e:	4b06      	ldr	r3, [pc, #24]	; (800c878 <_vfiprintf_r+0x230>)
 800c860:	a904      	add	r1, sp, #16
 800c862:	f7fc f8df 	bl	8008a24 <_printf_i>
 800c866:	e7e4      	b.n	800c832 <_vfiprintf_r+0x1ea>
 800c868:	0800fcd1 	.word	0x0800fcd1
 800c86c:	0800fcd7 	.word	0x0800fcd7
 800c870:	0800fcdb 	.word	0x0800fcdb
 800c874:	080084e5 	.word	0x080084e5
 800c878:	0800c625 	.word	0x0800c625

0800c87c <__swbuf_r>:
 800c87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c87e:	460e      	mov	r6, r1
 800c880:	4614      	mov	r4, r2
 800c882:	4605      	mov	r5, r0
 800c884:	b118      	cbz	r0, 800c88e <__swbuf_r+0x12>
 800c886:	6a03      	ldr	r3, [r0, #32]
 800c888:	b90b      	cbnz	r3, 800c88e <__swbuf_r+0x12>
 800c88a:	f7fc fc87 	bl	800919c <__sinit>
 800c88e:	69a3      	ldr	r3, [r4, #24]
 800c890:	60a3      	str	r3, [r4, #8]
 800c892:	89a3      	ldrh	r3, [r4, #12]
 800c894:	071a      	lsls	r2, r3, #28
 800c896:	d525      	bpl.n	800c8e4 <__swbuf_r+0x68>
 800c898:	6923      	ldr	r3, [r4, #16]
 800c89a:	b31b      	cbz	r3, 800c8e4 <__swbuf_r+0x68>
 800c89c:	6823      	ldr	r3, [r4, #0]
 800c89e:	6922      	ldr	r2, [r4, #16]
 800c8a0:	b2f6      	uxtb	r6, r6
 800c8a2:	1a98      	subs	r0, r3, r2
 800c8a4:	6963      	ldr	r3, [r4, #20]
 800c8a6:	4637      	mov	r7, r6
 800c8a8:	4283      	cmp	r3, r0
 800c8aa:	dc04      	bgt.n	800c8b6 <__swbuf_r+0x3a>
 800c8ac:	4621      	mov	r1, r4
 800c8ae:	4628      	mov	r0, r5
 800c8b0:	f7ff fa3e 	bl	800bd30 <_fflush_r>
 800c8b4:	b9e0      	cbnz	r0, 800c8f0 <__swbuf_r+0x74>
 800c8b6:	68a3      	ldr	r3, [r4, #8]
 800c8b8:	3b01      	subs	r3, #1
 800c8ba:	60a3      	str	r3, [r4, #8]
 800c8bc:	6823      	ldr	r3, [r4, #0]
 800c8be:	1c5a      	adds	r2, r3, #1
 800c8c0:	6022      	str	r2, [r4, #0]
 800c8c2:	701e      	strb	r6, [r3, #0]
 800c8c4:	6962      	ldr	r2, [r4, #20]
 800c8c6:	1c43      	adds	r3, r0, #1
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d004      	beq.n	800c8d6 <__swbuf_r+0x5a>
 800c8cc:	89a3      	ldrh	r3, [r4, #12]
 800c8ce:	07db      	lsls	r3, r3, #31
 800c8d0:	d506      	bpl.n	800c8e0 <__swbuf_r+0x64>
 800c8d2:	2e0a      	cmp	r6, #10
 800c8d4:	d104      	bne.n	800c8e0 <__swbuf_r+0x64>
 800c8d6:	4621      	mov	r1, r4
 800c8d8:	4628      	mov	r0, r5
 800c8da:	f7ff fa29 	bl	800bd30 <_fflush_r>
 800c8de:	b938      	cbnz	r0, 800c8f0 <__swbuf_r+0x74>
 800c8e0:	4638      	mov	r0, r7
 800c8e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8e4:	4621      	mov	r1, r4
 800c8e6:	4628      	mov	r0, r5
 800c8e8:	f000 f806 	bl	800c8f8 <__swsetup_r>
 800c8ec:	2800      	cmp	r0, #0
 800c8ee:	d0d5      	beq.n	800c89c <__swbuf_r+0x20>
 800c8f0:	f04f 37ff 	mov.w	r7, #4294967295
 800c8f4:	e7f4      	b.n	800c8e0 <__swbuf_r+0x64>
	...

0800c8f8 <__swsetup_r>:
 800c8f8:	b538      	push	{r3, r4, r5, lr}
 800c8fa:	4b2a      	ldr	r3, [pc, #168]	; (800c9a4 <__swsetup_r+0xac>)
 800c8fc:	4605      	mov	r5, r0
 800c8fe:	6818      	ldr	r0, [r3, #0]
 800c900:	460c      	mov	r4, r1
 800c902:	b118      	cbz	r0, 800c90c <__swsetup_r+0x14>
 800c904:	6a03      	ldr	r3, [r0, #32]
 800c906:	b90b      	cbnz	r3, 800c90c <__swsetup_r+0x14>
 800c908:	f7fc fc48 	bl	800919c <__sinit>
 800c90c:	89a3      	ldrh	r3, [r4, #12]
 800c90e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c912:	0718      	lsls	r0, r3, #28
 800c914:	d422      	bmi.n	800c95c <__swsetup_r+0x64>
 800c916:	06d9      	lsls	r1, r3, #27
 800c918:	d407      	bmi.n	800c92a <__swsetup_r+0x32>
 800c91a:	2309      	movs	r3, #9
 800c91c:	602b      	str	r3, [r5, #0]
 800c91e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c922:	f04f 30ff 	mov.w	r0, #4294967295
 800c926:	81a3      	strh	r3, [r4, #12]
 800c928:	e034      	b.n	800c994 <__swsetup_r+0x9c>
 800c92a:	0758      	lsls	r0, r3, #29
 800c92c:	d512      	bpl.n	800c954 <__swsetup_r+0x5c>
 800c92e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c930:	b141      	cbz	r1, 800c944 <__swsetup_r+0x4c>
 800c932:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c936:	4299      	cmp	r1, r3
 800c938:	d002      	beq.n	800c940 <__swsetup_r+0x48>
 800c93a:	4628      	mov	r0, r5
 800c93c:	f7fd fbe8 	bl	800a110 <_free_r>
 800c940:	2300      	movs	r3, #0
 800c942:	6363      	str	r3, [r4, #52]	; 0x34
 800c944:	89a3      	ldrh	r3, [r4, #12]
 800c946:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c94a:	81a3      	strh	r3, [r4, #12]
 800c94c:	2300      	movs	r3, #0
 800c94e:	6063      	str	r3, [r4, #4]
 800c950:	6923      	ldr	r3, [r4, #16]
 800c952:	6023      	str	r3, [r4, #0]
 800c954:	89a3      	ldrh	r3, [r4, #12]
 800c956:	f043 0308 	orr.w	r3, r3, #8
 800c95a:	81a3      	strh	r3, [r4, #12]
 800c95c:	6923      	ldr	r3, [r4, #16]
 800c95e:	b94b      	cbnz	r3, 800c974 <__swsetup_r+0x7c>
 800c960:	89a3      	ldrh	r3, [r4, #12]
 800c962:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c966:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c96a:	d003      	beq.n	800c974 <__swsetup_r+0x7c>
 800c96c:	4621      	mov	r1, r4
 800c96e:	4628      	mov	r0, r5
 800c970:	f000 f883 	bl	800ca7a <__smakebuf_r>
 800c974:	89a0      	ldrh	r0, [r4, #12]
 800c976:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c97a:	f010 0301 	ands.w	r3, r0, #1
 800c97e:	d00a      	beq.n	800c996 <__swsetup_r+0x9e>
 800c980:	2300      	movs	r3, #0
 800c982:	60a3      	str	r3, [r4, #8]
 800c984:	6963      	ldr	r3, [r4, #20]
 800c986:	425b      	negs	r3, r3
 800c988:	61a3      	str	r3, [r4, #24]
 800c98a:	6923      	ldr	r3, [r4, #16]
 800c98c:	b943      	cbnz	r3, 800c9a0 <__swsetup_r+0xa8>
 800c98e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c992:	d1c4      	bne.n	800c91e <__swsetup_r+0x26>
 800c994:	bd38      	pop	{r3, r4, r5, pc}
 800c996:	0781      	lsls	r1, r0, #30
 800c998:	bf58      	it	pl
 800c99a:	6963      	ldrpl	r3, [r4, #20]
 800c99c:	60a3      	str	r3, [r4, #8]
 800c99e:	e7f4      	b.n	800c98a <__swsetup_r+0x92>
 800c9a0:	2000      	movs	r0, #0
 800c9a2:	e7f7      	b.n	800c994 <__swsetup_r+0x9c>
 800c9a4:	20000080 	.word	0x20000080

0800c9a8 <_raise_r>:
 800c9a8:	291f      	cmp	r1, #31
 800c9aa:	b538      	push	{r3, r4, r5, lr}
 800c9ac:	4604      	mov	r4, r0
 800c9ae:	460d      	mov	r5, r1
 800c9b0:	d904      	bls.n	800c9bc <_raise_r+0x14>
 800c9b2:	2316      	movs	r3, #22
 800c9b4:	6003      	str	r3, [r0, #0]
 800c9b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ba:	bd38      	pop	{r3, r4, r5, pc}
 800c9bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c9be:	b112      	cbz	r2, 800c9c6 <_raise_r+0x1e>
 800c9c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c9c4:	b94b      	cbnz	r3, 800c9da <_raise_r+0x32>
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	f000 f830 	bl	800ca2c <_getpid_r>
 800c9cc:	462a      	mov	r2, r5
 800c9ce:	4601      	mov	r1, r0
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9d6:	f000 b817 	b.w	800ca08 <_kill_r>
 800c9da:	2b01      	cmp	r3, #1
 800c9dc:	d00a      	beq.n	800c9f4 <_raise_r+0x4c>
 800c9de:	1c59      	adds	r1, r3, #1
 800c9e0:	d103      	bne.n	800c9ea <_raise_r+0x42>
 800c9e2:	2316      	movs	r3, #22
 800c9e4:	6003      	str	r3, [r0, #0]
 800c9e6:	2001      	movs	r0, #1
 800c9e8:	e7e7      	b.n	800c9ba <_raise_r+0x12>
 800c9ea:	2400      	movs	r4, #0
 800c9ec:	4628      	mov	r0, r5
 800c9ee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c9f2:	4798      	blx	r3
 800c9f4:	2000      	movs	r0, #0
 800c9f6:	e7e0      	b.n	800c9ba <_raise_r+0x12>

0800c9f8 <raise>:
 800c9f8:	4b02      	ldr	r3, [pc, #8]	; (800ca04 <raise+0xc>)
 800c9fa:	4601      	mov	r1, r0
 800c9fc:	6818      	ldr	r0, [r3, #0]
 800c9fe:	f7ff bfd3 	b.w	800c9a8 <_raise_r>
 800ca02:	bf00      	nop
 800ca04:	20000080 	.word	0x20000080

0800ca08 <_kill_r>:
 800ca08:	b538      	push	{r3, r4, r5, lr}
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	4d06      	ldr	r5, [pc, #24]	; (800ca28 <_kill_r+0x20>)
 800ca0e:	4604      	mov	r4, r0
 800ca10:	4608      	mov	r0, r1
 800ca12:	4611      	mov	r1, r2
 800ca14:	602b      	str	r3, [r5, #0]
 800ca16:	f7f5 fb24 	bl	8002062 <_kill>
 800ca1a:	1c43      	adds	r3, r0, #1
 800ca1c:	d102      	bne.n	800ca24 <_kill_r+0x1c>
 800ca1e:	682b      	ldr	r3, [r5, #0]
 800ca20:	b103      	cbz	r3, 800ca24 <_kill_r+0x1c>
 800ca22:	6023      	str	r3, [r4, #0]
 800ca24:	bd38      	pop	{r3, r4, r5, pc}
 800ca26:	bf00      	nop
 800ca28:	200009d0 	.word	0x200009d0

0800ca2c <_getpid_r>:
 800ca2c:	f7f5 bb12 	b.w	8002054 <_getpid>

0800ca30 <__swhatbuf_r>:
 800ca30:	b570      	push	{r4, r5, r6, lr}
 800ca32:	460c      	mov	r4, r1
 800ca34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca38:	4615      	mov	r5, r2
 800ca3a:	2900      	cmp	r1, #0
 800ca3c:	461e      	mov	r6, r3
 800ca3e:	b096      	sub	sp, #88	; 0x58
 800ca40:	da0c      	bge.n	800ca5c <__swhatbuf_r+0x2c>
 800ca42:	89a3      	ldrh	r3, [r4, #12]
 800ca44:	2100      	movs	r1, #0
 800ca46:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ca4a:	bf0c      	ite	eq
 800ca4c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ca50:	2340      	movne	r3, #64	; 0x40
 800ca52:	2000      	movs	r0, #0
 800ca54:	6031      	str	r1, [r6, #0]
 800ca56:	602b      	str	r3, [r5, #0]
 800ca58:	b016      	add	sp, #88	; 0x58
 800ca5a:	bd70      	pop	{r4, r5, r6, pc}
 800ca5c:	466a      	mov	r2, sp
 800ca5e:	f000 f849 	bl	800caf4 <_fstat_r>
 800ca62:	2800      	cmp	r0, #0
 800ca64:	dbed      	blt.n	800ca42 <__swhatbuf_r+0x12>
 800ca66:	9901      	ldr	r1, [sp, #4]
 800ca68:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ca6c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ca70:	4259      	negs	r1, r3
 800ca72:	4159      	adcs	r1, r3
 800ca74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca78:	e7eb      	b.n	800ca52 <__swhatbuf_r+0x22>

0800ca7a <__smakebuf_r>:
 800ca7a:	898b      	ldrh	r3, [r1, #12]
 800ca7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca7e:	079d      	lsls	r5, r3, #30
 800ca80:	4606      	mov	r6, r0
 800ca82:	460c      	mov	r4, r1
 800ca84:	d507      	bpl.n	800ca96 <__smakebuf_r+0x1c>
 800ca86:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ca8a:	6023      	str	r3, [r4, #0]
 800ca8c:	6123      	str	r3, [r4, #16]
 800ca8e:	2301      	movs	r3, #1
 800ca90:	6163      	str	r3, [r4, #20]
 800ca92:	b002      	add	sp, #8
 800ca94:	bd70      	pop	{r4, r5, r6, pc}
 800ca96:	466a      	mov	r2, sp
 800ca98:	ab01      	add	r3, sp, #4
 800ca9a:	f7ff ffc9 	bl	800ca30 <__swhatbuf_r>
 800ca9e:	9900      	ldr	r1, [sp, #0]
 800caa0:	4605      	mov	r5, r0
 800caa2:	4630      	mov	r0, r6
 800caa4:	f7fd fba4 	bl	800a1f0 <_malloc_r>
 800caa8:	b948      	cbnz	r0, 800cabe <__smakebuf_r+0x44>
 800caaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caae:	059a      	lsls	r2, r3, #22
 800cab0:	d4ef      	bmi.n	800ca92 <__smakebuf_r+0x18>
 800cab2:	f023 0303 	bic.w	r3, r3, #3
 800cab6:	f043 0302 	orr.w	r3, r3, #2
 800caba:	81a3      	strh	r3, [r4, #12]
 800cabc:	e7e3      	b.n	800ca86 <__smakebuf_r+0xc>
 800cabe:	89a3      	ldrh	r3, [r4, #12]
 800cac0:	6020      	str	r0, [r4, #0]
 800cac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cac6:	81a3      	strh	r3, [r4, #12]
 800cac8:	9b00      	ldr	r3, [sp, #0]
 800caca:	6120      	str	r0, [r4, #16]
 800cacc:	6163      	str	r3, [r4, #20]
 800cace:	9b01      	ldr	r3, [sp, #4]
 800cad0:	b15b      	cbz	r3, 800caea <__smakebuf_r+0x70>
 800cad2:	4630      	mov	r0, r6
 800cad4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cad8:	f000 f81e 	bl	800cb18 <_isatty_r>
 800cadc:	b128      	cbz	r0, 800caea <__smakebuf_r+0x70>
 800cade:	89a3      	ldrh	r3, [r4, #12]
 800cae0:	f023 0303 	bic.w	r3, r3, #3
 800cae4:	f043 0301 	orr.w	r3, r3, #1
 800cae8:	81a3      	strh	r3, [r4, #12]
 800caea:	89a3      	ldrh	r3, [r4, #12]
 800caec:	431d      	orrs	r5, r3
 800caee:	81a5      	strh	r5, [r4, #12]
 800caf0:	e7cf      	b.n	800ca92 <__smakebuf_r+0x18>
	...

0800caf4 <_fstat_r>:
 800caf4:	b538      	push	{r3, r4, r5, lr}
 800caf6:	2300      	movs	r3, #0
 800caf8:	4d06      	ldr	r5, [pc, #24]	; (800cb14 <_fstat_r+0x20>)
 800cafa:	4604      	mov	r4, r0
 800cafc:	4608      	mov	r0, r1
 800cafe:	4611      	mov	r1, r2
 800cb00:	602b      	str	r3, [r5, #0]
 800cb02:	f7f5 fb0c 	bl	800211e <_fstat>
 800cb06:	1c43      	adds	r3, r0, #1
 800cb08:	d102      	bne.n	800cb10 <_fstat_r+0x1c>
 800cb0a:	682b      	ldr	r3, [r5, #0]
 800cb0c:	b103      	cbz	r3, 800cb10 <_fstat_r+0x1c>
 800cb0e:	6023      	str	r3, [r4, #0]
 800cb10:	bd38      	pop	{r3, r4, r5, pc}
 800cb12:	bf00      	nop
 800cb14:	200009d0 	.word	0x200009d0

0800cb18 <_isatty_r>:
 800cb18:	b538      	push	{r3, r4, r5, lr}
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	4d05      	ldr	r5, [pc, #20]	; (800cb34 <_isatty_r+0x1c>)
 800cb1e:	4604      	mov	r4, r0
 800cb20:	4608      	mov	r0, r1
 800cb22:	602b      	str	r3, [r5, #0]
 800cb24:	f7f5 fb0a 	bl	800213c <_isatty>
 800cb28:	1c43      	adds	r3, r0, #1
 800cb2a:	d102      	bne.n	800cb32 <_isatty_r+0x1a>
 800cb2c:	682b      	ldr	r3, [r5, #0]
 800cb2e:	b103      	cbz	r3, 800cb32 <_isatty_r+0x1a>
 800cb30:	6023      	str	r3, [r4, #0]
 800cb32:	bd38      	pop	{r3, r4, r5, pc}
 800cb34:	200009d0 	.word	0x200009d0

0800cb38 <pow>:
 800cb38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb3c:	4614      	mov	r4, r2
 800cb3e:	461d      	mov	r5, r3
 800cb40:	4680      	mov	r8, r0
 800cb42:	4689      	mov	r9, r1
 800cb44:	f000 f868 	bl	800cc18 <__ieee754_pow>
 800cb48:	4622      	mov	r2, r4
 800cb4a:	4606      	mov	r6, r0
 800cb4c:	460f      	mov	r7, r1
 800cb4e:	462b      	mov	r3, r5
 800cb50:	4620      	mov	r0, r4
 800cb52:	4629      	mov	r1, r5
 800cb54:	f7f3 ff5a 	bl	8000a0c <__aeabi_dcmpun>
 800cb58:	bbc8      	cbnz	r0, 800cbce <pow+0x96>
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	4640      	mov	r0, r8
 800cb60:	4649      	mov	r1, r9
 800cb62:	f7f3 ff21 	bl	80009a8 <__aeabi_dcmpeq>
 800cb66:	b1b8      	cbz	r0, 800cb98 <pow+0x60>
 800cb68:	2200      	movs	r2, #0
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	4629      	mov	r1, r5
 800cb70:	f7f3 ff1a 	bl	80009a8 <__aeabi_dcmpeq>
 800cb74:	2800      	cmp	r0, #0
 800cb76:	d141      	bne.n	800cbfc <pow+0xc4>
 800cb78:	4620      	mov	r0, r4
 800cb7a:	4629      	mov	r1, r5
 800cb7c:	f000 f844 	bl	800cc08 <finite>
 800cb80:	b328      	cbz	r0, 800cbce <pow+0x96>
 800cb82:	2200      	movs	r2, #0
 800cb84:	2300      	movs	r3, #0
 800cb86:	4620      	mov	r0, r4
 800cb88:	4629      	mov	r1, r5
 800cb8a:	f7f3 ff17 	bl	80009bc <__aeabi_dcmplt>
 800cb8e:	b1f0      	cbz	r0, 800cbce <pow+0x96>
 800cb90:	f7fc fc00 	bl	8009394 <__errno>
 800cb94:	2322      	movs	r3, #34	; 0x22
 800cb96:	e019      	b.n	800cbcc <pow+0x94>
 800cb98:	4630      	mov	r0, r6
 800cb9a:	4639      	mov	r1, r7
 800cb9c:	f000 f834 	bl	800cc08 <finite>
 800cba0:	b9c8      	cbnz	r0, 800cbd6 <pow+0x9e>
 800cba2:	4640      	mov	r0, r8
 800cba4:	4649      	mov	r1, r9
 800cba6:	f000 f82f 	bl	800cc08 <finite>
 800cbaa:	b1a0      	cbz	r0, 800cbd6 <pow+0x9e>
 800cbac:	4620      	mov	r0, r4
 800cbae:	4629      	mov	r1, r5
 800cbb0:	f000 f82a 	bl	800cc08 <finite>
 800cbb4:	b178      	cbz	r0, 800cbd6 <pow+0x9e>
 800cbb6:	4632      	mov	r2, r6
 800cbb8:	463b      	mov	r3, r7
 800cbba:	4630      	mov	r0, r6
 800cbbc:	4639      	mov	r1, r7
 800cbbe:	f7f3 ff25 	bl	8000a0c <__aeabi_dcmpun>
 800cbc2:	2800      	cmp	r0, #0
 800cbc4:	d0e4      	beq.n	800cb90 <pow+0x58>
 800cbc6:	f7fc fbe5 	bl	8009394 <__errno>
 800cbca:	2321      	movs	r3, #33	; 0x21
 800cbcc:	6003      	str	r3, [r0, #0]
 800cbce:	4630      	mov	r0, r6
 800cbd0:	4639      	mov	r1, r7
 800cbd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	2300      	movs	r3, #0
 800cbda:	4630      	mov	r0, r6
 800cbdc:	4639      	mov	r1, r7
 800cbde:	f7f3 fee3 	bl	80009a8 <__aeabi_dcmpeq>
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	d0f3      	beq.n	800cbce <pow+0x96>
 800cbe6:	4640      	mov	r0, r8
 800cbe8:	4649      	mov	r1, r9
 800cbea:	f000 f80d 	bl	800cc08 <finite>
 800cbee:	2800      	cmp	r0, #0
 800cbf0:	d0ed      	beq.n	800cbce <pow+0x96>
 800cbf2:	4620      	mov	r0, r4
 800cbf4:	4629      	mov	r1, r5
 800cbf6:	f000 f807 	bl	800cc08 <finite>
 800cbfa:	e7c8      	b.n	800cb8e <pow+0x56>
 800cbfc:	2600      	movs	r6, #0
 800cbfe:	4f01      	ldr	r7, [pc, #4]	; (800cc04 <pow+0xcc>)
 800cc00:	e7e5      	b.n	800cbce <pow+0x96>
 800cc02:	bf00      	nop
 800cc04:	3ff00000 	.word	0x3ff00000

0800cc08 <finite>:
 800cc08:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800cc0c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cc10:	0fc0      	lsrs	r0, r0, #31
 800cc12:	4770      	bx	lr
 800cc14:	0000      	movs	r0, r0
	...

0800cc18 <__ieee754_pow>:
 800cc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc1c:	b093      	sub	sp, #76	; 0x4c
 800cc1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cc22:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800cc26:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800cc2a:	4689      	mov	r9, r1
 800cc2c:	ea56 0102 	orrs.w	r1, r6, r2
 800cc30:	4680      	mov	r8, r0
 800cc32:	d111      	bne.n	800cc58 <__ieee754_pow+0x40>
 800cc34:	1803      	adds	r3, r0, r0
 800cc36:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800cc3a:	4152      	adcs	r2, r2
 800cc3c:	4299      	cmp	r1, r3
 800cc3e:	4b82      	ldr	r3, [pc, #520]	; (800ce48 <__ieee754_pow+0x230>)
 800cc40:	4193      	sbcs	r3, r2
 800cc42:	f080 84ba 	bcs.w	800d5ba <__ieee754_pow+0x9a2>
 800cc46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc4a:	4640      	mov	r0, r8
 800cc4c:	4649      	mov	r1, r9
 800cc4e:	f7f3 fa8d 	bl	800016c <__adddf3>
 800cc52:	4683      	mov	fp, r0
 800cc54:	468c      	mov	ip, r1
 800cc56:	e06f      	b.n	800cd38 <__ieee754_pow+0x120>
 800cc58:	4b7c      	ldr	r3, [pc, #496]	; (800ce4c <__ieee754_pow+0x234>)
 800cc5a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800cc5e:	429c      	cmp	r4, r3
 800cc60:	464d      	mov	r5, r9
 800cc62:	4682      	mov	sl, r0
 800cc64:	dc06      	bgt.n	800cc74 <__ieee754_pow+0x5c>
 800cc66:	d101      	bne.n	800cc6c <__ieee754_pow+0x54>
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	d1ec      	bne.n	800cc46 <__ieee754_pow+0x2e>
 800cc6c:	429e      	cmp	r6, r3
 800cc6e:	dc01      	bgt.n	800cc74 <__ieee754_pow+0x5c>
 800cc70:	d10f      	bne.n	800cc92 <__ieee754_pow+0x7a>
 800cc72:	b172      	cbz	r2, 800cc92 <__ieee754_pow+0x7a>
 800cc74:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800cc78:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800cc7c:	ea55 050a 	orrs.w	r5, r5, sl
 800cc80:	d1e1      	bne.n	800cc46 <__ieee754_pow+0x2e>
 800cc82:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cc86:	18db      	adds	r3, r3, r3
 800cc88:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800cc8c:	4152      	adcs	r2, r2
 800cc8e:	429d      	cmp	r5, r3
 800cc90:	e7d5      	b.n	800cc3e <__ieee754_pow+0x26>
 800cc92:	2d00      	cmp	r5, #0
 800cc94:	da39      	bge.n	800cd0a <__ieee754_pow+0xf2>
 800cc96:	4b6e      	ldr	r3, [pc, #440]	; (800ce50 <__ieee754_pow+0x238>)
 800cc98:	429e      	cmp	r6, r3
 800cc9a:	dc52      	bgt.n	800cd42 <__ieee754_pow+0x12a>
 800cc9c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cca0:	429e      	cmp	r6, r3
 800cca2:	f340 849d 	ble.w	800d5e0 <__ieee754_pow+0x9c8>
 800cca6:	1533      	asrs	r3, r6, #20
 800cca8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ccac:	2b14      	cmp	r3, #20
 800ccae:	dd0f      	ble.n	800ccd0 <__ieee754_pow+0xb8>
 800ccb0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ccb4:	fa22 f103 	lsr.w	r1, r2, r3
 800ccb8:	fa01 f303 	lsl.w	r3, r1, r3
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	f040 848f 	bne.w	800d5e0 <__ieee754_pow+0x9c8>
 800ccc2:	f001 0101 	and.w	r1, r1, #1
 800ccc6:	f1c1 0302 	rsb	r3, r1, #2
 800ccca:	9300      	str	r3, [sp, #0]
 800cccc:	b182      	cbz	r2, 800ccf0 <__ieee754_pow+0xd8>
 800ccce:	e05d      	b.n	800cd8c <__ieee754_pow+0x174>
 800ccd0:	2a00      	cmp	r2, #0
 800ccd2:	d159      	bne.n	800cd88 <__ieee754_pow+0x170>
 800ccd4:	f1c3 0314 	rsb	r3, r3, #20
 800ccd8:	fa46 f103 	asr.w	r1, r6, r3
 800ccdc:	fa01 f303 	lsl.w	r3, r1, r3
 800cce0:	42b3      	cmp	r3, r6
 800cce2:	f040 847a 	bne.w	800d5da <__ieee754_pow+0x9c2>
 800cce6:	f001 0101 	and.w	r1, r1, #1
 800ccea:	f1c1 0302 	rsb	r3, r1, #2
 800ccee:	9300      	str	r3, [sp, #0]
 800ccf0:	4b58      	ldr	r3, [pc, #352]	; (800ce54 <__ieee754_pow+0x23c>)
 800ccf2:	429e      	cmp	r6, r3
 800ccf4:	d132      	bne.n	800cd5c <__ieee754_pow+0x144>
 800ccf6:	2f00      	cmp	r7, #0
 800ccf8:	f280 846b 	bge.w	800d5d2 <__ieee754_pow+0x9ba>
 800ccfc:	4642      	mov	r2, r8
 800ccfe:	464b      	mov	r3, r9
 800cd00:	2000      	movs	r0, #0
 800cd02:	4954      	ldr	r1, [pc, #336]	; (800ce54 <__ieee754_pow+0x23c>)
 800cd04:	f7f3 fd12 	bl	800072c <__aeabi_ddiv>
 800cd08:	e7a3      	b.n	800cc52 <__ieee754_pow+0x3a>
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	9300      	str	r3, [sp, #0]
 800cd0e:	2a00      	cmp	r2, #0
 800cd10:	d13c      	bne.n	800cd8c <__ieee754_pow+0x174>
 800cd12:	4b4e      	ldr	r3, [pc, #312]	; (800ce4c <__ieee754_pow+0x234>)
 800cd14:	429e      	cmp	r6, r3
 800cd16:	d1eb      	bne.n	800ccf0 <__ieee754_pow+0xd8>
 800cd18:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cd1c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cd20:	ea53 030a 	orrs.w	r3, r3, sl
 800cd24:	f000 8449 	beq.w	800d5ba <__ieee754_pow+0x9a2>
 800cd28:	4b4b      	ldr	r3, [pc, #300]	; (800ce58 <__ieee754_pow+0x240>)
 800cd2a:	429c      	cmp	r4, r3
 800cd2c:	dd0b      	ble.n	800cd46 <__ieee754_pow+0x12e>
 800cd2e:	2f00      	cmp	r7, #0
 800cd30:	f2c0 8449 	blt.w	800d5c6 <__ieee754_pow+0x9ae>
 800cd34:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800cd38:	4658      	mov	r0, fp
 800cd3a:	4661      	mov	r1, ip
 800cd3c:	b013      	add	sp, #76	; 0x4c
 800cd3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd42:	2302      	movs	r3, #2
 800cd44:	e7e2      	b.n	800cd0c <__ieee754_pow+0xf4>
 800cd46:	2f00      	cmp	r7, #0
 800cd48:	f04f 0b00 	mov.w	fp, #0
 800cd4c:	f04f 0c00 	mov.w	ip, #0
 800cd50:	daf2      	bge.n	800cd38 <__ieee754_pow+0x120>
 800cd52:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800cd56:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800cd5a:	e7ed      	b.n	800cd38 <__ieee754_pow+0x120>
 800cd5c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800cd60:	d106      	bne.n	800cd70 <__ieee754_pow+0x158>
 800cd62:	4642      	mov	r2, r8
 800cd64:	464b      	mov	r3, r9
 800cd66:	4640      	mov	r0, r8
 800cd68:	4649      	mov	r1, r9
 800cd6a:	f7f3 fbb5 	bl	80004d8 <__aeabi_dmul>
 800cd6e:	e770      	b.n	800cc52 <__ieee754_pow+0x3a>
 800cd70:	4b3a      	ldr	r3, [pc, #232]	; (800ce5c <__ieee754_pow+0x244>)
 800cd72:	429f      	cmp	r7, r3
 800cd74:	d10a      	bne.n	800cd8c <__ieee754_pow+0x174>
 800cd76:	2d00      	cmp	r5, #0
 800cd78:	db08      	blt.n	800cd8c <__ieee754_pow+0x174>
 800cd7a:	4640      	mov	r0, r8
 800cd7c:	4649      	mov	r1, r9
 800cd7e:	b013      	add	sp, #76	; 0x4c
 800cd80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd84:	f000 bd0a 	b.w	800d79c <__ieee754_sqrt>
 800cd88:	2300      	movs	r3, #0
 800cd8a:	9300      	str	r3, [sp, #0]
 800cd8c:	4640      	mov	r0, r8
 800cd8e:	4649      	mov	r1, r9
 800cd90:	f000 fc58 	bl	800d644 <fabs>
 800cd94:	4683      	mov	fp, r0
 800cd96:	468c      	mov	ip, r1
 800cd98:	f1ba 0f00 	cmp.w	sl, #0
 800cd9c:	d128      	bne.n	800cdf0 <__ieee754_pow+0x1d8>
 800cd9e:	b124      	cbz	r4, 800cdaa <__ieee754_pow+0x192>
 800cda0:	4b2c      	ldr	r3, [pc, #176]	; (800ce54 <__ieee754_pow+0x23c>)
 800cda2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d122      	bne.n	800cdf0 <__ieee754_pow+0x1d8>
 800cdaa:	2f00      	cmp	r7, #0
 800cdac:	da07      	bge.n	800cdbe <__ieee754_pow+0x1a6>
 800cdae:	465a      	mov	r2, fp
 800cdb0:	4663      	mov	r3, ip
 800cdb2:	2000      	movs	r0, #0
 800cdb4:	4927      	ldr	r1, [pc, #156]	; (800ce54 <__ieee754_pow+0x23c>)
 800cdb6:	f7f3 fcb9 	bl	800072c <__aeabi_ddiv>
 800cdba:	4683      	mov	fp, r0
 800cdbc:	468c      	mov	ip, r1
 800cdbe:	2d00      	cmp	r5, #0
 800cdc0:	daba      	bge.n	800cd38 <__ieee754_pow+0x120>
 800cdc2:	9b00      	ldr	r3, [sp, #0]
 800cdc4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cdc8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cdcc:	431c      	orrs	r4, r3
 800cdce:	d108      	bne.n	800cde2 <__ieee754_pow+0x1ca>
 800cdd0:	465a      	mov	r2, fp
 800cdd2:	4663      	mov	r3, ip
 800cdd4:	4658      	mov	r0, fp
 800cdd6:	4661      	mov	r1, ip
 800cdd8:	f7f3 f9c6 	bl	8000168 <__aeabi_dsub>
 800cddc:	4602      	mov	r2, r0
 800cdde:	460b      	mov	r3, r1
 800cde0:	e790      	b.n	800cd04 <__ieee754_pow+0xec>
 800cde2:	9b00      	ldr	r3, [sp, #0]
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d1a7      	bne.n	800cd38 <__ieee754_pow+0x120>
 800cde8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800cdec:	469c      	mov	ip, r3
 800cdee:	e7a3      	b.n	800cd38 <__ieee754_pow+0x120>
 800cdf0:	0feb      	lsrs	r3, r5, #31
 800cdf2:	3b01      	subs	r3, #1
 800cdf4:	930c      	str	r3, [sp, #48]	; 0x30
 800cdf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cdf8:	9b00      	ldr	r3, [sp, #0]
 800cdfa:	4313      	orrs	r3, r2
 800cdfc:	d104      	bne.n	800ce08 <__ieee754_pow+0x1f0>
 800cdfe:	4642      	mov	r2, r8
 800ce00:	464b      	mov	r3, r9
 800ce02:	4640      	mov	r0, r8
 800ce04:	4649      	mov	r1, r9
 800ce06:	e7e7      	b.n	800cdd8 <__ieee754_pow+0x1c0>
 800ce08:	4b15      	ldr	r3, [pc, #84]	; (800ce60 <__ieee754_pow+0x248>)
 800ce0a:	429e      	cmp	r6, r3
 800ce0c:	f340 80f6 	ble.w	800cffc <__ieee754_pow+0x3e4>
 800ce10:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ce14:	429e      	cmp	r6, r3
 800ce16:	4b10      	ldr	r3, [pc, #64]	; (800ce58 <__ieee754_pow+0x240>)
 800ce18:	dd09      	ble.n	800ce2e <__ieee754_pow+0x216>
 800ce1a:	429c      	cmp	r4, r3
 800ce1c:	dc0c      	bgt.n	800ce38 <__ieee754_pow+0x220>
 800ce1e:	2f00      	cmp	r7, #0
 800ce20:	da0c      	bge.n	800ce3c <__ieee754_pow+0x224>
 800ce22:	2000      	movs	r0, #0
 800ce24:	b013      	add	sp, #76	; 0x4c
 800ce26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce2a:	f000 bcb2 	b.w	800d792 <__math_oflow>
 800ce2e:	429c      	cmp	r4, r3
 800ce30:	dbf5      	blt.n	800ce1e <__ieee754_pow+0x206>
 800ce32:	4b08      	ldr	r3, [pc, #32]	; (800ce54 <__ieee754_pow+0x23c>)
 800ce34:	429c      	cmp	r4, r3
 800ce36:	dd15      	ble.n	800ce64 <__ieee754_pow+0x24c>
 800ce38:	2f00      	cmp	r7, #0
 800ce3a:	dcf2      	bgt.n	800ce22 <__ieee754_pow+0x20a>
 800ce3c:	2000      	movs	r0, #0
 800ce3e:	b013      	add	sp, #76	; 0x4c
 800ce40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce44:	f000 bca0 	b.w	800d788 <__math_uflow>
 800ce48:	fff00000 	.word	0xfff00000
 800ce4c:	7ff00000 	.word	0x7ff00000
 800ce50:	433fffff 	.word	0x433fffff
 800ce54:	3ff00000 	.word	0x3ff00000
 800ce58:	3fefffff 	.word	0x3fefffff
 800ce5c:	3fe00000 	.word	0x3fe00000
 800ce60:	41e00000 	.word	0x41e00000
 800ce64:	4661      	mov	r1, ip
 800ce66:	2200      	movs	r2, #0
 800ce68:	4658      	mov	r0, fp
 800ce6a:	4b5f      	ldr	r3, [pc, #380]	; (800cfe8 <__ieee754_pow+0x3d0>)
 800ce6c:	f7f3 f97c 	bl	8000168 <__aeabi_dsub>
 800ce70:	a355      	add	r3, pc, #340	; (adr r3, 800cfc8 <__ieee754_pow+0x3b0>)
 800ce72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce76:	4604      	mov	r4, r0
 800ce78:	460d      	mov	r5, r1
 800ce7a:	f7f3 fb2d 	bl	80004d8 <__aeabi_dmul>
 800ce7e:	a354      	add	r3, pc, #336	; (adr r3, 800cfd0 <__ieee754_pow+0x3b8>)
 800ce80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce84:	4606      	mov	r6, r0
 800ce86:	460f      	mov	r7, r1
 800ce88:	4620      	mov	r0, r4
 800ce8a:	4629      	mov	r1, r5
 800ce8c:	f7f3 fb24 	bl	80004d8 <__aeabi_dmul>
 800ce90:	2200      	movs	r2, #0
 800ce92:	4682      	mov	sl, r0
 800ce94:	468b      	mov	fp, r1
 800ce96:	4620      	mov	r0, r4
 800ce98:	4629      	mov	r1, r5
 800ce9a:	4b54      	ldr	r3, [pc, #336]	; (800cfec <__ieee754_pow+0x3d4>)
 800ce9c:	f7f3 fb1c 	bl	80004d8 <__aeabi_dmul>
 800cea0:	4602      	mov	r2, r0
 800cea2:	460b      	mov	r3, r1
 800cea4:	a14c      	add	r1, pc, #304	; (adr r1, 800cfd8 <__ieee754_pow+0x3c0>)
 800cea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ceaa:	f7f3 f95d 	bl	8000168 <__aeabi_dsub>
 800ceae:	4622      	mov	r2, r4
 800ceb0:	462b      	mov	r3, r5
 800ceb2:	f7f3 fb11 	bl	80004d8 <__aeabi_dmul>
 800ceb6:	4602      	mov	r2, r0
 800ceb8:	460b      	mov	r3, r1
 800ceba:	2000      	movs	r0, #0
 800cebc:	494c      	ldr	r1, [pc, #304]	; (800cff0 <__ieee754_pow+0x3d8>)
 800cebe:	f7f3 f953 	bl	8000168 <__aeabi_dsub>
 800cec2:	4622      	mov	r2, r4
 800cec4:	462b      	mov	r3, r5
 800cec6:	4680      	mov	r8, r0
 800cec8:	4689      	mov	r9, r1
 800ceca:	4620      	mov	r0, r4
 800cecc:	4629      	mov	r1, r5
 800cece:	f7f3 fb03 	bl	80004d8 <__aeabi_dmul>
 800ced2:	4602      	mov	r2, r0
 800ced4:	460b      	mov	r3, r1
 800ced6:	4640      	mov	r0, r8
 800ced8:	4649      	mov	r1, r9
 800ceda:	f7f3 fafd 	bl	80004d8 <__aeabi_dmul>
 800cede:	a340      	add	r3, pc, #256	; (adr r3, 800cfe0 <__ieee754_pow+0x3c8>)
 800cee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee4:	f7f3 faf8 	bl	80004d8 <__aeabi_dmul>
 800cee8:	4602      	mov	r2, r0
 800ceea:	460b      	mov	r3, r1
 800ceec:	4650      	mov	r0, sl
 800ceee:	4659      	mov	r1, fp
 800cef0:	f7f3 f93a 	bl	8000168 <__aeabi_dsub>
 800cef4:	4602      	mov	r2, r0
 800cef6:	460b      	mov	r3, r1
 800cef8:	4604      	mov	r4, r0
 800cefa:	460d      	mov	r5, r1
 800cefc:	4630      	mov	r0, r6
 800cefe:	4639      	mov	r1, r7
 800cf00:	f7f3 f934 	bl	800016c <__adddf3>
 800cf04:	2000      	movs	r0, #0
 800cf06:	4632      	mov	r2, r6
 800cf08:	463b      	mov	r3, r7
 800cf0a:	4682      	mov	sl, r0
 800cf0c:	468b      	mov	fp, r1
 800cf0e:	f7f3 f92b 	bl	8000168 <__aeabi_dsub>
 800cf12:	4602      	mov	r2, r0
 800cf14:	460b      	mov	r3, r1
 800cf16:	4620      	mov	r0, r4
 800cf18:	4629      	mov	r1, r5
 800cf1a:	f7f3 f925 	bl	8000168 <__aeabi_dsub>
 800cf1e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cf22:	9b00      	ldr	r3, [sp, #0]
 800cf24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf26:	3b01      	subs	r3, #1
 800cf28:	4313      	orrs	r3, r2
 800cf2a:	f04f 0600 	mov.w	r6, #0
 800cf2e:	f04f 0200 	mov.w	r2, #0
 800cf32:	bf0c      	ite	eq
 800cf34:	4b2f      	ldreq	r3, [pc, #188]	; (800cff4 <__ieee754_pow+0x3dc>)
 800cf36:	4b2c      	ldrne	r3, [pc, #176]	; (800cfe8 <__ieee754_pow+0x3d0>)
 800cf38:	4604      	mov	r4, r0
 800cf3a:	460d      	mov	r5, r1
 800cf3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf40:	e9cd 2300 	strd	r2, r3, [sp]
 800cf44:	4632      	mov	r2, r6
 800cf46:	463b      	mov	r3, r7
 800cf48:	f7f3 f90e 	bl	8000168 <__aeabi_dsub>
 800cf4c:	4652      	mov	r2, sl
 800cf4e:	465b      	mov	r3, fp
 800cf50:	f7f3 fac2 	bl	80004d8 <__aeabi_dmul>
 800cf54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf58:	4680      	mov	r8, r0
 800cf5a:	4689      	mov	r9, r1
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	4629      	mov	r1, r5
 800cf60:	f7f3 faba 	bl	80004d8 <__aeabi_dmul>
 800cf64:	4602      	mov	r2, r0
 800cf66:	460b      	mov	r3, r1
 800cf68:	4640      	mov	r0, r8
 800cf6a:	4649      	mov	r1, r9
 800cf6c:	f7f3 f8fe 	bl	800016c <__adddf3>
 800cf70:	4632      	mov	r2, r6
 800cf72:	463b      	mov	r3, r7
 800cf74:	4680      	mov	r8, r0
 800cf76:	4689      	mov	r9, r1
 800cf78:	4650      	mov	r0, sl
 800cf7a:	4659      	mov	r1, fp
 800cf7c:	f7f3 faac 	bl	80004d8 <__aeabi_dmul>
 800cf80:	4604      	mov	r4, r0
 800cf82:	460d      	mov	r5, r1
 800cf84:	460b      	mov	r3, r1
 800cf86:	4602      	mov	r2, r0
 800cf88:	4649      	mov	r1, r9
 800cf8a:	4640      	mov	r0, r8
 800cf8c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800cf90:	f7f3 f8ec 	bl	800016c <__adddf3>
 800cf94:	4b18      	ldr	r3, [pc, #96]	; (800cff8 <__ieee754_pow+0x3e0>)
 800cf96:	4682      	mov	sl, r0
 800cf98:	4299      	cmp	r1, r3
 800cf9a:	460f      	mov	r7, r1
 800cf9c:	460e      	mov	r6, r1
 800cf9e:	f340 82e7 	ble.w	800d570 <__ieee754_pow+0x958>
 800cfa2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800cfa6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800cfaa:	4303      	orrs	r3, r0
 800cfac:	f000 81e2 	beq.w	800d374 <__ieee754_pow+0x75c>
 800cfb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	f7f3 fd00 	bl	80009bc <__aeabi_dcmplt>
 800cfbc:	3800      	subs	r0, #0
 800cfbe:	bf18      	it	ne
 800cfc0:	2001      	movne	r0, #1
 800cfc2:	e72f      	b.n	800ce24 <__ieee754_pow+0x20c>
 800cfc4:	f3af 8000 	nop.w
 800cfc8:	60000000 	.word	0x60000000
 800cfcc:	3ff71547 	.word	0x3ff71547
 800cfd0:	f85ddf44 	.word	0xf85ddf44
 800cfd4:	3e54ae0b 	.word	0x3e54ae0b
 800cfd8:	55555555 	.word	0x55555555
 800cfdc:	3fd55555 	.word	0x3fd55555
 800cfe0:	652b82fe 	.word	0x652b82fe
 800cfe4:	3ff71547 	.word	0x3ff71547
 800cfe8:	3ff00000 	.word	0x3ff00000
 800cfec:	3fd00000 	.word	0x3fd00000
 800cff0:	3fe00000 	.word	0x3fe00000
 800cff4:	bff00000 	.word	0xbff00000
 800cff8:	408fffff 	.word	0x408fffff
 800cffc:	4bd4      	ldr	r3, [pc, #848]	; (800d350 <__ieee754_pow+0x738>)
 800cffe:	2200      	movs	r2, #0
 800d000:	402b      	ands	r3, r5
 800d002:	b943      	cbnz	r3, 800d016 <__ieee754_pow+0x3fe>
 800d004:	4658      	mov	r0, fp
 800d006:	4661      	mov	r1, ip
 800d008:	4bd2      	ldr	r3, [pc, #840]	; (800d354 <__ieee754_pow+0x73c>)
 800d00a:	f7f3 fa65 	bl	80004d8 <__aeabi_dmul>
 800d00e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d012:	4683      	mov	fp, r0
 800d014:	460c      	mov	r4, r1
 800d016:	1523      	asrs	r3, r4, #20
 800d018:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d01c:	4413      	add	r3, r2
 800d01e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d020:	4bcd      	ldr	r3, [pc, #820]	; (800d358 <__ieee754_pow+0x740>)
 800d022:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d026:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d02a:	429c      	cmp	r4, r3
 800d02c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d030:	dd08      	ble.n	800d044 <__ieee754_pow+0x42c>
 800d032:	4bca      	ldr	r3, [pc, #808]	; (800d35c <__ieee754_pow+0x744>)
 800d034:	429c      	cmp	r4, r3
 800d036:	f340 8164 	ble.w	800d302 <__ieee754_pow+0x6ea>
 800d03a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d03c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d040:	3301      	adds	r3, #1
 800d042:	930b      	str	r3, [sp, #44]	; 0x2c
 800d044:	2600      	movs	r6, #0
 800d046:	00f3      	lsls	r3, r6, #3
 800d048:	930d      	str	r3, [sp, #52]	; 0x34
 800d04a:	4bc5      	ldr	r3, [pc, #788]	; (800d360 <__ieee754_pow+0x748>)
 800d04c:	4658      	mov	r0, fp
 800d04e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d052:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d056:	4629      	mov	r1, r5
 800d058:	461a      	mov	r2, r3
 800d05a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800d05e:	4623      	mov	r3, r4
 800d060:	f7f3 f882 	bl	8000168 <__aeabi_dsub>
 800d064:	46da      	mov	sl, fp
 800d066:	462b      	mov	r3, r5
 800d068:	4652      	mov	r2, sl
 800d06a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d06e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d072:	f7f3 f87b 	bl	800016c <__adddf3>
 800d076:	4602      	mov	r2, r0
 800d078:	460b      	mov	r3, r1
 800d07a:	2000      	movs	r0, #0
 800d07c:	49b9      	ldr	r1, [pc, #740]	; (800d364 <__ieee754_pow+0x74c>)
 800d07e:	f7f3 fb55 	bl	800072c <__aeabi_ddiv>
 800d082:	4602      	mov	r2, r0
 800d084:	460b      	mov	r3, r1
 800d086:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d08a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d08e:	f7f3 fa23 	bl	80004d8 <__aeabi_dmul>
 800d092:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d096:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800d09a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d09e:	2300      	movs	r3, #0
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	46ab      	mov	fp, r5
 800d0a4:	106d      	asrs	r5, r5, #1
 800d0a6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d0aa:	9304      	str	r3, [sp, #16]
 800d0ac:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d0b0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d0b4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800d0b8:	4640      	mov	r0, r8
 800d0ba:	4649      	mov	r1, r9
 800d0bc:	4614      	mov	r4, r2
 800d0be:	461d      	mov	r5, r3
 800d0c0:	f7f3 fa0a 	bl	80004d8 <__aeabi_dmul>
 800d0c4:	4602      	mov	r2, r0
 800d0c6:	460b      	mov	r3, r1
 800d0c8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d0cc:	f7f3 f84c 	bl	8000168 <__aeabi_dsub>
 800d0d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d0d4:	4606      	mov	r6, r0
 800d0d6:	460f      	mov	r7, r1
 800d0d8:	4620      	mov	r0, r4
 800d0da:	4629      	mov	r1, r5
 800d0dc:	f7f3 f844 	bl	8000168 <__aeabi_dsub>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	4650      	mov	r0, sl
 800d0e6:	4659      	mov	r1, fp
 800d0e8:	f7f3 f83e 	bl	8000168 <__aeabi_dsub>
 800d0ec:	4642      	mov	r2, r8
 800d0ee:	464b      	mov	r3, r9
 800d0f0:	f7f3 f9f2 	bl	80004d8 <__aeabi_dmul>
 800d0f4:	4602      	mov	r2, r0
 800d0f6:	460b      	mov	r3, r1
 800d0f8:	4630      	mov	r0, r6
 800d0fa:	4639      	mov	r1, r7
 800d0fc:	f7f3 f834 	bl	8000168 <__aeabi_dsub>
 800d100:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d104:	f7f3 f9e8 	bl	80004d8 <__aeabi_dmul>
 800d108:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d10c:	4682      	mov	sl, r0
 800d10e:	468b      	mov	fp, r1
 800d110:	4610      	mov	r0, r2
 800d112:	4619      	mov	r1, r3
 800d114:	f7f3 f9e0 	bl	80004d8 <__aeabi_dmul>
 800d118:	a37b      	add	r3, pc, #492	; (adr r3, 800d308 <__ieee754_pow+0x6f0>)
 800d11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11e:	4604      	mov	r4, r0
 800d120:	460d      	mov	r5, r1
 800d122:	f7f3 f9d9 	bl	80004d8 <__aeabi_dmul>
 800d126:	a37a      	add	r3, pc, #488	; (adr r3, 800d310 <__ieee754_pow+0x6f8>)
 800d128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12c:	f7f3 f81e 	bl	800016c <__adddf3>
 800d130:	4622      	mov	r2, r4
 800d132:	462b      	mov	r3, r5
 800d134:	f7f3 f9d0 	bl	80004d8 <__aeabi_dmul>
 800d138:	a377      	add	r3, pc, #476	; (adr r3, 800d318 <__ieee754_pow+0x700>)
 800d13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d13e:	f7f3 f815 	bl	800016c <__adddf3>
 800d142:	4622      	mov	r2, r4
 800d144:	462b      	mov	r3, r5
 800d146:	f7f3 f9c7 	bl	80004d8 <__aeabi_dmul>
 800d14a:	a375      	add	r3, pc, #468	; (adr r3, 800d320 <__ieee754_pow+0x708>)
 800d14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d150:	f7f3 f80c 	bl	800016c <__adddf3>
 800d154:	4622      	mov	r2, r4
 800d156:	462b      	mov	r3, r5
 800d158:	f7f3 f9be 	bl	80004d8 <__aeabi_dmul>
 800d15c:	a372      	add	r3, pc, #456	; (adr r3, 800d328 <__ieee754_pow+0x710>)
 800d15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d162:	f7f3 f803 	bl	800016c <__adddf3>
 800d166:	4622      	mov	r2, r4
 800d168:	462b      	mov	r3, r5
 800d16a:	f7f3 f9b5 	bl	80004d8 <__aeabi_dmul>
 800d16e:	a370      	add	r3, pc, #448	; (adr r3, 800d330 <__ieee754_pow+0x718>)
 800d170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d174:	f7f2 fffa 	bl	800016c <__adddf3>
 800d178:	4622      	mov	r2, r4
 800d17a:	4606      	mov	r6, r0
 800d17c:	460f      	mov	r7, r1
 800d17e:	462b      	mov	r3, r5
 800d180:	4620      	mov	r0, r4
 800d182:	4629      	mov	r1, r5
 800d184:	f7f3 f9a8 	bl	80004d8 <__aeabi_dmul>
 800d188:	4602      	mov	r2, r0
 800d18a:	460b      	mov	r3, r1
 800d18c:	4630      	mov	r0, r6
 800d18e:	4639      	mov	r1, r7
 800d190:	f7f3 f9a2 	bl	80004d8 <__aeabi_dmul>
 800d194:	4604      	mov	r4, r0
 800d196:	460d      	mov	r5, r1
 800d198:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d19c:	4642      	mov	r2, r8
 800d19e:	464b      	mov	r3, r9
 800d1a0:	f7f2 ffe4 	bl	800016c <__adddf3>
 800d1a4:	4652      	mov	r2, sl
 800d1a6:	465b      	mov	r3, fp
 800d1a8:	f7f3 f996 	bl	80004d8 <__aeabi_dmul>
 800d1ac:	4622      	mov	r2, r4
 800d1ae:	462b      	mov	r3, r5
 800d1b0:	f7f2 ffdc 	bl	800016c <__adddf3>
 800d1b4:	4642      	mov	r2, r8
 800d1b6:	4606      	mov	r6, r0
 800d1b8:	460f      	mov	r7, r1
 800d1ba:	464b      	mov	r3, r9
 800d1bc:	4640      	mov	r0, r8
 800d1be:	4649      	mov	r1, r9
 800d1c0:	f7f3 f98a 	bl	80004d8 <__aeabi_dmul>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	460b      	mov	r3, r1
 800d1c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	4b66      	ldr	r3, [pc, #408]	; (800d368 <__ieee754_pow+0x750>)
 800d1d0:	f7f2 ffcc 	bl	800016c <__adddf3>
 800d1d4:	4632      	mov	r2, r6
 800d1d6:	463b      	mov	r3, r7
 800d1d8:	f7f2 ffc8 	bl	800016c <__adddf3>
 800d1dc:	2400      	movs	r4, #0
 800d1de:	460d      	mov	r5, r1
 800d1e0:	4622      	mov	r2, r4
 800d1e2:	460b      	mov	r3, r1
 800d1e4:	4640      	mov	r0, r8
 800d1e6:	4649      	mov	r1, r9
 800d1e8:	f7f3 f976 	bl	80004d8 <__aeabi_dmul>
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	4680      	mov	r8, r0
 800d1f0:	4689      	mov	r9, r1
 800d1f2:	4620      	mov	r0, r4
 800d1f4:	4629      	mov	r1, r5
 800d1f6:	4b5c      	ldr	r3, [pc, #368]	; (800d368 <__ieee754_pow+0x750>)
 800d1f8:	f7f2 ffb6 	bl	8000168 <__aeabi_dsub>
 800d1fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d200:	f7f2 ffb2 	bl	8000168 <__aeabi_dsub>
 800d204:	4602      	mov	r2, r0
 800d206:	460b      	mov	r3, r1
 800d208:	4630      	mov	r0, r6
 800d20a:	4639      	mov	r1, r7
 800d20c:	f7f2 ffac 	bl	8000168 <__aeabi_dsub>
 800d210:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d214:	f7f3 f960 	bl	80004d8 <__aeabi_dmul>
 800d218:	4622      	mov	r2, r4
 800d21a:	4606      	mov	r6, r0
 800d21c:	460f      	mov	r7, r1
 800d21e:	462b      	mov	r3, r5
 800d220:	4650      	mov	r0, sl
 800d222:	4659      	mov	r1, fp
 800d224:	f7f3 f958 	bl	80004d8 <__aeabi_dmul>
 800d228:	4602      	mov	r2, r0
 800d22a:	460b      	mov	r3, r1
 800d22c:	4630      	mov	r0, r6
 800d22e:	4639      	mov	r1, r7
 800d230:	f7f2 ff9c 	bl	800016c <__adddf3>
 800d234:	2400      	movs	r4, #0
 800d236:	4606      	mov	r6, r0
 800d238:	460f      	mov	r7, r1
 800d23a:	4602      	mov	r2, r0
 800d23c:	460b      	mov	r3, r1
 800d23e:	4640      	mov	r0, r8
 800d240:	4649      	mov	r1, r9
 800d242:	f7f2 ff93 	bl	800016c <__adddf3>
 800d246:	a33c      	add	r3, pc, #240	; (adr r3, 800d338 <__ieee754_pow+0x720>)
 800d248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d24c:	4620      	mov	r0, r4
 800d24e:	460d      	mov	r5, r1
 800d250:	f7f3 f942 	bl	80004d8 <__aeabi_dmul>
 800d254:	4642      	mov	r2, r8
 800d256:	464b      	mov	r3, r9
 800d258:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d25c:	4620      	mov	r0, r4
 800d25e:	4629      	mov	r1, r5
 800d260:	f7f2 ff82 	bl	8000168 <__aeabi_dsub>
 800d264:	4602      	mov	r2, r0
 800d266:	460b      	mov	r3, r1
 800d268:	4630      	mov	r0, r6
 800d26a:	4639      	mov	r1, r7
 800d26c:	f7f2 ff7c 	bl	8000168 <__aeabi_dsub>
 800d270:	a333      	add	r3, pc, #204	; (adr r3, 800d340 <__ieee754_pow+0x728>)
 800d272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d276:	f7f3 f92f 	bl	80004d8 <__aeabi_dmul>
 800d27a:	a333      	add	r3, pc, #204	; (adr r3, 800d348 <__ieee754_pow+0x730>)
 800d27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d280:	4606      	mov	r6, r0
 800d282:	460f      	mov	r7, r1
 800d284:	4620      	mov	r0, r4
 800d286:	4629      	mov	r1, r5
 800d288:	f7f3 f926 	bl	80004d8 <__aeabi_dmul>
 800d28c:	4602      	mov	r2, r0
 800d28e:	460b      	mov	r3, r1
 800d290:	4630      	mov	r0, r6
 800d292:	4639      	mov	r1, r7
 800d294:	f7f2 ff6a 	bl	800016c <__adddf3>
 800d298:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d29a:	4b34      	ldr	r3, [pc, #208]	; (800d36c <__ieee754_pow+0x754>)
 800d29c:	4413      	add	r3, r2
 800d29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a2:	f7f2 ff63 	bl	800016c <__adddf3>
 800d2a6:	4680      	mov	r8, r0
 800d2a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d2aa:	4689      	mov	r9, r1
 800d2ac:	f7f3 f8aa 	bl	8000404 <__aeabi_i2d>
 800d2b0:	4604      	mov	r4, r0
 800d2b2:	460d      	mov	r5, r1
 800d2b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d2b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d2ba:	4b2d      	ldr	r3, [pc, #180]	; (800d370 <__ieee754_pow+0x758>)
 800d2bc:	4413      	add	r3, r2
 800d2be:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d2c2:	4642      	mov	r2, r8
 800d2c4:	464b      	mov	r3, r9
 800d2c6:	f7f2 ff51 	bl	800016c <__adddf3>
 800d2ca:	4632      	mov	r2, r6
 800d2cc:	463b      	mov	r3, r7
 800d2ce:	f7f2 ff4d 	bl	800016c <__adddf3>
 800d2d2:	4622      	mov	r2, r4
 800d2d4:	462b      	mov	r3, r5
 800d2d6:	f7f2 ff49 	bl	800016c <__adddf3>
 800d2da:	2000      	movs	r0, #0
 800d2dc:	4622      	mov	r2, r4
 800d2de:	462b      	mov	r3, r5
 800d2e0:	4682      	mov	sl, r0
 800d2e2:	468b      	mov	fp, r1
 800d2e4:	f7f2 ff40 	bl	8000168 <__aeabi_dsub>
 800d2e8:	4632      	mov	r2, r6
 800d2ea:	463b      	mov	r3, r7
 800d2ec:	f7f2 ff3c 	bl	8000168 <__aeabi_dsub>
 800d2f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d2f4:	f7f2 ff38 	bl	8000168 <__aeabi_dsub>
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	460b      	mov	r3, r1
 800d2fc:	4640      	mov	r0, r8
 800d2fe:	4649      	mov	r1, r9
 800d300:	e60b      	b.n	800cf1a <__ieee754_pow+0x302>
 800d302:	2601      	movs	r6, #1
 800d304:	e69f      	b.n	800d046 <__ieee754_pow+0x42e>
 800d306:	bf00      	nop
 800d308:	4a454eef 	.word	0x4a454eef
 800d30c:	3fca7e28 	.word	0x3fca7e28
 800d310:	93c9db65 	.word	0x93c9db65
 800d314:	3fcd864a 	.word	0x3fcd864a
 800d318:	a91d4101 	.word	0xa91d4101
 800d31c:	3fd17460 	.word	0x3fd17460
 800d320:	518f264d 	.word	0x518f264d
 800d324:	3fd55555 	.word	0x3fd55555
 800d328:	db6fabff 	.word	0xdb6fabff
 800d32c:	3fdb6db6 	.word	0x3fdb6db6
 800d330:	33333303 	.word	0x33333303
 800d334:	3fe33333 	.word	0x3fe33333
 800d338:	e0000000 	.word	0xe0000000
 800d33c:	3feec709 	.word	0x3feec709
 800d340:	dc3a03fd 	.word	0xdc3a03fd
 800d344:	3feec709 	.word	0x3feec709
 800d348:	145b01f5 	.word	0x145b01f5
 800d34c:	be3e2fe0 	.word	0xbe3e2fe0
 800d350:	7ff00000 	.word	0x7ff00000
 800d354:	43400000 	.word	0x43400000
 800d358:	0003988e 	.word	0x0003988e
 800d35c:	000bb679 	.word	0x000bb679
 800d360:	0800fd88 	.word	0x0800fd88
 800d364:	3ff00000 	.word	0x3ff00000
 800d368:	40080000 	.word	0x40080000
 800d36c:	0800fda8 	.word	0x0800fda8
 800d370:	0800fd98 	.word	0x0800fd98
 800d374:	a39c      	add	r3, pc, #624	; (adr r3, 800d5e8 <__ieee754_pow+0x9d0>)
 800d376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d37a:	4640      	mov	r0, r8
 800d37c:	4649      	mov	r1, r9
 800d37e:	f7f2 fef5 	bl	800016c <__adddf3>
 800d382:	4622      	mov	r2, r4
 800d384:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d388:	462b      	mov	r3, r5
 800d38a:	4650      	mov	r0, sl
 800d38c:	4639      	mov	r1, r7
 800d38e:	f7f2 feeb 	bl	8000168 <__aeabi_dsub>
 800d392:	4602      	mov	r2, r0
 800d394:	460b      	mov	r3, r1
 800d396:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d39a:	f7f3 fb2d 	bl	80009f8 <__aeabi_dcmpgt>
 800d39e:	2800      	cmp	r0, #0
 800d3a0:	f47f ae06 	bne.w	800cfb0 <__ieee754_pow+0x398>
 800d3a4:	4aa2      	ldr	r2, [pc, #648]	; (800d630 <__ieee754_pow+0xa18>)
 800d3a6:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	f340 8100 	ble.w	800d5b0 <__ieee754_pow+0x998>
 800d3b0:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d3b4:	151b      	asrs	r3, r3, #20
 800d3b6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d3ba:	fa4a fa03 	asr.w	sl, sl, r3
 800d3be:	44b2      	add	sl, r6
 800d3c0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800d3c4:	489b      	ldr	r0, [pc, #620]	; (800d634 <__ieee754_pow+0xa1c>)
 800d3c6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d3ca:	4108      	asrs	r0, r1
 800d3cc:	ea00 030a 	and.w	r3, r0, sl
 800d3d0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800d3d4:	f1c1 0114 	rsb	r1, r1, #20
 800d3d8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d3dc:	fa4a fa01 	asr.w	sl, sl, r1
 800d3e0:	2e00      	cmp	r6, #0
 800d3e2:	f04f 0200 	mov.w	r2, #0
 800d3e6:	4620      	mov	r0, r4
 800d3e8:	4629      	mov	r1, r5
 800d3ea:	bfb8      	it	lt
 800d3ec:	f1ca 0a00 	rsblt	sl, sl, #0
 800d3f0:	f7f2 feba 	bl	8000168 <__aeabi_dsub>
 800d3f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3fc:	2400      	movs	r4, #0
 800d3fe:	4642      	mov	r2, r8
 800d400:	464b      	mov	r3, r9
 800d402:	f7f2 feb3 	bl	800016c <__adddf3>
 800d406:	a37a      	add	r3, pc, #488	; (adr r3, 800d5f0 <__ieee754_pow+0x9d8>)
 800d408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d40c:	4620      	mov	r0, r4
 800d40e:	460d      	mov	r5, r1
 800d410:	f7f3 f862 	bl	80004d8 <__aeabi_dmul>
 800d414:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d418:	4606      	mov	r6, r0
 800d41a:	460f      	mov	r7, r1
 800d41c:	4620      	mov	r0, r4
 800d41e:	4629      	mov	r1, r5
 800d420:	f7f2 fea2 	bl	8000168 <__aeabi_dsub>
 800d424:	4602      	mov	r2, r0
 800d426:	460b      	mov	r3, r1
 800d428:	4640      	mov	r0, r8
 800d42a:	4649      	mov	r1, r9
 800d42c:	f7f2 fe9c 	bl	8000168 <__aeabi_dsub>
 800d430:	a371      	add	r3, pc, #452	; (adr r3, 800d5f8 <__ieee754_pow+0x9e0>)
 800d432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d436:	f7f3 f84f 	bl	80004d8 <__aeabi_dmul>
 800d43a:	a371      	add	r3, pc, #452	; (adr r3, 800d600 <__ieee754_pow+0x9e8>)
 800d43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d440:	4680      	mov	r8, r0
 800d442:	4689      	mov	r9, r1
 800d444:	4620      	mov	r0, r4
 800d446:	4629      	mov	r1, r5
 800d448:	f7f3 f846 	bl	80004d8 <__aeabi_dmul>
 800d44c:	4602      	mov	r2, r0
 800d44e:	460b      	mov	r3, r1
 800d450:	4640      	mov	r0, r8
 800d452:	4649      	mov	r1, r9
 800d454:	f7f2 fe8a 	bl	800016c <__adddf3>
 800d458:	4604      	mov	r4, r0
 800d45a:	460d      	mov	r5, r1
 800d45c:	4602      	mov	r2, r0
 800d45e:	460b      	mov	r3, r1
 800d460:	4630      	mov	r0, r6
 800d462:	4639      	mov	r1, r7
 800d464:	f7f2 fe82 	bl	800016c <__adddf3>
 800d468:	4632      	mov	r2, r6
 800d46a:	463b      	mov	r3, r7
 800d46c:	4680      	mov	r8, r0
 800d46e:	4689      	mov	r9, r1
 800d470:	f7f2 fe7a 	bl	8000168 <__aeabi_dsub>
 800d474:	4602      	mov	r2, r0
 800d476:	460b      	mov	r3, r1
 800d478:	4620      	mov	r0, r4
 800d47a:	4629      	mov	r1, r5
 800d47c:	f7f2 fe74 	bl	8000168 <__aeabi_dsub>
 800d480:	4642      	mov	r2, r8
 800d482:	4606      	mov	r6, r0
 800d484:	460f      	mov	r7, r1
 800d486:	464b      	mov	r3, r9
 800d488:	4640      	mov	r0, r8
 800d48a:	4649      	mov	r1, r9
 800d48c:	f7f3 f824 	bl	80004d8 <__aeabi_dmul>
 800d490:	a35d      	add	r3, pc, #372	; (adr r3, 800d608 <__ieee754_pow+0x9f0>)
 800d492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d496:	4604      	mov	r4, r0
 800d498:	460d      	mov	r5, r1
 800d49a:	f7f3 f81d 	bl	80004d8 <__aeabi_dmul>
 800d49e:	a35c      	add	r3, pc, #368	; (adr r3, 800d610 <__ieee754_pow+0x9f8>)
 800d4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a4:	f7f2 fe60 	bl	8000168 <__aeabi_dsub>
 800d4a8:	4622      	mov	r2, r4
 800d4aa:	462b      	mov	r3, r5
 800d4ac:	f7f3 f814 	bl	80004d8 <__aeabi_dmul>
 800d4b0:	a359      	add	r3, pc, #356	; (adr r3, 800d618 <__ieee754_pow+0xa00>)
 800d4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b6:	f7f2 fe59 	bl	800016c <__adddf3>
 800d4ba:	4622      	mov	r2, r4
 800d4bc:	462b      	mov	r3, r5
 800d4be:	f7f3 f80b 	bl	80004d8 <__aeabi_dmul>
 800d4c2:	a357      	add	r3, pc, #348	; (adr r3, 800d620 <__ieee754_pow+0xa08>)
 800d4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c8:	f7f2 fe4e 	bl	8000168 <__aeabi_dsub>
 800d4cc:	4622      	mov	r2, r4
 800d4ce:	462b      	mov	r3, r5
 800d4d0:	f7f3 f802 	bl	80004d8 <__aeabi_dmul>
 800d4d4:	a354      	add	r3, pc, #336	; (adr r3, 800d628 <__ieee754_pow+0xa10>)
 800d4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4da:	f7f2 fe47 	bl	800016c <__adddf3>
 800d4de:	4622      	mov	r2, r4
 800d4e0:	462b      	mov	r3, r5
 800d4e2:	f7f2 fff9 	bl	80004d8 <__aeabi_dmul>
 800d4e6:	4602      	mov	r2, r0
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	4640      	mov	r0, r8
 800d4ec:	4649      	mov	r1, r9
 800d4ee:	f7f2 fe3b 	bl	8000168 <__aeabi_dsub>
 800d4f2:	4604      	mov	r4, r0
 800d4f4:	460d      	mov	r5, r1
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	4640      	mov	r0, r8
 800d4fc:	4649      	mov	r1, r9
 800d4fe:	f7f2 ffeb 	bl	80004d8 <__aeabi_dmul>
 800d502:	2200      	movs	r2, #0
 800d504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d508:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d50c:	4620      	mov	r0, r4
 800d50e:	4629      	mov	r1, r5
 800d510:	f7f2 fe2a 	bl	8000168 <__aeabi_dsub>
 800d514:	4602      	mov	r2, r0
 800d516:	460b      	mov	r3, r1
 800d518:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d51c:	f7f3 f906 	bl	800072c <__aeabi_ddiv>
 800d520:	4632      	mov	r2, r6
 800d522:	4604      	mov	r4, r0
 800d524:	460d      	mov	r5, r1
 800d526:	463b      	mov	r3, r7
 800d528:	4640      	mov	r0, r8
 800d52a:	4649      	mov	r1, r9
 800d52c:	f7f2 ffd4 	bl	80004d8 <__aeabi_dmul>
 800d530:	4632      	mov	r2, r6
 800d532:	463b      	mov	r3, r7
 800d534:	f7f2 fe1a 	bl	800016c <__adddf3>
 800d538:	4602      	mov	r2, r0
 800d53a:	460b      	mov	r3, r1
 800d53c:	4620      	mov	r0, r4
 800d53e:	4629      	mov	r1, r5
 800d540:	f7f2 fe12 	bl	8000168 <__aeabi_dsub>
 800d544:	4642      	mov	r2, r8
 800d546:	464b      	mov	r3, r9
 800d548:	f7f2 fe0e 	bl	8000168 <__aeabi_dsub>
 800d54c:	4602      	mov	r2, r0
 800d54e:	460b      	mov	r3, r1
 800d550:	2000      	movs	r0, #0
 800d552:	4939      	ldr	r1, [pc, #228]	; (800d638 <__ieee754_pow+0xa20>)
 800d554:	f7f2 fe08 	bl	8000168 <__aeabi_dsub>
 800d558:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d55c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d560:	da29      	bge.n	800d5b6 <__ieee754_pow+0x99e>
 800d562:	4652      	mov	r2, sl
 800d564:	f000 f874 	bl	800d650 <scalbn>
 800d568:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d56c:	f7ff bbfd 	b.w	800cd6a <__ieee754_pow+0x152>
 800d570:	4b32      	ldr	r3, [pc, #200]	; (800d63c <__ieee754_pow+0xa24>)
 800d572:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800d576:	429f      	cmp	r7, r3
 800d578:	f77f af14 	ble.w	800d3a4 <__ieee754_pow+0x78c>
 800d57c:	4b30      	ldr	r3, [pc, #192]	; (800d640 <__ieee754_pow+0xa28>)
 800d57e:	440b      	add	r3, r1
 800d580:	4303      	orrs	r3, r0
 800d582:	d009      	beq.n	800d598 <__ieee754_pow+0x980>
 800d584:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d588:	2200      	movs	r2, #0
 800d58a:	2300      	movs	r3, #0
 800d58c:	f7f3 fa16 	bl	80009bc <__aeabi_dcmplt>
 800d590:	3800      	subs	r0, #0
 800d592:	bf18      	it	ne
 800d594:	2001      	movne	r0, #1
 800d596:	e452      	b.n	800ce3e <__ieee754_pow+0x226>
 800d598:	4622      	mov	r2, r4
 800d59a:	462b      	mov	r3, r5
 800d59c:	f7f2 fde4 	bl	8000168 <__aeabi_dsub>
 800d5a0:	4642      	mov	r2, r8
 800d5a2:	464b      	mov	r3, r9
 800d5a4:	f7f3 fa1e 	bl	80009e4 <__aeabi_dcmpge>
 800d5a8:	2800      	cmp	r0, #0
 800d5aa:	f43f aefb 	beq.w	800d3a4 <__ieee754_pow+0x78c>
 800d5ae:	e7e9      	b.n	800d584 <__ieee754_pow+0x96c>
 800d5b0:	f04f 0a00 	mov.w	sl, #0
 800d5b4:	e720      	b.n	800d3f8 <__ieee754_pow+0x7e0>
 800d5b6:	4621      	mov	r1, r4
 800d5b8:	e7d6      	b.n	800d568 <__ieee754_pow+0x950>
 800d5ba:	f04f 0b00 	mov.w	fp, #0
 800d5be:	f8df c078 	ldr.w	ip, [pc, #120]	; 800d638 <__ieee754_pow+0xa20>
 800d5c2:	f7ff bbb9 	b.w	800cd38 <__ieee754_pow+0x120>
 800d5c6:	f04f 0b00 	mov.w	fp, #0
 800d5ca:	f04f 0c00 	mov.w	ip, #0
 800d5ce:	f7ff bbb3 	b.w	800cd38 <__ieee754_pow+0x120>
 800d5d2:	4640      	mov	r0, r8
 800d5d4:	4649      	mov	r1, r9
 800d5d6:	f7ff bb3c 	b.w	800cc52 <__ieee754_pow+0x3a>
 800d5da:	9200      	str	r2, [sp, #0]
 800d5dc:	f7ff bb88 	b.w	800ccf0 <__ieee754_pow+0xd8>
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	f7ff bb72 	b.w	800ccca <__ieee754_pow+0xb2>
 800d5e6:	bf00      	nop
 800d5e8:	652b82fe 	.word	0x652b82fe
 800d5ec:	3c971547 	.word	0x3c971547
 800d5f0:	00000000 	.word	0x00000000
 800d5f4:	3fe62e43 	.word	0x3fe62e43
 800d5f8:	fefa39ef 	.word	0xfefa39ef
 800d5fc:	3fe62e42 	.word	0x3fe62e42
 800d600:	0ca86c39 	.word	0x0ca86c39
 800d604:	be205c61 	.word	0xbe205c61
 800d608:	72bea4d0 	.word	0x72bea4d0
 800d60c:	3e663769 	.word	0x3e663769
 800d610:	c5d26bf1 	.word	0xc5d26bf1
 800d614:	3ebbbd41 	.word	0x3ebbbd41
 800d618:	af25de2c 	.word	0xaf25de2c
 800d61c:	3f11566a 	.word	0x3f11566a
 800d620:	16bebd93 	.word	0x16bebd93
 800d624:	3f66c16c 	.word	0x3f66c16c
 800d628:	5555553e 	.word	0x5555553e
 800d62c:	3fc55555 	.word	0x3fc55555
 800d630:	3fe00000 	.word	0x3fe00000
 800d634:	fff00000 	.word	0xfff00000
 800d638:	3ff00000 	.word	0x3ff00000
 800d63c:	4090cbff 	.word	0x4090cbff
 800d640:	3f6f3400 	.word	0x3f6f3400

0800d644 <fabs>:
 800d644:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d648:	4619      	mov	r1, r3
 800d64a:	4770      	bx	lr
 800d64c:	0000      	movs	r0, r0
	...

0800d650 <scalbn>:
 800d650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d652:	4616      	mov	r6, r2
 800d654:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d658:	4604      	mov	r4, r0
 800d65a:	460d      	mov	r5, r1
 800d65c:	460b      	mov	r3, r1
 800d65e:	b992      	cbnz	r2, 800d686 <scalbn+0x36>
 800d660:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d664:	4303      	orrs	r3, r0
 800d666:	d03c      	beq.n	800d6e2 <scalbn+0x92>
 800d668:	4b31      	ldr	r3, [pc, #196]	; (800d730 <scalbn+0xe0>)
 800d66a:	2200      	movs	r2, #0
 800d66c:	f7f2 ff34 	bl	80004d8 <__aeabi_dmul>
 800d670:	4b30      	ldr	r3, [pc, #192]	; (800d734 <scalbn+0xe4>)
 800d672:	4604      	mov	r4, r0
 800d674:	429e      	cmp	r6, r3
 800d676:	460d      	mov	r5, r1
 800d678:	da0f      	bge.n	800d69a <scalbn+0x4a>
 800d67a:	a329      	add	r3, pc, #164	; (adr r3, 800d720 <scalbn+0xd0>)
 800d67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d680:	f7f2 ff2a 	bl	80004d8 <__aeabi_dmul>
 800d684:	e006      	b.n	800d694 <scalbn+0x44>
 800d686:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800d68a:	42ba      	cmp	r2, r7
 800d68c:	d109      	bne.n	800d6a2 <scalbn+0x52>
 800d68e:	4602      	mov	r2, r0
 800d690:	f7f2 fd6c 	bl	800016c <__adddf3>
 800d694:	4604      	mov	r4, r0
 800d696:	460d      	mov	r5, r1
 800d698:	e023      	b.n	800d6e2 <scalbn+0x92>
 800d69a:	460b      	mov	r3, r1
 800d69c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d6a0:	3a36      	subs	r2, #54	; 0x36
 800d6a2:	f24c 3150 	movw	r1, #50000	; 0xc350
 800d6a6:	428e      	cmp	r6, r1
 800d6a8:	dd0e      	ble.n	800d6c8 <scalbn+0x78>
 800d6aa:	a31f      	add	r3, pc, #124	; (adr r3, 800d728 <scalbn+0xd8>)
 800d6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b0:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800d6b4:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800d6b8:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800d6bc:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800d6c0:	481d      	ldr	r0, [pc, #116]	; (800d738 <scalbn+0xe8>)
 800d6c2:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800d6c6:	e7db      	b.n	800d680 <scalbn+0x30>
 800d6c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d6cc:	4432      	add	r2, r6
 800d6ce:	428a      	cmp	r2, r1
 800d6d0:	dceb      	bgt.n	800d6aa <scalbn+0x5a>
 800d6d2:	2a00      	cmp	r2, #0
 800d6d4:	dd08      	ble.n	800d6e8 <scalbn+0x98>
 800d6d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d6da:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d6de:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d6e2:	4620      	mov	r0, r4
 800d6e4:	4629      	mov	r1, r5
 800d6e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6e8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d6ec:	da0c      	bge.n	800d708 <scalbn+0xb8>
 800d6ee:	a30c      	add	r3, pc, #48	; (adr r3, 800d720 <scalbn+0xd0>)
 800d6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800d6f8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800d6fc:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800d700:	480e      	ldr	r0, [pc, #56]	; (800d73c <scalbn+0xec>)
 800d702:	f041 011f 	orr.w	r1, r1, #31
 800d706:	e7bb      	b.n	800d680 <scalbn+0x30>
 800d708:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d70c:	3236      	adds	r2, #54	; 0x36
 800d70e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d712:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d716:	4620      	mov	r0, r4
 800d718:	4629      	mov	r1, r5
 800d71a:	2200      	movs	r2, #0
 800d71c:	4b08      	ldr	r3, [pc, #32]	; (800d740 <scalbn+0xf0>)
 800d71e:	e7af      	b.n	800d680 <scalbn+0x30>
 800d720:	c2f8f359 	.word	0xc2f8f359
 800d724:	01a56e1f 	.word	0x01a56e1f
 800d728:	8800759c 	.word	0x8800759c
 800d72c:	7e37e43c 	.word	0x7e37e43c
 800d730:	43500000 	.word	0x43500000
 800d734:	ffff3cb0 	.word	0xffff3cb0
 800d738:	8800759c 	.word	0x8800759c
 800d73c:	c2f8f359 	.word	0xc2f8f359
 800d740:	3c900000 	.word	0x3c900000

0800d744 <with_errno>:
 800d744:	b570      	push	{r4, r5, r6, lr}
 800d746:	4604      	mov	r4, r0
 800d748:	460d      	mov	r5, r1
 800d74a:	4616      	mov	r6, r2
 800d74c:	f7fb fe22 	bl	8009394 <__errno>
 800d750:	4629      	mov	r1, r5
 800d752:	6006      	str	r6, [r0, #0]
 800d754:	4620      	mov	r0, r4
 800d756:	bd70      	pop	{r4, r5, r6, pc}

0800d758 <xflow>:
 800d758:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d75a:	4615      	mov	r5, r2
 800d75c:	461c      	mov	r4, r3
 800d75e:	b180      	cbz	r0, 800d782 <xflow+0x2a>
 800d760:	4610      	mov	r0, r2
 800d762:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d766:	e9cd 0100 	strd	r0, r1, [sp]
 800d76a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d76e:	4628      	mov	r0, r5
 800d770:	4621      	mov	r1, r4
 800d772:	f7f2 feb1 	bl	80004d8 <__aeabi_dmul>
 800d776:	2222      	movs	r2, #34	; 0x22
 800d778:	b003      	add	sp, #12
 800d77a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d77e:	f7ff bfe1 	b.w	800d744 <with_errno>
 800d782:	4610      	mov	r0, r2
 800d784:	4619      	mov	r1, r3
 800d786:	e7ee      	b.n	800d766 <xflow+0xe>

0800d788 <__math_uflow>:
 800d788:	2200      	movs	r2, #0
 800d78a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d78e:	f7ff bfe3 	b.w	800d758 <xflow>

0800d792 <__math_oflow>:
 800d792:	2200      	movs	r2, #0
 800d794:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d798:	f7ff bfde 	b.w	800d758 <xflow>

0800d79c <__ieee754_sqrt>:
 800d79c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800d940 <__ieee754_sqrt+0x1a4>
 800d7a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a4:	ea3c 0c01 	bics.w	ip, ip, r1
 800d7a8:	460b      	mov	r3, r1
 800d7aa:	4606      	mov	r6, r0
 800d7ac:	460d      	mov	r5, r1
 800d7ae:	460a      	mov	r2, r1
 800d7b0:	4604      	mov	r4, r0
 800d7b2:	d10e      	bne.n	800d7d2 <__ieee754_sqrt+0x36>
 800d7b4:	4602      	mov	r2, r0
 800d7b6:	f7f2 fe8f 	bl	80004d8 <__aeabi_dmul>
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	460b      	mov	r3, r1
 800d7be:	4630      	mov	r0, r6
 800d7c0:	4629      	mov	r1, r5
 800d7c2:	f7f2 fcd3 	bl	800016c <__adddf3>
 800d7c6:	4606      	mov	r6, r0
 800d7c8:	460d      	mov	r5, r1
 800d7ca:	4630      	mov	r0, r6
 800d7cc:	4629      	mov	r1, r5
 800d7ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7d2:	2900      	cmp	r1, #0
 800d7d4:	dc0d      	bgt.n	800d7f2 <__ieee754_sqrt+0x56>
 800d7d6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800d7da:	ea5c 0c00 	orrs.w	ip, ip, r0
 800d7de:	d0f4      	beq.n	800d7ca <__ieee754_sqrt+0x2e>
 800d7e0:	b139      	cbz	r1, 800d7f2 <__ieee754_sqrt+0x56>
 800d7e2:	4602      	mov	r2, r0
 800d7e4:	f7f2 fcc0 	bl	8000168 <__aeabi_dsub>
 800d7e8:	4602      	mov	r2, r0
 800d7ea:	460b      	mov	r3, r1
 800d7ec:	f7f2 ff9e 	bl	800072c <__aeabi_ddiv>
 800d7f0:	e7e9      	b.n	800d7c6 <__ieee754_sqrt+0x2a>
 800d7f2:	1512      	asrs	r2, r2, #20
 800d7f4:	f000 8089 	beq.w	800d90a <__ieee754_sqrt+0x16e>
 800d7f8:	2500      	movs	r5, #0
 800d7fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d7fe:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800d802:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d806:	07d2      	lsls	r2, r2, #31
 800d808:	bf5c      	itt	pl
 800d80a:	005b      	lslpl	r3, r3, #1
 800d80c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800d810:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d814:	bf58      	it	pl
 800d816:	0064      	lslpl	r4, r4, #1
 800d818:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800d81c:	0062      	lsls	r2, r4, #1
 800d81e:	2016      	movs	r0, #22
 800d820:	4629      	mov	r1, r5
 800d822:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800d826:	1076      	asrs	r6, r6, #1
 800d828:	190f      	adds	r7, r1, r4
 800d82a:	429f      	cmp	r7, r3
 800d82c:	bfde      	ittt	le
 800d82e:	1bdb      	suble	r3, r3, r7
 800d830:	1939      	addle	r1, r7, r4
 800d832:	192d      	addle	r5, r5, r4
 800d834:	005b      	lsls	r3, r3, #1
 800d836:	3801      	subs	r0, #1
 800d838:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d83c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d840:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d844:	d1f0      	bne.n	800d828 <__ieee754_sqrt+0x8c>
 800d846:	4604      	mov	r4, r0
 800d848:	2720      	movs	r7, #32
 800d84a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800d84e:	428b      	cmp	r3, r1
 800d850:	eb0c 0e00 	add.w	lr, ip, r0
 800d854:	dc02      	bgt.n	800d85c <__ieee754_sqrt+0xc0>
 800d856:	d113      	bne.n	800d880 <__ieee754_sqrt+0xe4>
 800d858:	4596      	cmp	lr, r2
 800d85a:	d811      	bhi.n	800d880 <__ieee754_sqrt+0xe4>
 800d85c:	f1be 0f00 	cmp.w	lr, #0
 800d860:	eb0e 000c 	add.w	r0, lr, ip
 800d864:	da56      	bge.n	800d914 <__ieee754_sqrt+0x178>
 800d866:	2800      	cmp	r0, #0
 800d868:	db54      	blt.n	800d914 <__ieee754_sqrt+0x178>
 800d86a:	f101 0801 	add.w	r8, r1, #1
 800d86e:	1a5b      	subs	r3, r3, r1
 800d870:	4641      	mov	r1, r8
 800d872:	4596      	cmp	lr, r2
 800d874:	bf88      	it	hi
 800d876:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d87a:	eba2 020e 	sub.w	r2, r2, lr
 800d87e:	4464      	add	r4, ip
 800d880:	005b      	lsls	r3, r3, #1
 800d882:	3f01      	subs	r7, #1
 800d884:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d888:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d88c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d890:	d1dd      	bne.n	800d84e <__ieee754_sqrt+0xb2>
 800d892:	4313      	orrs	r3, r2
 800d894:	d01b      	beq.n	800d8ce <__ieee754_sqrt+0x132>
 800d896:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d944 <__ieee754_sqrt+0x1a8>
 800d89a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d948 <__ieee754_sqrt+0x1ac>
 800d89e:	e9da 0100 	ldrd	r0, r1, [sl]
 800d8a2:	e9db 2300 	ldrd	r2, r3, [fp]
 800d8a6:	f7f2 fc5f 	bl	8000168 <__aeabi_dsub>
 800d8aa:	e9da 8900 	ldrd	r8, r9, [sl]
 800d8ae:	4602      	mov	r2, r0
 800d8b0:	460b      	mov	r3, r1
 800d8b2:	4640      	mov	r0, r8
 800d8b4:	4649      	mov	r1, r9
 800d8b6:	f7f3 f88b 	bl	80009d0 <__aeabi_dcmple>
 800d8ba:	b140      	cbz	r0, 800d8ce <__ieee754_sqrt+0x132>
 800d8bc:	e9da 0100 	ldrd	r0, r1, [sl]
 800d8c0:	e9db 2300 	ldrd	r2, r3, [fp]
 800d8c4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d8c8:	d126      	bne.n	800d918 <__ieee754_sqrt+0x17c>
 800d8ca:	463c      	mov	r4, r7
 800d8cc:	3501      	adds	r5, #1
 800d8ce:	106b      	asrs	r3, r5, #1
 800d8d0:	0864      	lsrs	r4, r4, #1
 800d8d2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d8d6:	07ea      	lsls	r2, r5, #31
 800d8d8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d8dc:	bf48      	it	mi
 800d8de:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800d8e2:	4620      	mov	r0, r4
 800d8e4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800d8e8:	e76d      	b.n	800d7c6 <__ieee754_sqrt+0x2a>
 800d8ea:	0ae3      	lsrs	r3, r4, #11
 800d8ec:	3915      	subs	r1, #21
 800d8ee:	0564      	lsls	r4, r4, #21
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d0fa      	beq.n	800d8ea <__ieee754_sqrt+0x14e>
 800d8f4:	02d8      	lsls	r0, r3, #11
 800d8f6:	d50a      	bpl.n	800d90e <__ieee754_sqrt+0x172>
 800d8f8:	f1c2 0020 	rsb	r0, r2, #32
 800d8fc:	fa24 f000 	lsr.w	r0, r4, r0
 800d900:	1e55      	subs	r5, r2, #1
 800d902:	4094      	lsls	r4, r2
 800d904:	4303      	orrs	r3, r0
 800d906:	1b4a      	subs	r2, r1, r5
 800d908:	e776      	b.n	800d7f8 <__ieee754_sqrt+0x5c>
 800d90a:	4611      	mov	r1, r2
 800d90c:	e7f0      	b.n	800d8f0 <__ieee754_sqrt+0x154>
 800d90e:	005b      	lsls	r3, r3, #1
 800d910:	3201      	adds	r2, #1
 800d912:	e7ef      	b.n	800d8f4 <__ieee754_sqrt+0x158>
 800d914:	4688      	mov	r8, r1
 800d916:	e7aa      	b.n	800d86e <__ieee754_sqrt+0xd2>
 800d918:	f7f2 fc28 	bl	800016c <__adddf3>
 800d91c:	e9da 8900 	ldrd	r8, r9, [sl]
 800d920:	4602      	mov	r2, r0
 800d922:	460b      	mov	r3, r1
 800d924:	4640      	mov	r0, r8
 800d926:	4649      	mov	r1, r9
 800d928:	f7f3 f848 	bl	80009bc <__aeabi_dcmplt>
 800d92c:	b120      	cbz	r0, 800d938 <__ieee754_sqrt+0x19c>
 800d92e:	1ca1      	adds	r1, r4, #2
 800d930:	bf08      	it	eq
 800d932:	3501      	addeq	r5, #1
 800d934:	3402      	adds	r4, #2
 800d936:	e7ca      	b.n	800d8ce <__ieee754_sqrt+0x132>
 800d938:	3401      	adds	r4, #1
 800d93a:	f024 0401 	bic.w	r4, r4, #1
 800d93e:	e7c6      	b.n	800d8ce <__ieee754_sqrt+0x132>
 800d940:	7ff00000 	.word	0x7ff00000
 800d944:	200001f0 	.word	0x200001f0
 800d948:	200001f8 	.word	0x200001f8

0800d94c <_init>:
 800d94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d94e:	bf00      	nop
 800d950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d952:	bc08      	pop	{r3}
 800d954:	469e      	mov	lr, r3
 800d956:	4770      	bx	lr

0800d958 <_fini>:
 800d958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d95a:	bf00      	nop
 800d95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d95e:	bc08      	pop	{r3}
 800d960:	469e      	mov	lr, r3
 800d962:	4770      	bx	lr
