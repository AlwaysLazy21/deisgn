
design.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002458  0800d908  0800d908  0001d908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd60  0800fd60  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  0800fd60  0800fd60  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fd60  0800fd60  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd60  0800fd60  0001fd60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd64  0800fd64  0001fd64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800fd68  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e0  20000210  0800ff78  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009f0  0800ff78  000209f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012fb7  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003047  00000000  00000000  00033233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d8  00000000  00000000  00036280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000df0  00000000  00000000  00037458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a16c  00000000  00000000  00038248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016be9  00000000  00000000  000523b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f79e  00000000  00000000  00068f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060b4  00000000  00000000  000f873c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000fe7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000210 	.word	0x20000210
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d8ec 	.word	0x0800d8ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000214 	.word	0x20000214
 800014c:	0800d8ec 	.word	0x0800d8ec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <aht20_init>:
#define AHT20_ADDRESS 0x70

uint8_t readbuffer[6] = {0};
float temperature, humidity;
void aht20_init()
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af02      	add	r7, sp, #8
    uint8_t read_buffer;
    HAL_Delay(40);
 8000bde:	2028      	movs	r0, #40	; 0x28
 8000be0:	f001 fd84 	bl	80026ec <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c1, AHT20_ADDRESS, &read_buffer, 1, HAL_MAX_DELAY);
 8000be4:	1dfa      	adds	r2, r7, #7
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	2301      	movs	r3, #1
 8000bee:	2170      	movs	r1, #112	; 0x70
 8000bf0:	480e      	ldr	r0, [pc, #56]	; (8000c2c <aht20_init+0x54>)
 8000bf2:	f002 fd6f 	bl	80036d4 <HAL_I2C_Master_Receive>
    if ((read_buffer & 0x08) == 0)
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	f003 0308 	and.w	r3, r3, #8
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d110      	bne.n	8000c22 <aht20_init+0x4a>
    {
        uint8_t sendbuffer[3] = {0xbe, 0x08, 0x00};
 8000c00:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <aht20_init+0x58>)
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	6812      	ldr	r2, [r2, #0]
 8000c06:	4611      	mov	r1, r2
 8000c08:	8019      	strh	r1, [r3, #0]
 8000c0a:	3302      	adds	r3, #2
 8000c0c:	0c12      	lsrs	r2, r2, #16
 8000c0e:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDRESS, sendbuffer, 3, HAL_MAX_DELAY);
 8000c10:	1d3a      	adds	r2, r7, #4
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	2303      	movs	r3, #3
 8000c1a:	2170      	movs	r1, #112	; 0x70
 8000c1c:	4803      	ldr	r0, [pc, #12]	; (8000c2c <aht20_init+0x54>)
 8000c1e:	f002 fc5b 	bl	80034d8 <HAL_I2C_Master_Transmit>
    }
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	2000023c 	.word	0x2000023c
 8000c30:	0800d908 	.word	0x0800d908

08000c34 <aht20_measure>:

void aht20_measure()
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af02      	add	r7, sp, #8
    static uint8_t sendbuffer[3] = {0xac, 0x33, 0x00};
    HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDRESS, sendbuffer, 3, HAL_MAX_DELAY);
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	2303      	movs	r3, #3
 8000c42:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <aht20_measure+0x20>)
 8000c44:	2170      	movs	r1, #112	; 0x70
 8000c46:	4804      	ldr	r0, [pc, #16]	; (8000c58 <aht20_measure+0x24>)
 8000c48:	f002 fc46 	bl	80034d8 <HAL_I2C_Master_Transmit>
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000000 	.word	0x20000000
 8000c58:	2000023c 	.word	0x2000023c

08000c5c <aht20_get>:

void aht20_get()
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af02      	add	r7, sp, #8
    HAL_I2C_Master_Receive(&hi2c1, AHT20_ADDRESS, readbuffer, 6, HAL_MAX_DELAY);
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	2306      	movs	r3, #6
 8000c6a:	4a33      	ldr	r2, [pc, #204]	; (8000d38 <aht20_get+0xdc>)
 8000c6c:	2170      	movs	r1, #112	; 0x70
 8000c6e:	4833      	ldr	r0, [pc, #204]	; (8000d3c <aht20_get+0xe0>)
 8000c70:	f002 fd30 	bl	80036d4 <HAL_I2C_Master_Receive>
    if ((readbuffer[0] & 0x80) == 0x00)
 8000c74:	4b30      	ldr	r3, [pc, #192]	; (8000d38 <aht20_get+0xdc>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	b25b      	sxtb	r3, r3
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	db57      	blt.n	8000d2e <aht20_get+0xd2>
    {
        uint32_t data = ((uint32_t)readbuffer[3] >> 4) + ((uint32_t)readbuffer[2] << 4) + ((uint32_t)readbuffer[1] << 12);
 8000c7e:	4b2e      	ldr	r3, [pc, #184]	; (8000d38 <aht20_get+0xdc>)
 8000c80:	78db      	ldrb	r3, [r3, #3]
 8000c82:	091b      	lsrs	r3, r3, #4
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	461a      	mov	r2, r3
 8000c88:	4b2b      	ldr	r3, [pc, #172]	; (8000d38 <aht20_get+0xdc>)
 8000c8a:	789b      	ldrb	r3, [r3, #2]
 8000c8c:	011b      	lsls	r3, r3, #4
 8000c8e:	441a      	add	r2, r3
 8000c90:	4b29      	ldr	r3, [pc, #164]	; (8000d38 <aht20_get+0xdc>)
 8000c92:	785b      	ldrb	r3, [r3, #1]
 8000c94:	031b      	lsls	r3, r3, #12
 8000c96:	4413      	add	r3, r2
 8000c98:	607b      	str	r3, [r7, #4]
        humidity = data * 100.0 / (1 << 20);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff fba2 	bl	80003e4 <__aeabi_ui2d>
 8000ca0:	f04f 0200 	mov.w	r2, #0
 8000ca4:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <aht20_get+0xe4>)
 8000ca6:	f7ff fc17 	bl	80004d8 <__aeabi_dmul>
 8000caa:	4602      	mov	r2, r0
 8000cac:	460b      	mov	r3, r1
 8000cae:	4610      	mov	r0, r2
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f04f 0200 	mov.w	r2, #0
 8000cb6:	4b23      	ldr	r3, [pc, #140]	; (8000d44 <aht20_get+0xe8>)
 8000cb8:	f7ff fd38 	bl	800072c <__aeabi_ddiv>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4610      	mov	r0, r2
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f7ff ff00 	bl	8000ac8 <__aeabi_d2f>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	4a1f      	ldr	r2, [pc, #124]	; (8000d48 <aht20_get+0xec>)
 8000ccc:	6013      	str	r3, [r2, #0]
        data = ((uint32_t)(readbuffer[3] & 0x07) << 16) + ((uint32_t)readbuffer[4] << 8) + readbuffer[5];
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <aht20_get+0xdc>)
 8000cd0:	78db      	ldrb	r3, [r3, #3]
 8000cd2:	041b      	lsls	r3, r3, #16
 8000cd4:	f403 22e0 	and.w	r2, r3, #458752	; 0x70000
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <aht20_get+0xdc>)
 8000cda:	791b      	ldrb	r3, [r3, #4]
 8000cdc:	021b      	lsls	r3, r3, #8
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a15      	ldr	r2, [pc, #84]	; (8000d38 <aht20_get+0xdc>)
 8000ce2:	7952      	ldrb	r2, [r2, #5]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	607b      	str	r3, [r7, #4]
        temperature = data * 200.0 / (1 << 20) - 50;
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff fb7b 	bl	80003e4 <__aeabi_ui2d>
 8000cee:	f04f 0200 	mov.w	r2, #0
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <aht20_get+0xf0>)
 8000cf4:	f7ff fbf0 	bl	80004d8 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f04f 0200 	mov.w	r2, #0
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <aht20_get+0xe8>)
 8000d06:	f7ff fd11 	bl	800072c <__aeabi_ddiv>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	4610      	mov	r0, r2
 8000d10:	4619      	mov	r1, r3
 8000d12:	f04f 0200 	mov.w	r2, #0
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <aht20_get+0xf4>)
 8000d18:	f7ff fa26 	bl	8000168 <__aeabi_dsub>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	4610      	mov	r0, r2
 8000d22:	4619      	mov	r1, r3
 8000d24:	f7ff fed0 	bl	8000ac8 <__aeabi_d2f>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <aht20_get+0xf8>)
 8000d2c:	6013      	str	r3, [r2, #0]
    }
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	2000022c 	.word	0x2000022c
 8000d3c:	2000023c 	.word	0x2000023c
 8000d40:	40590000 	.word	0x40590000
 8000d44:	41300000 	.word	0x41300000
 8000d48:	20000238 	.word	0x20000238
 8000d4c:	40690000 	.word	0x40690000
 8000d50:	40490000 	.word	0x40490000
 8000d54:	20000234 	.word	0x20000234

08000d58 <aht20_getTemperature>:

float aht20_getTemperature()
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
    return temperature;
 8000d5c:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <aht20_getTemperature+0x10>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	20000234 	.word	0x20000234

08000d6c <aht20_getHumidity>:

float aht20_getHumidity()
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
    return humidity;
 8000d70:	4b02      	ldr	r3, [pc, #8]	; (8000d7c <aht20_getHumidity+0x10>)
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	20000238 	.word	0x20000238

08000d80 <oled_display_mainPage>:
#include "usart.h"
#include "display.h"
uint8_t mesu_x = 48, mesu_y = 16;
// 显示温湿度信息
void oled_display_mainPage()
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
    OLED_NewFrame();
 8000d84:	f000 fcfc 	bl	8001780 <OLED_NewFrame>
    OLED_DrawImage(mesu_x, mesu_y, &main_pageImg, OLED_COLOR_NORMAL);
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <oled_display_mainPage+0x20>)
 8000d8a:	7818      	ldrb	r0, [r3, #0]
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <oled_display_mainPage+0x24>)
 8000d8e:	7819      	ldrb	r1, [r3, #0]
 8000d90:	2300      	movs	r3, #0
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <oled_display_mainPage+0x28>)
 8000d94:	f000 fec1 	bl	8001b1a <OLED_DrawImage>
    OLED_ShowFrame();
 8000d98:	f000 fcfe 	bl	8001798 <OLED_ShowFrame>
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000003 	.word	0x20000003
 8000da4:	20000004 	.word	0x20000004
 8000da8:	0800f55c 	.word	0x0800f55c

08000dac <oled_display_authorInfo>:
// 显示作者信息
void oled_display_authorInfo()
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
    OLED_NewFrame();
 8000db0:	f000 fce6 	bl	8001780 <OLED_NewFrame>
    OLED_DrawImage(mesu_x, mesu_y, &authorImg, OLED_COLOR_NORMAL);
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <oled_display_authorInfo+0x20>)
 8000db6:	7818      	ldrb	r0, [r3, #0]
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <oled_display_authorInfo+0x24>)
 8000dba:	7819      	ldrb	r1, [r3, #0]
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <oled_display_authorInfo+0x28>)
 8000dc0:	f000 feab 	bl	8001b1a <OLED_DrawImage>
    OLED_ShowFrame();
 8000dc4:	f000 fce8 	bl	8001798 <OLED_ShowFrame>
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000003 	.word	0x20000003
 8000dd0:	20000004 	.word	0x20000004
 8000dd4:	0800f66c 	.word	0x0800f66c

08000dd8 <oled_display_timer>:
// 显示计时器
void oled_display_timer()
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
    OLED_NewFrame();
 8000ddc:	f000 fcd0 	bl	8001780 <OLED_NewFrame>
    OLED_DrawImage(mesu_x, mesu_y, &timerImg, OLED_COLOR_NORMAL);
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <oled_display_timer+0x20>)
 8000de2:	7818      	ldrb	r0, [r3, #0]
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <oled_display_timer+0x24>)
 8000de6:	7819      	ldrb	r1, [r3, #0]
 8000de8:	2300      	movs	r3, #0
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <oled_display_timer+0x28>)
 8000dec:	f000 fe95 	bl	8001b1a <OLED_DrawImage>
    OLED_ShowFrame();
 8000df0:	f000 fcd2 	bl	8001798 <OLED_ShowFrame>
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000003 	.word	0x20000003
 8000dfc:	20000004 	.word	0x20000004
 8000e00:	0800f5e4 	.word	0x0800f5e4

08000e04 <oled_display_curTime>:
// 显示当前时间
void oled_display_curTime()
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
    OLED_NewFrame();
 8000e08:	f000 fcba 	bl	8001780 <OLED_NewFrame>
    OLED_DrawImage(mesu_x, mesu_y, &cur_timeImg, OLED_COLOR_NORMAL);
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <oled_display_curTime+0x20>)
 8000e0e:	7818      	ldrb	r0, [r3, #0]
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <oled_display_curTime+0x24>)
 8000e12:	7819      	ldrb	r1, [r3, #0]
 8000e14:	2300      	movs	r3, #0
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <oled_display_curTime+0x28>)
 8000e18:	f000 fe7f 	bl	8001b1a <OLED_DrawImage>
    OLED_ShowFrame();
 8000e1c:	f000 fcbc 	bl	8001798 <OLED_ShowFrame>
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000003 	.word	0x20000003
 8000e28:	20000004 	.word	0x20000004
 8000e2c:	0800f6f4 	.word	0x0800f6f4

08000e30 <oled_disfunc_time>:

// 功能函数
void oled_disfunc_time(uint8_t flag, uint8_t *x, uint8_t *y, uint8_t *z)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08e      	sub	sp, #56	; 0x38
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	73fb      	strb	r3, [r7, #15]
    char title[10];
    if (flag == CUR_TIME)
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d106      	bne.n	8000e54 <oled_disfunc_time+0x24>
    {
        strcpy(title, "CUR TIME");
 8000e46:	f107 0320 	add.w	r3, r7, #32
 8000e4a:	4a24      	ldr	r2, [pc, #144]	; (8000edc <oled_disfunc_time+0xac>)
 8000e4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e4e:	c303      	stmia	r3!, {r0, r1}
 8000e50:	701a      	strb	r2, [r3, #0]
 8000e52:	e009      	b.n	8000e68 <oled_disfunc_time+0x38>
    }
    else if (flag == TIMER)
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d106      	bne.n	8000e68 <oled_disfunc_time+0x38>
    {
        strcpy(title, " *TIMER");
 8000e5a:	f107 0320 	add.w	r3, r7, #32
 8000e5e:	4a20      	ldr	r2, [pc, #128]	; (8000ee0 <oled_disfunc_time+0xb0>)
 8000e60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e64:	e883 0003 	stmia.w	r3, {r0, r1}
    }
    uint8_t font_x1 = 16;
 8000e68:	2310      	movs	r3, #16
 8000e6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t font_x2 = 16;
 8000e6e:	2310      	movs	r3, #16
 8000e70:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t font_y1 = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t font_y2 = 32;
 8000e7a:	2320      	movs	r3, #32
 8000e7c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    OLED_NewFrame();
 8000e80:	f000 fc7e 	bl	8001780 <OLED_NewFrame>
    char message[15];
    sprintf(message, "%02d:%02d:%02d", *x, *y, *z);
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	f107 0010 	add.w	r0, r7, #16
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	4911      	ldr	r1, [pc, #68]	; (8000ee4 <oled_disfunc_time+0xb4>)
 8000e9e:	f008 f985 	bl	80091ac <siprintf>
    OLED_PrintASCIIString(font_x1, font_y1, title, &afont24x12, OLED_COLOR_NORMAL);
 8000ea2:	f107 0220 	add.w	r2, r7, #32
 8000ea6:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8000eaa:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 8000eae:	2300      	movs	r3, #0
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <oled_disfunc_time+0xb8>)
 8000eb4:	f000 fe7e 	bl	8001bb4 <OLED_PrintASCIIString>
    OLED_PrintASCIIString(font_x2, font_y2, message, &afont24x12, OLED_COLOR_NORMAL);
 8000eb8:	f107 0210 	add.w	r2, r7, #16
 8000ebc:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8000ec0:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <oled_disfunc_time+0xb8>)
 8000eca:	f000 fe73 	bl	8001bb4 <OLED_PrintASCIIString>
    OLED_ShowFrame();
 8000ece:	f000 fc63 	bl	8001798 <OLED_ShowFrame>
}
 8000ed2:	bf00      	nop
 8000ed4:	3730      	adds	r7, #48	; 0x30
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	0800d90c 	.word	0x0800d90c
 8000ee0:	0800d918 	.word	0x0800d918
 8000ee4:	0800d920 	.word	0x0800d920
 8000ee8:	0800ecc4 	.word	0x0800ecc4

08000eec <oled_disfunc_authorInfo>:
void oled_disfunc_authorInfo()
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
    OLED_NewFrame();
 8000ef0:	f000 fc46 	bl	8001780 <OLED_NewFrame>
    OLED_DrawImage(0, 0, &author_infoImg, OLED_COLOR_NORMAL);
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <oled_disfunc_authorInfo+0x1c>)
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 fe0d 	bl	8001b1a <OLED_DrawImage>
    OLED_ShowFrame();
 8000f00:	f000 fc4a 	bl	8001798 <OLED_ShowFrame>
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	0800f0cc 	.word	0x0800f0cc

08000f0c <oled_disfunc_temperatureANDhumidity>:

void oled_disfunc_temperatureANDhumidity()
{
 8000f0c:	b5b0      	push	{r4, r5, r7, lr}
 8000f0e:	b096      	sub	sp, #88	; 0x58
 8000f10:	af02      	add	r7, sp, #8
    aht20_measure();
 8000f12:	f7ff fe8f 	bl	8000c34 <aht20_measure>
    HAL_Delay(75);
 8000f16:	204b      	movs	r0, #75	; 0x4b
 8000f18:	f001 fbe8 	bl	80026ec <HAL_Delay>
    aht20_get();
 8000f1c:	f7ff fe9e 	bl	8000c5c <aht20_get>
    float temperature, humidity;
    temperature = aht20_getTemperature();
 8000f20:	f7ff ff1a 	bl	8000d58 <aht20_getTemperature>
 8000f24:	64f8      	str	r0, [r7, #76]	; 0x4c
    humidity = aht20_getHumidity();
 8000f26:	f7ff ff21 	bl	8000d6c <aht20_getHumidity>
 8000f2a:	64b8      	str	r0, [r7, #72]	; 0x48
    if (A_isopen)
 8000f2c:	4b36      	ldr	r3, [pc, #216]	; (8001008 <oled_disfunc_temperatureANDhumidity+0xfc>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d02e      	beq.n	8000f92 <oled_disfunc_temperatureANDhumidity+0x86>
    {
        A_count++;
 8000f34:	4b35      	ldr	r3, [pc, #212]	; (800100c <oled_disfunc_temperatureANDhumidity+0x100>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b33      	ldr	r3, [pc, #204]	; (800100c <oled_disfunc_temperatureANDhumidity+0x100>)
 8000f3e:	701a      	strb	r2, [r3, #0]
        if (A_count == 10)
 8000f40:	4b32      	ldr	r3, [pc, #200]	; (800100c <oled_disfunc_temperatureANDhumidity+0x100>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b0a      	cmp	r3, #10
 8000f46:	d124      	bne.n	8000f92 <oled_disfunc_temperatureANDhumidity+0x86>
        {
            A_count = 0;
 8000f48:	4b30      	ldr	r3, [pc, #192]	; (800100c <oled_disfunc_temperatureANDhumidity+0x100>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
            char info[50];
            sprintf(info, "{\"temperature\": %.1f,\"humidity\": %.2f}", temperature, humidity/100.0);
 8000f4e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000f50:	f7ff fa6a 	bl	8000428 <__aeabi_f2d>
 8000f54:	4604      	mov	r4, r0
 8000f56:	460d      	mov	r5, r1
 8000f58:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000f5a:	f7ff fa65 	bl	8000428 <__aeabi_f2d>
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <oled_disfunc_temperatureANDhumidity+0x104>)
 8000f64:	f7ff fbe2 	bl	800072c <__aeabi_ddiv>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	e9cd 2300 	strd	r2, r3, [sp]
 8000f72:	4622      	mov	r2, r4
 8000f74:	462b      	mov	r3, r5
 8000f76:	4927      	ldr	r1, [pc, #156]	; (8001014 <oled_disfunc_temperatureANDhumidity+0x108>)
 8000f78:	f008 f918 	bl	80091ac <siprintf>
            HAL_UART_Transmit_DMA(&huart1, (uint8_t *)info, strlen(info));
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff f8e6 	bl	8000150 <strlen>
 8000f84:	4603      	mov	r3, r0
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	463b      	mov	r3, r7
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4822      	ldr	r0, [pc, #136]	; (8001018 <oled_disfunc_temperatureANDhumidity+0x10c>)
 8000f8e:	f006 fa0f 	bl	80073b0 <HAL_UART_Transmit_DMA>
        }
    }
    OLED_NewFrame();
 8000f92:	f000 fbf5 	bl	8001780 <OLED_NewFrame>
    char message[20];
    OLED_DrawImage(16, 0, &temperatureImg, OLED_COLOR_NORMAL);
 8000f96:	2300      	movs	r3, #0
 8000f98:	4a20      	ldr	r2, [pc, #128]	; (800101c <oled_disfunc_temperatureANDhumidity+0x110>)
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2010      	movs	r0, #16
 8000f9e:	f000 fdbc 	bl	8001b1a <OLED_DrawImage>
    OLED_DrawImage(21, 40, &humidityImg, OLED_COLOR_NORMAL);
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	4a1e      	ldr	r2, [pc, #120]	; (8001020 <oled_disfunc_temperatureANDhumidity+0x114>)
 8000fa6:	2128      	movs	r1, #40	; 0x28
 8000fa8:	2015      	movs	r0, #21
 8000faa:	f000 fdb6 	bl	8001b1a <OLED_DrawImage>
    sprintf(message, "%4.1f °", temperature);
 8000fae:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000fb0:	f7ff fa3a 	bl	8000428 <__aeabi_f2d>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000fbc:	4919      	ldr	r1, [pc, #100]	; (8001024 <oled_disfunc_temperatureANDhumidity+0x118>)
 8000fbe:	f008 f8f5 	bl	80091ac <siprintf>
    OLED_PrintString(52, 11, message, &ZH_ATH, OLED_COLOR_NORMAL);
 8000fc2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	4b17      	ldr	r3, [pc, #92]	; (8001028 <oled_disfunc_temperatureANDhumidity+0x11c>)
 8000fcc:	210b      	movs	r1, #11
 8000fce:	2034      	movs	r0, #52	; 0x34
 8000fd0:	f000 fe40 	bl	8001c54 <OLED_PrintString>
    sprintf(message, "%4.1f %%", humidity);
 8000fd4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000fd6:	f7ff fa27 	bl	8000428 <__aeabi_f2d>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000fe2:	4912      	ldr	r1, [pc, #72]	; (800102c <oled_disfunc_temperatureANDhumidity+0x120>)
 8000fe4:	f008 f8e2 	bl	80091ac <siprintf>
    OLED_PrintString(52, 42, message, &ZH_ATH, OLED_COLOR_NORMAL);
 8000fe8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000fec:	2300      	movs	r3, #0
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <oled_disfunc_temperatureANDhumidity+0x11c>)
 8000ff2:	212a      	movs	r1, #42	; 0x2a
 8000ff4:	2034      	movs	r0, #52	; 0x34
 8000ff6:	f000 fe2d 	bl	8001c54 <OLED_PrintString>
    OLED_ShowFrame();
 8000ffa:	f000 fbcd 	bl	8001798 <OLED_ShowFrame>
}
 8000ffe:	bf00      	nop
 8001000:	3750      	adds	r7, #80	; 0x50
 8001002:	46bd      	mov	sp, r7
 8001004:	bdb0      	pop	{r4, r5, r7, pc}
 8001006:	bf00      	nop
 8001008:	20000299 	.word	0x20000299
 800100c:	2000029a 	.word	0x2000029a
 8001010:	40590000 	.word	0x40590000
 8001014:	0800d930 	.word	0x0800d930
 8001018:	200007d0 	.word	0x200007d0
 800101c:	0800f77c 	.word	0x0800f77c
 8001020:	0800f7c4 	.word	0x0800f7c4
 8001024:	0800d958 	.word	0x0800d958
 8001028:	0800f8c8 	.word	0x0800f8c8
 800102c:	0800d964 	.word	0x0800d964

08001030 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <MX_DMA_Init+0x48>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	4a0f      	ldr	r2, [pc, #60]	; (8001078 <MX_DMA_Init+0x48>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6153      	str	r3, [r2, #20]
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <MX_DMA_Init+0x48>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	200e      	movs	r0, #14
 8001054:	f001 fc45 	bl	80028e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001058:	200e      	movs	r0, #14
 800105a:	f001 fc5e 	bl	800291a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	200f      	movs	r0, #15
 8001064:	f001 fc3d 	bl	80028e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001068:	200f      	movs	r0, #15
 800106a:	f001 fc56 	bl	800291a <HAL_NVIC_EnableIRQ>

}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000

0800107c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001082:	f107 0310 	add.w	r3, r7, #16
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001090:	4b21      	ldr	r3, [pc, #132]	; (8001118 <MX_GPIO_Init+0x9c>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a20      	ldr	r2, [pc, #128]	; (8001118 <MX_GPIO_Init+0x9c>)
 8001096:	f043 0320 	orr.w	r3, r3, #32
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <MX_GPIO_Init+0x9c>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0320 	and.w	r3, r3, #32
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <MX_GPIO_Init+0x9c>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a1a      	ldr	r2, [pc, #104]	; (8001118 <MX_GPIO_Init+0x9c>)
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b18      	ldr	r3, [pc, #96]	; (8001118 <MX_GPIO_Init+0x9c>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c0:	4b15      	ldr	r3, [pc, #84]	; (8001118 <MX_GPIO_Init+0x9c>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a14      	ldr	r2, [pc, #80]	; (8001118 <MX_GPIO_Init+0x9c>)
 80010c6:	f043 0308 	orr.w	r3, r3, #8
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <MX_GPIO_Init+0x9c>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON_STATUS_Pin|BUTTON_ENSURE_Pin;
 80010d8:	2390      	movs	r3, #144	; 0x90
 80010da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_GPIO_Init+0xa0>)
 80010de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	4619      	mov	r1, r3
 80010ea:	480d      	ldr	r0, [pc, #52]	; (8001120 <MX_GPIO_Init+0xa4>)
 80010ec:	f001 fede 	bl	8002eac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	210f      	movs	r1, #15
 80010f4:	200a      	movs	r0, #10
 80010f6:	f001 fbf4 	bl	80028e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80010fa:	200a      	movs	r0, #10
 80010fc:	f001 fc0d 	bl	800291a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 15, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	210f      	movs	r1, #15
 8001104:	2017      	movs	r0, #23
 8001106:	f001 fbec 	bl	80028e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800110a:	2017      	movs	r0, #23
 800110c:	f001 fc05 	bl	800291a <HAL_NVIC_EnableIRQ>

}
 8001110:	bf00      	nop
 8001112:	3720      	adds	r7, #32
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40021000 	.word	0x40021000
 800111c:	10210000 	.word	0x10210000
 8001120:	40010800 	.word	0x40010800

08001124 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <MX_I2C1_Init+0x50>)
 800112a:	4a13      	ldr	r2, [pc, #76]	; (8001178 <MX_I2C1_Init+0x54>)
 800112c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <MX_I2C1_Init+0x50>)
 8001130:	4a12      	ldr	r2, [pc, #72]	; (800117c <MX_I2C1_Init+0x58>)
 8001132:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <MX_I2C1_Init+0x50>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MX_I2C1_Init+0x50>)
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <MX_I2C1_Init+0x50>)
 8001142:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001146:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <MX_I2C1_Init+0x50>)
 800114a:	2200      	movs	r2, #0
 800114c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_I2C1_Init+0x50>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001154:	4b07      	ldr	r3, [pc, #28]	; (8001174 <MX_I2C1_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_I2C1_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001160:	4804      	ldr	r0, [pc, #16]	; (8001174 <MX_I2C1_Init+0x50>)
 8001162:	f002 f861 	bl	8003228 <HAL_I2C_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800116c:	f000 fa7f 	bl	800166e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	2000023c 	.word	0x2000023c
 8001178:	40005400 	.word	0x40005400
 800117c:	00061a80 	.word	0x00061a80

08001180 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a1d      	ldr	r2, [pc, #116]	; (8001210 <HAL_I2C_MspInit+0x90>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d133      	bne.n	8001208 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a0:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <HAL_I2C_MspInit+0x94>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4a1b      	ldr	r2, [pc, #108]	; (8001214 <HAL_I2C_MspInit+0x94>)
 80011a6:	f043 0308 	orr.w	r3, r3, #8
 80011aa:	6193      	str	r3, [r2, #24]
 80011ac:	4b19      	ldr	r3, [pc, #100]	; (8001214 <HAL_I2C_MspInit+0x94>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011b8:	23c0      	movs	r3, #192	; 0xc0
 80011ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011bc:	2312      	movs	r3, #18
 80011be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	4619      	mov	r1, r3
 80011ca:	4813      	ldr	r0, [pc, #76]	; (8001218 <HAL_I2C_MspInit+0x98>)
 80011cc:	f001 fe6e 	bl	8002eac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011d0:	4b10      	ldr	r3, [pc, #64]	; (8001214 <HAL_I2C_MspInit+0x94>)
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <HAL_I2C_MspInit+0x94>)
 80011d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011da:	61d3      	str	r3, [r2, #28]
 80011dc:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <HAL_I2C_MspInit+0x94>)
 80011de:	69db      	ldr	r3, [r3, #28]
 80011e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2100      	movs	r1, #0
 80011ec:	201f      	movs	r0, #31
 80011ee:	f001 fb78 	bl	80028e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011f2:	201f      	movs	r0, #31
 80011f4:	f001 fb91 	bl	800291a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2100      	movs	r1, #0
 80011fc:	2020      	movs	r0, #32
 80011fe:	f001 fb70 	bl	80028e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001202:	2020      	movs	r0, #32
 8001204:	f001 fb89 	bl	800291a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001208:	bf00      	nop
 800120a:	3720      	adds	r7, #32
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40005400 	.word	0x40005400
 8001214:	40021000 	.word	0x40021000
 8001218:	40010c00 	.word	0x40010c00
 800121c:	00000000 	.word	0x00000000

08001220 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a5f      	ldr	r2, [pc, #380]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d15f      	bne.n	80012f0 <HAL_TIM_PeriodElapsedCallback+0xd0>
  {
    millisecond++;
 8001230:	4b5e      	ldr	r3, [pc, #376]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	b2da      	uxtb	r2, r3
 8001238:	4b5c      	ldr	r3, [pc, #368]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800123a:	701a      	strb	r2, [r3, #0]
    if (T_isopen)
 800123c:	4b5c      	ldr	r3, [pc, #368]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d026      	beq.n	8001292 <HAL_TIM_PeriodElapsedCallback+0x72>
    {
      T_millisecond++;
 8001244:	4b5b      	ldr	r3, [pc, #364]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b59      	ldr	r3, [pc, #356]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800124e:	701a      	strb	r2, [r3, #0]
      if (T_millisecond == 100)
 8001250:	4b58      	ldr	r3, [pc, #352]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b64      	cmp	r3, #100	; 0x64
 8001256:	d11c      	bne.n	8001292 <HAL_TIM_PeriodElapsedCallback+0x72>
      {
        T_second++;
 8001258:	4b57      	ldr	r3, [pc, #348]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	3301      	adds	r3, #1
 800125e:	b2da      	uxtb	r2, r3
 8001260:	4b55      	ldr	r3, [pc, #340]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001262:	701a      	strb	r2, [r3, #0]
        T_millisecond = 0;
 8001264:	4b53      	ldr	r3, [pc, #332]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
        if (T_second == 60)
 800126a:	4b53      	ldr	r3, [pc, #332]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b3c      	cmp	r3, #60	; 0x3c
 8001270:	d10f      	bne.n	8001292 <HAL_TIM_PeriodElapsedCallback+0x72>
        {
          T_minute++;
 8001272:	4b52      	ldr	r3, [pc, #328]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	3301      	adds	r3, #1
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b50      	ldr	r3, [pc, #320]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800127c:	701a      	strb	r2, [r3, #0]
          T_second = 0;
 800127e:	4b4e      	ldr	r3, [pc, #312]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
          if (T_minute == 100)
 8001284:	4b4d      	ldr	r3, [pc, #308]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b64      	cmp	r3, #100	; 0x64
 800128a:	d102      	bne.n	8001292 <HAL_TIM_PeriodElapsedCallback+0x72>
          {
            T_minute = 0;
 800128c:	4b4b      	ldr	r3, [pc, #300]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
          }
        }
      }
    }
    if (millisecond == 100)
 8001292:	4b46      	ldr	r3, [pc, #280]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b64      	cmp	r3, #100	; 0x64
 8001298:	d17c      	bne.n	8001394 <HAL_TIM_PeriodElapsedCallback+0x174>
    {
      second++;
 800129a:	4b49      	ldr	r3, [pc, #292]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	3301      	adds	r3, #1
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4b47      	ldr	r3, [pc, #284]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80012a4:	701a      	strb	r2, [r3, #0]
      millisecond = 0;
 80012a6:	4b41      	ldr	r3, [pc, #260]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
      if (second == 60)
 80012ac:	4b44      	ldr	r3, [pc, #272]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b3c      	cmp	r3, #60	; 0x3c
 80012b2:	d16f      	bne.n	8001394 <HAL_TIM_PeriodElapsedCallback+0x174>
      {
        minute++;
 80012b4:	4b43      	ldr	r3, [pc, #268]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	3301      	adds	r3, #1
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	4b41      	ldr	r3, [pc, #260]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80012be:	701a      	strb	r2, [r3, #0]
        second = 0;
 80012c0:	4b3f      	ldr	r3, [pc, #252]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
        if (minute == 60)
 80012c6:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b3c      	cmp	r3, #60	; 0x3c
 80012cc:	d162      	bne.n	8001394 <HAL_TIM_PeriodElapsedCallback+0x174>
        {
          hour++;
 80012ce:	4b3e      	ldr	r3, [pc, #248]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	3301      	adds	r3, #1
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4b3c      	ldr	r3, [pc, #240]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80012d8:	701a      	strb	r2, [r3, #0]
          minute = 0;
 80012da:	4b3a      	ldr	r3, [pc, #232]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
          if (hour == 24)
 80012e0:	4b39      	ldr	r3, [pc, #228]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b18      	cmp	r3, #24
 80012e6:	d155      	bne.n	8001394 <HAL_TIM_PeriodElapsedCallback+0x174>
          {
            hour = 0;
 80012e8:	4b37      	ldr	r3, [pc, #220]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]
    if (++x == 2 * cc)
    {
      x = 0;
    }
  }
}
 80012ee:	e051      	b.n	8001394 <HAL_TIM_PeriodElapsedCallback+0x174>
  else if (htim == &htim3)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a36      	ldr	r2, [pc, #216]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d14d      	bne.n	8001394 <HAL_TIM_PeriodElapsedCallback+0x174>
    uint16_t y = pow(1.1, fabs(x - cc)) * (2000.0 / pow(1.1, cc - 1));
 80012f8:	4b35      	ldr	r3, [pc, #212]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b35      	ldr	r3, [pc, #212]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f87d 	bl	8000404 <__aeabi_i2d>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4614      	mov	r4, r2
 8001310:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001314:	4622      	mov	r2, r4
 8001316:	462b      	mov	r3, r5
 8001318:	a121      	add	r1, pc, #132	; (adr r1, 80013a0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800131a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800131e:	f00b fbdb 	bl	800cad8 <pow>
 8001322:	4604      	mov	r4, r0
 8001324:	460d      	mov	r5, r1
 8001326:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	3b01      	subs	r3, #1
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f869 	bl	8000404 <__aeabi_i2d>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	a11a      	add	r1, pc, #104	; (adr r1, 80013a0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001338:	e9d1 0100 	ldrd	r0, r1, [r1]
 800133c:	f00b fbcc 	bl	800cad8 <pow>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	f04f 0000 	mov.w	r0, #0
 8001348:	4923      	ldr	r1, [pc, #140]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800134a:	f7ff f9ef 	bl	800072c <__aeabi_ddiv>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4620      	mov	r0, r4
 8001354:	4629      	mov	r1, r5
 8001356:	f7ff f8bf 	bl	80004d8 <__aeabi_dmul>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4610      	mov	r0, r2
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff fb91 	bl	8000a88 <__aeabi_d2uiz>
 8001366:	4603      	mov	r3, r0
 8001368:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, y);
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	89fa      	ldrh	r2, [r7, #14]
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
    if (++x == 2 * cc)
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800137c:	701a      	strb	r2, [r3, #0]
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	429a      	cmp	r2, r3
 800138c:	d102      	bne.n	8001394 <HAL_TIM_PeriodElapsedCallback+0x174>
      x = 0;
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
}
 8001394:	bf00      	nop
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bdb0      	pop	{r4, r5, r7, pc}
 800139c:	f3af 8000 	nop.w
 80013a0:	9999999a 	.word	0x9999999a
 80013a4:	3ff19999 	.word	0x3ff19999
 80013a8:	20000740 	.word	0x20000740
 80013ac:	20000294 	.word	0x20000294
 80013b0:	20000298 	.word	0x20000298
 80013b4:	20000297 	.word	0x20000297
 80013b8:	20000296 	.word	0x20000296
 80013bc:	20000295 	.word	0x20000295
 80013c0:	20000293 	.word	0x20000293
 80013c4:	20000292 	.word	0x20000292
 80013c8:	20000291 	.word	0x20000291
 80013cc:	20000788 	.word	0x20000788
 80013d0:	20000025 	.word	0x20000025
 80013d4:	20000026 	.word	0x20000026
 80013d8:	409f4000 	.word	0x409f4000

080013dc <HAL_UARTEx_RxEventCallback>:
char fail[] = "notice: hh:mm:ss";
char success[] = "success!";
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	807b      	strh	r3, [r7, #2]
  if (huart == &huart1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a2b      	ldr	r2, [pc, #172]	; (8001498 <HAL_UARTEx_RxEventCallback+0xbc>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d14f      	bne.n	8001490 <HAL_UARTEx_RxEventCallback+0xb4>
  {
    if (Size == 8)
 80013f0:	887b      	ldrh	r3, [r7, #2]
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d13d      	bne.n	8001472 <HAL_UARTEx_RxEventCallback+0x96>
    {
      C_hour = (time[0] - '0') * 10 + (time[1] - '0');
 80013f6:	4b29      	ldr	r3, [pc, #164]	; (800149c <HAL_UARTEx_RxEventCallback+0xc0>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	3b30      	subs	r3, #48	; 0x30
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	461a      	mov	r2, r3
 8001400:	0092      	lsls	r2, r2, #2
 8001402:	4413      	add	r3, r2
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b24      	ldr	r3, [pc, #144]	; (800149c <HAL_UARTEx_RxEventCallback+0xc0>)
 800140a:	785b      	ldrb	r3, [r3, #1]
 800140c:	4413      	add	r3, r2
 800140e:	b2db      	uxtb	r3, r3
 8001410:	3b30      	subs	r3, #48	; 0x30
 8001412:	b2da      	uxtb	r2, r3
 8001414:	4b22      	ldr	r3, [pc, #136]	; (80014a0 <HAL_UARTEx_RxEventCallback+0xc4>)
 8001416:	701a      	strb	r2, [r3, #0]
      C_minute = (time[3] - '0') * 10 + (time[4] - '0');
 8001418:	4b20      	ldr	r3, [pc, #128]	; (800149c <HAL_UARTEx_RxEventCallback+0xc0>)
 800141a:	78db      	ldrb	r3, [r3, #3]
 800141c:	3b30      	subs	r3, #48	; 0x30
 800141e:	b2db      	uxtb	r3, r3
 8001420:	461a      	mov	r2, r3
 8001422:	0092      	lsls	r2, r2, #2
 8001424:	4413      	add	r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	b2da      	uxtb	r2, r3
 800142a:	4b1c      	ldr	r3, [pc, #112]	; (800149c <HAL_UARTEx_RxEventCallback+0xc0>)
 800142c:	791b      	ldrb	r3, [r3, #4]
 800142e:	4413      	add	r3, r2
 8001430:	b2db      	uxtb	r3, r3
 8001432:	3b30      	subs	r3, #48	; 0x30
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <HAL_UARTEx_RxEventCallback+0xc8>)
 8001438:	701a      	strb	r2, [r3, #0]
      C_second = (time[6] - '0') * 10 + (time[7] - '0');
 800143a:	4b18      	ldr	r3, [pc, #96]	; (800149c <HAL_UARTEx_RxEventCallback+0xc0>)
 800143c:	799b      	ldrb	r3, [r3, #6]
 800143e:	3b30      	subs	r3, #48	; 0x30
 8001440:	b2db      	uxtb	r3, r3
 8001442:	461a      	mov	r2, r3
 8001444:	0092      	lsls	r2, r2, #2
 8001446:	4413      	add	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b13      	ldr	r3, [pc, #76]	; (800149c <HAL_UARTEx_RxEventCallback+0xc0>)
 800144e:	79db      	ldrb	r3, [r3, #7]
 8001450:	4413      	add	r3, r2
 8001452:	b2db      	uxtb	r3, r3
 8001454:	3b30      	subs	r3, #48	; 0x30
 8001456:	b2da      	uxtb	r2, r3
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <HAL_UARTEx_RxEventCallback+0xcc>)
 800145a:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)success, strlen(success));
 800145c:	4813      	ldr	r0, [pc, #76]	; (80014ac <HAL_UARTEx_RxEventCallback+0xd0>)
 800145e:	f7fe fe77 	bl	8000150 <strlen>
 8001462:	4603      	mov	r3, r0
 8001464:	b29b      	uxth	r3, r3
 8001466:	461a      	mov	r2, r3
 8001468:	4910      	ldr	r1, [pc, #64]	; (80014ac <HAL_UARTEx_RxEventCallback+0xd0>)
 800146a:	480b      	ldr	r0, [pc, #44]	; (8001498 <HAL_UARTEx_RxEventCallback+0xbc>)
 800146c:	f005 ffa0 	bl	80073b0 <HAL_UART_Transmit_DMA>
 8001470:	e009      	b.n	8001486 <HAL_UARTEx_RxEventCallback+0xaa>
    }
    else
    {
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)fail, strlen(fail));
 8001472:	480f      	ldr	r0, [pc, #60]	; (80014b0 <HAL_UARTEx_RxEventCallback+0xd4>)
 8001474:	f7fe fe6c 	bl	8000150 <strlen>
 8001478:	4603      	mov	r3, r0
 800147a:	b29b      	uxth	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	490c      	ldr	r1, [pc, #48]	; (80014b0 <HAL_UARTEx_RxEventCallback+0xd4>)
 8001480:	4805      	ldr	r0, [pc, #20]	; (8001498 <HAL_UARTEx_RxEventCallback+0xbc>)
 8001482:	f005 ff95 	bl	80073b0 <HAL_UART_Transmit_DMA>
    }
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)&time, sizeof(time) / sizeof(char));
 8001486:	2214      	movs	r2, #20
 8001488:	4904      	ldr	r1, [pc, #16]	; (800149c <HAL_UARTEx_RxEventCallback+0xc0>)
 800148a:	4803      	ldr	r0, [pc, #12]	; (8001498 <HAL_UARTEx_RxEventCallback+0xbc>)
 800148c:	f006 f800 	bl	8007490 <HAL_UARTEx_ReceiveToIdle_DMA>
  }
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200007d0 	.word	0x200007d0
 800149c:	200002a0 	.word	0x200002a0
 80014a0:	2000029b 	.word	0x2000029b
 80014a4:	2000029c 	.word	0x2000029c
 80014a8:	2000029d 	.word	0x2000029d
 80014ac:	2000001c 	.word	0x2000001c
 80014b0:	20000008 	.word	0x20000008

080014b4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b8:	f001 f8b6 	bl	8002628 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014bc:	f000 f892 	bl	80015e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c0:	f7ff fddc 	bl	800107c <MX_GPIO_Init>
  MX_DMA_Init();
 80014c4:	f7ff fdb4 	bl	8001030 <MX_DMA_Init>
  MX_I2C1_Init();
 80014c8:	f7ff fe2c 	bl	8001124 <MX_I2C1_Init>
  MX_TIM2_Init();
 80014cc:	f000 fe90 	bl	80021f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014d0:	f000 feda 	bl	8002288 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80014d4:	f000 ffae 	bl	8002434 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // 初始化
  {
    aht20_init();
 80014d8:	f7ff fb7e 	bl	8000bd8 <aht20_init>
    HAL_TIM_Base_Start_IT(&htim2);
 80014dc:	4834      	ldr	r0, [pc, #208]	; (80015b0 <main+0xfc>)
 80014de:	f005 f809 	bl	80064f4 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim3);
 80014e2:	4834      	ldr	r0, [pc, #208]	; (80015b4 <main+0x100>)
 80014e4:	f005 f806 	bl	80064f4 <HAL_TIM_Base_Start_IT>
    HAL_Delay(20);
 80014e8:	2014      	movs	r0, #20
 80014ea:	f001 f8ff 	bl	80026ec <HAL_Delay>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80014ee:	210c      	movs	r1, #12
 80014f0:	4830      	ldr	r0, [pc, #192]	; (80015b4 <main+0x100>)
 80014f2:	f005 f8a1 	bl	8006638 <HAL_TIM_PWM_Start>
    OLED_Init();
 80014f6:	f000 f8e7 	bl	80016c8 <OLED_Init>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)&time, sizeof(time) / sizeof(char));
 80014fa:	2214      	movs	r2, #20
 80014fc:	492e      	ldr	r1, [pc, #184]	; (80015b8 <main+0x104>)
 80014fe:	482f      	ldr	r0, [pc, #188]	; (80015bc <main+0x108>)
 8001500:	f005 ffc6 	bl	8007490 <HAL_UARTEx_ReceiveToIdle_DMA>
  }
  // 开机动画
  {
    OLED_NewFrame();
 8001504:	f000 f93c 	bl	8001780 <OLED_NewFrame>
    OLED_DrawImage(0, 0, &xcuImg, OLED_COLOR_NORMAL);
 8001508:	2300      	movs	r3, #0
 800150a:	4a2d      	ldr	r2, [pc, #180]	; (80015c0 <main+0x10c>)
 800150c:	2100      	movs	r1, #0
 800150e:	2000      	movs	r0, #0
 8001510:	f000 fb03 	bl	8001b1a <OLED_DrawImage>
    OLED_ShowFrame();
 8001514:	f000 f940 	bl	8001798 <OLED_ShowFrame>
    HAL_Delay(1000);
 8001518:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800151c:	f001 f8e6 	bl	80026ec <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // OLED_Init();
    if (status_inside)
 8001520:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <main+0x110>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d023      	beq.n	8001570 <main+0xbc>
    {
      switch (cur_status)
 8001528:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <main+0x114>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	3b01      	subs	r3, #1
 800152e:	2b03      	cmp	r3, #3
 8001530:	d83a      	bhi.n	80015a8 <main+0xf4>
 8001532:	a201      	add	r2, pc, #4	; (adr r2, 8001538 <main+0x84>)
 8001534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001538:	08001549 	.word	0x08001549
 800153c:	0800154f 	.word	0x0800154f
 8001540:	0800155d 	.word	0x0800155d
 8001544:	0800156b 	.word	0x0800156b
      {
      case MESU_MAIN_PAGE:
        oled_disfunc_temperatureANDhumidity();
 8001548:	f7ff fce0 	bl	8000f0c <oled_disfunc_temperatureANDhumidity>
        break;
 800154c:	e02f      	b.n	80015ae <main+0xfa>
      case MESU_CURRENT_TIME:
        oled_disfunc_time(CUR_TIME, &hour, &minute, &second);
 800154e:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <main+0x118>)
 8001550:	4a1f      	ldr	r2, [pc, #124]	; (80015d0 <main+0x11c>)
 8001552:	4920      	ldr	r1, [pc, #128]	; (80015d4 <main+0x120>)
 8001554:	2001      	movs	r0, #1
 8001556:	f7ff fc6b 	bl	8000e30 <oled_disfunc_time>
        break;
 800155a:	e028      	b.n	80015ae <main+0xfa>
      case MESU_TIMER:
        oled_disfunc_time(TIMER, &T_minute, &T_second, &T_millisecond);
 800155c:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <main+0x124>)
 800155e:	4a1f      	ldr	r2, [pc, #124]	; (80015dc <main+0x128>)
 8001560:	491f      	ldr	r1, [pc, #124]	; (80015e0 <main+0x12c>)
 8001562:	2002      	movs	r0, #2
 8001564:	f7ff fc64 	bl	8000e30 <oled_disfunc_time>
        break;
 8001568:	e021      	b.n	80015ae <main+0xfa>
      case MESU_AUTHOR_INFO:
        oled_disfunc_authorInfo();
 800156a:	f7ff fcbf 	bl	8000eec <oled_disfunc_authorInfo>
        break;
 800156e:	e01e      	b.n	80015ae <main+0xfa>
        break;
      }
    }
    else
    {
      switch (cur_status)
 8001570:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <main+0x114>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	3b01      	subs	r3, #1
 8001576:	2b03      	cmp	r3, #3
 8001578:	d818      	bhi.n	80015ac <main+0xf8>
 800157a:	a201      	add	r2, pc, #4	; (adr r2, 8001580 <main+0xcc>)
 800157c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001580:	08001591 	.word	0x08001591
 8001584:	08001597 	.word	0x08001597
 8001588:	0800159d 	.word	0x0800159d
 800158c:	080015a3 	.word	0x080015a3
      {
      case MESU_MAIN_PAGE:
        oled_display_mainPage();
 8001590:	f7ff fbf6 	bl	8000d80 <oled_display_mainPage>
        break;
 8001594:	e00b      	b.n	80015ae <main+0xfa>
      case MESU_CURRENT_TIME:
        oled_display_curTime();
 8001596:	f7ff fc35 	bl	8000e04 <oled_display_curTime>
        break;
 800159a:	e008      	b.n	80015ae <main+0xfa>
      case MESU_TIMER:
        oled_display_timer();
 800159c:	f7ff fc1c 	bl	8000dd8 <oled_display_timer>
        break;
 80015a0:	e005      	b.n	80015ae <main+0xfa>
      case MESU_AUTHOR_INFO:
        oled_display_authorInfo();
 80015a2:	f7ff fc03 	bl	8000dac <oled_display_authorInfo>
        break;
 80015a6:	e002      	b.n	80015ae <main+0xfa>
        break;
 80015a8:	bf00      	nop
 80015aa:	e7b9      	b.n	8001520 <main+0x6c>
      default:
        break;
 80015ac:	bf00      	nop
    if (status_inside)
 80015ae:	e7b7      	b.n	8001520 <main+0x6c>
 80015b0:	20000740 	.word	0x20000740
 80015b4:	20000788 	.word	0x20000788
 80015b8:	200002a0 	.word	0x200002a0
 80015bc:	200007d0 	.word	0x200007d0
 80015c0:	0800f4d4 	.word	0x0800f4d4
 80015c4:	20000290 	.word	0x20000290
 80015c8:	20000005 	.word	0x20000005
 80015cc:	20000293 	.word	0x20000293
 80015d0:	20000292 	.word	0x20000292
 80015d4:	20000291 	.word	0x20000291
 80015d8:	20000297 	.word	0x20000297
 80015dc:	20000296 	.word	0x20000296
 80015e0:	20000295 	.word	0x20000295

080015e4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b090      	sub	sp, #64	; 0x40
 80015e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ea:	f107 0318 	add.w	r3, r7, #24
 80015ee:	2228      	movs	r2, #40	; 0x28
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f007 fe4d 	bl	8009292 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001606:	2301      	movs	r3, #1
 8001608:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800160a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800160e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001610:	2300      	movs	r3, #0
 8001612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001614:	2301      	movs	r3, #1
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001618:	2302      	movs	r3, #2
 800161a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800161c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001622:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001626:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001628:	f107 0318 	add.w	r3, r7, #24
 800162c:	4618      	mov	r0, r3
 800162e:	f004 fb01 	bl	8005c34 <HAL_RCC_OscConfig>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001638:	f000 f819 	bl	800166e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800163c:	230f      	movs	r3, #15
 800163e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001640:	2302      	movs	r3, #2
 8001642:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800164c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2102      	movs	r1, #2
 8001656:	4618      	mov	r0, r3
 8001658:	f004 fd6e 	bl	8006138 <HAL_RCC_ClockConfig>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001662:	f000 f804 	bl	800166e <Error_Handler>
  }
}
 8001666:	bf00      	nop
 8001668:	3740      	adds	r7, #64	; 0x40
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001672:	b672      	cpsid	i
}
 8001674:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001676:	e7fe      	b.n	8001676 <Error_Handler+0x8>

08001678 <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af02      	add	r7, sp, #8
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	b29b      	uxth	r3, r3
 8001688:	f04f 32ff 	mov.w	r2, #4294967295
 800168c:	9200      	str	r2, [sp, #0]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	2178      	movs	r1, #120	; 0x78
 8001692:	4803      	ldr	r0, [pc, #12]	; (80016a0 <OLED_Send+0x28>)
 8001694:	f001 ff20 	bl	80034d8 <HAL_I2C_Master_Transmit>
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	2000023c 	.word	0x2000023c

080016a4 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 80016ae:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <OLED_SendCmd+0x20>)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 80016b4:	2102      	movs	r1, #2
 80016b6:	4803      	ldr	r0, [pc, #12]	; (80016c4 <OLED_SendCmd+0x20>)
 80016b8:	f7ff ffde 	bl	8001678 <OLED_Send>
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	200006b4 	.word	0x200006b4

080016c8 <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 80016cc:	20ae      	movs	r0, #174	; 0xae
 80016ce:	f7ff ffe9 	bl	80016a4 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 80016d2:	2020      	movs	r0, #32
 80016d4:	f7ff ffe6 	bl	80016a4 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 80016d8:	2010      	movs	r0, #16
 80016da:	f7ff ffe3 	bl	80016a4 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 80016de:	20b0      	movs	r0, #176	; 0xb0
 80016e0:	f7ff ffe0 	bl	80016a4 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 80016e4:	20c8      	movs	r0, #200	; 0xc8
 80016e6:	f7ff ffdd 	bl	80016a4 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 80016ea:	2000      	movs	r0, #0
 80016ec:	f7ff ffda 	bl	80016a4 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 80016f0:	2010      	movs	r0, #16
 80016f2:	f7ff ffd7 	bl	80016a4 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 80016f6:	2040      	movs	r0, #64	; 0x40
 80016f8:	f7ff ffd4 	bl	80016a4 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 80016fc:	2081      	movs	r0, #129	; 0x81
 80016fe:	f7ff ffd1 	bl	80016a4 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 8001702:	20df      	movs	r0, #223	; 0xdf
 8001704:	f7ff ffce 	bl	80016a4 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 8001708:	20a1      	movs	r0, #161	; 0xa1
 800170a:	f7ff ffcb 	bl	80016a4 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 800170e:	20a6      	movs	r0, #166	; 0xa6
 8001710:	f7ff ffc8 	bl	80016a4 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 8001714:	20a8      	movs	r0, #168	; 0xa8
 8001716:	f7ff ffc5 	bl	80016a4 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 800171a:	203f      	movs	r0, #63	; 0x3f
 800171c:	f7ff ffc2 	bl	80016a4 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 8001720:	20a4      	movs	r0, #164	; 0xa4
 8001722:	f7ff ffbf 	bl	80016a4 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 8001726:	20d3      	movs	r0, #211	; 0xd3
 8001728:	f7ff ffbc 	bl	80016a4 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 800172c:	2000      	movs	r0, #0
 800172e:	f7ff ffb9 	bl	80016a4 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 8001732:	20d5      	movs	r0, #213	; 0xd5
 8001734:	f7ff ffb6 	bl	80016a4 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 8001738:	20f0      	movs	r0, #240	; 0xf0
 800173a:	f7ff ffb3 	bl	80016a4 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 800173e:	20d9      	movs	r0, #217	; 0xd9
 8001740:	f7ff ffb0 	bl	80016a4 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 8001744:	2022      	movs	r0, #34	; 0x22
 8001746:	f7ff ffad 	bl	80016a4 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 800174a:	20da      	movs	r0, #218	; 0xda
 800174c:	f7ff ffaa 	bl	80016a4 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8001750:	2012      	movs	r0, #18
 8001752:	f7ff ffa7 	bl	80016a4 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 8001756:	20db      	movs	r0, #219	; 0xdb
 8001758:	f7ff ffa4 	bl	80016a4 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 800175c:	2020      	movs	r0, #32
 800175e:	f7ff ffa1 	bl	80016a4 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 8001762:	208d      	movs	r0, #141	; 0x8d
 8001764:	f7ff ff9e 	bl	80016a4 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 8001768:	2014      	movs	r0, #20
 800176a:	f7ff ff9b 	bl	80016a4 <OLED_SendCmd>

  OLED_NewFrame();
 800176e:	f000 f807 	bl	8001780 <OLED_NewFrame>
  OLED_ShowFrame();
 8001772:	f000 f811 	bl	8001798 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 8001776:	20af      	movs	r0, #175	; 0xaf
 8001778:	f7ff ff94 	bl	80016a4 <OLED_SendCmd>
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}

08001780 <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8001784:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001788:	2100      	movs	r1, #0
 800178a:	4802      	ldr	r0, [pc, #8]	; (8001794 <OLED_NewFrame+0x14>)
 800178c:	f007 fd81 	bl	8009292 <memset>
}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	200002b4 	.word	0x200002b4

08001798 <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <OLED_ShowFrame+0x5c>)
 80017a0:	2240      	movs	r2, #64	; 0x40
 80017a2:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 80017a4:	2300      	movs	r3, #0
 80017a6:	71fb      	strb	r3, [r7, #7]
 80017a8:	e01b      	b.n	80017e2 <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	3b50      	subs	r3, #80	; 0x50
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ff77 	bl	80016a4 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 80017b6:	2000      	movs	r0, #0
 80017b8:	f7ff ff74 	bl	80016a4 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 80017bc:	2010      	movs	r0, #16
 80017be:	f7ff ff71 	bl	80016a4 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 80017c2:	480d      	ldr	r0, [pc, #52]	; (80017f8 <OLED_ShowFrame+0x60>)
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	01db      	lsls	r3, r3, #7
 80017c8:	4a0c      	ldr	r2, [pc, #48]	; (80017fc <OLED_ShowFrame+0x64>)
 80017ca:	4413      	add	r3, r2
 80017cc:	2280      	movs	r2, #128	; 0x80
 80017ce:	4619      	mov	r1, r3
 80017d0:	f007 fded 	bl	80093ae <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 80017d4:	2181      	movs	r1, #129	; 0x81
 80017d6:	4807      	ldr	r0, [pc, #28]	; (80017f4 <OLED_ShowFrame+0x5c>)
 80017d8:	f7ff ff4e 	bl	8001678 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	3301      	adds	r3, #1
 80017e0:	71fb      	strb	r3, [r7, #7]
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	2b07      	cmp	r3, #7
 80017e6:	d9e0      	bls.n	80017aa <OLED_ShowFrame+0x12>
  }
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200006b8 	.word	0x200006b8
 80017f8:	200006b9 	.word	0x200006b9
 80017fc:	200002b4 	.word	0x200002b4

08001800 <OLED_SetByte_Fine>:
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
 8001800:	b490      	push	{r4, r7}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	4604      	mov	r4, r0
 8001808:	4608      	mov	r0, r1
 800180a:	4611      	mov	r1, r2
 800180c:	461a      	mov	r2, r3
 800180e:	4623      	mov	r3, r4
 8001810:	71fb      	strb	r3, [r7, #7]
 8001812:	4603      	mov	r3, r0
 8001814:	71bb      	strb	r3, [r7, #6]
 8001816:	460b      	mov	r3, r1
 8001818:	717b      	strb	r3, [r7, #5]
 800181a:	4613      	mov	r3, r2
 800181c:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	2b07      	cmp	r3, #7
 8001822:	d860      	bhi.n	80018e6 <OLED_SetByte_Fine+0xe6>
 8001824:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001828:	2b00      	cmp	r3, #0
 800182a:	db5c      	blt.n	80018e6 <OLED_SetByte_Fine+0xe6>
    return;
  if (color)
 800182c:	7d3b      	ldrb	r3, [r7, #20]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d002      	beq.n	8001838 <OLED_SetByte_Fine+0x38>
    data = ~data;
 8001832:	797b      	ldrb	r3, [r7, #5]
 8001834:	43db      	mvns	r3, r3
 8001836:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 8001838:	7c3b      	ldrb	r3, [r7, #16]
 800183a:	3301      	adds	r3, #1
 800183c:	22ff      	movs	r2, #255	; 0xff
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	b25a      	sxtb	r2, r3
 8001844:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001848:	4313      	orrs	r3, r2
 800184a:	b25a      	sxtb	r2, r3
 800184c:	793b      	ldrb	r3, [r7, #4]
 800184e:	f1c3 0308 	rsb	r3, r3, #8
 8001852:	21ff      	movs	r1, #255	; 0xff
 8001854:	fa41 f303 	asr.w	r3, r1, r3
 8001858:	b25b      	sxtb	r3, r3
 800185a:	4313      	orrs	r3, r2
 800185c:	b25b      	sxtb	r3, r3
 800185e:	b2da      	uxtb	r2, r3
 8001860:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <OLED_SetByte_Fine+0xf0>)
 8001862:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8001864:	79fa      	ldrb	r2, [r7, #7]
 8001866:	79bb      	ldrb	r3, [r7, #6]
 8001868:	4922      	ldr	r1, [pc, #136]	; (80018f4 <OLED_SetByte_Fine+0xf4>)
 800186a:	01d2      	lsls	r2, r2, #7
 800186c:	440a      	add	r2, r1
 800186e:	4413      	add	r3, r2
 8001870:	7818      	ldrb	r0, [r3, #0]
 8001872:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <OLED_SetByte_Fine+0xf0>)
 8001874:	7819      	ldrb	r1, [r3, #0]
 8001876:	79fa      	ldrb	r2, [r7, #7]
 8001878:	79bb      	ldrb	r3, [r7, #6]
 800187a:	4001      	ands	r1, r0
 800187c:	b2c8      	uxtb	r0, r1
 800187e:	491d      	ldr	r1, [pc, #116]	; (80018f4 <OLED_SetByte_Fine+0xf4>)
 8001880:	01d2      	lsls	r2, r2, #7
 8001882:	440a      	add	r2, r1
 8001884:	4413      	add	r3, r2
 8001886:	4602      	mov	r2, r0
 8001888:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 800188a:	7c3b      	ldrb	r3, [r7, #16]
 800188c:	3301      	adds	r3, #1
 800188e:	22ff      	movs	r2, #255	; 0xff
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	b25b      	sxtb	r3, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	b25a      	sxtb	r2, r3
 800189a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800189e:	4013      	ands	r3, r2
 80018a0:	b25a      	sxtb	r2, r3
 80018a2:	793b      	ldrb	r3, [r7, #4]
 80018a4:	f1c3 0308 	rsb	r3, r3, #8
 80018a8:	21ff      	movs	r1, #255	; 0xff
 80018aa:	fa41 f303 	asr.w	r3, r1, r3
 80018ae:	b25b      	sxtb	r3, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	b25b      	sxtb	r3, r3
 80018b4:	4013      	ands	r3, r2
 80018b6:	b25b      	sxtb	r3, r3
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <OLED_SetByte_Fine+0xf0>)
 80018bc:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 80018be:	79fa      	ldrb	r2, [r7, #7]
 80018c0:	79bb      	ldrb	r3, [r7, #6]
 80018c2:	490c      	ldr	r1, [pc, #48]	; (80018f4 <OLED_SetByte_Fine+0xf4>)
 80018c4:	01d2      	lsls	r2, r2, #7
 80018c6:	440a      	add	r2, r1
 80018c8:	4413      	add	r3, r2
 80018ca:	7818      	ldrb	r0, [r3, #0]
 80018cc:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <OLED_SetByte_Fine+0xf0>)
 80018ce:	7819      	ldrb	r1, [r3, #0]
 80018d0:	79fa      	ldrb	r2, [r7, #7]
 80018d2:	79bb      	ldrb	r3, [r7, #6]
 80018d4:	4301      	orrs	r1, r0
 80018d6:	b2c8      	uxtb	r0, r1
 80018d8:	4906      	ldr	r1, [pc, #24]	; (80018f4 <OLED_SetByte_Fine+0xf4>)
 80018da:	01d2      	lsls	r2, r2, #7
 80018dc:	440a      	add	r2, r1
 80018de:	4413      	add	r3, r2
 80018e0:	4602      	mov	r2, r0
 80018e2:	701a      	strb	r2, [r3, #0]
 80018e4:	e000      	b.n	80018e8 <OLED_SetByte_Fine+0xe8>
    return;
 80018e6:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc90      	pop	{r4, r7}
 80018ee:	4770      	bx	lr
 80018f0:	20000739 	.word	0x20000739
 80018f4:	200002b4 	.word	0x200002b4

080018f8 <OLED_SetBits_Fine>:
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
 80018f8:	b5b0      	push	{r4, r5, r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af02      	add	r7, sp, #8
 80018fe:	4604      	mov	r4, r0
 8001900:	4608      	mov	r0, r1
 8001902:	4611      	mov	r1, r2
 8001904:	461a      	mov	r2, r3
 8001906:	4623      	mov	r3, r4
 8001908:	71fb      	strb	r3, [r7, #7]
 800190a:	4603      	mov	r3, r0
 800190c:	71bb      	strb	r3, [r7, #6]
 800190e:	460b      	mov	r3, r1
 8001910:	717b      	strb	r3, [r7, #5]
 8001912:	4613      	mov	r3, r2
 8001914:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8001916:	79bb      	ldrb	r3, [r7, #6]
 8001918:	08db      	lsrs	r3, r3, #3
 800191a:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 800191c:	79bb      	ldrb	r3, [r7, #6]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 8001924:	7bba      	ldrb	r2, [r7, #14]
 8001926:	793b      	ldrb	r3, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	2b08      	cmp	r3, #8
 800192c:	dd29      	ble.n	8001982 <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 800192e:	797a      	ldrb	r2, [r7, #5]
 8001930:	7bbb      	ldrb	r3, [r7, #14]
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	b2da      	uxtb	r2, r3
 8001938:	7bbc      	ldrb	r4, [r7, #14]
 800193a:	79f9      	ldrb	r1, [r7, #7]
 800193c:	7bf8      	ldrb	r0, [r7, #15]
 800193e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001942:	9301      	str	r3, [sp, #4]
 8001944:	2307      	movs	r3, #7
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	4623      	mov	r3, r4
 800194a:	f7ff ff59 	bl	8001800 <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	3301      	adds	r3, #1
 8001952:	b2d8      	uxtb	r0, r3
 8001954:	797a      	ldrb	r2, [r7, #5]
 8001956:	7bbb      	ldrb	r3, [r7, #14]
 8001958:	f1c3 0308 	rsb	r3, r3, #8
 800195c:	fa42 f303 	asr.w	r3, r2, r3
 8001960:	b2dc      	uxtb	r4, r3
 8001962:	793a      	ldrb	r2, [r7, #4]
 8001964:	7bbb      	ldrb	r3, [r7, #14]
 8001966:	4413      	add	r3, r2
 8001968:	b2db      	uxtb	r3, r3
 800196a:	3b09      	subs	r3, #9
 800196c:	b2db      	uxtb	r3, r3
 800196e:	79f9      	ldrb	r1, [r7, #7]
 8001970:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001974:	9201      	str	r2, [sp, #4]
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	2300      	movs	r3, #0
 800197a:	4622      	mov	r2, r4
 800197c:	f7ff ff40 	bl	8001800 <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 8001980:	e015      	b.n	80019ae <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 8001982:	797a      	ldrb	r2, [r7, #5]
 8001984:	7bbb      	ldrb	r3, [r7, #14]
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	b2dc      	uxtb	r4, r3
 800198c:	7bba      	ldrb	r2, [r7, #14]
 800198e:	793b      	ldrb	r3, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	b2db      	uxtb	r3, r3
 8001994:	3b01      	subs	r3, #1
 8001996:	b2db      	uxtb	r3, r3
 8001998:	7bbd      	ldrb	r5, [r7, #14]
 800199a:	79f9      	ldrb	r1, [r7, #7]
 800199c:	7bf8      	ldrb	r0, [r7, #15]
 800199e:	f897 2020 	ldrb.w	r2, [r7, #32]
 80019a2:	9201      	str	r2, [sp, #4]
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	462b      	mov	r3, r5
 80019a8:	4622      	mov	r2, r4
 80019aa:	f7ff ff29 	bl	8001800 <OLED_SetByte_Fine>
}
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bdb0      	pop	{r4, r5, r7, pc}

080019b6 <OLED_SetBits>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
 80019b6:	b590      	push	{r4, r7, lr}
 80019b8:	b087      	sub	sp, #28
 80019ba:	af02      	add	r7, sp, #8
 80019bc:	4604      	mov	r4, r0
 80019be:	4608      	mov	r0, r1
 80019c0:	4611      	mov	r1, r2
 80019c2:	461a      	mov	r2, r3
 80019c4:	4623      	mov	r3, r4
 80019c6:	71fb      	strb	r3, [r7, #7]
 80019c8:	4603      	mov	r3, r0
 80019ca:	71bb      	strb	r3, [r7, #6]
 80019cc:	460b      	mov	r3, r1
 80019ce:	717b      	strb	r3, [r7, #5]
 80019d0:	4613      	mov	r3, r2
 80019d2:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 80019d4:	79bb      	ldrb	r3, [r7, #6]
 80019d6:	08db      	lsrs	r3, r3, #3
 80019d8:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 80019da:	79bb      	ldrb	r3, [r7, #6]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 80019e2:	797a      	ldrb	r2, [r7, #5]
 80019e4:	7bbb      	ldrb	r3, [r7, #14]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	7bbc      	ldrb	r4, [r7, #14]
 80019ee:	79f9      	ldrb	r1, [r7, #7]
 80019f0:	7bf8      	ldrb	r0, [r7, #15]
 80019f2:	793b      	ldrb	r3, [r7, #4]
 80019f4:	9301      	str	r3, [sp, #4]
 80019f6:	2307      	movs	r3, #7
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	4623      	mov	r3, r4
 80019fc:	f7ff ff00 	bl	8001800 <OLED_SetByte_Fine>
  if (bit)
 8001a00:	7bbb      	ldrb	r3, [r7, #14]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d014      	beq.n	8001a30 <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	b2d8      	uxtb	r0, r3
 8001a0c:	797a      	ldrb	r2, [r7, #5]
 8001a0e:	7bbb      	ldrb	r3, [r7, #14]
 8001a10:	f1c3 0308 	rsb	r3, r3, #8
 8001a14:	fa42 f303 	asr.w	r3, r2, r3
 8001a18:	b2dc      	uxtb	r4, r3
 8001a1a:	7bbb      	ldrb	r3, [r7, #14]
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	79f9      	ldrb	r1, [r7, #7]
 8001a22:	793a      	ldrb	r2, [r7, #4]
 8001a24:	9201      	str	r2, [sp, #4]
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	4622      	mov	r2, r4
 8001a2c:	f7ff fee8 	bl	8001800 <OLED_SetByte_Fine>
  }
}
 8001a30:	bf00      	nop
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd90      	pop	{r4, r7, pc}

08001a38 <OLED_SetBlock>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
 8001a38:	b590      	push	{r4, r7, lr}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	603a      	str	r2, [r7, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
 8001a46:	460b      	mov	r3, r1
 8001a48:	71bb      	strb	r3, [r7, #6]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 8001a4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a52:	08db      	lsrs	r3, r3, #3
 8001a54:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 8001a56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]
 8001a64:	e025      	b.n	8001ab2 <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	73bb      	strb	r3, [r7, #14]
 8001a6a:	e01b      	b.n	8001aa4 <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8001a6c:	79fa      	ldrb	r2, [r7, #7]
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	4413      	add	r3, r2
 8001a72:	b2d8      	uxtb	r0, r3
 8001a74:	7bbb      	ldrb	r3, [r7, #14]
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	79bb      	ldrb	r3, [r7, #6]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	b2dc      	uxtb	r4, r3
 8001a80:	7bfa      	ldrb	r2, [r7, #15]
 8001a82:	7bbb      	ldrb	r3, [r7, #14]
 8001a84:	7979      	ldrb	r1, [r7, #5]
 8001a86:	fb01 f303 	mul.w	r3, r1, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	4413      	add	r3, r2
 8001a92:	781a      	ldrb	r2, [r3, #0]
 8001a94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a98:	4621      	mov	r1, r4
 8001a9a:	f7ff ff8c 	bl	80019b6 <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 8001a9e:	7bbb      	ldrb	r3, [r7, #14]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	73bb      	strb	r3, [r7, #14]
 8001aa4:	7bba      	ldrb	r2, [r7, #14]
 8001aa6:	7b3b      	ldrb	r3, [r7, #12]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d3df      	bcc.n	8001a6c <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	73fb      	strb	r3, [r7, #15]
 8001ab2:	7bfa      	ldrb	r2, [r7, #15]
 8001ab4:	797b      	ldrb	r3, [r7, #5]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d3d5      	bcc.n	8001a66 <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 8001aba:	7afb      	ldrb	r3, [r7, #11]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d028      	beq.n	8001b12 <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 8001ac0:	797b      	ldrb	r3, [r7, #5]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	7b3a      	ldrb	r2, [r7, #12]
 8001ac6:	b292      	uxth	r2, r2
 8001ac8:	fb02 f303 	mul.w	r3, r2, r3
 8001acc:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	737b      	strb	r3, [r7, #13]
 8001ad2:	e01a      	b.n	8001b0a <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8001ad4:	79fa      	ldrb	r2, [r7, #7]
 8001ad6:	7b7b      	ldrb	r3, [r7, #13]
 8001ad8:	4413      	add	r3, r2
 8001ada:	b2d8      	uxtb	r0, r3
 8001adc:	7b3b      	ldrb	r3, [r7, #12]
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	79bb      	ldrb	r3, [r7, #6]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b2d9      	uxtb	r1, r3
 8001ae8:	893a      	ldrh	r2, [r7, #8]
 8001aea:	7b7b      	ldrb	r3, [r7, #13]
 8001aec:	4413      	add	r3, r2
 8001aee:	461a      	mov	r2, r3
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	781a      	ldrb	r2, [r3, #0]
 8001af6:	7afc      	ldrb	r4, [r7, #11]
 8001af8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	4623      	mov	r3, r4
 8001b00:	f7ff fefa 	bl	80018f8 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 8001b04:	7b7b      	ldrb	r3, [r7, #13]
 8001b06:	3301      	adds	r3, #1
 8001b08:	737b      	strb	r3, [r7, #13]
 8001b0a:	7b7a      	ldrb	r2, [r7, #13]
 8001b0c:	797b      	ldrb	r3, [r7, #5]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d3e0      	bcc.n	8001ad4 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 8001b12:	bf00      	nop
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd90      	pop	{r4, r7, pc}

08001b1a <OLED_DrawImage>:
 * @param y 起始点纵坐标
 * @param img 图片
 * @param color 颜色
 */
void OLED_DrawImage(uint8_t x, uint8_t y, const Image *img, OLED_ColorMode color)
{
 8001b1a:	b5b0      	push	{r4, r5, r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af02      	add	r7, sp, #8
 8001b20:	603a      	str	r2, [r7, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	4603      	mov	r3, r0
 8001b26:	71fb      	strb	r3, [r7, #7]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	71bb      	strb	r3, [r7, #6]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, img->data, img->w, img->h, color);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685c      	ldr	r4, [r3, #4]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	781d      	ldrb	r5, [r3, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	785b      	ldrb	r3, [r3, #1]
 8001b3c:	79b9      	ldrb	r1, [r7, #6]
 8001b3e:	79f8      	ldrb	r0, [r7, #7]
 8001b40:	797a      	ldrb	r2, [r7, #5]
 8001b42:	9201      	str	r2, [sp, #4]
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	462b      	mov	r3, r5
 8001b48:	4622      	mov	r2, r4
 8001b4a:	f7ff ff75 	bl	8001a38 <OLED_SetBlock>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bdb0      	pop	{r4, r5, r7, pc}

08001b56 <OLED_PrintASCIIChar>:
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color)
{
 8001b56:	b5b0      	push	{r4, r5, r7, lr}
 8001b58:	b084      	sub	sp, #16
 8001b5a:	af02      	add	r7, sp, #8
 8001b5c:	603b      	str	r3, [r7, #0]
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
 8001b62:	460b      	mov	r3, r1
 8001b64:	71bb      	strb	r3, [r7, #6]
 8001b66:	4613      	mov	r3, r2
 8001b68:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	797b      	ldrb	r3, [r7, #5]
 8001b70:	f1a3 0120 	sub.w	r1, r3, #32
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	3307      	adds	r3, #7
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	da00      	bge.n	8001b80 <OLED_PrintASCIIChar+0x2a>
 8001b7e:	3307      	adds	r3, #7
 8001b80:	10db      	asrs	r3, r3, #3
 8001b82:	4618      	mov	r0, r3
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	785b      	ldrb	r3, [r3, #1]
 8001b88:	fb00 f303 	mul.w	r3, r0, r3
 8001b8c:	fb01 f303 	mul.w	r3, r1, r3
 8001b90:	18d4      	adds	r4, r2, r3
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	785d      	ldrb	r5, [r3, #1]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	79b9      	ldrb	r1, [r7, #6]
 8001b9c:	79f8      	ldrb	r0, [r7, #7]
 8001b9e:	7e3a      	ldrb	r2, [r7, #24]
 8001ba0:	9201      	str	r2, [sp, #4]
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	462b      	mov	r3, r5
 8001ba6:	4622      	mov	r2, r4
 8001ba8:	f7ff ff46 	bl	8001a38 <OLED_SetBlock>
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bdb0      	pop	{r4, r5, r7, pc}

08001bb4 <OLED_PrintASCIIString>:
 * @param str 字符串
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIString(uint8_t x, uint8_t y, char *str, const ASCIIFont *font, OLED_ColorMode color)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af02      	add	r7, sp, #8
 8001bba:	60ba      	str	r2, [r7, #8]
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	73fb      	strb	r3, [r7, #15]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	73bb      	strb	r3, [r7, #14]
  uint8_t x0 = x;
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	75fb      	strb	r3, [r7, #23]
  while (*str)
 8001bca:	e011      	b.n	8001bf0 <OLED_PrintASCIIString+0x3c>
  {
    OLED_PrintASCIIChar(x0, y, *str, font, color);
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	781a      	ldrb	r2, [r3, #0]
 8001bd0:	7bb9      	ldrb	r1, [r7, #14]
 8001bd2:	7df8      	ldrb	r0, [r7, #23]
 8001bd4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f7ff ffbb 	bl	8001b56 <OLED_PrintASCIIChar>
    x0 += font->w;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	785a      	ldrb	r2, [r3, #1]
 8001be4:	7dfb      	ldrb	r3, [r7, #23]
 8001be6:	4413      	add	r3, r2
 8001be8:	75fb      	strb	r3, [r7, #23]
    str++;
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	3301      	adds	r3, #1
 8001bee:	60bb      	str	r3, [r7, #8]
  while (*str)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1e9      	bne.n	8001bcc <OLED_PrintASCIIString+0x18>
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <_OLED_GetUTF8Len>:

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	b25b      	sxtb	r3, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	db01      	blt.n	8001c18 <_OLED_GetUTF8Len+0x16>
  {
    return 1;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e018      	b.n	8001c4a <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xE0) == 0xC0)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8001c20:	2bc0      	cmp	r3, #192	; 0xc0
 8001c22:	d101      	bne.n	8001c28 <_OLED_GetUTF8Len+0x26>
  {
    return 2;
 8001c24:	2302      	movs	r3, #2
 8001c26:	e010      	b.n	8001c4a <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF0) == 0xE0)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c30:	2be0      	cmp	r3, #224	; 0xe0
 8001c32:	d101      	bne.n	8001c38 <_OLED_GetUTF8Len+0x36>
  {
    return 3;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e008      	b.n	8001c4a <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF8) == 0xF0)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8001c40:	2bf0      	cmp	r3, #240	; 0xf0
 8001c42:	d101      	bne.n	8001c48 <_OLED_GetUTF8Len+0x46>
  {
    return 4;
 8001c44:	2304      	movs	r3, #4
 8001c46:	e000      	b.n	8001c4a <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <OLED_PrintString>:
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color)
{
 8001c54:	b5b0      	push	{r4, r5, r7, lr}
 8001c56:	b08a      	sub	sp, #40	; 0x28
 8001c58:	af02      	add	r7, sp, #8
 8001c5a:	60ba      	str	r2, [r7, #8]
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	4603      	mov	r3, r0
 8001c60:	73fb      	strb	r3, [r7, #15]
 8001c62:	460b      	mov	r3, r1
 8001c64:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 8001c66:	2300      	movs	r3, #0
 8001c68:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	3307      	adds	r3, #7
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	da00      	bge.n	8001c76 <OLED_PrintString+0x22>
 8001c74:	3307      	adds	r3, #7
 8001c76:	10db      	asrs	r3, r3, #3
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	7852      	ldrb	r2, [r2, #1]
 8001c7e:	fb02 f303 	mul.w	r3, r2, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	3304      	adds	r3, #4
 8001c86:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i])
 8001c88:	e07d      	b.n	8001d86 <OLED_PrintString+0x132>
  {
    found = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 8001c8e:	8bfb      	ldrh	r3, [r7, #30]
 8001c90:	68ba      	ldr	r2, [r7, #8]
 8001c92:	4413      	add	r3, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ffb4 	bl	8001c02 <_OLED_GetUTF8Len>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0)
 8001c9e:	7ebb      	ldrb	r3, [r7, #26]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d078      	beq.n	8001d96 <OLED_PrintString+0x142>
      break; // 有问题的UTF-8编码

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++)
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	773b      	strb	r3, [r7, #28]
 8001ca8:	e032      	b.n	8001d10 <OLED_PrintString+0xbc>
    {
      head = (uint8_t *)(font->chars) + (j * oneLen);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	7f3a      	ldrb	r2, [r7, #28]
 8001cb0:	7ef9      	ldrb	r1, [r7, #27]
 8001cb2:	fb01 f202 	mul.w	r2, r1, r2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0)
 8001cba:	8bfb      	ldrh	r3, [r7, #30]
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	7eba      	ldrb	r2, [r7, #26]
 8001cc2:	6979      	ldr	r1, [r7, #20]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f007 fad4 	bl	8009272 <memcmp>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d11c      	bne.n	8001d0a <OLED_PrintString+0xb6>
      {
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	1d1c      	adds	r4, r3, #4
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	785d      	ldrb	r5, [r3, #1]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	7bb9      	ldrb	r1, [r7, #14]
 8001cde:	7bf8      	ldrb	r0, [r7, #15]
 8001ce0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001ce4:	9201      	str	r2, [sp, #4]
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	462b      	mov	r3, r5
 8001cea:	4622      	mov	r2, r4
 8001cec:	f7ff fea4 	bl	8001a38 <OLED_SetBlock>
        // 移动光标
        x += font->w;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	785a      	ldrb	r2, [r3, #1]
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8001cfa:	7ebb      	ldrb	r3, [r7, #26]
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	8bfb      	ldrh	r3, [r7, #30]
 8001d00:	4413      	add	r3, r2
 8001d02:	83fb      	strh	r3, [r7, #30]
        found = 1;
 8001d04:	2301      	movs	r3, #1
 8001d06:	777b      	strb	r3, [r7, #29]
        break;
 8001d08:	e007      	b.n	8001d1a <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++)
 8001d0a:	7f3b      	ldrb	r3, [r7, #28]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	773b      	strb	r3, [r7, #28]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	7a1b      	ldrb	r3, [r3, #8]
 8001d14:	7f3a      	ldrb	r2, [r7, #28]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d3c7      	bcc.n	8001caa <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0)
 8001d1a:	7f7b      	ldrb	r3, [r7, #29]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d132      	bne.n	8001d86 <OLED_PrintString+0x132>
    {
      if (utf8Len == 1)
 8001d20:	7ebb      	ldrb	r3, [r7, #26]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d119      	bne.n	8001d5a <OLED_PrintString+0x106>
      {
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 8001d26:	8bfb      	ldrh	r3, [r7, #30]
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	781a      	ldrb	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68dc      	ldr	r4, [r3, #12]
 8001d32:	7bb9      	ldrb	r1, [r7, #14]
 8001d34:	7bf8      	ldrb	r0, [r7, #15]
 8001d36:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	4623      	mov	r3, r4
 8001d3e:	f7ff ff0a 	bl	8001b56 <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	785a      	ldrb	r2, [r3, #1]
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8001d4e:	7ebb      	ldrb	r3, [r7, #26]
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	8bfb      	ldrh	r3, [r7, #30]
 8001d54:	4413      	add	r3, r2
 8001d56:	83fb      	strh	r3, [r7, #30]
 8001d58:	e015      	b.n	8001d86 <OLED_PrintString+0x132>
      }
      else
      {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	7bb9      	ldrb	r1, [r7, #14]
 8001d60:	7bf8      	ldrb	r0, [r7, #15]
 8001d62:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	2220      	movs	r2, #32
 8001d6c:	f7ff fef3 	bl	8001b56 <OLED_PrintASCIIChar>
        x += font->ascii->w;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	785a      	ldrb	r2, [r3, #1]
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	4413      	add	r3, r2
 8001d7a:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8001d7c:	7ebb      	ldrb	r3, [r7, #26]
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	8bfb      	ldrh	r3, [r7, #30]
 8001d82:	4413      	add	r3, r2
 8001d84:	83fb      	strh	r3, [r7, #30]
  while (str[i])
 8001d86:	8bfb      	ldrh	r3, [r7, #30]
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f47f af7b 	bne.w	8001c8a <OLED_PrintString+0x36>
      }
    }
  }
}
 8001d94:	e000      	b.n	8001d98 <OLED_PrintString+0x144>
      break; // 有问题的UTF-8编码
 8001d96:	bf00      	nop
}
 8001d98:	bf00      	nop
 8001d9a:	3720      	adds	r7, #32
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bdb0      	pop	{r4, r5, r7, pc}

08001da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001da6:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <HAL_MspInit+0x5c>)
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	4a14      	ldr	r2, [pc, #80]	; (8001dfc <HAL_MspInit+0x5c>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6193      	str	r3, [r2, #24]
 8001db2:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_MspInit+0x5c>)
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <HAL_MspInit+0x5c>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	4a0e      	ldr	r2, [pc, #56]	; (8001dfc <HAL_MspInit+0x5c>)
 8001dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	61d3      	str	r3, [r2, #28]
 8001dca:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <HAL_MspInit+0x5c>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <HAL_MspInit+0x60>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <HAL_MspInit+0x60>)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40010000 	.word	0x40010000

08001e04 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e08:	e7fe      	b.n	8001e08 <NMI_Handler+0x4>

08001e0a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e0e:	e7fe      	b.n	8001e0e <HardFault_Handler+0x4>

08001e10 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e14:	e7fe      	b.n	8001e14 <MemManage_Handler+0x4>

08001e16 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e1a:	e7fe      	b.n	8001e1a <BusFault_Handler+0x4>

08001e1c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e20:	e7fe      	b.n	8001e20 <UsageFault_Handler+0x4>

08001e22 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr

08001e2e <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr

08001e3a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr

08001e46 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e4a:	f000 fc33 	bl	80026b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <EXTI4_IRQHandler>:

/**
 * @brief This function handles EXTI line4 interrupt.
 */
void EXTI4_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  HAL_Delay(20);
 8001e58:	2014      	movs	r0, #20
 8001e5a:	f000 fc47 	bl	80026ec <HAL_Delay>
  if (HAL_GPIO_ReadPin(BUTTON_STATUS_GPIO_Port, BUTTON_STATUS_Pin) == GPIO_PIN_RESET)
 8001e5e:	2110      	movs	r1, #16
 8001e60:	4822      	ldr	r0, [pc, #136]	; (8001eec <EXTI4_IRQHandler+0x98>)
 8001e62:	f001 f9a7 	bl	80031b4 <HAL_GPIO_ReadPin>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d139      	bne.n	8001ee0 <EXTI4_IRQHandler+0x8c>
  {
    // // 处理逻辑
    if (status_inside == TRUE)
 8001e6c:	4b20      	ldr	r3, [pc, #128]	; (8001ef0 <EXTI4_IRQHandler+0x9c>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d120      	bne.n	8001eb6 <EXTI4_IRQHandler+0x62>
    {
      // 退出功能
      if (cur_status == MESU_TIMER && T_isopen == FALSE && (T_millisecond + T_minute + T_minute) != 0)
 8001e74:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <EXTI4_IRQHandler+0xa0>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d118      	bne.n	8001eae <EXTI4_IRQHandler+0x5a>
 8001e7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <EXTI4_IRQHandler+0xa4>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d114      	bne.n	8001eae <EXTI4_IRQHandler+0x5a>
 8001e84:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <EXTI4_IRQHandler+0xa8>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <EXTI4_IRQHandler+0xac>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	4413      	add	r3, r2
 8001e90:	4a1b      	ldr	r2, [pc, #108]	; (8001f00 <EXTI4_IRQHandler+0xac>)
 8001e92:	7812      	ldrb	r2, [r2, #0]
 8001e94:	4413      	add	r3, r2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d009      	beq.n	8001eae <EXTI4_IRQHandler+0x5a>
      {
        T_millisecond = 0;
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <EXTI4_IRQHandler+0xa8>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	701a      	strb	r2, [r3, #0]
        T_second = 0;
 8001ea0:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <EXTI4_IRQHandler+0xb0>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
        T_minute = 0;
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <EXTI4_IRQHandler+0xac>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
 8001eac:	e010      	b.n	8001ed0 <EXTI4_IRQHandler+0x7c>
      }
      else
      {
        status_inside = FALSE;
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <EXTI4_IRQHandler+0x9c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
 8001eb4:	e00c      	b.n	8001ed0 <EXTI4_IRQHandler+0x7c>
      }
    }
    else
    {
      // 切换功能
      cur_status++;
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <EXTI4_IRQHandler+0xa0>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <EXTI4_IRQHandler+0xa0>)
 8001ec0:	701a      	strb	r2, [r3, #0]
      if (cur_status >= 5)
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <EXTI4_IRQHandler+0xa0>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d902      	bls.n	8001ed0 <EXTI4_IRQHandler+0x7c>
      {
        cur_status = 1;
 8001eca:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <EXTI4_IRQHandler+0xa0>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	701a      	strb	r2, [r3, #0]
      }
    }

    while (HAL_GPIO_ReadPin(BUTTON_STATUS_GPIO_Port, BUTTON_STATUS_Pin) == GPIO_PIN_RESET)
 8001ed0:	bf00      	nop
 8001ed2:	2110      	movs	r1, #16
 8001ed4:	4805      	ldr	r0, [pc, #20]	; (8001eec <EXTI4_IRQHandler+0x98>)
 8001ed6:	f001 f96d 	bl	80031b4 <HAL_GPIO_ReadPin>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f8      	beq.n	8001ed2 <EXTI4_IRQHandler+0x7e>
      ;
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_STATUS_Pin);
 8001ee0:	2010      	movs	r0, #16
 8001ee2:	f001 f97f 	bl	80031e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  /* USER CODE END EXTI4_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40010800 	.word	0x40010800
 8001ef0:	20000290 	.word	0x20000290
 8001ef4:	20000005 	.word	0x20000005
 8001ef8:	20000298 	.word	0x20000298
 8001efc:	20000297 	.word	0x20000297
 8001f00:	20000295 	.word	0x20000295
 8001f04:	20000296 	.word	0x20000296

08001f08 <DMA1_Channel4_IRQHandler>:

/**
 * @brief This function handles DMA1 channel4 global interrupt.
 */
void DMA1_Channel4_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001f0c:	4802      	ldr	r0, [pc, #8]	; (8001f18 <DMA1_Channel4_IRQHandler+0x10>)
 8001f0e:	f000 fe8d 	bl	8002c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	2000085c 	.word	0x2000085c

08001f1c <DMA1_Channel5_IRQHandler>:

/**
 * @brief This function handles DMA1 channel5 global interrupt.
 */
void DMA1_Channel5_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f20:	4802      	ldr	r0, [pc, #8]	; (8001f2c <DMA1_Channel5_IRQHandler+0x10>)
 8001f22:	f000 fe83 	bl	8002c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000818 	.word	0x20000818

08001f30 <EXTI9_5_IRQHandler>:

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  HAL_Delay(20);
 8001f34:	2014      	movs	r0, #20
 8001f36:	f000 fbd9 	bl	80026ec <HAL_Delay>
  if (HAL_GPIO_ReadPin(BUTTON_ENSURE_GPIO_Port, BUTTON_ENSURE_Pin) == GPIO_PIN_RESET)
 8001f3a:	2180      	movs	r1, #128	; 0x80
 8001f3c:	4825      	ldr	r0, [pc, #148]	; (8001fd4 <EXTI9_5_IRQHandler+0xa4>)
 8001f3e:	f001 f939 	bl	80031b4 <HAL_GPIO_ReadPin>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d140      	bne.n	8001fca <EXTI9_5_IRQHandler+0x9a>
  {
    // 处理逻辑
    {
      if (status_inside)
 8001f48:	4b23      	ldr	r3, [pc, #140]	; (8001fd8 <EXTI9_5_IRQHandler+0xa8>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d02f      	beq.n	8001fb0 <EXTI9_5_IRQHandler+0x80>
      {
        switch (cur_status)
 8001f50:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <EXTI9_5_IRQHandler+0xac>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d01f      	beq.n	8001f98 <EXTI9_5_IRQHandler+0x68>
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	dc2d      	bgt.n	8001fb8 <EXTI9_5_IRQHandler+0x88>
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d002      	beq.n	8001f66 <EXTI9_5_IRQHandler+0x36>
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d00c      	beq.n	8001f7e <EXTI9_5_IRQHandler+0x4e>
          {
            T_isopen = TRUE;
          }
          break;
        default:
          break;
 8001f64:	e028      	b.n	8001fb8 <EXTI9_5_IRQHandler+0x88>
          if (A_isopen == FALSE)
 8001f66:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <EXTI9_5_IRQHandler+0xb0>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d103      	bne.n	8001f76 <EXTI9_5_IRQHandler+0x46>
            A_isopen = TRUE;
 8001f6e:	4b1c      	ldr	r3, [pc, #112]	; (8001fe0 <EXTI9_5_IRQHandler+0xb0>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]
          break;
 8001f74:	e021      	b.n	8001fba <EXTI9_5_IRQHandler+0x8a>
            A_isopen = FALSE;
 8001f76:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <EXTI9_5_IRQHandler+0xb0>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
          break;
 8001f7c:	e01d      	b.n	8001fba <EXTI9_5_IRQHandler+0x8a>
          hour = C_hour;
 8001f7e:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <EXTI9_5_IRQHandler+0xb4>)
 8001f80:	781a      	ldrb	r2, [r3, #0]
 8001f82:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <EXTI9_5_IRQHandler+0xb8>)
 8001f84:	701a      	strb	r2, [r3, #0]
          minute = C_minute;
 8001f86:	4b19      	ldr	r3, [pc, #100]	; (8001fec <EXTI9_5_IRQHandler+0xbc>)
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <EXTI9_5_IRQHandler+0xc0>)
 8001f8c:	701a      	strb	r2, [r3, #0]
          second = C_second;
 8001f8e:	4b19      	ldr	r3, [pc, #100]	; (8001ff4 <EXTI9_5_IRQHandler+0xc4>)
 8001f90:	781a      	ldrb	r2, [r3, #0]
 8001f92:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <EXTI9_5_IRQHandler+0xc8>)
 8001f94:	701a      	strb	r2, [r3, #0]
          break;
 8001f96:	e010      	b.n	8001fba <EXTI9_5_IRQHandler+0x8a>
          if (T_isopen)
 8001f98:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <EXTI9_5_IRQHandler+0xcc>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <EXTI9_5_IRQHandler+0x78>
            T_isopen = FALSE;
 8001fa0:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <EXTI9_5_IRQHandler+0xcc>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	701a      	strb	r2, [r3, #0]
          break;
 8001fa6:	e008      	b.n	8001fba <EXTI9_5_IRQHandler+0x8a>
            T_isopen = TRUE;
 8001fa8:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <EXTI9_5_IRQHandler+0xcc>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	701a      	strb	r2, [r3, #0]
          break;
 8001fae:	e004      	b.n	8001fba <EXTI9_5_IRQHandler+0x8a>
        }
      }
      else
      {
        // 确定键
        status_inside = TRUE;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <EXTI9_5_IRQHandler+0xa8>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	701a      	strb	r2, [r3, #0]
 8001fb6:	e000      	b.n	8001fba <EXTI9_5_IRQHandler+0x8a>
          break;
 8001fb8:	bf00      	nop
      }
    }
    // 处理逻辑
    while (HAL_GPIO_ReadPin(BUTTON_ENSURE_GPIO_Port, BUTTON_ENSURE_Pin) == GPIO_PIN_RESET)
 8001fba:	bf00      	nop
 8001fbc:	2180      	movs	r1, #128	; 0x80
 8001fbe:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <EXTI9_5_IRQHandler+0xa4>)
 8001fc0:	f001 f8f8 	bl	80031b4 <HAL_GPIO_ReadPin>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f8      	beq.n	8001fbc <EXTI9_5_IRQHandler+0x8c>
      ;
  }
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_ENSURE_Pin);
 8001fca:	2080      	movs	r0, #128	; 0x80
 8001fcc:	f001 f90a 	bl	80031e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40010800 	.word	0x40010800
 8001fd8:	20000290 	.word	0x20000290
 8001fdc:	20000005 	.word	0x20000005
 8001fe0:	20000299 	.word	0x20000299
 8001fe4:	2000029b 	.word	0x2000029b
 8001fe8:	20000291 	.word	0x20000291
 8001fec:	2000029c 	.word	0x2000029c
 8001ff0:	20000292 	.word	0x20000292
 8001ff4:	2000029d 	.word	0x2000029d
 8001ff8:	20000293 	.word	0x20000293
 8001ffc:	20000298 	.word	0x20000298

08002000 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002004:	4802      	ldr	r0, [pc, #8]	; (8002010 <TIM2_IRQHandler+0x10>)
 8002006:	f004 fbb9 	bl	800677c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000740 	.word	0x20000740

08002014 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002018:	4802      	ldr	r0, [pc, #8]	; (8002024 <TIM3_IRQHandler+0x10>)
 800201a:	f004 fbaf 	bl	800677c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000788 	.word	0x20000788

08002028 <I2C1_EV_IRQHandler>:

/**
 * @brief This function handles I2C1 event interrupt.
 */
void I2C1_EV_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800202c:	4802      	ldr	r0, [pc, #8]	; (8002038 <I2C1_EV_IRQHandler+0x10>)
 800202e:	f001 fdbd 	bl	8003bac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	2000023c 	.word	0x2000023c

0800203c <I2C1_ER_IRQHandler>:

/**
 * @brief This function handles I2C1 error interrupt.
 */
void I2C1_ER_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <I2C1_ER_IRQHandler+0x10>)
 8002042:	f001 ff06 	bl	8003e52 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	2000023c 	.word	0x2000023c

08002050 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <USART1_IRQHandler+0x10>)
 8002056:	f005 fa79 	bl	800754c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	200007d0 	.word	0x200007d0

08002064 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return 1;
 8002068:	2301      	movs	r3, #1
}
 800206a:	4618      	mov	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr

08002072 <_kill>:

int _kill(int pid, int sig)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800207c:	f007 f95c 	bl	8009338 <__errno>
 8002080:	4603      	mov	r3, r0
 8002082:	2216      	movs	r2, #22
 8002084:	601a      	str	r2, [r3, #0]
  return -1;
 8002086:	f04f 33ff 	mov.w	r3, #4294967295
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <_exit>:

void _exit (int status)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800209a:	f04f 31ff 	mov.w	r1, #4294967295
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ffe7 	bl	8002072 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020a4:	e7fe      	b.n	80020a4 <_exit+0x12>

080020a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b086      	sub	sp, #24
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	e00a      	b.n	80020ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020b8:	f3af 8000 	nop.w
 80020bc:	4601      	mov	r1, r0
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	1c5a      	adds	r2, r3, #1
 80020c2:	60ba      	str	r2, [r7, #8]
 80020c4:	b2ca      	uxtb	r2, r1
 80020c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	3301      	adds	r3, #1
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	dbf0      	blt.n	80020b8 <_read+0x12>
  }

  return len;
 80020d6:	687b      	ldr	r3, [r7, #4]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	e009      	b.n	8002106 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	1c5a      	adds	r2, r3, #1
 80020f6:	60ba      	str	r2, [r7, #8]
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	3301      	adds	r3, #1
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	429a      	cmp	r2, r3
 800210c:	dbf1      	blt.n	80020f2 <_write+0x12>
  }
  return len;
 800210e:	687b      	ldr	r3, [r7, #4]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <_close>:

int _close(int file)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002120:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr

0800212e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800213e:	605a      	str	r2, [r3, #4]
  return 0;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <_isatty>:

int _isatty(int file)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002154:	2301      	movs	r3, #1
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr

08002178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002180:	4a14      	ldr	r2, [pc, #80]	; (80021d4 <_sbrk+0x5c>)
 8002182:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <_sbrk+0x60>)
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800218c:	4b13      	ldr	r3, [pc, #76]	; (80021dc <_sbrk+0x64>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d102      	bne.n	800219a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <_sbrk+0x64>)
 8002196:	4a12      	ldr	r2, [pc, #72]	; (80021e0 <_sbrk+0x68>)
 8002198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <_sbrk+0x64>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d207      	bcs.n	80021b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a8:	f007 f8c6 	bl	8009338 <__errno>
 80021ac:	4603      	mov	r3, r0
 80021ae:	220c      	movs	r2, #12
 80021b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021b2:	f04f 33ff 	mov.w	r3, #4294967295
 80021b6:	e009      	b.n	80021cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <_sbrk+0x64>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021be:	4b07      	ldr	r3, [pc, #28]	; (80021dc <_sbrk+0x64>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	4a05      	ldr	r2, [pc, #20]	; (80021dc <_sbrk+0x64>)
 80021c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ca:	68fb      	ldr	r3, [r7, #12]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20005000 	.word	0x20005000
 80021d8:	00000400 	.word	0x00000400
 80021dc:	2000073c 	.word	0x2000073c
 80021e0:	200009f0 	.word	0x200009f0

080021e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr

080021f0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021f6:	f107 0308 	add.w	r3, r7, #8
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002204:	463b      	mov	r3, r7
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800220c:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <MX_TIM2_Init+0x94>)
 800220e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002212:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8002214:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <MX_TIM2_Init+0x94>)
 8002216:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800221a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800221c:	4b19      	ldr	r3, [pc, #100]	; (8002284 <MX_TIM2_Init+0x94>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 8002222:	4b18      	ldr	r3, [pc, #96]	; (8002284 <MX_TIM2_Init+0x94>)
 8002224:	2213      	movs	r2, #19
 8002226:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002228:	4b16      	ldr	r3, [pc, #88]	; (8002284 <MX_TIM2_Init+0x94>)
 800222a:	2200      	movs	r2, #0
 800222c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800222e:	4b15      	ldr	r3, [pc, #84]	; (8002284 <MX_TIM2_Init+0x94>)
 8002230:	2200      	movs	r2, #0
 8002232:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002234:	4813      	ldr	r0, [pc, #76]	; (8002284 <MX_TIM2_Init+0x94>)
 8002236:	f004 f90d 	bl	8006454 <HAL_TIM_Base_Init>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002240:	f7ff fa15 	bl	800166e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002248:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800224a:	f107 0308 	add.w	r3, r7, #8
 800224e:	4619      	mov	r1, r3
 8002250:	480c      	ldr	r0, [pc, #48]	; (8002284 <MX_TIM2_Init+0x94>)
 8002252:	f004 fc5d 	bl	8006b10 <HAL_TIM_ConfigClockSource>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800225c:	f7ff fa07 	bl	800166e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002260:	2300      	movs	r3, #0
 8002262:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002264:	2300      	movs	r3, #0
 8002266:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002268:	463b      	mov	r3, r7
 800226a:	4619      	mov	r1, r3
 800226c:	4805      	ldr	r0, [pc, #20]	; (8002284 <MX_TIM2_Init+0x94>)
 800226e:	f004 ffdf 	bl	8007230 <HAL_TIMEx_MasterConfigSynchronization>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002278:	f7ff f9f9 	bl	800166e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800227c:	bf00      	nop
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000740 	.word	0x20000740

08002288 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	; 0x28
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800228e:	f107 0320 	add.w	r3, r7, #32
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002298:	1d3b      	adds	r3, r7, #4
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	60da      	str	r2, [r3, #12]
 80022a4:	611a      	str	r2, [r3, #16]
 80022a6:	615a      	str	r2, [r3, #20]
 80022a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022aa:	4b22      	ldr	r3, [pc, #136]	; (8002334 <MX_TIM3_Init+0xac>)
 80022ac:	4a22      	ldr	r2, [pc, #136]	; (8002338 <MX_TIM3_Init+0xb0>)
 80022ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 899;
 80022b0:	4b20      	ldr	r3, [pc, #128]	; (8002334 <MX_TIM3_Init+0xac>)
 80022b2:	f240 3283 	movw	r2, #899	; 0x383
 80022b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b8:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <MX_TIM3_Init+0xac>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 80022be:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <MX_TIM3_Init+0xac>)
 80022c0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80022c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c6:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <MX_TIM3_Init+0xac>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022cc:	4b19      	ldr	r3, [pc, #100]	; (8002334 <MX_TIM3_Init+0xac>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022d2:	4818      	ldr	r0, [pc, #96]	; (8002334 <MX_TIM3_Init+0xac>)
 80022d4:	f004 f960 	bl	8006598 <HAL_TIM_PWM_Init>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80022de:	f7ff f9c6 	bl	800166e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022ea:	f107 0320 	add.w	r3, r7, #32
 80022ee:	4619      	mov	r1, r3
 80022f0:	4810      	ldr	r0, [pc, #64]	; (8002334 <MX_TIM3_Init+0xac>)
 80022f2:	f004 ff9d 	bl	8007230 <HAL_TIMEx_MasterConfigSynchronization>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80022fc:	f7ff f9b7 	bl	800166e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002300:	2360      	movs	r3, #96	; 0x60
 8002302:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002310:	1d3b      	adds	r3, r7, #4
 8002312:	220c      	movs	r2, #12
 8002314:	4619      	mov	r1, r3
 8002316:	4807      	ldr	r0, [pc, #28]	; (8002334 <MX_TIM3_Init+0xac>)
 8002318:	f004 fb38 	bl	800698c <HAL_TIM_PWM_ConfigChannel>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002322:	f7ff f9a4 	bl	800166e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002326:	4803      	ldr	r0, [pc, #12]	; (8002334 <MX_TIM3_Init+0xac>)
 8002328:	f000 f852 	bl	80023d0 <HAL_TIM_MspPostInit>

}
 800232c:	bf00      	nop
 800232e:	3728      	adds	r7, #40	; 0x28
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000788 	.word	0x20000788
 8002338:	40000400 	.word	0x40000400

0800233c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800234c:	d113      	bne.n	8002376 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800234e:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <HAL_TIM_Base_MspInit+0x44>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	4a0b      	ldr	r2, [pc, #44]	; (8002380 <HAL_TIM_Base_MspInit+0x44>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	61d3      	str	r3, [r2, #28]
 800235a:	4b09      	ldr	r3, [pc, #36]	; (8002380 <HAL_TIM_Base_MspInit+0x44>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002366:	2200      	movs	r2, #0
 8002368:	2100      	movs	r1, #0
 800236a:	201c      	movs	r0, #28
 800236c:	f000 fab9 	bl	80028e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002370:	201c      	movs	r0, #28
 8002372:	f000 fad2 	bl	800291a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002376:	bf00      	nop
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000

08002384 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0d      	ldr	r2, [pc, #52]	; (80023c8 <HAL_TIM_PWM_MspInit+0x44>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d113      	bne.n	80023be <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002396:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <HAL_TIM_PWM_MspInit+0x48>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	4a0c      	ldr	r2, [pc, #48]	; (80023cc <HAL_TIM_PWM_MspInit+0x48>)
 800239c:	f043 0302 	orr.w	r3, r3, #2
 80023a0:	61d3      	str	r3, [r2, #28]
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <HAL_TIM_PWM_MspInit+0x48>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2100      	movs	r1, #0
 80023b2:	201d      	movs	r0, #29
 80023b4:	f000 fa95 	bl	80028e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023b8:	201d      	movs	r0, #29
 80023ba:	f000 faae 	bl	800291a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40000400 	.word	0x40000400
 80023cc:	40021000 	.word	0x40021000

080023d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	f107 0310 	add.w	r3, r7, #16
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a0f      	ldr	r2, [pc, #60]	; (8002428 <HAL_TIM_MspPostInit+0x58>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d117      	bne.n	8002420 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f0:	4b0e      	ldr	r3, [pc, #56]	; (800242c <HAL_TIM_MspPostInit+0x5c>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	4a0d      	ldr	r2, [pc, #52]	; (800242c <HAL_TIM_MspPostInit+0x5c>)
 80023f6:	f043 0308 	orr.w	r3, r3, #8
 80023fa:	6193      	str	r3, [r2, #24]
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_TIM_MspPostInit+0x5c>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002408:	2302      	movs	r3, #2
 800240a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240c:	2302      	movs	r3, #2
 800240e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002410:	2302      	movs	r3, #2
 8002412:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002414:	f107 0310 	add.w	r3, r7, #16
 8002418:	4619      	mov	r1, r3
 800241a:	4805      	ldr	r0, [pc, #20]	; (8002430 <HAL_TIM_MspPostInit+0x60>)
 800241c:	f000 fd46 	bl	8002eac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002420:	bf00      	nop
 8002422:	3720      	adds	r7, #32
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40000400 	.word	0x40000400
 800242c:	40021000 	.word	0x40021000
 8002430:	40010c00 	.word	0x40010c00

08002434 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 800243a:	4a12      	ldr	r2, [pc, #72]	; (8002484 <MX_USART1_UART_Init+0x50>)
 800243c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002440:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002444:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002446:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 800244e:	2200      	movs	r2, #0
 8002450:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002452:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 800245a:	220c      	movs	r2, #12
 800245c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800245e:	4b08      	ldr	r3, [pc, #32]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800246a:	4805      	ldr	r0, [pc, #20]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 800246c:	f004 ff50 	bl	8007310 <HAL_UART_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002476:	f7ff f8fa 	bl	800166e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200007d0 	.word	0x200007d0
 8002484:	40013800 	.word	0x40013800

08002488 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 0310 	add.w	r3, r7, #16
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a47      	ldr	r2, [pc, #284]	; (80025c0 <HAL_UART_MspInit+0x138>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	f040 8086 	bne.w	80025b6 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024aa:	4b46      	ldr	r3, [pc, #280]	; (80025c4 <HAL_UART_MspInit+0x13c>)
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	4a45      	ldr	r2, [pc, #276]	; (80025c4 <HAL_UART_MspInit+0x13c>)
 80024b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b4:	6193      	str	r3, [r2, #24]
 80024b6:	4b43      	ldr	r3, [pc, #268]	; (80025c4 <HAL_UART_MspInit+0x13c>)
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c2:	4b40      	ldr	r3, [pc, #256]	; (80025c4 <HAL_UART_MspInit+0x13c>)
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	4a3f      	ldr	r2, [pc, #252]	; (80025c4 <HAL_UART_MspInit+0x13c>)
 80024c8:	f043 0304 	orr.w	r3, r3, #4
 80024cc:	6193      	str	r3, [r2, #24]
 80024ce:	4b3d      	ldr	r3, [pc, #244]	; (80025c4 <HAL_UART_MspInit+0x13c>)
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e0:	2302      	movs	r3, #2
 80024e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024e4:	2303      	movs	r3, #3
 80024e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e8:	f107 0310 	add.w	r3, r7, #16
 80024ec:	4619      	mov	r1, r3
 80024ee:	4836      	ldr	r0, [pc, #216]	; (80025c8 <HAL_UART_MspInit+0x140>)
 80024f0:	f000 fcdc 	bl	8002eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002502:	f107 0310 	add.w	r3, r7, #16
 8002506:	4619      	mov	r1, r3
 8002508:	482f      	ldr	r0, [pc, #188]	; (80025c8 <HAL_UART_MspInit+0x140>)
 800250a:	f000 fccf 	bl	8002eac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800250e:	4b2f      	ldr	r3, [pc, #188]	; (80025cc <HAL_UART_MspInit+0x144>)
 8002510:	4a2f      	ldr	r2, [pc, #188]	; (80025d0 <HAL_UART_MspInit+0x148>)
 8002512:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002514:	4b2d      	ldr	r3, [pc, #180]	; (80025cc <HAL_UART_MspInit+0x144>)
 8002516:	2200      	movs	r2, #0
 8002518:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800251a:	4b2c      	ldr	r3, [pc, #176]	; (80025cc <HAL_UART_MspInit+0x144>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002520:	4b2a      	ldr	r3, [pc, #168]	; (80025cc <HAL_UART_MspInit+0x144>)
 8002522:	2280      	movs	r2, #128	; 0x80
 8002524:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002526:	4b29      	ldr	r3, [pc, #164]	; (80025cc <HAL_UART_MspInit+0x144>)
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800252c:	4b27      	ldr	r3, [pc, #156]	; (80025cc <HAL_UART_MspInit+0x144>)
 800252e:	2200      	movs	r2, #0
 8002530:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002532:	4b26      	ldr	r3, [pc, #152]	; (80025cc <HAL_UART_MspInit+0x144>)
 8002534:	2200      	movs	r2, #0
 8002536:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002538:	4b24      	ldr	r3, [pc, #144]	; (80025cc <HAL_UART_MspInit+0x144>)
 800253a:	2200      	movs	r2, #0
 800253c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800253e:	4823      	ldr	r0, [pc, #140]	; (80025cc <HAL_UART_MspInit+0x144>)
 8002540:	f000 fa06 	bl	8002950 <HAL_DMA_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800254a:	f7ff f890 	bl	800166e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a1e      	ldr	r2, [pc, #120]	; (80025cc <HAL_UART_MspInit+0x144>)
 8002552:	63da      	str	r2, [r3, #60]	; 0x3c
 8002554:	4a1d      	ldr	r2, [pc, #116]	; (80025cc <HAL_UART_MspInit+0x144>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800255a:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <HAL_UART_MspInit+0x14c>)
 800255c:	4a1e      	ldr	r2, [pc, #120]	; (80025d8 <HAL_UART_MspInit+0x150>)
 800255e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002560:	4b1c      	ldr	r3, [pc, #112]	; (80025d4 <HAL_UART_MspInit+0x14c>)
 8002562:	2210      	movs	r2, #16
 8002564:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002566:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <HAL_UART_MspInit+0x14c>)
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800256c:	4b19      	ldr	r3, [pc, #100]	; (80025d4 <HAL_UART_MspInit+0x14c>)
 800256e:	2280      	movs	r2, #128	; 0x80
 8002570:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002572:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <HAL_UART_MspInit+0x14c>)
 8002574:	2200      	movs	r2, #0
 8002576:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002578:	4b16      	ldr	r3, [pc, #88]	; (80025d4 <HAL_UART_MspInit+0x14c>)
 800257a:	2200      	movs	r2, #0
 800257c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800257e:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <HAL_UART_MspInit+0x14c>)
 8002580:	2200      	movs	r2, #0
 8002582:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002584:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <HAL_UART_MspInit+0x14c>)
 8002586:	2200      	movs	r2, #0
 8002588:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800258a:	4812      	ldr	r0, [pc, #72]	; (80025d4 <HAL_UART_MspInit+0x14c>)
 800258c:	f000 f9e0 	bl	8002950 <HAL_DMA_Init>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8002596:	f7ff f86a 	bl	800166e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a0d      	ldr	r2, [pc, #52]	; (80025d4 <HAL_UART_MspInit+0x14c>)
 800259e:	639a      	str	r2, [r3, #56]	; 0x38
 80025a0:	4a0c      	ldr	r2, [pc, #48]	; (80025d4 <HAL_UART_MspInit+0x14c>)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025a6:	2200      	movs	r2, #0
 80025a8:	2100      	movs	r1, #0
 80025aa:	2025      	movs	r0, #37	; 0x25
 80025ac:	f000 f999 	bl	80028e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025b0:	2025      	movs	r0, #37	; 0x25
 80025b2:	f000 f9b2 	bl	800291a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80025b6:	bf00      	nop
 80025b8:	3720      	adds	r7, #32
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40013800 	.word	0x40013800
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40010800 	.word	0x40010800
 80025cc:	20000818 	.word	0x20000818
 80025d0:	40020058 	.word	0x40020058
 80025d4:	2000085c 	.word	0x2000085c
 80025d8:	40020044 	.word	0x40020044

080025dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025dc:	f7ff fe02 	bl	80021e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025e0:	480b      	ldr	r0, [pc, #44]	; (8002610 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80025e2:	490c      	ldr	r1, [pc, #48]	; (8002614 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80025e4:	4a0c      	ldr	r2, [pc, #48]	; (8002618 <LoopFillZerobss+0x16>)
  movs r3, #0
 80025e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025e8:	e002      	b.n	80025f0 <LoopCopyDataInit>

080025ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ee:	3304      	adds	r3, #4

080025f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025f4:	d3f9      	bcc.n	80025ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025f6:	4a09      	ldr	r2, [pc, #36]	; (800261c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80025f8:	4c09      	ldr	r4, [pc, #36]	; (8002620 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025fc:	e001      	b.n	8002602 <LoopFillZerobss>

080025fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002600:	3204      	adds	r2, #4

08002602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002604:	d3fb      	bcc.n	80025fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002606:	f006 fe9d 	bl	8009344 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800260a:	f7fe ff53 	bl	80014b4 <main>
  bx lr
 800260e:	4770      	bx	lr
  ldr r0, =_sdata
 8002610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002614:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002618:	0800fd68 	.word	0x0800fd68
  ldr r2, =_sbss
 800261c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002620:	200009f0 	.word	0x200009f0

08002624 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002624:	e7fe      	b.n	8002624 <ADC1_2_IRQHandler>
	...

08002628 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <HAL_Init+0x28>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a07      	ldr	r2, [pc, #28]	; (8002650 <HAL_Init+0x28>)
 8002632:	f043 0310 	orr.w	r3, r3, #16
 8002636:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002638:	2003      	movs	r0, #3
 800263a:	f000 f947 	bl	80028cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800263e:	2000      	movs	r0, #0
 8002640:	f000 f808 	bl	8002654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002644:	f7ff fbac 	bl	8001da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40022000 	.word	0x40022000

08002654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800265c:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_InitTick+0x54>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_InitTick+0x58>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	4619      	mov	r1, r3
 8002666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800266a:	fbb3 f3f1 	udiv	r3, r3, r1
 800266e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002672:	4618      	mov	r0, r3
 8002674:	f000 f95f 	bl	8002936 <HAL_SYSTICK_Config>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e00e      	b.n	80026a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b0f      	cmp	r3, #15
 8002686:	d80a      	bhi.n	800269e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002688:	2200      	movs	r2, #0
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	f04f 30ff 	mov.w	r0, #4294967295
 8002690:	f000 f927 	bl	80028e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002694:	4a06      	ldr	r2, [pc, #24]	; (80026b0 <HAL_InitTick+0x5c>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	e000      	b.n	80026a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000028 	.word	0x20000028
 80026ac:	20000030 	.word	0x20000030
 80026b0:	2000002c 	.word	0x2000002c

080026b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <HAL_IncTick+0x1c>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <HAL_IncTick+0x20>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4413      	add	r3, r2
 80026c4:	4a03      	ldr	r2, [pc, #12]	; (80026d4 <HAL_IncTick+0x20>)
 80026c6:	6013      	str	r3, [r2, #0]
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr
 80026d0:	20000030 	.word	0x20000030
 80026d4:	200008a0 	.word	0x200008a0

080026d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return uwTick;
 80026dc:	4b02      	ldr	r3, [pc, #8]	; (80026e8 <HAL_GetTick+0x10>)
 80026de:	681b      	ldr	r3, [r3, #0]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr
 80026e8:	200008a0 	.word	0x200008a0

080026ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026f4:	f7ff fff0 	bl	80026d8 <HAL_GetTick>
 80026f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002704:	d005      	beq.n	8002712 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <HAL_Delay+0x44>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4413      	add	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002712:	bf00      	nop
 8002714:	f7ff ffe0 	bl	80026d8 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	429a      	cmp	r2, r3
 8002722:	d8f7      	bhi.n	8002714 <HAL_Delay+0x28>
  {
  }
}
 8002724:	bf00      	nop
 8002726:	bf00      	nop
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20000030 	.word	0x20000030

08002734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <__NVIC_SetPriorityGrouping+0x44>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002750:	4013      	ands	r3, r2
 8002752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800275c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002766:	4a04      	ldr	r2, [pc, #16]	; (8002778 <__NVIC_SetPriorityGrouping+0x44>)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	60d3      	str	r3, [r2, #12]
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002780:	4b04      	ldr	r3, [pc, #16]	; (8002794 <__NVIC_GetPriorityGrouping+0x18>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	0a1b      	lsrs	r3, r3, #8
 8002786:	f003 0307 	and.w	r3, r3, #7
}
 800278a:	4618      	mov	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	db0b      	blt.n	80027c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	f003 021f 	and.w	r2, r3, #31
 80027b0:	4906      	ldr	r1, [pc, #24]	; (80027cc <__NVIC_EnableIRQ+0x34>)
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	2001      	movs	r0, #1
 80027ba:	fa00 f202 	lsl.w	r2, r0, r2
 80027be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	e000e100 	.word	0xe000e100

080027d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	6039      	str	r1, [r7, #0]
 80027da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	db0a      	blt.n	80027fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	490c      	ldr	r1, [pc, #48]	; (800281c <__NVIC_SetPriority+0x4c>)
 80027ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ee:	0112      	lsls	r2, r2, #4
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	440b      	add	r3, r1
 80027f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f8:	e00a      	b.n	8002810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	4908      	ldr	r1, [pc, #32]	; (8002820 <__NVIC_SetPriority+0x50>)
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	3b04      	subs	r3, #4
 8002808:	0112      	lsls	r2, r2, #4
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	440b      	add	r3, r1
 800280e:	761a      	strb	r2, [r3, #24]
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	e000e100 	.word	0xe000e100
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002824:	b480      	push	{r7}
 8002826:	b089      	sub	sp, #36	; 0x24
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f1c3 0307 	rsb	r3, r3, #7
 800283e:	2b04      	cmp	r3, #4
 8002840:	bf28      	it	cs
 8002842:	2304      	movcs	r3, #4
 8002844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3304      	adds	r3, #4
 800284a:	2b06      	cmp	r3, #6
 800284c:	d902      	bls.n	8002854 <NVIC_EncodePriority+0x30>
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3b03      	subs	r3, #3
 8002852:	e000      	b.n	8002856 <NVIC_EncodePriority+0x32>
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002858:	f04f 32ff 	mov.w	r2, #4294967295
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43da      	mvns	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	401a      	ands	r2, r3
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800286c:	f04f 31ff 	mov.w	r1, #4294967295
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	fa01 f303 	lsl.w	r3, r1, r3
 8002876:	43d9      	mvns	r1, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800287c:	4313      	orrs	r3, r2
         );
}
 800287e:	4618      	mov	r0, r3
 8002880:	3724      	adds	r7, #36	; 0x24
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3b01      	subs	r3, #1
 8002894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002898:	d301      	bcc.n	800289e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800289a:	2301      	movs	r3, #1
 800289c:	e00f      	b.n	80028be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800289e:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <SysTick_Config+0x40>)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028a6:	210f      	movs	r1, #15
 80028a8:	f04f 30ff 	mov.w	r0, #4294967295
 80028ac:	f7ff ff90 	bl	80027d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <SysTick_Config+0x40>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028b6:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <SysTick_Config+0x40>)
 80028b8:	2207      	movs	r2, #7
 80028ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	e000e010 	.word	0xe000e010

080028cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ff2d 	bl	8002734 <__NVIC_SetPriorityGrouping>
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b086      	sub	sp, #24
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	4603      	mov	r3, r0
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028f4:	f7ff ff42 	bl	800277c <__NVIC_GetPriorityGrouping>
 80028f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	6978      	ldr	r0, [r7, #20]
 8002900:	f7ff ff90 	bl	8002824 <NVIC_EncodePriority>
 8002904:	4602      	mov	r2, r0
 8002906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff5f 	bl	80027d0 <__NVIC_SetPriority>
}
 8002912:	bf00      	nop
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	4603      	mov	r3, r0
 8002922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff ff35 	bl	8002798 <__NVIC_EnableIRQ>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff ffa2 	bl	8002888 <SysTick_Config>
 8002944:	4603      	mov	r3, r0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e043      	b.n	80029ee <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	4b22      	ldr	r3, [pc, #136]	; (80029f8 <HAL_DMA_Init+0xa8>)
 800296e:	4413      	add	r3, r2
 8002970:	4a22      	ldr	r2, [pc, #136]	; (80029fc <HAL_DMA_Init+0xac>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	091b      	lsrs	r3, r3, #4
 8002978:	009a      	lsls	r2, r3, #2
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a1f      	ldr	r2, [pc, #124]	; (8002a00 <HAL_DMA_Init+0xb0>)
 8002982:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800299a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800299e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80029a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr
 80029f8:	bffdfff8 	.word	0xbffdfff8
 80029fc:	cccccccd 	.word	0xcccccccd
 8002a00:	40020000 	.word	0x40020000

08002a04 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_DMA_Start_IT+0x20>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e04b      	b.n	8002abc <HAL_DMA_Start_IT+0xb8>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d13a      	bne.n	8002aae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0201 	bic.w	r2, r2, #1
 8002a54:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	68b9      	ldr	r1, [r7, #8]
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 f9f8 	bl	8002e52 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d008      	beq.n	8002a7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f042 020e 	orr.w	r2, r2, #14
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	e00f      	b.n	8002a9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0204 	bic.w	r2, r2, #4
 8002a8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 020a 	orr.w	r2, r2, #10
 8002a9a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0201 	orr.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	e005      	b.n	8002aba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d008      	beq.n	8002aee <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2204      	movs	r2, #4
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e020      	b.n	8002b30 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 020e 	bic.w	r2, r2, #14
 8002afc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0201 	bic.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b16:	2101      	movs	r1, #1
 8002b18:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr
	...

08002b3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d005      	beq.n	8002b60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2204      	movs	r2, #4
 8002b58:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
 8002b5e:	e051      	b.n	8002c04 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 020e 	bic.w	r2, r2, #14
 8002b6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a22      	ldr	r2, [pc, #136]	; (8002c10 <HAL_DMA_Abort_IT+0xd4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d029      	beq.n	8002bde <HAL_DMA_Abort_IT+0xa2>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a21      	ldr	r2, [pc, #132]	; (8002c14 <HAL_DMA_Abort_IT+0xd8>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d022      	beq.n	8002bda <HAL_DMA_Abort_IT+0x9e>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a1f      	ldr	r2, [pc, #124]	; (8002c18 <HAL_DMA_Abort_IT+0xdc>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d01a      	beq.n	8002bd4 <HAL_DMA_Abort_IT+0x98>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a1e      	ldr	r2, [pc, #120]	; (8002c1c <HAL_DMA_Abort_IT+0xe0>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d012      	beq.n	8002bce <HAL_DMA_Abort_IT+0x92>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a1c      	ldr	r2, [pc, #112]	; (8002c20 <HAL_DMA_Abort_IT+0xe4>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d00a      	beq.n	8002bc8 <HAL_DMA_Abort_IT+0x8c>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a1b      	ldr	r2, [pc, #108]	; (8002c24 <HAL_DMA_Abort_IT+0xe8>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d102      	bne.n	8002bc2 <HAL_DMA_Abort_IT+0x86>
 8002bbc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bc0:	e00e      	b.n	8002be0 <HAL_DMA_Abort_IT+0xa4>
 8002bc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bc6:	e00b      	b.n	8002be0 <HAL_DMA_Abort_IT+0xa4>
 8002bc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bcc:	e008      	b.n	8002be0 <HAL_DMA_Abort_IT+0xa4>
 8002bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bd2:	e005      	b.n	8002be0 <HAL_DMA_Abort_IT+0xa4>
 8002bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bd8:	e002      	b.n	8002be0 <HAL_DMA_Abort_IT+0xa4>
 8002bda:	2310      	movs	r3, #16
 8002bdc:	e000      	b.n	8002be0 <HAL_DMA_Abort_IT+0xa4>
 8002bde:	2301      	movs	r3, #1
 8002be0:	4a11      	ldr	r2, [pc, #68]	; (8002c28 <HAL_DMA_Abort_IT+0xec>)
 8002be2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	4798      	blx	r3
    } 
  }
  return status;
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40020008 	.word	0x40020008
 8002c14:	4002001c 	.word	0x4002001c
 8002c18:	40020030 	.word	0x40020030
 8002c1c:	40020044 	.word	0x40020044
 8002c20:	40020058 	.word	0x40020058
 8002c24:	4002006c 	.word	0x4002006c
 8002c28:	40020000 	.word	0x40020000

08002c2c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	2204      	movs	r2, #4
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d04f      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0xc8>
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f003 0304 	and.w	r3, r3, #4
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d04a      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0320 	and.w	r3, r3, #32
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d107      	bne.n	8002c7c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0204 	bic.w	r2, r2, #4
 8002c7a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a66      	ldr	r2, [pc, #408]	; (8002e1c <HAL_DMA_IRQHandler+0x1f0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d029      	beq.n	8002cda <HAL_DMA_IRQHandler+0xae>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a65      	ldr	r2, [pc, #404]	; (8002e20 <HAL_DMA_IRQHandler+0x1f4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d022      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0xaa>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a63      	ldr	r2, [pc, #396]	; (8002e24 <HAL_DMA_IRQHandler+0x1f8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d01a      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0xa4>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a62      	ldr	r2, [pc, #392]	; (8002e28 <HAL_DMA_IRQHandler+0x1fc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d012      	beq.n	8002cca <HAL_DMA_IRQHandler+0x9e>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a60      	ldr	r2, [pc, #384]	; (8002e2c <HAL_DMA_IRQHandler+0x200>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d00a      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0x98>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a5f      	ldr	r2, [pc, #380]	; (8002e30 <HAL_DMA_IRQHandler+0x204>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d102      	bne.n	8002cbe <HAL_DMA_IRQHandler+0x92>
 8002cb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cbc:	e00e      	b.n	8002cdc <HAL_DMA_IRQHandler+0xb0>
 8002cbe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002cc2:	e00b      	b.n	8002cdc <HAL_DMA_IRQHandler+0xb0>
 8002cc4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002cc8:	e008      	b.n	8002cdc <HAL_DMA_IRQHandler+0xb0>
 8002cca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cce:	e005      	b.n	8002cdc <HAL_DMA_IRQHandler+0xb0>
 8002cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cd4:	e002      	b.n	8002cdc <HAL_DMA_IRQHandler+0xb0>
 8002cd6:	2340      	movs	r3, #64	; 0x40
 8002cd8:	e000      	b.n	8002cdc <HAL_DMA_IRQHandler+0xb0>
 8002cda:	2304      	movs	r3, #4
 8002cdc:	4a55      	ldr	r2, [pc, #340]	; (8002e34 <HAL_DMA_IRQHandler+0x208>)
 8002cde:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 8094 	beq.w	8002e12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002cf2:	e08e      	b.n	8002e12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d056      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x186>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d051      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0320 	and.w	r3, r3, #32
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10b      	bne.n	8002d34 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 020a 	bic.w	r2, r2, #10
 8002d2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a38      	ldr	r2, [pc, #224]	; (8002e1c <HAL_DMA_IRQHandler+0x1f0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d029      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x166>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a37      	ldr	r2, [pc, #220]	; (8002e20 <HAL_DMA_IRQHandler+0x1f4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d022      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x162>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a35      	ldr	r2, [pc, #212]	; (8002e24 <HAL_DMA_IRQHandler+0x1f8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d01a      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x15c>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a34      	ldr	r2, [pc, #208]	; (8002e28 <HAL_DMA_IRQHandler+0x1fc>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d012      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x156>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a32      	ldr	r2, [pc, #200]	; (8002e2c <HAL_DMA_IRQHandler+0x200>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00a      	beq.n	8002d7c <HAL_DMA_IRQHandler+0x150>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a31      	ldr	r2, [pc, #196]	; (8002e30 <HAL_DMA_IRQHandler+0x204>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d102      	bne.n	8002d76 <HAL_DMA_IRQHandler+0x14a>
 8002d70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d74:	e00e      	b.n	8002d94 <HAL_DMA_IRQHandler+0x168>
 8002d76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d7a:	e00b      	b.n	8002d94 <HAL_DMA_IRQHandler+0x168>
 8002d7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d80:	e008      	b.n	8002d94 <HAL_DMA_IRQHandler+0x168>
 8002d82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d86:	e005      	b.n	8002d94 <HAL_DMA_IRQHandler+0x168>
 8002d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d8c:	e002      	b.n	8002d94 <HAL_DMA_IRQHandler+0x168>
 8002d8e:	2320      	movs	r3, #32
 8002d90:	e000      	b.n	8002d94 <HAL_DMA_IRQHandler+0x168>
 8002d92:	2302      	movs	r3, #2
 8002d94:	4a27      	ldr	r2, [pc, #156]	; (8002e34 <HAL_DMA_IRQHandler+0x208>)
 8002d96:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d034      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002db0:	e02f      	b.n	8002e12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	2208      	movs	r2, #8
 8002db8:	409a      	lsls	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d028      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x1e8>
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d023      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 020e 	bic.w	r2, r2, #14
 8002dda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de4:	2101      	movs	r1, #1
 8002de6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d004      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	4798      	blx	r3
    }
  }
  return;
 8002e12:	bf00      	nop
 8002e14:	bf00      	nop
}
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40020008 	.word	0x40020008
 8002e20:	4002001c 	.word	0x4002001c
 8002e24:	40020030 	.word	0x40020030
 8002e28:	40020044 	.word	0x40020044
 8002e2c:	40020058 	.word	0x40020058
 8002e30:	4002006c 	.word	0x4002006c
 8002e34:	40020000 	.word	0x40020000

08002e38 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e46:	b2db      	uxtb	r3, r3
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr

08002e52 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b085      	sub	sp, #20
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e68:	2101      	movs	r1, #1
 8002e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b10      	cmp	r3, #16
 8002e7e:	d108      	bne.n	8002e92 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e90:	e007      	b.n	8002ea2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	60da      	str	r2, [r3, #12]
}
 8002ea2:	bf00      	nop
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b08b      	sub	sp, #44	; 0x2c
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ebe:	e169      	b.n	8003194 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	f040 8158 	bne.w	800318e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	4a9a      	ldr	r2, [pc, #616]	; (800314c <HAL_GPIO_Init+0x2a0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d05e      	beq.n	8002fa6 <HAL_GPIO_Init+0xfa>
 8002ee8:	4a98      	ldr	r2, [pc, #608]	; (800314c <HAL_GPIO_Init+0x2a0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d875      	bhi.n	8002fda <HAL_GPIO_Init+0x12e>
 8002eee:	4a98      	ldr	r2, [pc, #608]	; (8003150 <HAL_GPIO_Init+0x2a4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d058      	beq.n	8002fa6 <HAL_GPIO_Init+0xfa>
 8002ef4:	4a96      	ldr	r2, [pc, #600]	; (8003150 <HAL_GPIO_Init+0x2a4>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d86f      	bhi.n	8002fda <HAL_GPIO_Init+0x12e>
 8002efa:	4a96      	ldr	r2, [pc, #600]	; (8003154 <HAL_GPIO_Init+0x2a8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d052      	beq.n	8002fa6 <HAL_GPIO_Init+0xfa>
 8002f00:	4a94      	ldr	r2, [pc, #592]	; (8003154 <HAL_GPIO_Init+0x2a8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d869      	bhi.n	8002fda <HAL_GPIO_Init+0x12e>
 8002f06:	4a94      	ldr	r2, [pc, #592]	; (8003158 <HAL_GPIO_Init+0x2ac>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d04c      	beq.n	8002fa6 <HAL_GPIO_Init+0xfa>
 8002f0c:	4a92      	ldr	r2, [pc, #584]	; (8003158 <HAL_GPIO_Init+0x2ac>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d863      	bhi.n	8002fda <HAL_GPIO_Init+0x12e>
 8002f12:	4a92      	ldr	r2, [pc, #584]	; (800315c <HAL_GPIO_Init+0x2b0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d046      	beq.n	8002fa6 <HAL_GPIO_Init+0xfa>
 8002f18:	4a90      	ldr	r2, [pc, #576]	; (800315c <HAL_GPIO_Init+0x2b0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d85d      	bhi.n	8002fda <HAL_GPIO_Init+0x12e>
 8002f1e:	2b12      	cmp	r3, #18
 8002f20:	d82a      	bhi.n	8002f78 <HAL_GPIO_Init+0xcc>
 8002f22:	2b12      	cmp	r3, #18
 8002f24:	d859      	bhi.n	8002fda <HAL_GPIO_Init+0x12e>
 8002f26:	a201      	add	r2, pc, #4	; (adr r2, 8002f2c <HAL_GPIO_Init+0x80>)
 8002f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2c:	08002fa7 	.word	0x08002fa7
 8002f30:	08002f81 	.word	0x08002f81
 8002f34:	08002f93 	.word	0x08002f93
 8002f38:	08002fd5 	.word	0x08002fd5
 8002f3c:	08002fdb 	.word	0x08002fdb
 8002f40:	08002fdb 	.word	0x08002fdb
 8002f44:	08002fdb 	.word	0x08002fdb
 8002f48:	08002fdb 	.word	0x08002fdb
 8002f4c:	08002fdb 	.word	0x08002fdb
 8002f50:	08002fdb 	.word	0x08002fdb
 8002f54:	08002fdb 	.word	0x08002fdb
 8002f58:	08002fdb 	.word	0x08002fdb
 8002f5c:	08002fdb 	.word	0x08002fdb
 8002f60:	08002fdb 	.word	0x08002fdb
 8002f64:	08002fdb 	.word	0x08002fdb
 8002f68:	08002fdb 	.word	0x08002fdb
 8002f6c:	08002fdb 	.word	0x08002fdb
 8002f70:	08002f89 	.word	0x08002f89
 8002f74:	08002f9d 	.word	0x08002f9d
 8002f78:	4a79      	ldr	r2, [pc, #484]	; (8003160 <HAL_GPIO_Init+0x2b4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d013      	beq.n	8002fa6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f7e:	e02c      	b.n	8002fda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	623b      	str	r3, [r7, #32]
          break;
 8002f86:	e029      	b.n	8002fdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	623b      	str	r3, [r7, #32]
          break;
 8002f90:	e024      	b.n	8002fdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	3308      	adds	r3, #8
 8002f98:	623b      	str	r3, [r7, #32]
          break;
 8002f9a:	e01f      	b.n	8002fdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	330c      	adds	r3, #12
 8002fa2:	623b      	str	r3, [r7, #32]
          break;
 8002fa4:	e01a      	b.n	8002fdc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d102      	bne.n	8002fb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fae:	2304      	movs	r3, #4
 8002fb0:	623b      	str	r3, [r7, #32]
          break;
 8002fb2:	e013      	b.n	8002fdc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d105      	bne.n	8002fc8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fbc:	2308      	movs	r3, #8
 8002fbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69fa      	ldr	r2, [r7, #28]
 8002fc4:	611a      	str	r2, [r3, #16]
          break;
 8002fc6:	e009      	b.n	8002fdc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fc8:	2308      	movs	r3, #8
 8002fca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69fa      	ldr	r2, [r7, #28]
 8002fd0:	615a      	str	r2, [r3, #20]
          break;
 8002fd2:	e003      	b.n	8002fdc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	623b      	str	r3, [r7, #32]
          break;
 8002fd8:	e000      	b.n	8002fdc <HAL_GPIO_Init+0x130>
          break;
 8002fda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	2bff      	cmp	r3, #255	; 0xff
 8002fe0:	d801      	bhi.n	8002fe6 <HAL_GPIO_Init+0x13a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	e001      	b.n	8002fea <HAL_GPIO_Init+0x13e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	2bff      	cmp	r3, #255	; 0xff
 8002ff0:	d802      	bhi.n	8002ff8 <HAL_GPIO_Init+0x14c>
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	e002      	b.n	8002ffe <HAL_GPIO_Init+0x152>
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	3b08      	subs	r3, #8
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	210f      	movs	r1, #15
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	fa01 f303 	lsl.w	r3, r1, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	401a      	ands	r2, r3
 8003010:	6a39      	ldr	r1, [r7, #32]
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	fa01 f303 	lsl.w	r3, r1, r3
 8003018:	431a      	orrs	r2, r3
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 80b1 	beq.w	800318e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800302c:	4b4d      	ldr	r3, [pc, #308]	; (8003164 <HAL_GPIO_Init+0x2b8>)
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	4a4c      	ldr	r2, [pc, #304]	; (8003164 <HAL_GPIO_Init+0x2b8>)
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	6193      	str	r3, [r2, #24]
 8003038:	4b4a      	ldr	r3, [pc, #296]	; (8003164 <HAL_GPIO_Init+0x2b8>)
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003044:	4a48      	ldr	r2, [pc, #288]	; (8003168 <HAL_GPIO_Init+0x2bc>)
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	089b      	lsrs	r3, r3, #2
 800304a:	3302      	adds	r3, #2
 800304c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003050:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	f003 0303 	and.w	r3, r3, #3
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	220f      	movs	r2, #15
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4013      	ands	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a40      	ldr	r2, [pc, #256]	; (800316c <HAL_GPIO_Init+0x2c0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d013      	beq.n	8003098 <HAL_GPIO_Init+0x1ec>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a3f      	ldr	r2, [pc, #252]	; (8003170 <HAL_GPIO_Init+0x2c4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d00d      	beq.n	8003094 <HAL_GPIO_Init+0x1e8>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a3e      	ldr	r2, [pc, #248]	; (8003174 <HAL_GPIO_Init+0x2c8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d007      	beq.n	8003090 <HAL_GPIO_Init+0x1e4>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a3d      	ldr	r2, [pc, #244]	; (8003178 <HAL_GPIO_Init+0x2cc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d101      	bne.n	800308c <HAL_GPIO_Init+0x1e0>
 8003088:	2303      	movs	r3, #3
 800308a:	e006      	b.n	800309a <HAL_GPIO_Init+0x1ee>
 800308c:	2304      	movs	r3, #4
 800308e:	e004      	b.n	800309a <HAL_GPIO_Init+0x1ee>
 8003090:	2302      	movs	r3, #2
 8003092:	e002      	b.n	800309a <HAL_GPIO_Init+0x1ee>
 8003094:	2301      	movs	r3, #1
 8003096:	e000      	b.n	800309a <HAL_GPIO_Init+0x1ee>
 8003098:	2300      	movs	r3, #0
 800309a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800309c:	f002 0203 	and.w	r2, r2, #3
 80030a0:	0092      	lsls	r2, r2, #2
 80030a2:	4093      	lsls	r3, r2
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030aa:	492f      	ldr	r1, [pc, #188]	; (8003168 <HAL_GPIO_Init+0x2bc>)
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	089b      	lsrs	r3, r3, #2
 80030b0:	3302      	adds	r3, #2
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d006      	beq.n	80030d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030c4:	4b2d      	ldr	r3, [pc, #180]	; (800317c <HAL_GPIO_Init+0x2d0>)
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	492c      	ldr	r1, [pc, #176]	; (800317c <HAL_GPIO_Init+0x2d0>)
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	608b      	str	r3, [r1, #8]
 80030d0:	e006      	b.n	80030e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030d2:	4b2a      	ldr	r3, [pc, #168]	; (800317c <HAL_GPIO_Init+0x2d0>)
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	43db      	mvns	r3, r3
 80030da:	4928      	ldr	r1, [pc, #160]	; (800317c <HAL_GPIO_Init+0x2d0>)
 80030dc:	4013      	ands	r3, r2
 80030de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d006      	beq.n	80030fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030ec:	4b23      	ldr	r3, [pc, #140]	; (800317c <HAL_GPIO_Init+0x2d0>)
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	4922      	ldr	r1, [pc, #136]	; (800317c <HAL_GPIO_Init+0x2d0>)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60cb      	str	r3, [r1, #12]
 80030f8:	e006      	b.n	8003108 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030fa:	4b20      	ldr	r3, [pc, #128]	; (800317c <HAL_GPIO_Init+0x2d0>)
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	43db      	mvns	r3, r3
 8003102:	491e      	ldr	r1, [pc, #120]	; (800317c <HAL_GPIO_Init+0x2d0>)
 8003104:	4013      	ands	r3, r2
 8003106:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d006      	beq.n	8003122 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003114:	4b19      	ldr	r3, [pc, #100]	; (800317c <HAL_GPIO_Init+0x2d0>)
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	4918      	ldr	r1, [pc, #96]	; (800317c <HAL_GPIO_Init+0x2d0>)
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	4313      	orrs	r3, r2
 800311e:	604b      	str	r3, [r1, #4]
 8003120:	e006      	b.n	8003130 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003122:	4b16      	ldr	r3, [pc, #88]	; (800317c <HAL_GPIO_Init+0x2d0>)
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	43db      	mvns	r3, r3
 800312a:	4914      	ldr	r1, [pc, #80]	; (800317c <HAL_GPIO_Init+0x2d0>)
 800312c:	4013      	ands	r3, r2
 800312e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d021      	beq.n	8003180 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800313c:	4b0f      	ldr	r3, [pc, #60]	; (800317c <HAL_GPIO_Init+0x2d0>)
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	490e      	ldr	r1, [pc, #56]	; (800317c <HAL_GPIO_Init+0x2d0>)
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	4313      	orrs	r3, r2
 8003146:	600b      	str	r3, [r1, #0]
 8003148:	e021      	b.n	800318e <HAL_GPIO_Init+0x2e2>
 800314a:	bf00      	nop
 800314c:	10320000 	.word	0x10320000
 8003150:	10310000 	.word	0x10310000
 8003154:	10220000 	.word	0x10220000
 8003158:	10210000 	.word	0x10210000
 800315c:	10120000 	.word	0x10120000
 8003160:	10110000 	.word	0x10110000
 8003164:	40021000 	.word	0x40021000
 8003168:	40010000 	.word	0x40010000
 800316c:	40010800 	.word	0x40010800
 8003170:	40010c00 	.word	0x40010c00
 8003174:	40011000 	.word	0x40011000
 8003178:	40011400 	.word	0x40011400
 800317c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <HAL_GPIO_Init+0x304>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	43db      	mvns	r3, r3
 8003188:	4909      	ldr	r1, [pc, #36]	; (80031b0 <HAL_GPIO_Init+0x304>)
 800318a:	4013      	ands	r3, r2
 800318c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	3301      	adds	r3, #1
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	fa22 f303 	lsr.w	r3, r2, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f47f ae8e 	bne.w	8002ec0 <HAL_GPIO_Init+0x14>
  }
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	372c      	adds	r7, #44	; 0x2c
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr
 80031b0:	40010400 	.word	0x40010400

080031b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	887b      	ldrh	r3, [r7, #2]
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031cc:	2301      	movs	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
 80031d0:	e001      	b.n	80031d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031d2:	2300      	movs	r3, #0
 80031d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr
	...

080031e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031ee:	4b08      	ldr	r3, [pc, #32]	; (8003210 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031f0:	695a      	ldr	r2, [r3, #20]
 80031f2:	88fb      	ldrh	r3, [r7, #6]
 80031f4:	4013      	ands	r3, r2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d006      	beq.n	8003208 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031fa:	4a05      	ldr	r2, [pc, #20]	; (8003210 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003200:	88fb      	ldrh	r3, [r7, #6]
 8003202:	4618      	mov	r0, r3
 8003204:	f000 f806 	bl	8003214 <HAL_GPIO_EXTI_Callback>
  }
}
 8003208:	bf00      	nop
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40010400 	.word	0x40010400

08003214 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	4603      	mov	r3, r0
 800321c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr

08003228 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e12b      	b.n	8003492 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d106      	bne.n	8003254 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7fd ff96 	bl	8001180 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2224      	movs	r2, #36	; 0x24
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0201 	bic.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800327a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800328a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800328c:	f003 f89c 	bl	80063c8 <HAL_RCC_GetPCLK1Freq>
 8003290:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4a81      	ldr	r2, [pc, #516]	; (800349c <HAL_I2C_Init+0x274>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d807      	bhi.n	80032ac <HAL_I2C_Init+0x84>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4a80      	ldr	r2, [pc, #512]	; (80034a0 <HAL_I2C_Init+0x278>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	bf94      	ite	ls
 80032a4:	2301      	movls	r3, #1
 80032a6:	2300      	movhi	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	e006      	b.n	80032ba <HAL_I2C_Init+0x92>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4a7d      	ldr	r2, [pc, #500]	; (80034a4 <HAL_I2C_Init+0x27c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	bf94      	ite	ls
 80032b4:	2301      	movls	r3, #1
 80032b6:	2300      	movhi	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e0e7      	b.n	8003492 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4a78      	ldr	r2, [pc, #480]	; (80034a8 <HAL_I2C_Init+0x280>)
 80032c6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ca:	0c9b      	lsrs	r3, r3, #18
 80032cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	430a      	orrs	r2, r1
 80032e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	4a6a      	ldr	r2, [pc, #424]	; (800349c <HAL_I2C_Init+0x274>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d802      	bhi.n	80032fc <HAL_I2C_Init+0xd4>
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	3301      	adds	r3, #1
 80032fa:	e009      	b.n	8003310 <HAL_I2C_Init+0xe8>
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003302:	fb02 f303 	mul.w	r3, r2, r3
 8003306:	4a69      	ldr	r2, [pc, #420]	; (80034ac <HAL_I2C_Init+0x284>)
 8003308:	fba2 2303 	umull	r2, r3, r2, r3
 800330c:	099b      	lsrs	r3, r3, #6
 800330e:	3301      	adds	r3, #1
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	430b      	orrs	r3, r1
 8003316:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003322:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	495c      	ldr	r1, [pc, #368]	; (800349c <HAL_I2C_Init+0x274>)
 800332c:	428b      	cmp	r3, r1
 800332e:	d819      	bhi.n	8003364 <HAL_I2C_Init+0x13c>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	1e59      	subs	r1, r3, #1
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	fbb1 f3f3 	udiv	r3, r1, r3
 800333e:	1c59      	adds	r1, r3, #1
 8003340:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003344:	400b      	ands	r3, r1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <HAL_I2C_Init+0x138>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1e59      	subs	r1, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	fbb1 f3f3 	udiv	r3, r1, r3
 8003358:	3301      	adds	r3, #1
 800335a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800335e:	e051      	b.n	8003404 <HAL_I2C_Init+0x1dc>
 8003360:	2304      	movs	r3, #4
 8003362:	e04f      	b.n	8003404 <HAL_I2C_Init+0x1dc>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d111      	bne.n	8003390 <HAL_I2C_Init+0x168>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1e58      	subs	r0, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6859      	ldr	r1, [r3, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	440b      	add	r3, r1
 800337a:	fbb0 f3f3 	udiv	r3, r0, r3
 800337e:	3301      	adds	r3, #1
 8003380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003384:	2b00      	cmp	r3, #0
 8003386:	bf0c      	ite	eq
 8003388:	2301      	moveq	r3, #1
 800338a:	2300      	movne	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	e012      	b.n	80033b6 <HAL_I2C_Init+0x18e>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	1e58      	subs	r0, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6859      	ldr	r1, [r3, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	0099      	lsls	r1, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033a6:	3301      	adds	r3, #1
 80033a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	bf0c      	ite	eq
 80033b0:	2301      	moveq	r3, #1
 80033b2:	2300      	movne	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_I2C_Init+0x196>
 80033ba:	2301      	movs	r3, #1
 80033bc:	e022      	b.n	8003404 <HAL_I2C_Init+0x1dc>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10e      	bne.n	80033e4 <HAL_I2C_Init+0x1bc>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1e58      	subs	r0, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6859      	ldr	r1, [r3, #4]
 80033ce:	460b      	mov	r3, r1
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	440b      	add	r3, r1
 80033d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80033d8:	3301      	adds	r3, #1
 80033da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e2:	e00f      	b.n	8003404 <HAL_I2C_Init+0x1dc>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	1e58      	subs	r0, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6859      	ldr	r1, [r3, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	0099      	lsls	r1, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033fa:	3301      	adds	r3, #1
 80033fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003400:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	6809      	ldr	r1, [r1, #0]
 8003408:	4313      	orrs	r3, r2
 800340a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69da      	ldr	r2, [r3, #28]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003432:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6911      	ldr	r1, [r2, #16]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	68d2      	ldr	r2, [r2, #12]
 800343e:	4311      	orrs	r1, r2
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6812      	ldr	r2, [r2, #0]
 8003444:	430b      	orrs	r3, r1
 8003446:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695a      	ldr	r2, [r3, #20]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	000186a0 	.word	0x000186a0
 80034a0:	001e847f 	.word	0x001e847f
 80034a4:	003d08ff 	.word	0x003d08ff
 80034a8:	431bde83 	.word	0x431bde83
 80034ac:	10624dd3 	.word	0x10624dd3

080034b0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c2:	2b80      	cmp	r3, #128	; 0x80
 80034c4:	d103      	bne.n	80034ce <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2200      	movs	r2, #0
 80034cc:	611a      	str	r2, [r3, #16]
  }
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr

080034d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af02      	add	r7, sp, #8
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	607a      	str	r2, [r7, #4]
 80034e2:	461a      	mov	r2, r3
 80034e4:	460b      	mov	r3, r1
 80034e6:	817b      	strh	r3, [r7, #10]
 80034e8:	4613      	mov	r3, r2
 80034ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034ec:	f7ff f8f4 	bl	80026d8 <HAL_GetTick>
 80034f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b20      	cmp	r3, #32
 80034fc:	f040 80e0 	bne.w	80036c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	2319      	movs	r3, #25
 8003506:	2201      	movs	r2, #1
 8003508:	4970      	ldr	r1, [pc, #448]	; (80036cc <HAL_I2C_Master_Transmit+0x1f4>)
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f002 f910 	bl	8005730 <I2C_WaitOnFlagUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003516:	2302      	movs	r3, #2
 8003518:	e0d3      	b.n	80036c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003520:	2b01      	cmp	r3, #1
 8003522:	d101      	bne.n	8003528 <HAL_I2C_Master_Transmit+0x50>
 8003524:	2302      	movs	r3, #2
 8003526:	e0cc      	b.n	80036c2 <HAL_I2C_Master_Transmit+0x1ea>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b01      	cmp	r3, #1
 800353c:	d007      	beq.n	800354e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0201 	orr.w	r2, r2, #1
 800354c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800355c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2221      	movs	r2, #33	; 0x21
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2210      	movs	r2, #16
 800356a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	893a      	ldrh	r2, [r7, #8]
 800357e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4a50      	ldr	r2, [pc, #320]	; (80036d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800358e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003590:	8979      	ldrh	r1, [r7, #10]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	6a3a      	ldr	r2, [r7, #32]
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f001 fed2 	bl	8005340 <I2C_MasterRequestWrite>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e08d      	b.n	80036c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a6:	2300      	movs	r3, #0
 80035a8:	613b      	str	r3, [r7, #16]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035bc:	e066      	b.n	800368c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	6a39      	ldr	r1, [r7, #32]
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f002 f9ce 	bl	8005964 <I2C_WaitOnTXEFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00d      	beq.n	80035ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d107      	bne.n	80035e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e06b      	b.n	80036c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	781a      	ldrb	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003604:	b29b      	uxth	r3, r3
 8003606:	3b01      	subs	r3, #1
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b04      	cmp	r3, #4
 8003626:	d11b      	bne.n	8003660 <HAL_I2C_Master_Transmit+0x188>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362c:	2b00      	cmp	r3, #0
 800362e:	d017      	beq.n	8003660 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	781a      	ldrb	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364a:	b29b      	uxth	r3, r3
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003658:	3b01      	subs	r3, #1
 800365a:	b29a      	uxth	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	6a39      	ldr	r1, [r7, #32]
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f002 f9c5 	bl	80059f4 <I2C_WaitOnBTFFlagUntilTimeout>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00d      	beq.n	800368c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	2b04      	cmp	r3, #4
 8003676:	d107      	bne.n	8003688 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003686:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e01a      	b.n	80036c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003690:	2b00      	cmp	r3, #0
 8003692:	d194      	bne.n	80035be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036bc:	2300      	movs	r3, #0
 80036be:	e000      	b.n	80036c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036c0:	2302      	movs	r3, #2
  }
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	00100002 	.word	0x00100002
 80036d0:	ffff0000 	.word	0xffff0000

080036d4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08c      	sub	sp, #48	; 0x30
 80036d8:	af02      	add	r7, sp, #8
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	607a      	str	r2, [r7, #4]
 80036de:	461a      	mov	r2, r3
 80036e0:	460b      	mov	r3, r1
 80036e2:	817b      	strh	r3, [r7, #10]
 80036e4:	4613      	mov	r3, r2
 80036e6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036ec:	f7fe fff4 	bl	80026d8 <HAL_GetTick>
 80036f0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b20      	cmp	r3, #32
 80036fc:	f040 824b 	bne.w	8003b96 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	2319      	movs	r3, #25
 8003706:	2201      	movs	r2, #1
 8003708:	497f      	ldr	r1, [pc, #508]	; (8003908 <HAL_I2C_Master_Receive+0x234>)
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f002 f810 	bl	8005730 <I2C_WaitOnFlagUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003716:	2302      	movs	r3, #2
 8003718:	e23e      	b.n	8003b98 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_I2C_Master_Receive+0x54>
 8003724:	2302      	movs	r3, #2
 8003726:	e237      	b.n	8003b98 <HAL_I2C_Master_Receive+0x4c4>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b01      	cmp	r3, #1
 800373c:	d007      	beq.n	800374e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0201 	orr.w	r2, r2, #1
 800374c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800375c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2222      	movs	r2, #34	; 0x22
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2210      	movs	r2, #16
 800376a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	893a      	ldrh	r2, [r7, #8]
 800377e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003784:	b29a      	uxth	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4a5f      	ldr	r2, [pc, #380]	; (800390c <HAL_I2C_Master_Receive+0x238>)
 800378e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003790:	8979      	ldrh	r1, [r7, #10]
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f001 fe54 	bl	8005444 <I2C_MasterRequestRead>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e1f8      	b.n	8003b98 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d113      	bne.n	80037d6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ae:	2300      	movs	r3, #0
 80037b0:	61fb      	str	r3, [r7, #28]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	61fb      	str	r3, [r7, #28]
 80037c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	e1cc      	b.n	8003b70 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d11e      	bne.n	800381c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037ee:	b672      	cpsid	i
}
 80037f0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f2:	2300      	movs	r3, #0
 80037f4:	61bb      	str	r3, [r7, #24]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	61bb      	str	r3, [r7, #24]
 8003806:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003816:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003818:	b662      	cpsie	i
}
 800381a:	e035      	b.n	8003888 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003820:	2b02      	cmp	r3, #2
 8003822:	d11e      	bne.n	8003862 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003832:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003834:	b672      	cpsid	i
}
 8003836:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800385c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800385e:	b662      	cpsie	i
}
 8003860:	e012      	b.n	8003888 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003870:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003872:	2300      	movs	r3, #0
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	613b      	str	r3, [r7, #16]
 8003886:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003888:	e172      	b.n	8003b70 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388e:	2b03      	cmp	r3, #3
 8003890:	f200 811f 	bhi.w	8003ad2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003898:	2b01      	cmp	r3, #1
 800389a:	d123      	bne.n	80038e4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800389c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f002 f921 	bl	8005ae8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e173      	b.n	8003b98 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691a      	ldr	r2, [r3, #16]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038e2:	e145      	b.n	8003b70 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d152      	bne.n	8003992 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f2:	2200      	movs	r2, #0
 80038f4:	4906      	ldr	r1, [pc, #24]	; (8003910 <HAL_I2C_Master_Receive+0x23c>)
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f001 ff1a 	bl	8005730 <I2C_WaitOnFlagUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d008      	beq.n	8003914 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e148      	b.n	8003b98 <HAL_I2C_Master_Receive+0x4c4>
 8003906:	bf00      	nop
 8003908:	00100002 	.word	0x00100002
 800390c:	ffff0000 	.word	0xffff0000
 8003910:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003914:	b672      	cpsid	i
}
 8003916:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003926:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	691a      	ldr	r2, [r3, #16]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003950:	b29b      	uxth	r3, r3
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800395a:	b662      	cpsie	i
}
 800395c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	691a      	ldr	r2, [r3, #16]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003990:	e0ee      	b.n	8003b70 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003998:	2200      	movs	r2, #0
 800399a:	4981      	ldr	r1, [pc, #516]	; (8003ba0 <HAL_I2C_Master_Receive+0x4cc>)
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f001 fec7 	bl	8005730 <I2C_WaitOnFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e0f5      	b.n	8003b98 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039bc:	b672      	cpsid	i
}
 80039be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691a      	ldr	r2, [r3, #16]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039f2:	4b6c      	ldr	r3, [pc, #432]	; (8003ba4 <HAL_I2C_Master_Receive+0x4d0>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	08db      	lsrs	r3, r3, #3
 80039f8:	4a6b      	ldr	r2, [pc, #428]	; (8003ba8 <HAL_I2C_Master_Receive+0x4d4>)
 80039fa:	fba2 2303 	umull	r2, r3, r2, r3
 80039fe:	0a1a      	lsrs	r2, r3, #8
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	00da      	lsls	r2, r3, #3
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d118      	bne.n	8003a4a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f043 0220 	orr.w	r2, r3, #32
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003a3a:	b662      	cpsie	i
}
 8003a3c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e0a6      	b.n	8003b98 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d1d9      	bne.n	8003a0c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691a      	ldr	r2, [r3, #16]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a9a:	b662      	cpsie	i
}
 8003a9c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	1c5a      	adds	r2, r3, #1
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aba:	3b01      	subs	r3, #1
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ad0:	e04e      	b.n	8003b70 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f002 f806 	bl	8005ae8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e058      	b.n	8003b98 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d124      	bne.n	8003b70 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2a:	2b03      	cmp	r3, #3
 8003b2c:	d107      	bne.n	8003b3e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f47f ae88 	bne.w	800388a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	e000      	b.n	8003b98 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003b96:	2302      	movs	r3, #2
  }
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3728      	adds	r7, #40	; 0x28
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	00010004 	.word	0x00010004
 8003ba4:	20000028 	.word	0x20000028
 8003ba8:	14f8b589 	.word	0x14f8b589

08003bac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bcc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	2b10      	cmp	r3, #16
 8003bda:	d003      	beq.n	8003be4 <HAL_I2C_EV_IRQHandler+0x38>
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
 8003bde:	2b40      	cmp	r3, #64	; 0x40
 8003be0:	f040 80b1 	bne.w	8003d46 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10d      	bne.n	8003c1a <HAL_I2C_EV_IRQHandler+0x6e>
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003c04:	d003      	beq.n	8003c0e <HAL_I2C_EV_IRQHandler+0x62>
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003c0c:	d101      	bne.n	8003c12 <HAL_I2C_EV_IRQHandler+0x66>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <HAL_I2C_EV_IRQHandler+0x68>
 8003c12:	2300      	movs	r3, #0
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	f000 8114 	beq.w	8003e42 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00b      	beq.n	8003c3c <HAL_I2C_EV_IRQHandler+0x90>
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d006      	beq.n	8003c3c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f001 ffe5 	bl	8005bfe <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fd60 	bl	80046fa <I2C_Master_SB>
 8003c3a:	e083      	b.n	8003d44 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d008      	beq.n	8003c58 <HAL_I2C_EV_IRQHandler+0xac>
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 fdd7 	bl	8004804 <I2C_Master_ADD10>
 8003c56:	e075      	b.n	8003d44 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d008      	beq.n	8003c74 <HAL_I2C_EV_IRQHandler+0xc8>
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 fdf2 	bl	8004856 <I2C_Master_ADDR>
 8003c72:	e067      	b.n	8003d44 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	f003 0304 	and.w	r3, r3, #4
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d036      	beq.n	8003cec <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c8c:	f000 80db 	beq.w	8003e46 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00d      	beq.n	8003cb6 <HAL_I2C_EV_IRQHandler+0x10a>
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d008      	beq.n	8003cb6 <HAL_I2C_EV_IRQHandler+0x10a>
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d103      	bne.n	8003cb6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f9d4 	bl	800405c <I2C_MasterTransmit_TXE>
 8003cb4:	e046      	b.n	8003d44 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 80c2 	beq.w	8003e46 <HAL_I2C_EV_IRQHandler+0x29a>
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 80bc 	beq.w	8003e46 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003cce:	7bbb      	ldrb	r3, [r7, #14]
 8003cd0:	2b21      	cmp	r3, #33	; 0x21
 8003cd2:	d103      	bne.n	8003cdc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 fa5d 	bl	8004194 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cda:	e0b4      	b.n	8003e46 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
 8003cde:	2b40      	cmp	r3, #64	; 0x40
 8003ce0:	f040 80b1 	bne.w	8003e46 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 facb 	bl	8004280 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cea:	e0ac      	b.n	8003e46 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cfa:	f000 80a4 	beq.w	8003e46 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00d      	beq.n	8003d24 <HAL_I2C_EV_IRQHandler+0x178>
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d008      	beq.n	8003d24 <HAL_I2C_EV_IRQHandler+0x178>
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d103      	bne.n	8003d24 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 fb47 	bl	80043b0 <I2C_MasterReceive_RXNE>
 8003d22:	e00f      	b.n	8003d44 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 808b 	beq.w	8003e46 <HAL_I2C_EV_IRQHandler+0x29a>
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 8085 	beq.w	8003e46 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 fbf2 	bl	8004526 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d42:	e080      	b.n	8003e46 <HAL_I2C_EV_IRQHandler+0x29a>
 8003d44:	e07f      	b.n	8003e46 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d004      	beq.n	8003d58 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	61fb      	str	r3, [r7, #28]
 8003d56:	e007      	b.n	8003d68 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d011      	beq.n	8003d96 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00c      	beq.n	8003d96 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003d8c:	69b9      	ldr	r1, [r7, #24]
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 ffb8 	bl	8004d04 <I2C_Slave_ADDR>
 8003d94:	e05a      	b.n	8003e4c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d008      	beq.n	8003db2 <HAL_I2C_EV_IRQHandler+0x206>
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fff2 	bl	8004d94 <I2C_Slave_STOPF>
 8003db0:	e04c      	b.n	8003e4c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003db2:	7bbb      	ldrb	r3, [r7, #14]
 8003db4:	2b21      	cmp	r3, #33	; 0x21
 8003db6:	d002      	beq.n	8003dbe <HAL_I2C_EV_IRQHandler+0x212>
 8003db8:	7bbb      	ldrb	r3, [r7, #14]
 8003dba:	2b29      	cmp	r3, #41	; 0x29
 8003dbc:	d120      	bne.n	8003e00 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00d      	beq.n	8003de4 <HAL_I2C_EV_IRQHandler+0x238>
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d008      	beq.n	8003de4 <HAL_I2C_EV_IRQHandler+0x238>
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d103      	bne.n	8003de4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fed5 	bl	8004b8c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003de2:	e032      	b.n	8003e4a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d02d      	beq.n	8003e4a <HAL_I2C_EV_IRQHandler+0x29e>
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d028      	beq.n	8003e4a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 ff04 	bl	8004c06 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003dfe:	e024      	b.n	8003e4a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00d      	beq.n	8003e26 <HAL_I2C_EV_IRQHandler+0x27a>
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d008      	beq.n	8003e26 <HAL_I2C_EV_IRQHandler+0x27a>
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d103      	bne.n	8003e26 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 ff11 	bl	8004c46 <I2C_SlaveReceive_RXNE>
 8003e24:	e012      	b.n	8003e4c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00d      	beq.n	8003e4c <HAL_I2C_EV_IRQHandler+0x2a0>
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d008      	beq.n	8003e4c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 ff41 	bl	8004cc2 <I2C_SlaveReceive_BTF>
 8003e40:	e004      	b.n	8003e4c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003e42:	bf00      	nop
 8003e44:	e002      	b.n	8003e4c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e46:	bf00      	nop
 8003e48:	e000      	b.n	8003e4c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e4a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003e4c:	3720      	adds	r7, #32
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b08a      	sub	sp, #40	; 0x28
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e74:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d015      	beq.n	8003eac <HAL_I2C_ER_IRQHandler+0x5a>
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d010      	beq.n	8003eac <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e9a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eaa:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00d      	beq.n	8003ed2 <HAL_I2C_ER_IRQHandler+0x80>
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d008      	beq.n	8003ed2 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	f043 0302 	orr.w	r3, r3, #2
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003ed0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d03e      	beq.n	8003f5a <HAL_I2C_ER_IRQHandler+0x108>
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d039      	beq.n	8003f5a <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8003ee6:	7efb      	ldrb	r3, [r7, #27]
 8003ee8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003f00:	7ebb      	ldrb	r3, [r7, #26]
 8003f02:	2b20      	cmp	r3, #32
 8003f04:	d112      	bne.n	8003f2c <HAL_I2C_ER_IRQHandler+0xda>
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10f      	bne.n	8003f2c <HAL_I2C_ER_IRQHandler+0xda>
 8003f0c:	7cfb      	ldrb	r3, [r7, #19]
 8003f0e:	2b21      	cmp	r3, #33	; 0x21
 8003f10:	d008      	beq.n	8003f24 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003f12:	7cfb      	ldrb	r3, [r7, #19]
 8003f14:	2b29      	cmp	r3, #41	; 0x29
 8003f16:	d005      	beq.n	8003f24 <HAL_I2C_ER_IRQHandler+0xd2>
 8003f18:	7cfb      	ldrb	r3, [r7, #19]
 8003f1a:	2b28      	cmp	r3, #40	; 0x28
 8003f1c:	d106      	bne.n	8003f2c <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2b21      	cmp	r3, #33	; 0x21
 8003f22:	d103      	bne.n	8003f2c <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f001 f865 	bl	8004ff4 <I2C_Slave_AF>
 8003f2a:	e016      	b.n	8003f5a <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f34:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	f043 0304 	orr.w	r3, r3, #4
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003f3e:	7efb      	ldrb	r3, [r7, #27]
 8003f40:	2b10      	cmp	r3, #16
 8003f42:	d002      	beq.n	8003f4a <HAL_I2C_ER_IRQHandler+0xf8>
 8003f44:	7efb      	ldrb	r3, [r7, #27]
 8003f46:	2b40      	cmp	r3, #64	; 0x40
 8003f48:	d107      	bne.n	8003f5a <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f58:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00d      	beq.n	8003f80 <HAL_I2C_ER_IRQHandler+0x12e>
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d008      	beq.n	8003f80 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	f043 0308 	orr.w	r3, r3, #8
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003f7e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d008      	beq.n	8003f98 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f001 f8a2 	bl	80050dc <I2C_ITError>
  }
}
 8003f98:	bf00      	nop
 8003f9a:	3728      	adds	r7, #40	; 0x28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bc80      	pop	{r7}
 8003fd4:	4770      	bx	lr

08003fd6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	70fb      	strb	r3, [r7, #3]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr

08004002 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr

08004014 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr

08004026 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr

08004038 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr

0800404a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr

0800405c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004072:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407e:	2b00      	cmp	r3, #0
 8004080:	d150      	bne.n	8004124 <I2C_MasterTransmit_TXE+0xc8>
 8004082:	7bfb      	ldrb	r3, [r7, #15]
 8004084:	2b21      	cmp	r3, #33	; 0x21
 8004086:	d14d      	bne.n	8004124 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b08      	cmp	r3, #8
 800408c:	d01d      	beq.n	80040ca <I2C_MasterTransmit_TXE+0x6e>
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b20      	cmp	r3, #32
 8004092:	d01a      	beq.n	80040ca <I2C_MasterTransmit_TXE+0x6e>
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800409a:	d016      	beq.n	80040ca <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040aa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2211      	movs	r2, #17
 80040b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2220      	movs	r2, #32
 80040be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7ff ff6c 	bl	8003fa0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040c8:	e060      	b.n	800418c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040d8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040e8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b40      	cmp	r3, #64	; 0x40
 8004102:	d107      	bne.n	8004114 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7ff ff81 	bl	8004014 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004112:	e03b      	b.n	800418c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7ff ff3f 	bl	8003fa0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004122:	e033      	b.n	800418c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	2b21      	cmp	r3, #33	; 0x21
 8004128:	d005      	beq.n	8004136 <I2C_MasterTransmit_TXE+0xda>
 800412a:	7bbb      	ldrb	r3, [r7, #14]
 800412c:	2b40      	cmp	r3, #64	; 0x40
 800412e:	d12d      	bne.n	800418c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	2b22      	cmp	r3, #34	; 0x22
 8004134:	d12a      	bne.n	800418c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d108      	bne.n	8004152 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800414e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004150:	e01c      	b.n	800418c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b40      	cmp	r3, #64	; 0x40
 800415c:	d103      	bne.n	8004166 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f88e 	bl	8004280 <I2C_MemoryTransmit_TXE_BTF>
}
 8004164:	e012      	b.n	800418c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	781a      	ldrb	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004180:	b29b      	uxth	r3, r3
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800418a:	e7ff      	b.n	800418c <I2C_MasterTransmit_TXE+0x130>
 800418c:	bf00      	nop
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b21      	cmp	r3, #33	; 0x21
 80041ac:	d164      	bne.n	8004278 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d012      	beq.n	80041de <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	781a      	ldrb	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	1c5a      	adds	r2, r3, #1
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80041dc:	e04c      	b.n	8004278 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d01d      	beq.n	8004220 <I2C_MasterTransmit_BTF+0x8c>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	d01a      	beq.n	8004220 <I2C_MasterTransmit_BTF+0x8c>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041f0:	d016      	beq.n	8004220 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004200:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2211      	movs	r2, #17
 8004206:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7ff fec1 	bl	8003fa0 <HAL_I2C_MasterTxCpltCallback>
}
 800421e:	e02b      	b.n	8004278 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800422e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800423e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b40      	cmp	r3, #64	; 0x40
 8004258:	d107      	bne.n	800426a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7ff fed6 	bl	8004014 <HAL_I2C_MemTxCpltCallback>
}
 8004268:	e006      	b.n	8004278 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7ff fe94 	bl	8003fa0 <HAL_I2C_MasterTxCpltCallback>
}
 8004278:	bf00      	nop
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800428e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004294:	2b00      	cmp	r3, #0
 8004296:	d11d      	bne.n	80042d4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429c:	2b01      	cmp	r3, #1
 800429e:	d10b      	bne.n	80042b8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b0:	1c9a      	adds	r2, r3, #2
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80042b6:	e077      	b.n	80043a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042bc:	b29b      	uxth	r3, r3
 80042be:	121b      	asrs	r3, r3, #8
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80042d2:	e069      	b.n	80043a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d10b      	bne.n	80042f4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80042f2:	e059      	b.n	80043a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d152      	bne.n	80043a2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
 80042fe:	2b22      	cmp	r3, #34	; 0x22
 8004300:	d10d      	bne.n	800431e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004310:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800431c:	e044      	b.n	80043a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004322:	b29b      	uxth	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d015      	beq.n	8004354 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004328:	7bfb      	ldrb	r3, [r7, #15]
 800432a:	2b21      	cmp	r3, #33	; 0x21
 800432c:	d112      	bne.n	8004354 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	781a      	ldrb	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004352:	e029      	b.n	80043a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d124      	bne.n	80043a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800435e:	7bfb      	ldrb	r3, [r7, #15]
 8004360:	2b21      	cmp	r3, #33	; 0x21
 8004362:	d121      	bne.n	80043a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004372:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004382:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff fe3a 	bl	8004014 <HAL_I2C_MemTxCpltCallback>
}
 80043a0:	e002      	b.n	80043a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7ff f884 	bl	80034b0 <I2C_Flush_DR>
}
 80043a8:	bf00      	nop
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b22      	cmp	r3, #34	; 0x22
 80043c2:	f040 80ac 	bne.w	800451e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2b03      	cmp	r3, #3
 80043d2:	d921      	bls.n	8004418 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2b03      	cmp	r3, #3
 8004402:	f040 808c 	bne.w	800451e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004414:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004416:	e082      	b.n	800451e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	2b02      	cmp	r3, #2
 800441e:	d075      	beq.n	800450c <I2C_MasterReceive_RXNE+0x15c>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d002      	beq.n	800442c <I2C_MasterReceive_RXNE+0x7c>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d16f      	bne.n	800450c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f001 fb29 	bl	8005a84 <I2C_WaitOnSTOPRequestThroughIT>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d142      	bne.n	80044be <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004446:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004456:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691a      	ldr	r2, [r3, #16]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004474:	b29b      	uxth	r3, r3
 8004476:	3b01      	subs	r3, #1
 8004478:	b29a      	uxth	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b40      	cmp	r3, #64	; 0x40
 8004490:	d10a      	bne.n	80044a8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff fdc0 	bl	8004026 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044a6:	e03a      	b.n	800451e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2212      	movs	r2, #18
 80044b4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff fd7b 	bl	8003fb2 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044bc:	e02f      	b.n	800451e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044cc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	3b01      	subs	r3, #1
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7ff fd97 	bl	8004038 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800450a:	e008      	b.n	800451e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800451a:	605a      	str	r2, [r3, #4]
}
 800451c:	e7ff      	b.n	800451e <I2C_MasterReceive_RXNE+0x16e>
 800451e:	bf00      	nop
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b084      	sub	sp, #16
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004532:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004538:	b29b      	uxth	r3, r3
 800453a:	2b04      	cmp	r3, #4
 800453c:	d11b      	bne.n	8004576 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800454c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004574:	e0bd      	b.n	80046f2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b03      	cmp	r3, #3
 800457e:	d129      	bne.n	80045d4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800458e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2b04      	cmp	r3, #4
 8004594:	d00a      	beq.n	80045ac <I2C_MasterReceive_BTF+0x86>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2b02      	cmp	r3, #2
 800459a:	d007      	beq.n	80045ac <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045aa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	691a      	ldr	r2, [r3, #16]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	1c5a      	adds	r2, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045d2:	e08e      	b.n	80046f2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d176      	bne.n	80046cc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d002      	beq.n	80045ea <I2C_MasterReceive_BTF+0xc4>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2b10      	cmp	r3, #16
 80045e8:	d108      	bne.n	80045fc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	e019      	b.n	8004630 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d002      	beq.n	8004608 <I2C_MasterReceive_BTF+0xe2>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2b02      	cmp	r3, #2
 8004606:	d108      	bne.n	800461a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	e00a      	b.n	8004630 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2b10      	cmp	r3, #16
 800461e:	d007      	beq.n	8004630 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800462e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464c:	b29b      	uxth	r3, r3
 800464e:	3b01      	subs	r3, #1
 8004650:	b29a      	uxth	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800468a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b40      	cmp	r3, #64	; 0x40
 800469e:	d10a      	bne.n	80046b6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff fcb9 	bl	8004026 <HAL_I2C_MemRxCpltCallback>
}
 80046b4:	e01d      	b.n	80046f2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2212      	movs	r2, #18
 80046c2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff fc74 	bl	8003fb2 <HAL_I2C_MasterRxCpltCallback>
}
 80046ca:	e012      	b.n	80046f2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	691a      	ldr	r2, [r3, #16]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80046f2:	bf00      	nop
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b40      	cmp	r3, #64	; 0x40
 800470c:	d117      	bne.n	800473e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004712:	2b00      	cmp	r3, #0
 8004714:	d109      	bne.n	800472a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471a:	b2db      	uxtb	r3, r3
 800471c:	461a      	mov	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004726:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004728:	e067      	b.n	80047fa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472e:	b2db      	uxtb	r3, r3
 8004730:	f043 0301 	orr.w	r3, r3, #1
 8004734:	b2da      	uxtb	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	611a      	str	r2, [r3, #16]
}
 800473c:	e05d      	b.n	80047fa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004746:	d133      	bne.n	80047b0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b21      	cmp	r3, #33	; 0x21
 8004752:	d109      	bne.n	8004768 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004758:	b2db      	uxtb	r3, r3
 800475a:	461a      	mov	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004764:	611a      	str	r2, [r3, #16]
 8004766:	e008      	b.n	800477a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476c:	b2db      	uxtb	r3, r3
 800476e:	f043 0301 	orr.w	r3, r3, #1
 8004772:	b2da      	uxtb	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477e:	2b00      	cmp	r3, #0
 8004780:	d004      	beq.n	800478c <I2C_Master_SB+0x92>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004788:	2b00      	cmp	r3, #0
 800478a:	d108      	bne.n	800479e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004790:	2b00      	cmp	r3, #0
 8004792:	d032      	beq.n	80047fa <I2C_Master_SB+0x100>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479a:	2b00      	cmp	r3, #0
 800479c:	d02d      	beq.n	80047fa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047ac:	605a      	str	r2, [r3, #4]
}
 80047ae:	e024      	b.n	80047fa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10e      	bne.n	80047d6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047bc:	b29b      	uxth	r3, r3
 80047be:	11db      	asrs	r3, r3, #7
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	f003 0306 	and.w	r3, r3, #6
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	f063 030f 	orn	r3, r3, #15
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	611a      	str	r2, [r3, #16]
}
 80047d4:	e011      	b.n	80047fa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d10d      	bne.n	80047fa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	11db      	asrs	r3, r3, #7
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	f003 0306 	and.w	r3, r3, #6
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	f063 030e 	orn	r3, r3, #14
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	611a      	str	r2, [r3, #16]
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	bc80      	pop	{r7}
 8004802:	4770      	bx	lr

08004804 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004810:	b2da      	uxtb	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481c:	2b00      	cmp	r3, #0
 800481e:	d004      	beq.n	800482a <I2C_Master_ADD10+0x26>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004826:	2b00      	cmp	r3, #0
 8004828:	d108      	bne.n	800483c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00c      	beq.n	800484c <I2C_Master_ADD10+0x48>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004838:	2b00      	cmp	r3, #0
 800483a:	d007      	beq.n	800484c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800484a:	605a      	str	r2, [r3, #4]
  }
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	bc80      	pop	{r7}
 8004854:	4770      	bx	lr

08004856 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004856:	b480      	push	{r7}
 8004858:	b091      	sub	sp, #68	; 0x44
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004864:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004872:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b22      	cmp	r3, #34	; 0x22
 800487e:	f040 8174 	bne.w	8004b6a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10f      	bne.n	80048aa <I2C_Master_ADDR+0x54>
 800488a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800488e:	2b40      	cmp	r3, #64	; 0x40
 8004890:	d10b      	bne.n	80048aa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004892:	2300      	movs	r3, #0
 8004894:	633b      	str	r3, [r7, #48]	; 0x30
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	633b      	str	r3, [r7, #48]	; 0x30
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	633b      	str	r3, [r7, #48]	; 0x30
 80048a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a8:	e16b      	b.n	8004b82 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d11d      	bne.n	80048ee <I2C_Master_ADDR+0x98>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048ba:	d118      	bne.n	80048ee <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048bc:	2300      	movs	r3, #0
 80048be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048e0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	651a      	str	r2, [r3, #80]	; 0x50
 80048ec:	e149      	b.n	8004b82 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d113      	bne.n	8004920 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048f8:	2300      	movs	r3, #0
 80048fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	62bb      	str	r3, [r7, #40]	; 0x28
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	62bb      	str	r3, [r7, #40]	; 0x28
 800490c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	e120      	b.n	8004b62 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b01      	cmp	r3, #1
 8004928:	f040 808a 	bne.w	8004a40 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800492c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004932:	d137      	bne.n	80049a4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004942:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800494e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004952:	d113      	bne.n	800497c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004962:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004964:	2300      	movs	r3, #0
 8004966:	627b      	str	r3, [r7, #36]	; 0x24
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	627b      	str	r3, [r7, #36]	; 0x24
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	627b      	str	r3, [r7, #36]	; 0x24
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	e0f2      	b.n	8004b62 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800497c:	2300      	movs	r3, #0
 800497e:	623b      	str	r3, [r7, #32]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	623b      	str	r3, [r7, #32]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	623b      	str	r3, [r7, #32]
 8004990:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	e0de      	b.n	8004b62 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80049a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d02e      	beq.n	8004a08 <I2C_Master_ADDR+0x1b2>
 80049aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ac:	2b20      	cmp	r3, #32
 80049ae:	d02b      	beq.n	8004a08 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80049b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b2:	2b12      	cmp	r3, #18
 80049b4:	d102      	bne.n	80049bc <I2C_Master_ADDR+0x166>
 80049b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d125      	bne.n	8004a08 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80049bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d00e      	beq.n	80049e0 <I2C_Master_ADDR+0x18a>
 80049c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d00b      	beq.n	80049e0 <I2C_Master_ADDR+0x18a>
 80049c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ca:	2b10      	cmp	r3, #16
 80049cc:	d008      	beq.n	80049e0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	e007      	b.n	80049f0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049ee:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049f0:	2300      	movs	r3, #0
 80049f2:	61fb      	str	r3, [r7, #28]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	61fb      	str	r3, [r7, #28]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	61fb      	str	r3, [r7, #28]
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	e0ac      	b.n	8004b62 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a16:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61bb      	str	r3, [r7, #24]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	61bb      	str	r3, [r7, #24]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	61bb      	str	r3, [r7, #24]
 8004a2c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	e090      	b.n	8004b62 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d158      	bne.n	8004afc <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d021      	beq.n	8004a94 <I2C_Master_ADDR+0x23e>
 8004a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d01e      	beq.n	8004a94 <I2C_Master_ADDR+0x23e>
 8004a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a58:	2b10      	cmp	r3, #16
 8004a5a:	d01b      	beq.n	8004a94 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a6a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	617b      	str	r3, [r7, #20]
 8004a80:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	e012      	b.n	8004aba <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004aa2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	613b      	str	r3, [r7, #16]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	613b      	str	r3, [r7, #16]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	613b      	str	r3, [r7, #16]
 8004ab8:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ac4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ac8:	d14b      	bne.n	8004b62 <I2C_Master_ADDR+0x30c>
 8004aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004acc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ad0:	d00b      	beq.n	8004aea <I2C_Master_ADDR+0x294>
 8004ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d008      	beq.n	8004aea <I2C_Master_ADDR+0x294>
 8004ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ada:	2b08      	cmp	r3, #8
 8004adc:	d005      	beq.n	8004aea <I2C_Master_ADDR+0x294>
 8004ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae0:	2b10      	cmp	r3, #16
 8004ae2:	d002      	beq.n	8004aea <I2C_Master_ADDR+0x294>
 8004ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae6:	2b20      	cmp	r3, #32
 8004ae8:	d13b      	bne.n	8004b62 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004af8:	605a      	str	r2, [r3, #4]
 8004afa:	e032      	b.n	8004b62 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b0a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b1a:	d117      	bne.n	8004b4c <I2C_Master_ADDR+0x2f6>
 8004b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b22:	d00b      	beq.n	8004b3c <I2C_Master_ADDR+0x2e6>
 8004b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d008      	beq.n	8004b3c <I2C_Master_ADDR+0x2e6>
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d005      	beq.n	8004b3c <I2C_Master_ADDR+0x2e6>
 8004b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b32:	2b10      	cmp	r3, #16
 8004b34:	d002      	beq.n	8004b3c <I2C_Master_ADDR+0x2e6>
 8004b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	d107      	bne.n	8004b4c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b4a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004b68:	e00b      	b.n	8004b82 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60bb      	str	r3, [r7, #8]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	60bb      	str	r3, [r7, #8]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	60bb      	str	r3, [r7, #8]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
}
 8004b80:	e7ff      	b.n	8004b82 <I2C_Master_ADDR+0x32c>
 8004b82:	bf00      	nop
 8004b84:	3744      	adds	r7, #68	; 0x44
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr

08004b8c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d02b      	beq.n	8004bfe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	781a      	ldrb	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d114      	bne.n	8004bfe <I2C_SlaveTransmit_TXE+0x72>
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	2b29      	cmp	r3, #41	; 0x29
 8004bd8:	d111      	bne.n	8004bfe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2221      	movs	r2, #33	; 0x21
 8004bee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2228      	movs	r2, #40	; 0x28
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7ff f9e3 	bl	8003fc4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004bfe:	bf00      	nop
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d011      	beq.n	8004c3c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	781a      	ldrb	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	1c5a      	adds	r2, r3, #1
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	3b01      	subs	r3, #1
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bc80      	pop	{r7}
 8004c44:	4770      	bx	lr

08004c46 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c54:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d02c      	beq.n	8004cba <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	691a      	ldr	r2, [r3, #16]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d114      	bne.n	8004cba <I2C_SlaveReceive_RXNE+0x74>
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	2b2a      	cmp	r3, #42	; 0x2a
 8004c94:	d111      	bne.n	8004cba <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ca4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2222      	movs	r2, #34	; 0x22
 8004caa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2228      	movs	r2, #40	; 0x28
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7ff f98e 	bl	8003fd6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004cba:	bf00      	nop
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d012      	beq.n	8004cfa <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691a      	ldr	r2, [r3, #16]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bc80      	pop	{r7}
 8004d02:	4770      	bx	lr

08004d04 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d1e:	2b28      	cmp	r3, #40	; 0x28
 8004d20:	d125      	bne.n	8004d6e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d30:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d103      	bne.n	8004d52 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	81bb      	strh	r3, [r7, #12]
 8004d50:	e002      	b.n	8004d58 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004d60:	89ba      	ldrh	r2, [r7, #12]
 8004d62:	7bfb      	ldrb	r3, [r7, #15]
 8004d64:	4619      	mov	r1, r3
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff f93e 	bl	8003fe8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d6c:	e00e      	b.n	8004d8c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60bb      	str	r3, [r7, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	60bb      	str	r3, [r7, #8]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	60bb      	str	r3, [r7, #8]
 8004d82:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004d8c:	bf00      	nop
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004db2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004db4:	2300      	movs	r3, #0
 8004db6:	60bb      	str	r3, [r7, #8]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	60bb      	str	r3, [r7, #8]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0201 	orr.w	r2, r2, #1
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004df0:	d172      	bne.n	8004ed8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004df2:	7bfb      	ldrb	r3, [r7, #15]
 8004df4:	2b22      	cmp	r3, #34	; 0x22
 8004df6:	d002      	beq.n	8004dfe <I2C_Slave_STOPF+0x6a>
 8004df8:	7bfb      	ldrb	r3, [r7, #15]
 8004dfa:	2b2a      	cmp	r3, #42	; 0x2a
 8004dfc:	d135      	bne.n	8004e6a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d005      	beq.n	8004e22 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	f043 0204 	orr.w	r2, r3, #4
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e30:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fd fffe 	bl	8002e38 <HAL_DMA_GetState>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d049      	beq.n	8004ed6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	4a69      	ldr	r2, [pc, #420]	; (8004fec <I2C_Slave_STOPF+0x258>)
 8004e48:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fd fe74 	bl	8002b3c <HAL_DMA_Abort_IT>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d03d      	beq.n	8004ed6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e64:	4610      	mov	r0, r2
 8004e66:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e68:	e035      	b.n	8004ed6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	f043 0204 	orr.w	r2, r3, #4
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e9c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fd ffc8 	bl	8002e38 <HAL_DMA_GetState>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d014      	beq.n	8004ed8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb2:	4a4e      	ldr	r2, [pc, #312]	; (8004fec <I2C_Slave_STOPF+0x258>)
 8004eb4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fd fe3e 	bl	8002b3c <HAL_DMA_Abort_IT>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d008      	beq.n	8004ed8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	4798      	blx	r3
 8004ed4:	e000      	b.n	8004ed8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ed6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d03e      	beq.n	8004f60 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b04      	cmp	r3, #4
 8004eee:	d112      	bne.n	8004f16 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691a      	ldr	r2, [r3, #16]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f20:	2b40      	cmp	r3, #64	; 0x40
 8004f22:	d112      	bne.n	8004f4a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691a      	ldr	r2, [r3, #16]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	b2d2      	uxtb	r2, r2
 8004f30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d005      	beq.n	8004f60 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	f043 0204 	orr.w	r2, r3, #4
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d003      	beq.n	8004f70 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f8b7 	bl	80050dc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004f6e:	e039      	b.n	8004fe4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	2b2a      	cmp	r3, #42	; 0x2a
 8004f74:	d109      	bne.n	8004f8a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2228      	movs	r2, #40	; 0x28
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff f826 	bl	8003fd6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b28      	cmp	r3, #40	; 0x28
 8004f94:	d111      	bne.n	8004fba <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a15      	ldr	r2, [pc, #84]	; (8004ff0 <I2C_Slave_STOPF+0x25c>)
 8004f9a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7ff f825 	bl	8004002 <HAL_I2C_ListenCpltCallback>
}
 8004fb8:	e014      	b.n	8004fe4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbe:	2b22      	cmp	r3, #34	; 0x22
 8004fc0:	d002      	beq.n	8004fc8 <I2C_Slave_STOPF+0x234>
 8004fc2:	7bfb      	ldrb	r3, [r7, #15]
 8004fc4:	2b22      	cmp	r3, #34	; 0x22
 8004fc6:	d10d      	bne.n	8004fe4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7fe fff9 	bl	8003fd6 <HAL_I2C_SlaveRxCpltCallback>
}
 8004fe4:	bf00      	nop
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	080055e1 	.word	0x080055e1
 8004ff0:	ffff0000 	.word	0xffff0000

08004ff4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005002:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b08      	cmp	r3, #8
 800500e:	d002      	beq.n	8005016 <I2C_Slave_AF+0x22>
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2b20      	cmp	r3, #32
 8005014:	d129      	bne.n	800506a <I2C_Slave_AF+0x76>
 8005016:	7bfb      	ldrb	r3, [r7, #15]
 8005018:	2b28      	cmp	r3, #40	; 0x28
 800501a:	d126      	bne.n	800506a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a2e      	ldr	r2, [pc, #184]	; (80050d8 <I2C_Slave_AF+0xe4>)
 8005020:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005030:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800503a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800504a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2220      	movs	r2, #32
 8005056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7fe ffcd 	bl	8004002 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005068:	e031      	b.n	80050ce <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	2b21      	cmp	r3, #33	; 0x21
 800506e:	d129      	bne.n	80050c4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a19      	ldr	r2, [pc, #100]	; (80050d8 <I2C_Slave_AF+0xe4>)
 8005074:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2221      	movs	r2, #33	; 0x21
 800507a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2220      	movs	r2, #32
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800509a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050a4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7fe f9fa 	bl	80034b0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7fe ff81 	bl	8003fc4 <HAL_I2C_SlaveTxCpltCallback>
}
 80050c2:	e004      	b.n	80050ce <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050cc:	615a      	str	r2, [r3, #20]
}
 80050ce:	bf00      	nop
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	ffff0000 	.word	0xffff0000

080050dc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80050f4:	7bbb      	ldrb	r3, [r7, #14]
 80050f6:	2b10      	cmp	r3, #16
 80050f8:	d002      	beq.n	8005100 <I2C_ITError+0x24>
 80050fa:	7bbb      	ldrb	r3, [r7, #14]
 80050fc:	2b40      	cmp	r3, #64	; 0x40
 80050fe:	d10a      	bne.n	8005116 <I2C_ITError+0x3a>
 8005100:	7bfb      	ldrb	r3, [r7, #15]
 8005102:	2b22      	cmp	r3, #34	; 0x22
 8005104:	d107      	bne.n	8005116 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005114:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005116:	7bfb      	ldrb	r3, [r7, #15]
 8005118:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800511c:	2b28      	cmp	r3, #40	; 0x28
 800511e:	d107      	bne.n	8005130 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2228      	movs	r2, #40	; 0x28
 800512a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800512e:	e015      	b.n	800515c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800513a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800513e:	d00a      	beq.n	8005156 <I2C_ITError+0x7a>
 8005140:	7bfb      	ldrb	r3, [r7, #15]
 8005142:	2b60      	cmp	r3, #96	; 0x60
 8005144:	d007      	beq.n	8005156 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2220      	movs	r2, #32
 800514a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800516a:	d162      	bne.n	8005232 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800517a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005180:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b01      	cmp	r3, #1
 8005188:	d020      	beq.n	80051cc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800518e:	4a6a      	ldr	r2, [pc, #424]	; (8005338 <I2C_ITError+0x25c>)
 8005190:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005196:	4618      	mov	r0, r3
 8005198:	f7fd fcd0 	bl	8002b3c <HAL_DMA_Abort_IT>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 8089 	beq.w	80052b6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0201 	bic.w	r2, r2, #1
 80051b2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051c6:	4610      	mov	r0, r2
 80051c8:	4798      	blx	r3
 80051ca:	e074      	b.n	80052b6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d0:	4a59      	ldr	r2, [pc, #356]	; (8005338 <I2C_ITError+0x25c>)
 80051d2:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d8:	4618      	mov	r0, r3
 80051da:	f7fd fcaf 	bl	8002b3c <HAL_DMA_Abort_IT>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d068      	beq.n	80052b6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ee:	2b40      	cmp	r3, #64	; 0x40
 80051f0:	d10b      	bne.n	800520a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	691a      	ldr	r2, [r3, #16]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	b2d2      	uxtb	r2, r2
 80051fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 0201 	bic.w	r2, r2, #1
 8005218:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2220      	movs	r2, #32
 800521e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800522c:	4610      	mov	r0, r2
 800522e:	4798      	blx	r3
 8005230:	e041      	b.n	80052b6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b60      	cmp	r3, #96	; 0x60
 800523c:	d125      	bne.n	800528a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2220      	movs	r2, #32
 8005242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005256:	2b40      	cmp	r3, #64	; 0x40
 8005258:	d10b      	bne.n	8005272 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	691a      	ldr	r2, [r3, #16]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0201 	bic.w	r2, r2, #1
 8005280:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7fe fee1 	bl	800404a <HAL_I2C_AbortCpltCallback>
 8005288:	e015      	b.n	80052b6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005294:	2b40      	cmp	r3, #64	; 0x40
 8005296:	d10b      	bne.n	80052b0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	691a      	ldr	r2, [r3, #16]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	1c5a      	adds	r2, r3, #1
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f7fe fec1 	bl	8004038 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10e      	bne.n	80052e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d109      	bne.n	80052e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d104      	bne.n	80052e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d007      	beq.n	80052f4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052f2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052fa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b04      	cmp	r3, #4
 8005306:	d113      	bne.n	8005330 <I2C_ITError+0x254>
 8005308:	7bfb      	ldrb	r3, [r7, #15]
 800530a:	2b28      	cmp	r3, #40	; 0x28
 800530c:	d110      	bne.n	8005330 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a0a      	ldr	r2, [pc, #40]	; (800533c <I2C_ITError+0x260>)
 8005312:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2220      	movs	r2, #32
 800531e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7fe fe69 	bl	8004002 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005330:	bf00      	nop
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	080055e1 	.word	0x080055e1
 800533c:	ffff0000 	.word	0xffff0000

08005340 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b088      	sub	sp, #32
 8005344:	af02      	add	r7, sp, #8
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	607a      	str	r2, [r7, #4]
 800534a:	603b      	str	r3, [r7, #0]
 800534c:	460b      	mov	r3, r1
 800534e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2b08      	cmp	r3, #8
 800535a:	d006      	beq.n	800536a <I2C_MasterRequestWrite+0x2a>
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d003      	beq.n	800536a <I2C_MasterRequestWrite+0x2a>
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005368:	d108      	bne.n	800537c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	e00b      	b.n	8005394 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005380:	2b12      	cmp	r3, #18
 8005382:	d107      	bne.n	8005394 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005392:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f000 f9c5 	bl	8005730 <I2C_WaitOnFlagUntilTimeout>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00d      	beq.n	80053c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ba:	d103      	bne.n	80053c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e035      	b.n	8005434 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053d0:	d108      	bne.n	80053e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053d2:	897b      	ldrh	r3, [r7, #10]
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	461a      	mov	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053e0:	611a      	str	r2, [r3, #16]
 80053e2:	e01b      	b.n	800541c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80053e4:	897b      	ldrh	r3, [r7, #10]
 80053e6:	11db      	asrs	r3, r3, #7
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	f003 0306 	and.w	r3, r3, #6
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	f063 030f 	orn	r3, r3, #15
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	490e      	ldr	r1, [pc, #56]	; (800543c <I2C_MasterRequestWrite+0xfc>)
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 fa0e 	bl	8005824 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e010      	b.n	8005434 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005412:	897b      	ldrh	r3, [r7, #10]
 8005414:	b2da      	uxtb	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	4907      	ldr	r1, [pc, #28]	; (8005440 <I2C_MasterRequestWrite+0x100>)
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f000 f9fe 	bl	8005824 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e000      	b.n	8005434 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3718      	adds	r7, #24
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	00010008 	.word	0x00010008
 8005440:	00010002 	.word	0x00010002

08005444 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b088      	sub	sp, #32
 8005448:	af02      	add	r7, sp, #8
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	607a      	str	r2, [r7, #4]
 800544e:	603b      	str	r3, [r7, #0]
 8005450:	460b      	mov	r3, r1
 8005452:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005458:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005468:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2b08      	cmp	r3, #8
 800546e:	d006      	beq.n	800547e <I2C_MasterRequestRead+0x3a>
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d003      	beq.n	800547e <I2C_MasterRequestRead+0x3a>
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800547c:	d108      	bne.n	8005490 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	e00b      	b.n	80054a8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005494:	2b11      	cmp	r3, #17
 8005496:	d107      	bne.n	80054a8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 f93b 	bl	8005730 <I2C_WaitOnFlagUntilTimeout>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00d      	beq.n	80054dc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ce:	d103      	bne.n	80054d8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e079      	b.n	80055d0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054e4:	d108      	bne.n	80054f8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80054e6:	897b      	ldrh	r3, [r7, #10]
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	f043 0301 	orr.w	r3, r3, #1
 80054ee:	b2da      	uxtb	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	611a      	str	r2, [r3, #16]
 80054f6:	e05f      	b.n	80055b8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80054f8:	897b      	ldrh	r3, [r7, #10]
 80054fa:	11db      	asrs	r3, r3, #7
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	f003 0306 	and.w	r3, r3, #6
 8005502:	b2db      	uxtb	r3, r3
 8005504:	f063 030f 	orn	r3, r3, #15
 8005508:	b2da      	uxtb	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	4930      	ldr	r1, [pc, #192]	; (80055d8 <I2C_MasterRequestRead+0x194>)
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f000 f984 	bl	8005824 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e054      	b.n	80055d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005526:	897b      	ldrh	r3, [r7, #10]
 8005528:	b2da      	uxtb	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	4929      	ldr	r1, [pc, #164]	; (80055dc <I2C_MasterRequestRead+0x198>)
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 f974 	bl	8005824 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e044      	b.n	80055d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005546:	2300      	movs	r3, #0
 8005548:	613b      	str	r3, [r7, #16]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	613b      	str	r3, [r7, #16]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	613b      	str	r3, [r7, #16]
 800555a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800556a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f000 f8d9 	bl	8005730 <I2C_WaitOnFlagUntilTimeout>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00d      	beq.n	80055a0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005592:	d103      	bne.n	800559c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800559a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e017      	b.n	80055d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80055a0:	897b      	ldrh	r3, [r7, #10]
 80055a2:	11db      	asrs	r3, r3, #7
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	f003 0306 	and.w	r3, r3, #6
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	f063 030e 	orn	r3, r3, #14
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	4907      	ldr	r1, [pc, #28]	; (80055dc <I2C_MasterRequestRead+0x198>)
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 f930 	bl	8005824 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e000      	b.n	80055d0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3718      	adds	r7, #24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	00010008 	.word	0x00010008
 80055dc:	00010002 	.word	0x00010002

080055e0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055e8:	2300      	movs	r3, #0
 80055ea:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80055fa:	4b4b      	ldr	r3, [pc, #300]	; (8005728 <I2C_DMAAbort+0x148>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	08db      	lsrs	r3, r3, #3
 8005600:	4a4a      	ldr	r2, [pc, #296]	; (800572c <I2C_DMAAbort+0x14c>)
 8005602:	fba2 2303 	umull	r2, r3, r2, r3
 8005606:	0a1a      	lsrs	r2, r3, #8
 8005608:	4613      	mov	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	00da      	lsls	r2, r3, #3
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d106      	bne.n	8005628 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	f043 0220 	orr.w	r2, r3, #32
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005626:	e00a      	b.n	800563e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	3b01      	subs	r3, #1
 800562c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800563c:	d0ea      	beq.n	8005614 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564a:	2200      	movs	r2, #0
 800564c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565a:	2200      	movs	r2, #0
 800565c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800566c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2200      	movs	r2, #0
 8005672:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005680:	2200      	movs	r2, #0
 8005682:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005690:	2200      	movs	r2, #0
 8005692:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0201 	bic.w	r2, r2, #1
 80056a2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b60      	cmp	r3, #96	; 0x60
 80056ae:	d10e      	bne.n	80056ce <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	2220      	movs	r2, #32
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2200      	movs	r2, #0
 80056c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80056c6:	6978      	ldr	r0, [r7, #20]
 80056c8:	f7fe fcbf 	bl	800404a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056cc:	e027      	b.n	800571e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056ce:	7cfb      	ldrb	r3, [r7, #19]
 80056d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80056d4:	2b28      	cmp	r3, #40	; 0x28
 80056d6:	d117      	bne.n	8005708 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f042 0201 	orr.w	r2, r2, #1
 80056e6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056f6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	2200      	movs	r2, #0
 80056fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2228      	movs	r2, #40	; 0x28
 8005702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005706:	e007      	b.n	8005718 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005718:	6978      	ldr	r0, [r7, #20]
 800571a:	f7fe fc8d 	bl	8004038 <HAL_I2C_ErrorCallback>
}
 800571e:	bf00      	nop
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20000028 	.word	0x20000028
 800572c:	14f8b589 	.word	0x14f8b589

08005730 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	603b      	str	r3, [r7, #0]
 800573c:	4613      	mov	r3, r2
 800573e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005740:	e048      	b.n	80057d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005748:	d044      	beq.n	80057d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800574a:	f7fc ffc5 	bl	80026d8 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	429a      	cmp	r2, r3
 8005758:	d302      	bcc.n	8005760 <I2C_WaitOnFlagUntilTimeout+0x30>
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d139      	bne.n	80057d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	0c1b      	lsrs	r3, r3, #16
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b01      	cmp	r3, #1
 8005768:	d10d      	bne.n	8005786 <I2C_WaitOnFlagUntilTimeout+0x56>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	43da      	mvns	r2, r3
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	4013      	ands	r3, r2
 8005776:	b29b      	uxth	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	bf0c      	ite	eq
 800577c:	2301      	moveq	r3, #1
 800577e:	2300      	movne	r3, #0
 8005780:	b2db      	uxtb	r3, r3
 8005782:	461a      	mov	r2, r3
 8005784:	e00c      	b.n	80057a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	43da      	mvns	r2, r3
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	4013      	ands	r3, r2
 8005792:	b29b      	uxth	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	bf0c      	ite	eq
 8005798:	2301      	moveq	r3, #1
 800579a:	2300      	movne	r3, #0
 800579c:	b2db      	uxtb	r3, r3
 800579e:	461a      	mov	r2, r3
 80057a0:	79fb      	ldrb	r3, [r7, #7]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d116      	bne.n	80057d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2220      	movs	r2, #32
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c0:	f043 0220 	orr.w	r2, r3, #32
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e023      	b.n	800581c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	0c1b      	lsrs	r3, r3, #16
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d10d      	bne.n	80057fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	43da      	mvns	r2, r3
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	4013      	ands	r3, r2
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	bf0c      	ite	eq
 80057f0:	2301      	moveq	r3, #1
 80057f2:	2300      	movne	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	461a      	mov	r2, r3
 80057f8:	e00c      	b.n	8005814 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	43da      	mvns	r2, r3
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	4013      	ands	r3, r2
 8005806:	b29b      	uxth	r3, r3
 8005808:	2b00      	cmp	r3, #0
 800580a:	bf0c      	ite	eq
 800580c:	2301      	moveq	r3, #1
 800580e:	2300      	movne	r3, #0
 8005810:	b2db      	uxtb	r3, r3
 8005812:	461a      	mov	r2, r3
 8005814:	79fb      	ldrb	r3, [r7, #7]
 8005816:	429a      	cmp	r2, r3
 8005818:	d093      	beq.n	8005742 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
 8005830:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005832:	e071      	b.n	8005918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800583e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005842:	d123      	bne.n	800588c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005852:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800585c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2220      	movs	r2, #32
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005878:	f043 0204 	orr.w	r2, r3, #4
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e067      	b.n	800595c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005892:	d041      	beq.n	8005918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005894:	f7fc ff20 	bl	80026d8 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d302      	bcc.n	80058aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d136      	bne.n	8005918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	0c1b      	lsrs	r3, r3, #16
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d10c      	bne.n	80058ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	43da      	mvns	r2, r3
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	4013      	ands	r3, r2
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	bf14      	ite	ne
 80058c6:	2301      	movne	r3, #1
 80058c8:	2300      	moveq	r3, #0
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	e00b      	b.n	80058e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	43da      	mvns	r2, r3
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	4013      	ands	r3, r2
 80058da:	b29b      	uxth	r3, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	bf14      	ite	ne
 80058e0:	2301      	movne	r3, #1
 80058e2:	2300      	moveq	r3, #0
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d016      	beq.n	8005918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005904:	f043 0220 	orr.w	r2, r3, #32
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e021      	b.n	800595c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	0c1b      	lsrs	r3, r3, #16
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b01      	cmp	r3, #1
 8005920:	d10c      	bne.n	800593c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	43da      	mvns	r2, r3
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	4013      	ands	r3, r2
 800592e:	b29b      	uxth	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	bf14      	ite	ne
 8005934:	2301      	movne	r3, #1
 8005936:	2300      	moveq	r3, #0
 8005938:	b2db      	uxtb	r3, r3
 800593a:	e00b      	b.n	8005954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	43da      	mvns	r2, r3
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	4013      	ands	r3, r2
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	bf14      	ite	ne
 800594e:	2301      	movne	r3, #1
 8005950:	2300      	moveq	r3, #0
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	f47f af6d 	bne.w	8005834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005970:	e034      	b.n	80059dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f000 f915 	bl	8005ba2 <I2C_IsAcknowledgeFailed>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e034      	b.n	80059ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005988:	d028      	beq.n	80059dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800598a:	f7fc fea5 	bl	80026d8 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	429a      	cmp	r2, r3
 8005998:	d302      	bcc.n	80059a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d11d      	bne.n	80059dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059aa:	2b80      	cmp	r3, #128	; 0x80
 80059ac:	d016      	beq.n	80059dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2220      	movs	r2, #32
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c8:	f043 0220 	orr.w	r2, r3, #32
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e007      	b.n	80059ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e6:	2b80      	cmp	r3, #128	; 0x80
 80059e8:	d1c3      	bne.n	8005972 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a00:	e034      	b.n	8005a6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f000 f8cd 	bl	8005ba2 <I2C_IsAcknowledgeFailed>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e034      	b.n	8005a7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a18:	d028      	beq.n	8005a6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a1a:	f7fc fe5d 	bl	80026d8 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d302      	bcc.n	8005a30 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d11d      	bne.n	8005a6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	f003 0304 	and.w	r3, r3, #4
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d016      	beq.n	8005a6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2220      	movs	r2, #32
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a58:	f043 0220 	orr.w	r2, r3, #32
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e007      	b.n	8005a7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	f003 0304 	and.w	r3, r3, #4
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	d1c3      	bne.n	8005a02 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005a90:	4b13      	ldr	r3, [pc, #76]	; (8005ae0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	08db      	lsrs	r3, r3, #3
 8005a96:	4a13      	ldr	r2, [pc, #76]	; (8005ae4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005a98:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9c:	0a1a      	lsrs	r2, r3, #8
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d107      	bne.n	8005ac2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	f043 0220 	orr.w	r2, r3, #32
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e008      	b.n	8005ad4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ad0:	d0e9      	beq.n	8005aa6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bc80      	pop	{r7}
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	20000028 	.word	0x20000028
 8005ae4:	14f8b589 	.word	0x14f8b589

08005ae8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005af4:	e049      	b.n	8005b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	f003 0310 	and.w	r3, r3, #16
 8005b00:	2b10      	cmp	r3, #16
 8005b02:	d119      	bne.n	8005b38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f06f 0210 	mvn.w	r2, #16
 8005b0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e030      	b.n	8005b9a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b38:	f7fc fdce 	bl	80026d8 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d302      	bcc.n	8005b4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d11d      	bne.n	8005b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b58:	2b40      	cmp	r3, #64	; 0x40
 8005b5a:	d016      	beq.n	8005b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	f043 0220 	orr.w	r2, r3, #32
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e007      	b.n	8005b9a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b94:	2b40      	cmp	r3, #64	; 0x40
 8005b96:	d1ae      	bne.n	8005af6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb8:	d11b      	bne.n	8005bf2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bc2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bde:	f043 0204 	orr.w	r2, r3, #4
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e000      	b.n	8005bf4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bc80      	pop	{r7}
 8005bfc:	4770      	bx	lr

08005bfe <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005c0e:	d103      	bne.n	8005c18 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005c16:	e007      	b.n	8005c28 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005c20:	d102      	bne.n	8005c28 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2208      	movs	r2, #8
 8005c26:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bc80      	pop	{r7}
 8005c30:	4770      	bx	lr
	...

08005c34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e272      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 8087 	beq.w	8005d62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c54:	4b92      	ldr	r3, [pc, #584]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f003 030c 	and.w	r3, r3, #12
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	d00c      	beq.n	8005c7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005c60:	4b8f      	ldr	r3, [pc, #572]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f003 030c 	and.w	r3, r3, #12
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d112      	bne.n	8005c92 <HAL_RCC_OscConfig+0x5e>
 8005c6c:	4b8c      	ldr	r3, [pc, #560]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c78:	d10b      	bne.n	8005c92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c7a:	4b89      	ldr	r3, [pc, #548]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d06c      	beq.n	8005d60 <HAL_RCC_OscConfig+0x12c>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d168      	bne.n	8005d60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e24c      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c9a:	d106      	bne.n	8005caa <HAL_RCC_OscConfig+0x76>
 8005c9c:	4b80      	ldr	r3, [pc, #512]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a7f      	ldr	r2, [pc, #508]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ca6:	6013      	str	r3, [r2, #0]
 8005ca8:	e02e      	b.n	8005d08 <HAL_RCC_OscConfig+0xd4>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10c      	bne.n	8005ccc <HAL_RCC_OscConfig+0x98>
 8005cb2:	4b7b      	ldr	r3, [pc, #492]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a7a      	ldr	r2, [pc, #488]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	4b78      	ldr	r3, [pc, #480]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a77      	ldr	r2, [pc, #476]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005cc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	e01d      	b.n	8005d08 <HAL_RCC_OscConfig+0xd4>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cd4:	d10c      	bne.n	8005cf0 <HAL_RCC_OscConfig+0xbc>
 8005cd6:	4b72      	ldr	r3, [pc, #456]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a71      	ldr	r2, [pc, #452]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ce0:	6013      	str	r3, [r2, #0]
 8005ce2:	4b6f      	ldr	r3, [pc, #444]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a6e      	ldr	r2, [pc, #440]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	e00b      	b.n	8005d08 <HAL_RCC_OscConfig+0xd4>
 8005cf0:	4b6b      	ldr	r3, [pc, #428]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a6a      	ldr	r2, [pc, #424]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	4b68      	ldr	r3, [pc, #416]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a67      	ldr	r2, [pc, #412]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d013      	beq.n	8005d38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d10:	f7fc fce2 	bl	80026d8 <HAL_GetTick>
 8005d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d16:	e008      	b.n	8005d2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d18:	f7fc fcde 	bl	80026d8 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b64      	cmp	r3, #100	; 0x64
 8005d24:	d901      	bls.n	8005d2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e200      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d2a:	4b5d      	ldr	r3, [pc, #372]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d0f0      	beq.n	8005d18 <HAL_RCC_OscConfig+0xe4>
 8005d36:	e014      	b.n	8005d62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d38:	f7fc fcce 	bl	80026d8 <HAL_GetTick>
 8005d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d3e:	e008      	b.n	8005d52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d40:	f7fc fcca 	bl	80026d8 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b64      	cmp	r3, #100	; 0x64
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e1ec      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d52:	4b53      	ldr	r3, [pc, #332]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1f0      	bne.n	8005d40 <HAL_RCC_OscConfig+0x10c>
 8005d5e:	e000      	b.n	8005d62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d063      	beq.n	8005e36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d6e:	4b4c      	ldr	r3, [pc, #304]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f003 030c 	and.w	r3, r3, #12
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00b      	beq.n	8005d92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005d7a:	4b49      	ldr	r3, [pc, #292]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f003 030c 	and.w	r3, r3, #12
 8005d82:	2b08      	cmp	r3, #8
 8005d84:	d11c      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x18c>
 8005d86:	4b46      	ldr	r3, [pc, #280]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d116      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d92:	4b43      	ldr	r3, [pc, #268]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d005      	beq.n	8005daa <HAL_RCC_OscConfig+0x176>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d001      	beq.n	8005daa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e1c0      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005daa:	4b3d      	ldr	r3, [pc, #244]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	4939      	ldr	r1, [pc, #228]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dbe:	e03a      	b.n	8005e36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d020      	beq.n	8005e0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dc8:	4b36      	ldr	r3, [pc, #216]	; (8005ea4 <HAL_RCC_OscConfig+0x270>)
 8005dca:	2201      	movs	r2, #1
 8005dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dce:	f7fc fc83 	bl	80026d8 <HAL_GetTick>
 8005dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dd4:	e008      	b.n	8005de8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dd6:	f7fc fc7f 	bl	80026d8 <HAL_GetTick>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d901      	bls.n	8005de8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e1a1      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005de8:	4b2d      	ldr	r3, [pc, #180]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0302 	and.w	r3, r3, #2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d0f0      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005df4:	4b2a      	ldr	r3, [pc, #168]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	00db      	lsls	r3, r3, #3
 8005e02:	4927      	ldr	r1, [pc, #156]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	600b      	str	r3, [r1, #0]
 8005e08:	e015      	b.n	8005e36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e0a:	4b26      	ldr	r3, [pc, #152]	; (8005ea4 <HAL_RCC_OscConfig+0x270>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e10:	f7fc fc62 	bl	80026d8 <HAL_GetTick>
 8005e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e16:	e008      	b.n	8005e2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e18:	f7fc fc5e 	bl	80026d8 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d901      	bls.n	8005e2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e180      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e2a:	4b1d      	ldr	r3, [pc, #116]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1f0      	bne.n	8005e18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0308 	and.w	r3, r3, #8
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d03a      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d019      	beq.n	8005e7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e4a:	4b17      	ldr	r3, [pc, #92]	; (8005ea8 <HAL_RCC_OscConfig+0x274>)
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e50:	f7fc fc42 	bl	80026d8 <HAL_GetTick>
 8005e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e56:	e008      	b.n	8005e6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e58:	f7fc fc3e 	bl	80026d8 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e160      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0f0      	beq.n	8005e58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005e76:	2001      	movs	r0, #1
 8005e78:	f000 face 	bl	8006418 <RCC_Delay>
 8005e7c:	e01c      	b.n	8005eb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ea8 <HAL_RCC_OscConfig+0x274>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e84:	f7fc fc28 	bl	80026d8 <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e8a:	e00f      	b.n	8005eac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e8c:	f7fc fc24 	bl	80026d8 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d908      	bls.n	8005eac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e146      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
 8005e9e:	bf00      	nop
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	42420000 	.word	0x42420000
 8005ea8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eac:	4b92      	ldr	r3, [pc, #584]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1e9      	bne.n	8005e8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0304 	and.w	r3, r3, #4
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 80a6 	beq.w	8006012 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005eca:	4b8b      	ldr	r3, [pc, #556]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10d      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ed6:	4b88      	ldr	r3, [pc, #544]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	4a87      	ldr	r2, [pc, #540]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee0:	61d3      	str	r3, [r2, #28]
 8005ee2:	4b85      	ldr	r3, [pc, #532]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eea:	60bb      	str	r3, [r7, #8]
 8005eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ef2:	4b82      	ldr	r3, [pc, #520]	; (80060fc <HAL_RCC_OscConfig+0x4c8>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d118      	bne.n	8005f30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005efe:	4b7f      	ldr	r3, [pc, #508]	; (80060fc <HAL_RCC_OscConfig+0x4c8>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a7e      	ldr	r2, [pc, #504]	; (80060fc <HAL_RCC_OscConfig+0x4c8>)
 8005f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f0a:	f7fc fbe5 	bl	80026d8 <HAL_GetTick>
 8005f0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f10:	e008      	b.n	8005f24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f12:	f7fc fbe1 	bl	80026d8 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	2b64      	cmp	r3, #100	; 0x64
 8005f1e:	d901      	bls.n	8005f24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e103      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f24:	4b75      	ldr	r3, [pc, #468]	; (80060fc <HAL_RCC_OscConfig+0x4c8>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d0f0      	beq.n	8005f12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d106      	bne.n	8005f46 <HAL_RCC_OscConfig+0x312>
 8005f38:	4b6f      	ldr	r3, [pc, #444]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f3a:	6a1b      	ldr	r3, [r3, #32]
 8005f3c:	4a6e      	ldr	r2, [pc, #440]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f3e:	f043 0301 	orr.w	r3, r3, #1
 8005f42:	6213      	str	r3, [r2, #32]
 8005f44:	e02d      	b.n	8005fa2 <HAL_RCC_OscConfig+0x36e>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10c      	bne.n	8005f68 <HAL_RCC_OscConfig+0x334>
 8005f4e:	4b6a      	ldr	r3, [pc, #424]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	4a69      	ldr	r2, [pc, #420]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f54:	f023 0301 	bic.w	r3, r3, #1
 8005f58:	6213      	str	r3, [r2, #32]
 8005f5a:	4b67      	ldr	r3, [pc, #412]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	4a66      	ldr	r2, [pc, #408]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f60:	f023 0304 	bic.w	r3, r3, #4
 8005f64:	6213      	str	r3, [r2, #32]
 8005f66:	e01c      	b.n	8005fa2 <HAL_RCC_OscConfig+0x36e>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	2b05      	cmp	r3, #5
 8005f6e:	d10c      	bne.n	8005f8a <HAL_RCC_OscConfig+0x356>
 8005f70:	4b61      	ldr	r3, [pc, #388]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	4a60      	ldr	r2, [pc, #384]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f76:	f043 0304 	orr.w	r3, r3, #4
 8005f7a:	6213      	str	r3, [r2, #32]
 8005f7c:	4b5e      	ldr	r3, [pc, #376]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
 8005f80:	4a5d      	ldr	r2, [pc, #372]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f82:	f043 0301 	orr.w	r3, r3, #1
 8005f86:	6213      	str	r3, [r2, #32]
 8005f88:	e00b      	b.n	8005fa2 <HAL_RCC_OscConfig+0x36e>
 8005f8a:	4b5b      	ldr	r3, [pc, #364]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	4a5a      	ldr	r2, [pc, #360]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f90:	f023 0301 	bic.w	r3, r3, #1
 8005f94:	6213      	str	r3, [r2, #32]
 8005f96:	4b58      	ldr	r3, [pc, #352]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	4a57      	ldr	r2, [pc, #348]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f9c:	f023 0304 	bic.w	r3, r3, #4
 8005fa0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d015      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005faa:	f7fc fb95 	bl	80026d8 <HAL_GetTick>
 8005fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fb0:	e00a      	b.n	8005fc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fb2:	f7fc fb91 	bl	80026d8 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d901      	bls.n	8005fc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e0b1      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fc8:	4b4b      	ldr	r3, [pc, #300]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	f003 0302 	and.w	r3, r3, #2
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d0ee      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x37e>
 8005fd4:	e014      	b.n	8006000 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fd6:	f7fc fb7f 	bl	80026d8 <HAL_GetTick>
 8005fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fdc:	e00a      	b.n	8005ff4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fde:	f7fc fb7b 	bl	80026d8 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d901      	bls.n	8005ff4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e09b      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ff4:	4b40      	ldr	r3, [pc, #256]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1ee      	bne.n	8005fde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006000:	7dfb      	ldrb	r3, [r7, #23]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d105      	bne.n	8006012 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006006:	4b3c      	ldr	r3, [pc, #240]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	4a3b      	ldr	r2, [pc, #236]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 800600c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006010:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 8087 	beq.w	800612a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800601c:	4b36      	ldr	r3, [pc, #216]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f003 030c 	and.w	r3, r3, #12
 8006024:	2b08      	cmp	r3, #8
 8006026:	d061      	beq.n	80060ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	2b02      	cmp	r3, #2
 800602e:	d146      	bne.n	80060be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006030:	4b33      	ldr	r3, [pc, #204]	; (8006100 <HAL_RCC_OscConfig+0x4cc>)
 8006032:	2200      	movs	r2, #0
 8006034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006036:	f7fc fb4f 	bl	80026d8 <HAL_GetTick>
 800603a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800603c:	e008      	b.n	8006050 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800603e:	f7fc fb4b 	bl	80026d8 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	2b02      	cmp	r3, #2
 800604a:	d901      	bls.n	8006050 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e06d      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006050:	4b29      	ldr	r3, [pc, #164]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1f0      	bne.n	800603e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a1b      	ldr	r3, [r3, #32]
 8006060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006064:	d108      	bne.n	8006078 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006066:	4b24      	ldr	r3, [pc, #144]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	4921      	ldr	r1, [pc, #132]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8006074:	4313      	orrs	r3, r2
 8006076:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006078:	4b1f      	ldr	r3, [pc, #124]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a19      	ldr	r1, [r3, #32]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006088:	430b      	orrs	r3, r1
 800608a:	491b      	ldr	r1, [pc, #108]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 800608c:	4313      	orrs	r3, r2
 800608e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006090:	4b1b      	ldr	r3, [pc, #108]	; (8006100 <HAL_RCC_OscConfig+0x4cc>)
 8006092:	2201      	movs	r2, #1
 8006094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006096:	f7fc fb1f 	bl	80026d8 <HAL_GetTick>
 800609a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800609c:	e008      	b.n	80060b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800609e:	f7fc fb1b 	bl	80026d8 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d901      	bls.n	80060b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e03d      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060b0:	4b11      	ldr	r3, [pc, #68]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d0f0      	beq.n	800609e <HAL_RCC_OscConfig+0x46a>
 80060bc:	e035      	b.n	800612a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060be:	4b10      	ldr	r3, [pc, #64]	; (8006100 <HAL_RCC_OscConfig+0x4cc>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c4:	f7fc fb08 	bl	80026d8 <HAL_GetTick>
 80060c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060ca:	e008      	b.n	80060de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060cc:	f7fc fb04 	bl	80026d8 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d901      	bls.n	80060de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e026      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060de:	4b06      	ldr	r3, [pc, #24]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1f0      	bne.n	80060cc <HAL_RCC_OscConfig+0x498>
 80060ea:	e01e      	b.n	800612a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d107      	bne.n	8006104 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e019      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
 80060f8:	40021000 	.word	0x40021000
 80060fc:	40007000 	.word	0x40007000
 8006100:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006104:	4b0b      	ldr	r3, [pc, #44]	; (8006134 <HAL_RCC_OscConfig+0x500>)
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	429a      	cmp	r2, r3
 8006116:	d106      	bne.n	8006126 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006122:	429a      	cmp	r2, r3
 8006124:	d001      	beq.n	800612a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e000      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3718      	adds	r7, #24
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	40021000 	.word	0x40021000

08006138 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e0d0      	b.n	80062ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800614c:	4b6a      	ldr	r3, [pc, #424]	; (80062f8 <HAL_RCC_ClockConfig+0x1c0>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0307 	and.w	r3, r3, #7
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	429a      	cmp	r2, r3
 8006158:	d910      	bls.n	800617c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800615a:	4b67      	ldr	r3, [pc, #412]	; (80062f8 <HAL_RCC_ClockConfig+0x1c0>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f023 0207 	bic.w	r2, r3, #7
 8006162:	4965      	ldr	r1, [pc, #404]	; (80062f8 <HAL_RCC_ClockConfig+0x1c0>)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	4313      	orrs	r3, r2
 8006168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800616a:	4b63      	ldr	r3, [pc, #396]	; (80062f8 <HAL_RCC_ClockConfig+0x1c0>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0307 	and.w	r3, r3, #7
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	429a      	cmp	r2, r3
 8006176:	d001      	beq.n	800617c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e0b8      	b.n	80062ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d020      	beq.n	80061ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0304 	and.w	r3, r3, #4
 8006190:	2b00      	cmp	r3, #0
 8006192:	d005      	beq.n	80061a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006194:	4b59      	ldr	r3, [pc, #356]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	4a58      	ldr	r2, [pc, #352]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 800619a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800619e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0308 	and.w	r3, r3, #8
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d005      	beq.n	80061b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061ac:	4b53      	ldr	r3, [pc, #332]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	4a52      	ldr	r2, [pc, #328]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 80061b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80061b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061b8:	4b50      	ldr	r3, [pc, #320]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	494d      	ldr	r1, [pc, #308]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d040      	beq.n	8006258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d107      	bne.n	80061ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061de:	4b47      	ldr	r3, [pc, #284]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d115      	bne.n	8006216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e07f      	b.n	80062ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d107      	bne.n	8006206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061f6:	4b41      	ldr	r3, [pc, #260]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d109      	bne.n	8006216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e073      	b.n	80062ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006206:	4b3d      	ldr	r3, [pc, #244]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e06b      	b.n	80062ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006216:	4b39      	ldr	r3, [pc, #228]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f023 0203 	bic.w	r2, r3, #3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	4936      	ldr	r1, [pc, #216]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 8006224:	4313      	orrs	r3, r2
 8006226:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006228:	f7fc fa56 	bl	80026d8 <HAL_GetTick>
 800622c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800622e:	e00a      	b.n	8006246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006230:	f7fc fa52 	bl	80026d8 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	f241 3288 	movw	r2, #5000	; 0x1388
 800623e:	4293      	cmp	r3, r2
 8006240:	d901      	bls.n	8006246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e053      	b.n	80062ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006246:	4b2d      	ldr	r3, [pc, #180]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f003 020c 	and.w	r2, r3, #12
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	429a      	cmp	r2, r3
 8006256:	d1eb      	bne.n	8006230 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006258:	4b27      	ldr	r3, [pc, #156]	; (80062f8 <HAL_RCC_ClockConfig+0x1c0>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	429a      	cmp	r2, r3
 8006264:	d210      	bcs.n	8006288 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006266:	4b24      	ldr	r3, [pc, #144]	; (80062f8 <HAL_RCC_ClockConfig+0x1c0>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f023 0207 	bic.w	r2, r3, #7
 800626e:	4922      	ldr	r1, [pc, #136]	; (80062f8 <HAL_RCC_ClockConfig+0x1c0>)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	4313      	orrs	r3, r2
 8006274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006276:	4b20      	ldr	r3, [pc, #128]	; (80062f8 <HAL_RCC_ClockConfig+0x1c0>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0307 	and.w	r3, r3, #7
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	429a      	cmp	r2, r3
 8006282:	d001      	beq.n	8006288 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e032      	b.n	80062ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0304 	and.w	r3, r3, #4
 8006290:	2b00      	cmp	r3, #0
 8006292:	d008      	beq.n	80062a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006294:	4b19      	ldr	r3, [pc, #100]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	4916      	ldr	r1, [pc, #88]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0308 	and.w	r3, r3, #8
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d009      	beq.n	80062c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80062b2:	4b12      	ldr	r3, [pc, #72]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	490e      	ldr	r1, [pc, #56]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062c6:	f000 f821 	bl	800630c <HAL_RCC_GetSysClockFreq>
 80062ca:	4602      	mov	r2, r0
 80062cc:	4b0b      	ldr	r3, [pc, #44]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	091b      	lsrs	r3, r3, #4
 80062d2:	f003 030f 	and.w	r3, r3, #15
 80062d6:	490a      	ldr	r1, [pc, #40]	; (8006300 <HAL_RCC_ClockConfig+0x1c8>)
 80062d8:	5ccb      	ldrb	r3, [r1, r3]
 80062da:	fa22 f303 	lsr.w	r3, r2, r3
 80062de:	4a09      	ldr	r2, [pc, #36]	; (8006304 <HAL_RCC_ClockConfig+0x1cc>)
 80062e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80062e2:	4b09      	ldr	r3, [pc, #36]	; (8006308 <HAL_RCC_ClockConfig+0x1d0>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fc f9b4 	bl	8002654 <HAL_InitTick>

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	40022000 	.word	0x40022000
 80062fc:	40021000 	.word	0x40021000
 8006300:	0800f8d8 	.word	0x0800f8d8
 8006304:	20000028 	.word	0x20000028
 8006308:	2000002c 	.word	0x2000002c

0800630c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800630c:	b480      	push	{r7}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006312:	2300      	movs	r3, #0
 8006314:	60fb      	str	r3, [r7, #12]
 8006316:	2300      	movs	r3, #0
 8006318:	60bb      	str	r3, [r7, #8]
 800631a:	2300      	movs	r3, #0
 800631c:	617b      	str	r3, [r7, #20]
 800631e:	2300      	movs	r3, #0
 8006320:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006322:	2300      	movs	r3, #0
 8006324:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006326:	4b1e      	ldr	r3, [pc, #120]	; (80063a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f003 030c 	and.w	r3, r3, #12
 8006332:	2b04      	cmp	r3, #4
 8006334:	d002      	beq.n	800633c <HAL_RCC_GetSysClockFreq+0x30>
 8006336:	2b08      	cmp	r3, #8
 8006338:	d003      	beq.n	8006342 <HAL_RCC_GetSysClockFreq+0x36>
 800633a:	e027      	b.n	800638c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800633c:	4b19      	ldr	r3, [pc, #100]	; (80063a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800633e:	613b      	str	r3, [r7, #16]
      break;
 8006340:	e027      	b.n	8006392 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	0c9b      	lsrs	r3, r3, #18
 8006346:	f003 030f 	and.w	r3, r3, #15
 800634a:	4a17      	ldr	r2, [pc, #92]	; (80063a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800634c:	5cd3      	ldrb	r3, [r2, r3]
 800634e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d010      	beq.n	800637c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800635a:	4b11      	ldr	r3, [pc, #68]	; (80063a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	0c5b      	lsrs	r3, r3, #17
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	4a11      	ldr	r2, [pc, #68]	; (80063ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8006366:	5cd3      	ldrb	r3, [r2, r3]
 8006368:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a0d      	ldr	r2, [pc, #52]	; (80063a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800636e:	fb03 f202 	mul.w	r2, r3, r2
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	fbb2 f3f3 	udiv	r3, r2, r3
 8006378:	617b      	str	r3, [r7, #20]
 800637a:	e004      	b.n	8006386 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a0c      	ldr	r2, [pc, #48]	; (80063b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006380:	fb02 f303 	mul.w	r3, r2, r3
 8006384:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	613b      	str	r3, [r7, #16]
      break;
 800638a:	e002      	b.n	8006392 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800638c:	4b05      	ldr	r3, [pc, #20]	; (80063a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800638e:	613b      	str	r3, [r7, #16]
      break;
 8006390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006392:	693b      	ldr	r3, [r7, #16]
}
 8006394:	4618      	mov	r0, r3
 8006396:	371c      	adds	r7, #28
 8006398:	46bd      	mov	sp, r7
 800639a:	bc80      	pop	{r7}
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	40021000 	.word	0x40021000
 80063a4:	007a1200 	.word	0x007a1200
 80063a8:	0800f8f0 	.word	0x0800f8f0
 80063ac:	0800f900 	.word	0x0800f900
 80063b0:	003d0900 	.word	0x003d0900

080063b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063b8:	4b02      	ldr	r3, [pc, #8]	; (80063c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80063ba:	681b      	ldr	r3, [r3, #0]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	46bd      	mov	sp, r7
 80063c0:	bc80      	pop	{r7}
 80063c2:	4770      	bx	lr
 80063c4:	20000028 	.word	0x20000028

080063c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80063cc:	f7ff fff2 	bl	80063b4 <HAL_RCC_GetHCLKFreq>
 80063d0:	4602      	mov	r2, r0
 80063d2:	4b05      	ldr	r3, [pc, #20]	; (80063e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	0a1b      	lsrs	r3, r3, #8
 80063d8:	f003 0307 	and.w	r3, r3, #7
 80063dc:	4903      	ldr	r1, [pc, #12]	; (80063ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80063de:	5ccb      	ldrb	r3, [r1, r3]
 80063e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	40021000 	.word	0x40021000
 80063ec:	0800f8e8 	.word	0x0800f8e8

080063f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80063f4:	f7ff ffde 	bl	80063b4 <HAL_RCC_GetHCLKFreq>
 80063f8:	4602      	mov	r2, r0
 80063fa:	4b05      	ldr	r3, [pc, #20]	; (8006410 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	0adb      	lsrs	r3, r3, #11
 8006400:	f003 0307 	and.w	r3, r3, #7
 8006404:	4903      	ldr	r1, [pc, #12]	; (8006414 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006406:	5ccb      	ldrb	r3, [r1, r3]
 8006408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800640c:	4618      	mov	r0, r3
 800640e:	bd80      	pop	{r7, pc}
 8006410:	40021000 	.word	0x40021000
 8006414:	0800f8e8 	.word	0x0800f8e8

08006418 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006420:	4b0a      	ldr	r3, [pc, #40]	; (800644c <RCC_Delay+0x34>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a0a      	ldr	r2, [pc, #40]	; (8006450 <RCC_Delay+0x38>)
 8006426:	fba2 2303 	umull	r2, r3, r2, r3
 800642a:	0a5b      	lsrs	r3, r3, #9
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	fb02 f303 	mul.w	r3, r2, r3
 8006432:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006434:	bf00      	nop
  }
  while (Delay --);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	1e5a      	subs	r2, r3, #1
 800643a:	60fa      	str	r2, [r7, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1f9      	bne.n	8006434 <RCC_Delay+0x1c>
}
 8006440:	bf00      	nop
 8006442:	bf00      	nop
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	bc80      	pop	{r7}
 800644a:	4770      	bx	lr
 800644c:	20000028 	.word	0x20000028
 8006450:	10624dd3 	.word	0x10624dd3

08006454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e041      	b.n	80064ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d106      	bne.n	8006480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7fb ff5e 	bl	800233c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	3304      	adds	r3, #4
 8006490:	4619      	mov	r1, r3
 8006492:	4610      	mov	r0, r2
 8006494:	f000 fc28 	bl	8006ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
	...

080064f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b01      	cmp	r3, #1
 8006506:	d001      	beq.n	800650c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e03a      	b.n	8006582 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2202      	movs	r2, #2
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68da      	ldr	r2, [r3, #12]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0201 	orr.w	r2, r2, #1
 8006522:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a18      	ldr	r2, [pc, #96]	; (800658c <HAL_TIM_Base_Start_IT+0x98>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d00e      	beq.n	800654c <HAL_TIM_Base_Start_IT+0x58>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006536:	d009      	beq.n	800654c <HAL_TIM_Base_Start_IT+0x58>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a14      	ldr	r2, [pc, #80]	; (8006590 <HAL_TIM_Base_Start_IT+0x9c>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d004      	beq.n	800654c <HAL_TIM_Base_Start_IT+0x58>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a13      	ldr	r2, [pc, #76]	; (8006594 <HAL_TIM_Base_Start_IT+0xa0>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d111      	bne.n	8006570 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2b06      	cmp	r3, #6
 800655c:	d010      	beq.n	8006580 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f042 0201 	orr.w	r2, r2, #1
 800656c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800656e:	e007      	b.n	8006580 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0201 	orr.w	r2, r2, #1
 800657e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	bc80      	pop	{r7}
 800658a:	4770      	bx	lr
 800658c:	40012c00 	.word	0x40012c00
 8006590:	40000400 	.word	0x40000400
 8006594:	40000800 	.word	0x40000800

08006598 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d101      	bne.n	80065aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e041      	b.n	800662e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d106      	bne.n	80065c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7fb fee0 	bl	8002384 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2202      	movs	r2, #2
 80065c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	3304      	adds	r3, #4
 80065d4:	4619      	mov	r1, r3
 80065d6:	4610      	mov	r0, r2
 80065d8:	f000 fb86 	bl	8006ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
	...

08006638 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d109      	bne.n	800665c <HAL_TIM_PWM_Start+0x24>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b01      	cmp	r3, #1
 8006652:	bf14      	ite	ne
 8006654:	2301      	movne	r3, #1
 8006656:	2300      	moveq	r3, #0
 8006658:	b2db      	uxtb	r3, r3
 800665a:	e022      	b.n	80066a2 <HAL_TIM_PWM_Start+0x6a>
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	2b04      	cmp	r3, #4
 8006660:	d109      	bne.n	8006676 <HAL_TIM_PWM_Start+0x3e>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b01      	cmp	r3, #1
 800666c:	bf14      	ite	ne
 800666e:	2301      	movne	r3, #1
 8006670:	2300      	moveq	r3, #0
 8006672:	b2db      	uxtb	r3, r3
 8006674:	e015      	b.n	80066a2 <HAL_TIM_PWM_Start+0x6a>
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	2b08      	cmp	r3, #8
 800667a:	d109      	bne.n	8006690 <HAL_TIM_PWM_Start+0x58>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b01      	cmp	r3, #1
 8006686:	bf14      	ite	ne
 8006688:	2301      	movne	r3, #1
 800668a:	2300      	moveq	r3, #0
 800668c:	b2db      	uxtb	r3, r3
 800668e:	e008      	b.n	80066a2 <HAL_TIM_PWM_Start+0x6a>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b01      	cmp	r3, #1
 800669a:	bf14      	ite	ne
 800669c:	2301      	movne	r3, #1
 800669e:	2300      	moveq	r3, #0
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d001      	beq.n	80066aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e05e      	b.n	8006768 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d104      	bne.n	80066ba <HAL_TIM_PWM_Start+0x82>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066b8:	e013      	b.n	80066e2 <HAL_TIM_PWM_Start+0xaa>
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2b04      	cmp	r3, #4
 80066be:	d104      	bne.n	80066ca <HAL_TIM_PWM_Start+0x92>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2202      	movs	r2, #2
 80066c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066c8:	e00b      	b.n	80066e2 <HAL_TIM_PWM_Start+0xaa>
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b08      	cmp	r3, #8
 80066ce:	d104      	bne.n	80066da <HAL_TIM_PWM_Start+0xa2>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2202      	movs	r2, #2
 80066d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066d8:	e003      	b.n	80066e2 <HAL_TIM_PWM_Start+0xaa>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2202      	movs	r2, #2
 80066de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2201      	movs	r2, #1
 80066e8:	6839      	ldr	r1, [r7, #0]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 fd7c 	bl	80071e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a1e      	ldr	r2, [pc, #120]	; (8006770 <HAL_TIM_PWM_Start+0x138>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d107      	bne.n	800670a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006708:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a18      	ldr	r2, [pc, #96]	; (8006770 <HAL_TIM_PWM_Start+0x138>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d00e      	beq.n	8006732 <HAL_TIM_PWM_Start+0xfa>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800671c:	d009      	beq.n	8006732 <HAL_TIM_PWM_Start+0xfa>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a14      	ldr	r2, [pc, #80]	; (8006774 <HAL_TIM_PWM_Start+0x13c>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d004      	beq.n	8006732 <HAL_TIM_PWM_Start+0xfa>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a12      	ldr	r2, [pc, #72]	; (8006778 <HAL_TIM_PWM_Start+0x140>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d111      	bne.n	8006756 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f003 0307 	and.w	r3, r3, #7
 800673c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2b06      	cmp	r3, #6
 8006742:	d010      	beq.n	8006766 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f042 0201 	orr.w	r2, r2, #1
 8006752:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006754:	e007      	b.n	8006766 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f042 0201 	orr.w	r2, r2, #1
 8006764:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	40012c00 	.word	0x40012c00
 8006774:	40000400 	.word	0x40000400
 8006778:	40000800 	.word	0x40000800

0800677c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b02      	cmp	r3, #2
 8006790:	d122      	bne.n	80067d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b02      	cmp	r3, #2
 800679e:	d11b      	bne.n	80067d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f06f 0202 	mvn.w	r2, #2
 80067a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	f003 0303 	and.w	r3, r3, #3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fa76 	bl	8006cb0 <HAL_TIM_IC_CaptureCallback>
 80067c4:	e005      	b.n	80067d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fa69 	bl	8006c9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 fa78 	bl	8006cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	f003 0304 	and.w	r3, r3, #4
 80067e2:	2b04      	cmp	r3, #4
 80067e4:	d122      	bne.n	800682c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f003 0304 	and.w	r3, r3, #4
 80067f0:	2b04      	cmp	r3, #4
 80067f2:	d11b      	bne.n	800682c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f06f 0204 	mvn.w	r2, #4
 80067fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2202      	movs	r2, #2
 8006802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fa4c 	bl	8006cb0 <HAL_TIM_IC_CaptureCallback>
 8006818:	e005      	b.n	8006826 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 fa3f 	bl	8006c9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fa4e 	bl	8006cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	f003 0308 	and.w	r3, r3, #8
 8006836:	2b08      	cmp	r3, #8
 8006838:	d122      	bne.n	8006880 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f003 0308 	and.w	r3, r3, #8
 8006844:	2b08      	cmp	r3, #8
 8006846:	d11b      	bne.n	8006880 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f06f 0208 	mvn.w	r2, #8
 8006850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2204      	movs	r2, #4
 8006856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	f003 0303 	and.w	r3, r3, #3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d003      	beq.n	800686e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fa22 	bl	8006cb0 <HAL_TIM_IC_CaptureCallback>
 800686c:	e005      	b.n	800687a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fa15 	bl	8006c9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fa24 	bl	8006cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	f003 0310 	and.w	r3, r3, #16
 800688a:	2b10      	cmp	r3, #16
 800688c:	d122      	bne.n	80068d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f003 0310 	and.w	r3, r3, #16
 8006898:	2b10      	cmp	r3, #16
 800689a:	d11b      	bne.n	80068d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f06f 0210 	mvn.w	r2, #16
 80068a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2208      	movs	r2, #8
 80068aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f9f8 	bl	8006cb0 <HAL_TIM_IC_CaptureCallback>
 80068c0:	e005      	b.n	80068ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f9eb 	bl	8006c9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f9fa 	bl	8006cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d10e      	bne.n	8006900 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d107      	bne.n	8006900 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f06f 0201 	mvn.w	r2, #1
 80068f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7fa fc90 	bl	8001220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800690a:	2b80      	cmp	r3, #128	; 0x80
 800690c:	d10e      	bne.n	800692c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006918:	2b80      	cmp	r3, #128	; 0x80
 800691a:	d107      	bne.n	800692c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fce9 	bl	80072fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006936:	2b40      	cmp	r3, #64	; 0x40
 8006938:	d10e      	bne.n	8006958 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006944:	2b40      	cmp	r3, #64	; 0x40
 8006946:	d107      	bne.n	8006958 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f9be 	bl	8006cd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	f003 0320 	and.w	r3, r3, #32
 8006962:	2b20      	cmp	r3, #32
 8006964:	d10e      	bne.n	8006984 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	f003 0320 	and.w	r3, r3, #32
 8006970:	2b20      	cmp	r3, #32
 8006972:	d107      	bne.n	8006984 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f06f 0220 	mvn.w	r2, #32
 800697c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fcb4 	bl	80072ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006984:	bf00      	nop
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006998:	2300      	movs	r3, #0
 800699a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d101      	bne.n	80069aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069a6:	2302      	movs	r3, #2
 80069a8:	e0ae      	b.n	8006b08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2b0c      	cmp	r3, #12
 80069b6:	f200 809f 	bhi.w	8006af8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80069ba:	a201      	add	r2, pc, #4	; (adr r2, 80069c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c0:	080069f5 	.word	0x080069f5
 80069c4:	08006af9 	.word	0x08006af9
 80069c8:	08006af9 	.word	0x08006af9
 80069cc:	08006af9 	.word	0x08006af9
 80069d0:	08006a35 	.word	0x08006a35
 80069d4:	08006af9 	.word	0x08006af9
 80069d8:	08006af9 	.word	0x08006af9
 80069dc:	08006af9 	.word	0x08006af9
 80069e0:	08006a77 	.word	0x08006a77
 80069e4:	08006af9 	.word	0x08006af9
 80069e8:	08006af9 	.word	0x08006af9
 80069ec:	08006af9 	.word	0x08006af9
 80069f0:	08006ab7 	.word	0x08006ab7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68b9      	ldr	r1, [r7, #8]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 f9d6 	bl	8006dac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	699a      	ldr	r2, [r3, #24]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f042 0208 	orr.w	r2, r2, #8
 8006a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	699a      	ldr	r2, [r3, #24]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f022 0204 	bic.w	r2, r2, #4
 8006a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6999      	ldr	r1, [r3, #24]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	691a      	ldr	r2, [r3, #16]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	619a      	str	r2, [r3, #24]
      break;
 8006a32:	e064      	b.n	8006afe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68b9      	ldr	r1, [r7, #8]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 fa1c 	bl	8006e78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	699a      	ldr	r2, [r3, #24]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	699a      	ldr	r2, [r3, #24]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6999      	ldr	r1, [r3, #24]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	021a      	lsls	r2, r3, #8
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	430a      	orrs	r2, r1
 8006a72:	619a      	str	r2, [r3, #24]
      break;
 8006a74:	e043      	b.n	8006afe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68b9      	ldr	r1, [r7, #8]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f000 fa65 	bl	8006f4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69da      	ldr	r2, [r3, #28]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f042 0208 	orr.w	r2, r2, #8
 8006a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69da      	ldr	r2, [r3, #28]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 0204 	bic.w	r2, r2, #4
 8006aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	69d9      	ldr	r1, [r3, #28]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	691a      	ldr	r2, [r3, #16]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	61da      	str	r2, [r3, #28]
      break;
 8006ab4:	e023      	b.n	8006afe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68b9      	ldr	r1, [r7, #8]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f000 faaf 	bl	8007020 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	69da      	ldr	r2, [r3, #28]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	69da      	ldr	r2, [r3, #28]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	69d9      	ldr	r1, [r3, #28]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	021a      	lsls	r2, r3, #8
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	61da      	str	r2, [r3, #28]
      break;
 8006af6:	e002      	b.n	8006afe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	75fb      	strb	r3, [r7, #23]
      break;
 8006afc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3718      	adds	r7, #24
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d101      	bne.n	8006b2c <HAL_TIM_ConfigClockSource+0x1c>
 8006b28:	2302      	movs	r3, #2
 8006b2a:	e0b4      	b.n	8006c96 <HAL_TIM_ConfigClockSource+0x186>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2202      	movs	r2, #2
 8006b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68ba      	ldr	r2, [r7, #8]
 8006b5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b64:	d03e      	beq.n	8006be4 <HAL_TIM_ConfigClockSource+0xd4>
 8006b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b6a:	f200 8087 	bhi.w	8006c7c <HAL_TIM_ConfigClockSource+0x16c>
 8006b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b72:	f000 8086 	beq.w	8006c82 <HAL_TIM_ConfigClockSource+0x172>
 8006b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b7a:	d87f      	bhi.n	8006c7c <HAL_TIM_ConfigClockSource+0x16c>
 8006b7c:	2b70      	cmp	r3, #112	; 0x70
 8006b7e:	d01a      	beq.n	8006bb6 <HAL_TIM_ConfigClockSource+0xa6>
 8006b80:	2b70      	cmp	r3, #112	; 0x70
 8006b82:	d87b      	bhi.n	8006c7c <HAL_TIM_ConfigClockSource+0x16c>
 8006b84:	2b60      	cmp	r3, #96	; 0x60
 8006b86:	d050      	beq.n	8006c2a <HAL_TIM_ConfigClockSource+0x11a>
 8006b88:	2b60      	cmp	r3, #96	; 0x60
 8006b8a:	d877      	bhi.n	8006c7c <HAL_TIM_ConfigClockSource+0x16c>
 8006b8c:	2b50      	cmp	r3, #80	; 0x50
 8006b8e:	d03c      	beq.n	8006c0a <HAL_TIM_ConfigClockSource+0xfa>
 8006b90:	2b50      	cmp	r3, #80	; 0x50
 8006b92:	d873      	bhi.n	8006c7c <HAL_TIM_ConfigClockSource+0x16c>
 8006b94:	2b40      	cmp	r3, #64	; 0x40
 8006b96:	d058      	beq.n	8006c4a <HAL_TIM_ConfigClockSource+0x13a>
 8006b98:	2b40      	cmp	r3, #64	; 0x40
 8006b9a:	d86f      	bhi.n	8006c7c <HAL_TIM_ConfigClockSource+0x16c>
 8006b9c:	2b30      	cmp	r3, #48	; 0x30
 8006b9e:	d064      	beq.n	8006c6a <HAL_TIM_ConfigClockSource+0x15a>
 8006ba0:	2b30      	cmp	r3, #48	; 0x30
 8006ba2:	d86b      	bhi.n	8006c7c <HAL_TIM_ConfigClockSource+0x16c>
 8006ba4:	2b20      	cmp	r3, #32
 8006ba6:	d060      	beq.n	8006c6a <HAL_TIM_ConfigClockSource+0x15a>
 8006ba8:	2b20      	cmp	r3, #32
 8006baa:	d867      	bhi.n	8006c7c <HAL_TIM_ConfigClockSource+0x16c>
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d05c      	beq.n	8006c6a <HAL_TIM_ConfigClockSource+0x15a>
 8006bb0:	2b10      	cmp	r3, #16
 8006bb2:	d05a      	beq.n	8006c6a <HAL_TIM_ConfigClockSource+0x15a>
 8006bb4:	e062      	b.n	8006c7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006bc6:	f000 faf0 	bl	80071aa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	609a      	str	r2, [r3, #8]
      break;
 8006be2:	e04f      	b.n	8006c84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006bf4:	f000 fad9 	bl	80071aa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	689a      	ldr	r2, [r3, #8]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c06:	609a      	str	r2, [r3, #8]
      break;
 8006c08:	e03c      	b.n	8006c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c16:	461a      	mov	r2, r3
 8006c18:	f000 fa50 	bl	80070bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2150      	movs	r1, #80	; 0x50
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 faa7 	bl	8007176 <TIM_ITRx_SetConfig>
      break;
 8006c28:	e02c      	b.n	8006c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c36:	461a      	mov	r2, r3
 8006c38:	f000 fa6e 	bl	8007118 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2160      	movs	r1, #96	; 0x60
 8006c42:	4618      	mov	r0, r3
 8006c44:	f000 fa97 	bl	8007176 <TIM_ITRx_SetConfig>
      break;
 8006c48:	e01c      	b.n	8006c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c56:	461a      	mov	r2, r3
 8006c58:	f000 fa30 	bl	80070bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2140      	movs	r1, #64	; 0x40
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 fa87 	bl	8007176 <TIM_ITRx_SetConfig>
      break;
 8006c68:	e00c      	b.n	8006c84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4619      	mov	r1, r3
 8006c74:	4610      	mov	r0, r2
 8006c76:	f000 fa7e 	bl	8007176 <TIM_ITRx_SetConfig>
      break;
 8006c7a:	e003      	b.n	8006c84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c80:	e000      	b.n	8006c84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b083      	sub	sp, #12
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ca6:	bf00      	nop
 8006ca8:	370c      	adds	r7, #12
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bc80      	pop	{r7}
 8006cae:	4770      	bx	lr

08006cb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bc80      	pop	{r7}
 8006cc0:	4770      	bx	lr

08006cc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b083      	sub	sp, #12
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cca:	bf00      	nop
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bc80      	pop	{r7}
 8006cd2:	4770      	bx	lr

08006cd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bc80      	pop	{r7}
 8006ce4:	4770      	bx	lr
	...

08006ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a29      	ldr	r2, [pc, #164]	; (8006da0 <TIM_Base_SetConfig+0xb8>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d00b      	beq.n	8006d18 <TIM_Base_SetConfig+0x30>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d06:	d007      	beq.n	8006d18 <TIM_Base_SetConfig+0x30>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a26      	ldr	r2, [pc, #152]	; (8006da4 <TIM_Base_SetConfig+0xbc>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d003      	beq.n	8006d18 <TIM_Base_SetConfig+0x30>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a25      	ldr	r2, [pc, #148]	; (8006da8 <TIM_Base_SetConfig+0xc0>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d108      	bne.n	8006d2a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a1c      	ldr	r2, [pc, #112]	; (8006da0 <TIM_Base_SetConfig+0xb8>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d00b      	beq.n	8006d4a <TIM_Base_SetConfig+0x62>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d38:	d007      	beq.n	8006d4a <TIM_Base_SetConfig+0x62>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a19      	ldr	r2, [pc, #100]	; (8006da4 <TIM_Base_SetConfig+0xbc>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d003      	beq.n	8006d4a <TIM_Base_SetConfig+0x62>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a18      	ldr	r2, [pc, #96]	; (8006da8 <TIM_Base_SetConfig+0xc0>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d108      	bne.n	8006d5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	689a      	ldr	r2, [r3, #8]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a07      	ldr	r2, [pc, #28]	; (8006da0 <TIM_Base_SetConfig+0xb8>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d103      	bne.n	8006d90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	691a      	ldr	r2, [r3, #16]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	615a      	str	r2, [r3, #20]
}
 8006d96:	bf00      	nop
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bc80      	pop	{r7}
 8006d9e:	4770      	bx	lr
 8006da0:	40012c00 	.word	0x40012c00
 8006da4:	40000400 	.word	0x40000400
 8006da8:	40000800 	.word	0x40000800

08006dac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b087      	sub	sp, #28
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	f023 0201 	bic.w	r2, r3, #1
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f023 0303 	bic.w	r3, r3, #3
 8006de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f023 0302 	bic.w	r3, r3, #2
 8006df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a1c      	ldr	r2, [pc, #112]	; (8006e74 <TIM_OC1_SetConfig+0xc8>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d10c      	bne.n	8006e22 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	f023 0308 	bic.w	r3, r3, #8
 8006e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f023 0304 	bic.w	r3, r3, #4
 8006e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a13      	ldr	r2, [pc, #76]	; (8006e74 <TIM_OC1_SetConfig+0xc8>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d111      	bne.n	8006e4e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	621a      	str	r2, [r3, #32]
}
 8006e68:	bf00      	nop
 8006e6a:	371c      	adds	r7, #28
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bc80      	pop	{r7}
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	40012c00 	.word	0x40012c00

08006e78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a1b      	ldr	r3, [r3, #32]
 8006e8c:	f023 0210 	bic.w	r2, r3, #16
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	021b      	lsls	r3, r3, #8
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	f023 0320 	bic.w	r3, r3, #32
 8006ec2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	011b      	lsls	r3, r3, #4
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a1d      	ldr	r2, [pc, #116]	; (8006f48 <TIM_OC2_SetConfig+0xd0>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d10d      	bne.n	8006ef4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ede:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	011b      	lsls	r3, r3, #4
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ef2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a14      	ldr	r2, [pc, #80]	; (8006f48 <TIM_OC2_SetConfig+0xd0>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d113      	bne.n	8006f24 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	621a      	str	r2, [r3, #32]
}
 8006f3e:	bf00      	nop
 8006f40:	371c      	adds	r7, #28
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bc80      	pop	{r7}
 8006f46:	4770      	bx	lr
 8006f48:	40012c00 	.word	0x40012c00

08006f4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b087      	sub	sp, #28
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a1b      	ldr	r3, [r3, #32]
 8006f60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	69db      	ldr	r3, [r3, #28]
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f023 0303 	bic.w	r3, r3, #3
 8006f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	021b      	lsls	r3, r3, #8
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a1d      	ldr	r2, [pc, #116]	; (800701c <TIM_OC3_SetConfig+0xd0>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d10d      	bne.n	8006fc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	021b      	lsls	r3, r3, #8
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a14      	ldr	r2, [pc, #80]	; (800701c <TIM_OC3_SetConfig+0xd0>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d113      	bne.n	8006ff6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	011b      	lsls	r3, r3, #4
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	011b      	lsls	r3, r3, #4
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	697a      	ldr	r2, [r7, #20]
 800700e:	621a      	str	r2, [r3, #32]
}
 8007010:	bf00      	nop
 8007012:	371c      	adds	r7, #28
 8007014:	46bd      	mov	sp, r7
 8007016:	bc80      	pop	{r7}
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	40012c00 	.word	0x40012c00

08007020 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007020:	b480      	push	{r7}
 8007022:	b087      	sub	sp, #28
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a1b      	ldr	r3, [r3, #32]
 8007034:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800704e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	021b      	lsls	r3, r3, #8
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	4313      	orrs	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800706a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	031b      	lsls	r3, r3, #12
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	4313      	orrs	r3, r2
 8007076:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a0f      	ldr	r2, [pc, #60]	; (80070b8 <TIM_OC4_SetConfig+0x98>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d109      	bne.n	8007094 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007086:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	019b      	lsls	r3, r3, #6
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	4313      	orrs	r3, r2
 8007092:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	685a      	ldr	r2, [r3, #4]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	621a      	str	r2, [r3, #32]
}
 80070ae:	bf00      	nop
 80070b0:	371c      	adds	r7, #28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bc80      	pop	{r7}
 80070b6:	4770      	bx	lr
 80070b8:	40012c00 	.word	0x40012c00

080070bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070bc:	b480      	push	{r7}
 80070be:	b087      	sub	sp, #28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	f023 0201 	bic.w	r2, r3, #1
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	011b      	lsls	r3, r3, #4
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f023 030a 	bic.w	r3, r3, #10
 80070f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	4313      	orrs	r3, r2
 8007100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	621a      	str	r2, [r3, #32]
}
 800710e:	bf00      	nop
 8007110:	371c      	adds	r7, #28
 8007112:	46bd      	mov	sp, r7
 8007114:	bc80      	pop	{r7}
 8007116:	4770      	bx	lr

08007118 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007118:	b480      	push	{r7}
 800711a:	b087      	sub	sp, #28
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6a1b      	ldr	r3, [r3, #32]
 8007128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	f023 0210 	bic.w	r2, r3, #16
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	031b      	lsls	r3, r3, #12
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	4313      	orrs	r3, r2
 800714c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007154:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	011b      	lsls	r3, r3, #4
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	4313      	orrs	r3, r2
 800715e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	621a      	str	r2, [r3, #32]
}
 800716c:	bf00      	nop
 800716e:	371c      	adds	r7, #28
 8007170:	46bd      	mov	sp, r7
 8007172:	bc80      	pop	{r7}
 8007174:	4770      	bx	lr

08007176 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007176:	b480      	push	{r7}
 8007178:	b085      	sub	sp, #20
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800718c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	4313      	orrs	r3, r2
 8007194:	f043 0307 	orr.w	r3, r3, #7
 8007198:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	609a      	str	r2, [r3, #8]
}
 80071a0:	bf00      	nop
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bc80      	pop	{r7}
 80071a8:	4770      	bx	lr

080071aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b087      	sub	sp, #28
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	60f8      	str	r0, [r7, #12]
 80071b2:	60b9      	str	r1, [r7, #8]
 80071b4:	607a      	str	r2, [r7, #4]
 80071b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	021a      	lsls	r2, r3, #8
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	431a      	orrs	r2, r3
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	609a      	str	r2, [r3, #8]
}
 80071de:	bf00      	nop
 80071e0:	371c      	adds	r7, #28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bc80      	pop	{r7}
 80071e6:	4770      	bx	lr

080071e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b087      	sub	sp, #28
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	f003 031f 	and.w	r3, r3, #31
 80071fa:	2201      	movs	r2, #1
 80071fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007200:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6a1a      	ldr	r2, [r3, #32]
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	43db      	mvns	r3, r3
 800720a:	401a      	ands	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6a1a      	ldr	r2, [r3, #32]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	f003 031f 	and.w	r3, r3, #31
 800721a:	6879      	ldr	r1, [r7, #4]
 800721c:	fa01 f303 	lsl.w	r3, r1, r3
 8007220:	431a      	orrs	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	621a      	str	r2, [r3, #32]
}
 8007226:	bf00      	nop
 8007228:	371c      	adds	r7, #28
 800722a:	46bd      	mov	sp, r7
 800722c:	bc80      	pop	{r7}
 800722e:	4770      	bx	lr

08007230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007240:	2b01      	cmp	r3, #1
 8007242:	d101      	bne.n	8007248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007244:	2302      	movs	r3, #2
 8007246:	e046      	b.n	80072d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2202      	movs	r2, #2
 8007254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800726e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	4313      	orrs	r3, r2
 8007278:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a16      	ldr	r2, [pc, #88]	; (80072e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d00e      	beq.n	80072aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007294:	d009      	beq.n	80072aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a12      	ldr	r2, [pc, #72]	; (80072e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d004      	beq.n	80072aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a10      	ldr	r2, [pc, #64]	; (80072e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d10c      	bne.n	80072c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	bc80      	pop	{r7}
 80072de:	4770      	bx	lr
 80072e0:	40012c00 	.word	0x40012c00
 80072e4:	40000400 	.word	0x40000400
 80072e8:	40000800 	.word	0x40000800

080072ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072f4:	bf00      	nop
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bc80      	pop	{r7}
 80072fc:	4770      	bx	lr

080072fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072fe:	b480      	push	{r7}
 8007300:	b083      	sub	sp, #12
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007306:	bf00      	nop
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	bc80      	pop	{r7}
 800730e:	4770      	bx	lr

08007310 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d101      	bne.n	8007322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e042      	b.n	80073a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b00      	cmp	r3, #0
 800732c:	d106      	bne.n	800733c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7fb f8a6 	bl	8002488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2224      	movs	r2, #36	; 0x24
 8007340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68da      	ldr	r2, [r3, #12]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007352:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 ff6d 	bl	8008234 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	691a      	ldr	r2, [r3, #16]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007368:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	695a      	ldr	r2, [r3, #20]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007378:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68da      	ldr	r2, [r3, #12]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007388:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2220      	movs	r2, #32
 8007394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2220      	movs	r2, #32
 800739c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b08c      	sub	sp, #48	; 0x30
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	4613      	mov	r3, r2
 80073bc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b20      	cmp	r3, #32
 80073c8:	d156      	bne.n	8007478 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d002      	beq.n	80073d6 <HAL_UART_Transmit_DMA+0x26>
 80073d0:	88fb      	ldrh	r3, [r7, #6]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d101      	bne.n	80073da <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e04f      	b.n	800747a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	88fa      	ldrh	r2, [r7, #6]
 80073e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	88fa      	ldrh	r2, [r7, #6]
 80073ea:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2221      	movs	r2, #33	; 0x21
 80073f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fe:	4a21      	ldr	r2, [pc, #132]	; (8007484 <HAL_UART_Transmit_DMA+0xd4>)
 8007400:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007406:	4a20      	ldr	r2, [pc, #128]	; (8007488 <HAL_UART_Transmit_DMA+0xd8>)
 8007408:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740e:	4a1f      	ldr	r2, [pc, #124]	; (800748c <HAL_UART_Transmit_DMA+0xdc>)
 8007410:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007416:	2200      	movs	r2, #0
 8007418:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800741a:	f107 0308 	add.w	r3, r7, #8
 800741e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007426:	6819      	ldr	r1, [r3, #0]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3304      	adds	r3, #4
 800742e:	461a      	mov	r2, r3
 8007430:	88fb      	ldrh	r3, [r7, #6]
 8007432:	f7fb fae7 	bl	8002a04 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800743e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	3314      	adds	r3, #20
 8007446:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	e853 3f00 	ldrex	r3, [r3]
 800744e:	617b      	str	r3, [r7, #20]
   return(result);
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007456:	62bb      	str	r3, [r7, #40]	; 0x28
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3314      	adds	r3, #20
 800745e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007460:	627a      	str	r2, [r7, #36]	; 0x24
 8007462:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007464:	6a39      	ldr	r1, [r7, #32]
 8007466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007468:	e841 2300 	strex	r3, r2, [r1]
 800746c:	61fb      	str	r3, [r7, #28]
   return(result);
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1e5      	bne.n	8007440 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8007474:	2300      	movs	r3, #0
 8007476:	e000      	b.n	800747a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007478:	2302      	movs	r3, #2
  }
}
 800747a:	4618      	mov	r0, r3
 800747c:	3730      	adds	r7, #48	; 0x30
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	08007acb 	.word	0x08007acb
 8007488:	08007b65 	.word	0x08007b65
 800748c:	08007ce9 	.word	0x08007ce9

08007490 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b08c      	sub	sp, #48	; 0x30
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	4613      	mov	r3, r2
 800749c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b20      	cmp	r3, #32
 80074a8:	d14a      	bne.n	8007540 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d002      	beq.n	80074b6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80074b0:	88fb      	ldrh	r3, [r7, #6]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d101      	bne.n	80074ba <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e043      	b.n	8007542 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2201      	movs	r2, #1
 80074be:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80074c6:	88fb      	ldrh	r3, [r7, #6]
 80074c8:	461a      	mov	r2, r3
 80074ca:	68b9      	ldr	r1, [r7, #8]
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f000 fc55 	bl	8007d7c <UART_Start_Receive_DMA>
 80074d2:	4603      	mov	r3, r0
 80074d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80074d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d12c      	bne.n	800753a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d125      	bne.n	8007534 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074e8:	2300      	movs	r3, #0
 80074ea:	613b      	str	r3, [r7, #16]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	613b      	str	r3, [r7, #16]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	613b      	str	r3, [r7, #16]
 80074fc:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	330c      	adds	r3, #12
 8007504:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	e853 3f00 	ldrex	r3, [r3]
 800750c:	617b      	str	r3, [r7, #20]
   return(result);
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	f043 0310 	orr.w	r3, r3, #16
 8007514:	62bb      	str	r3, [r7, #40]	; 0x28
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	330c      	adds	r3, #12
 800751c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800751e:	627a      	str	r2, [r7, #36]	; 0x24
 8007520:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007522:	6a39      	ldr	r1, [r7, #32]
 8007524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007526:	e841 2300 	strex	r3, r2, [r1]
 800752a:	61fb      	str	r3, [r7, #28]
   return(result);
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1e5      	bne.n	80074fe <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8007532:	e002      	b.n	800753a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800753a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800753e:	e000      	b.n	8007542 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8007540:	2302      	movs	r3, #2
  }
}
 8007542:	4618      	mov	r0, r3
 8007544:	3730      	adds	r7, #48	; 0x30
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
	...

0800754c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b0ba      	sub	sp, #232	; 0xe8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007572:	2300      	movs	r3, #0
 8007574:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007578:	2300      	movs	r3, #0
 800757a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800757e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007582:	f003 030f 	and.w	r3, r3, #15
 8007586:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800758a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10f      	bne.n	80075b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007596:	f003 0320 	and.w	r3, r3, #32
 800759a:	2b00      	cmp	r3, #0
 800759c:	d009      	beq.n	80075b2 <HAL_UART_IRQHandler+0x66>
 800759e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075a2:	f003 0320 	and.w	r3, r3, #32
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d003      	beq.n	80075b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fd84 	bl	80080b8 <UART_Receive_IT>
      return;
 80075b0:	e25b      	b.n	8007a6a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80075b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f000 80de 	beq.w	8007778 <HAL_UART_IRQHandler+0x22c>
 80075bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075c0:	f003 0301 	and.w	r3, r3, #1
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d106      	bne.n	80075d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80075c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f000 80d1 	beq.w	8007778 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80075d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075da:	f003 0301 	and.w	r3, r3, #1
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00b      	beq.n	80075fa <HAL_UART_IRQHandler+0xae>
 80075e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d005      	beq.n	80075fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f2:	f043 0201 	orr.w	r2, r3, #1
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075fe:	f003 0304 	and.w	r3, r3, #4
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00b      	beq.n	800761e <HAL_UART_IRQHandler+0xd2>
 8007606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	2b00      	cmp	r3, #0
 8007610:	d005      	beq.n	800761e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007616:	f043 0202 	orr.w	r2, r3, #2
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800761e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007622:	f003 0302 	and.w	r3, r3, #2
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00b      	beq.n	8007642 <HAL_UART_IRQHandler+0xf6>
 800762a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b00      	cmp	r3, #0
 8007634:	d005      	beq.n	8007642 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800763a:	f043 0204 	orr.w	r2, r3, #4
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007646:	f003 0308 	and.w	r3, r3, #8
 800764a:	2b00      	cmp	r3, #0
 800764c:	d011      	beq.n	8007672 <HAL_UART_IRQHandler+0x126>
 800764e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007652:	f003 0320 	and.w	r3, r3, #32
 8007656:	2b00      	cmp	r3, #0
 8007658:	d105      	bne.n	8007666 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800765a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	2b00      	cmp	r3, #0
 8007664:	d005      	beq.n	8007672 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766a:	f043 0208 	orr.w	r2, r3, #8
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007676:	2b00      	cmp	r3, #0
 8007678:	f000 81f2 	beq.w	8007a60 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800767c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007680:	f003 0320 	and.w	r3, r3, #32
 8007684:	2b00      	cmp	r3, #0
 8007686:	d008      	beq.n	800769a <HAL_UART_IRQHandler+0x14e>
 8007688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800768c:	f003 0320 	and.w	r3, r3, #32
 8007690:	2b00      	cmp	r3, #0
 8007692:	d002      	beq.n	800769a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fd0f 	bl	80080b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	695b      	ldr	r3, [r3, #20]
 80076a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	bf14      	ite	ne
 80076a8:	2301      	movne	r3, #1
 80076aa:	2300      	moveq	r3, #0
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076b6:	f003 0308 	and.w	r3, r3, #8
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d103      	bne.n	80076c6 <HAL_UART_IRQHandler+0x17a>
 80076be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d04f      	beq.n	8007766 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fc19 	bl	8007efe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d041      	beq.n	800775e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3314      	adds	r3, #20
 80076e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076e8:	e853 3f00 	ldrex	r3, [r3]
 80076ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	3314      	adds	r3, #20
 8007702:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007706:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800770a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007712:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007716:	e841 2300 	strex	r3, r2, [r1]
 800771a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800771e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1d9      	bne.n	80076da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772a:	2b00      	cmp	r3, #0
 800772c:	d013      	beq.n	8007756 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007732:	4a7e      	ldr	r2, [pc, #504]	; (800792c <HAL_UART_IRQHandler+0x3e0>)
 8007734:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800773a:	4618      	mov	r0, r3
 800773c:	f7fb f9fe 	bl	8002b3c <HAL_DMA_Abort_IT>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d016      	beq.n	8007774 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800774a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007750:	4610      	mov	r0, r2
 8007752:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007754:	e00e      	b.n	8007774 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f9ae 	bl	8007ab8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800775c:	e00a      	b.n	8007774 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f9aa 	bl	8007ab8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007764:	e006      	b.n	8007774 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f9a6 	bl	8007ab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007772:	e175      	b.n	8007a60 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007774:	bf00      	nop
    return;
 8007776:	e173      	b.n	8007a60 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777c:	2b01      	cmp	r3, #1
 800777e:	f040 814f 	bne.w	8007a20 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007786:	f003 0310 	and.w	r3, r3, #16
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 8148 	beq.w	8007a20 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007794:	f003 0310 	and.w	r3, r3, #16
 8007798:	2b00      	cmp	r3, #0
 800779a:	f000 8141 	beq.w	8007a20 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800779e:	2300      	movs	r3, #0
 80077a0:	60bb      	str	r3, [r7, #8]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	60bb      	str	r3, [r7, #8]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	60bb      	str	r3, [r7, #8]
 80077b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f000 80b6 	beq.w	8007930 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f000 8145 	beq.w	8007a64 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80077de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077e2:	429a      	cmp	r2, r3
 80077e4:	f080 813e 	bcs.w	8007a64 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	2b20      	cmp	r3, #32
 80077f8:	f000 8088 	beq.w	800790c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	330c      	adds	r3, #12
 8007802:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007806:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800780a:	e853 3f00 	ldrex	r3, [r3]
 800780e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007812:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007816:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800781a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	330c      	adds	r3, #12
 8007824:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007828:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800782c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007830:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007834:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007838:	e841 2300 	strex	r3, r2, [r1]
 800783c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007840:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1d9      	bne.n	80077fc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3314      	adds	r3, #20
 800784e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007850:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007852:	e853 3f00 	ldrex	r3, [r3]
 8007856:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007858:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800785a:	f023 0301 	bic.w	r3, r3, #1
 800785e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	3314      	adds	r3, #20
 8007868:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800786c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007870:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007872:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007874:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007878:	e841 2300 	strex	r3, r2, [r1]
 800787c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800787e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1e1      	bne.n	8007848 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3314      	adds	r3, #20
 800788a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800788e:	e853 3f00 	ldrex	r3, [r3]
 8007892:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007896:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800789a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	3314      	adds	r3, #20
 80078a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078a8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078b0:	e841 2300 	strex	r3, r2, [r1]
 80078b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1e3      	bne.n	8007884 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2220      	movs	r2, #32
 80078c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	330c      	adds	r3, #12
 80078d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078d4:	e853 3f00 	ldrex	r3, [r3]
 80078d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078dc:	f023 0310 	bic.w	r3, r3, #16
 80078e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	330c      	adds	r3, #12
 80078ea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80078ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80078f0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078f6:	e841 2300 	strex	r3, r2, [r1]
 80078fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1e3      	bne.n	80078ca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007906:	4618      	mov	r0, r3
 8007908:	f7fb f8dc 	bl	8002ac4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2202      	movs	r2, #2
 8007910:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800791a:	b29b      	uxth	r3, r3
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	b29b      	uxth	r3, r3
 8007920:	4619      	mov	r1, r3
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7f9 fd5a 	bl	80013dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007928:	e09c      	b.n	8007a64 <HAL_UART_IRQHandler+0x518>
 800792a:	bf00      	nop
 800792c:	08007fc3 	.word	0x08007fc3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007938:	b29b      	uxth	r3, r3
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007944:	b29b      	uxth	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	f000 808e 	beq.w	8007a68 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800794c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 8089 	beq.w	8007a68 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	330c      	adds	r3, #12
 800795c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007960:	e853 3f00 	ldrex	r3, [r3]
 8007964:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007968:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800796c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	330c      	adds	r3, #12
 8007976:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800797a:	647a      	str	r2, [r7, #68]	; 0x44
 800797c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007980:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007982:	e841 2300 	strex	r3, r2, [r1]
 8007986:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1e3      	bne.n	8007956 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	3314      	adds	r3, #20
 8007994:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	e853 3f00 	ldrex	r3, [r3]
 800799c:	623b      	str	r3, [r7, #32]
   return(result);
 800799e:	6a3b      	ldr	r3, [r7, #32]
 80079a0:	f023 0301 	bic.w	r3, r3, #1
 80079a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	3314      	adds	r3, #20
 80079ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80079b2:	633a      	str	r2, [r7, #48]	; 0x30
 80079b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079ba:	e841 2300 	strex	r3, r2, [r1]
 80079be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1e3      	bne.n	800798e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2220      	movs	r2, #32
 80079ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	330c      	adds	r3, #12
 80079da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	e853 3f00 	ldrex	r3, [r3]
 80079e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f023 0310 	bic.w	r3, r3, #16
 80079ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	330c      	adds	r3, #12
 80079f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80079f8:	61fa      	str	r2, [r7, #28]
 80079fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fc:	69b9      	ldr	r1, [r7, #24]
 80079fe:	69fa      	ldr	r2, [r7, #28]
 8007a00:	e841 2300 	strex	r3, r2, [r1]
 8007a04:	617b      	str	r3, [r7, #20]
   return(result);
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1e3      	bne.n	80079d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2202      	movs	r2, #2
 8007a10:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a16:	4619      	mov	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7f9 fcdf 	bl	80013dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a1e:	e023      	b.n	8007a68 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d009      	beq.n	8007a40 <HAL_UART_IRQHandler+0x4f4>
 8007a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d003      	beq.n	8007a40 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fad6 	bl	8007fea <UART_Transmit_IT>
    return;
 8007a3e:	e014      	b.n	8007a6a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00e      	beq.n	8007a6a <HAL_UART_IRQHandler+0x51e>
 8007a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d008      	beq.n	8007a6a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fb15 	bl	8008088 <UART_EndTransmit_IT>
    return;
 8007a5e:	e004      	b.n	8007a6a <HAL_UART_IRQHandler+0x51e>
    return;
 8007a60:	bf00      	nop
 8007a62:	e002      	b.n	8007a6a <HAL_UART_IRQHandler+0x51e>
      return;
 8007a64:	bf00      	nop
 8007a66:	e000      	b.n	8007a6a <HAL_UART_IRQHandler+0x51e>
      return;
 8007a68:	bf00      	nop
  }
}
 8007a6a:	37e8      	adds	r7, #232	; 0xe8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bc80      	pop	{r7}
 8007a80:	4770      	bx	lr

08007a82 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b083      	sub	sp, #12
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007a8a:	bf00      	nop
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bc80      	pop	{r7}
 8007a92:	4770      	bx	lr

08007a94 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bc80      	pop	{r7}
 8007aa4:	4770      	bx	lr

08007aa6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b083      	sub	sp, #12
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007aae:	bf00      	nop
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bc80      	pop	{r7}
 8007ab6:	4770      	bx	lr

08007ab8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bc80      	pop	{r7}
 8007ac8:	4770      	bx	lr

08007aca <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b090      	sub	sp, #64	; 0x40
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 0320 	and.w	r3, r3, #32
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d137      	bne.n	8007b56 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ae8:	2200      	movs	r2, #0
 8007aea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3314      	adds	r3, #20
 8007af2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af6:	e853 3f00 	ldrex	r3, [r3]
 8007afa:	623b      	str	r3, [r7, #32]
   return(result);
 8007afc:	6a3b      	ldr	r3, [r7, #32]
 8007afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b02:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	3314      	adds	r3, #20
 8007b0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b0c:	633a      	str	r2, [r7, #48]	; 0x30
 8007b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b14:	e841 2300 	strex	r3, r2, [r1]
 8007b18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1e5      	bne.n	8007aec <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	330c      	adds	r3, #12
 8007b26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	e853 3f00 	ldrex	r3, [r3]
 8007b2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b36:	637b      	str	r3, [r7, #52]	; 0x34
 8007b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	330c      	adds	r3, #12
 8007b3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b40:	61fa      	str	r2, [r7, #28]
 8007b42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b44:	69b9      	ldr	r1, [r7, #24]
 8007b46:	69fa      	ldr	r2, [r7, #28]
 8007b48:	e841 2300 	strex	r3, r2, [r1]
 8007b4c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e5      	bne.n	8007b20 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b54:	e002      	b.n	8007b5c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007b56:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007b58:	f7ff ff8a 	bl	8007a70 <HAL_UART_TxCpltCallback>
}
 8007b5c:	bf00      	nop
 8007b5e:	3740      	adds	r7, #64	; 0x40
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b70:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f7ff ff85 	bl	8007a82 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b78:	bf00      	nop
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b09c      	sub	sp, #112	; 0x70
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0320 	and.w	r3, r3, #32
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d172      	bne.n	8007c82 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	330c      	adds	r3, #12
 8007ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bac:	e853 3f00 	ldrex	r3, [r3]
 8007bb0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	330c      	adds	r3, #12
 8007bc0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007bc2:	65ba      	str	r2, [r7, #88]	; 0x58
 8007bc4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bca:	e841 2300 	strex	r3, r2, [r1]
 8007bce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1e5      	bne.n	8007ba2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	3314      	adds	r3, #20
 8007bdc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be0:	e853 3f00 	ldrex	r3, [r3]
 8007be4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be8:	f023 0301 	bic.w	r3, r3, #1
 8007bec:	667b      	str	r3, [r7, #100]	; 0x64
 8007bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	3314      	adds	r3, #20
 8007bf4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007bf6:	647a      	str	r2, [r7, #68]	; 0x44
 8007bf8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bfe:	e841 2300 	strex	r3, r2, [r1]
 8007c02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1e5      	bne.n	8007bd6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	3314      	adds	r3, #20
 8007c10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c14:	e853 3f00 	ldrex	r3, [r3]
 8007c18:	623b      	str	r3, [r7, #32]
   return(result);
 8007c1a:	6a3b      	ldr	r3, [r7, #32]
 8007c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c20:	663b      	str	r3, [r7, #96]	; 0x60
 8007c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	3314      	adds	r3, #20
 8007c28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007c2a:	633a      	str	r2, [r7, #48]	; 0x30
 8007c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c32:	e841 2300 	strex	r3, r2, [r1]
 8007c36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1e5      	bne.n	8007c0a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c40:	2220      	movs	r2, #32
 8007c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d119      	bne.n	8007c82 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	330c      	adds	r3, #12
 8007c54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	e853 3f00 	ldrex	r3, [r3]
 8007c5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f023 0310 	bic.w	r3, r3, #16
 8007c64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	330c      	adds	r3, #12
 8007c6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c6e:	61fa      	str	r2, [r7, #28]
 8007c70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c72:	69b9      	ldr	r1, [r7, #24]
 8007c74:	69fa      	ldr	r2, [r7, #28]
 8007c76:	e841 2300 	strex	r3, r2, [r1]
 8007c7a:	617b      	str	r3, [r7, #20]
   return(result);
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1e5      	bne.n	8007c4e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c84:	2200      	movs	r2, #0
 8007c86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d106      	bne.n	8007c9e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c94:	4619      	mov	r1, r3
 8007c96:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c98:	f7f9 fba0 	bl	80013dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c9c:	e002      	b.n	8007ca4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007c9e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007ca0:	f7ff fef8 	bl	8007a94 <HAL_UART_RxCpltCallback>
}
 8007ca4:	bf00      	nop
 8007ca6:	3770      	adds	r7, #112	; 0x70
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d108      	bne.n	8007cda <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ccc:	085b      	lsrs	r3, r3, #1
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f7f9 fb82 	bl	80013dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007cd8:	e002      	b.n	8007ce0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f7ff fee3 	bl	8007aa6 <HAL_UART_RxHalfCpltCallback>
}
 8007ce0:	bf00      	nop
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	695b      	ldr	r3, [r3, #20]
 8007d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	bf14      	ite	ne
 8007d08:	2301      	movne	r3, #1
 8007d0a:	2300      	moveq	r3, #0
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	2b21      	cmp	r3, #33	; 0x21
 8007d1a:	d108      	bne.n	8007d2e <UART_DMAError+0x46>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d005      	beq.n	8007d2e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	2200      	movs	r2, #0
 8007d26:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007d28:	68b8      	ldr	r0, [r7, #8]
 8007d2a:	f000 f8c1 	bl	8007eb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	695b      	ldr	r3, [r3, #20]
 8007d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	bf14      	ite	ne
 8007d3c:	2301      	movne	r3, #1
 8007d3e:	2300      	moveq	r3, #0
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b22      	cmp	r3, #34	; 0x22
 8007d4e:	d108      	bne.n	8007d62 <UART_DMAError+0x7a>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d005      	beq.n	8007d62 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007d5c:	68b8      	ldr	r0, [r7, #8]
 8007d5e:	f000 f8ce 	bl	8007efe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d66:	f043 0210 	orr.w	r2, r3, #16
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d6e:	68b8      	ldr	r0, [r7, #8]
 8007d70:	f7ff fea2 	bl	8007ab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d74:	bf00      	nop
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b098      	sub	sp, #96	; 0x60
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	4613      	mov	r3, r2
 8007d88:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	88fa      	ldrh	r2, [r7, #6]
 8007d94:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2222      	movs	r2, #34	; 0x22
 8007da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007da8:	4a3e      	ldr	r2, [pc, #248]	; (8007ea4 <UART_Start_Receive_DMA+0x128>)
 8007daa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007db0:	4a3d      	ldr	r2, [pc, #244]	; (8007ea8 <UART_Start_Receive_DMA+0x12c>)
 8007db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007db8:	4a3c      	ldr	r2, [pc, #240]	; (8007eac <UART_Start_Receive_DMA+0x130>)
 8007dba:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007dc4:	f107 0308 	add.w	r3, r7, #8
 8007dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3304      	adds	r3, #4
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	88fb      	ldrh	r3, [r7, #6]
 8007ddc:	f7fa fe12 	bl	8002a04 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007de0:	2300      	movs	r3, #0
 8007de2:	613b      	str	r3, [r7, #16]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	613b      	str	r3, [r7, #16]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	613b      	str	r3, [r7, #16]
 8007df4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d019      	beq.n	8007e32 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	330c      	adds	r3, #12
 8007e04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e08:	e853 3f00 	ldrex	r3, [r3]
 8007e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e14:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	330c      	adds	r3, #12
 8007e1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e1e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007e20:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e22:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007e24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e26:	e841 2300 	strex	r3, r2, [r1]
 8007e2a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1e5      	bne.n	8007dfe <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	3314      	adds	r3, #20
 8007e38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3c:	e853 3f00 	ldrex	r3, [r3]
 8007e40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e44:	f043 0301 	orr.w	r3, r3, #1
 8007e48:	657b      	str	r3, [r7, #84]	; 0x54
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3314      	adds	r3, #20
 8007e50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e52:	63ba      	str	r2, [r7, #56]	; 0x38
 8007e54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e5a:	e841 2300 	strex	r3, r2, [r1]
 8007e5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1e5      	bne.n	8007e32 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	3314      	adds	r3, #20
 8007e6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	e853 3f00 	ldrex	r3, [r3]
 8007e74:	617b      	str	r3, [r7, #20]
   return(result);
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e7c:	653b      	str	r3, [r7, #80]	; 0x50
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	3314      	adds	r3, #20
 8007e84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e86:	627a      	str	r2, [r7, #36]	; 0x24
 8007e88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8a:	6a39      	ldr	r1, [r7, #32]
 8007e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e8e:	e841 2300 	strex	r3, r2, [r1]
 8007e92:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1e5      	bne.n	8007e66 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3760      	adds	r7, #96	; 0x60
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	08007b81 	.word	0x08007b81
 8007ea8:	08007cad 	.word	0x08007cad
 8007eac:	08007ce9 	.word	0x08007ce9

08007eb0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b089      	sub	sp, #36	; 0x24
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	330c      	adds	r3, #12
 8007ebe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	e853 3f00 	ldrex	r3, [r3]
 8007ec6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007ece:	61fb      	str	r3, [r7, #28]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	330c      	adds	r3, #12
 8007ed6:	69fa      	ldr	r2, [r7, #28]
 8007ed8:	61ba      	str	r2, [r7, #24]
 8007eda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007edc:	6979      	ldr	r1, [r7, #20]
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	e841 2300 	strex	r3, r2, [r1]
 8007ee4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1e5      	bne.n	8007eb8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2220      	movs	r2, #32
 8007ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8007ef4:	bf00      	nop
 8007ef6:	3724      	adds	r7, #36	; 0x24
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bc80      	pop	{r7}
 8007efc:	4770      	bx	lr

08007efe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007efe:	b480      	push	{r7}
 8007f00:	b095      	sub	sp, #84	; 0x54
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	330c      	adds	r3, #12
 8007f0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f10:	e853 3f00 	ldrex	r3, [r3]
 8007f14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	330c      	adds	r3, #12
 8007f24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f26:	643a      	str	r2, [r7, #64]	; 0x40
 8007f28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f2e:	e841 2300 	strex	r3, r2, [r1]
 8007f32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1e5      	bne.n	8007f06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	3314      	adds	r3, #20
 8007f40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f42:	6a3b      	ldr	r3, [r7, #32]
 8007f44:	e853 3f00 	ldrex	r3, [r3]
 8007f48:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	f023 0301 	bic.w	r3, r3, #1
 8007f50:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	3314      	adds	r3, #20
 8007f58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f62:	e841 2300 	strex	r3, r2, [r1]
 8007f66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1e5      	bne.n	8007f3a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d119      	bne.n	8007faa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	330c      	adds	r3, #12
 8007f7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	e853 3f00 	ldrex	r3, [r3]
 8007f84:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	f023 0310 	bic.w	r3, r3, #16
 8007f8c:	647b      	str	r3, [r7, #68]	; 0x44
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	330c      	adds	r3, #12
 8007f94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f96:	61ba      	str	r2, [r7, #24]
 8007f98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9a:	6979      	ldr	r1, [r7, #20]
 8007f9c:	69ba      	ldr	r2, [r7, #24]
 8007f9e:	e841 2300 	strex	r3, r2, [r1]
 8007fa2:	613b      	str	r3, [r7, #16]
   return(result);
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1e5      	bne.n	8007f76 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2220      	movs	r2, #32
 8007fae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007fb8:	bf00      	nop
 8007fba:	3754      	adds	r7, #84	; 0x54
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bc80      	pop	{r7}
 8007fc0:	4770      	bx	lr

08007fc2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f7ff fd6b 	bl	8007ab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fe2:	bf00      	nop
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b085      	sub	sp, #20
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b21      	cmp	r3, #33	; 0x21
 8007ffc:	d13e      	bne.n	800807c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008006:	d114      	bne.n	8008032 <UART_Transmit_IT+0x48>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d110      	bne.n	8008032 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6a1b      	ldr	r3, [r3, #32]
 8008014:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	461a      	mov	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008024:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	1c9a      	adds	r2, r3, #2
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	621a      	str	r2, [r3, #32]
 8008030:	e008      	b.n	8008044 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a1b      	ldr	r3, [r3, #32]
 8008036:	1c59      	adds	r1, r3, #1
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	6211      	str	r1, [r2, #32]
 800803c:	781a      	ldrb	r2, [r3, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008048:	b29b      	uxth	r3, r3
 800804a:	3b01      	subs	r3, #1
 800804c:	b29b      	uxth	r3, r3
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	4619      	mov	r1, r3
 8008052:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10f      	bne.n	8008078 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68da      	ldr	r2, [r3, #12]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008066:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68da      	ldr	r2, [r3, #12]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008076:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	e000      	b.n	800807e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800807c:	2302      	movs	r3, #2
  }
}
 800807e:	4618      	mov	r0, r3
 8008080:	3714      	adds	r7, #20
 8008082:	46bd      	mov	sp, r7
 8008084:	bc80      	pop	{r7}
 8008086:	4770      	bx	lr

08008088 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68da      	ldr	r2, [r3, #12]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800809e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2220      	movs	r2, #32
 80080a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7ff fce1 	bl	8007a70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b08c      	sub	sp, #48	; 0x30
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	2b22      	cmp	r3, #34	; 0x22
 80080ca:	f040 80ae 	bne.w	800822a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080d6:	d117      	bne.n	8008108 <UART_Receive_IT+0x50>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d113      	bne.n	8008108 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80080e0:	2300      	movs	r3, #0
 80080e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008100:	1c9a      	adds	r2, r3, #2
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	629a      	str	r2, [r3, #40]	; 0x28
 8008106:	e026      	b.n	8008156 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800810c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800810e:	2300      	movs	r3, #0
 8008110:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800811a:	d007      	beq.n	800812c <UART_Receive_IT+0x74>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10a      	bne.n	800813a <UART_Receive_IT+0x82>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d106      	bne.n	800813a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	b2da      	uxtb	r2, r3
 8008134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008136:	701a      	strb	r2, [r3, #0]
 8008138:	e008      	b.n	800814c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	b2db      	uxtb	r3, r3
 8008142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008146:	b2da      	uxtb	r2, r3
 8008148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008150:	1c5a      	adds	r2, r3, #1
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800815a:	b29b      	uxth	r3, r3
 800815c:	3b01      	subs	r3, #1
 800815e:	b29b      	uxth	r3, r3
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	4619      	mov	r1, r3
 8008164:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008166:	2b00      	cmp	r3, #0
 8008168:	d15d      	bne.n	8008226 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68da      	ldr	r2, [r3, #12]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f022 0220 	bic.w	r2, r2, #32
 8008178:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68da      	ldr	r2, [r3, #12]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008188:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	695a      	ldr	r2, [r3, #20]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f022 0201 	bic.w	r2, r2, #1
 8008198:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2220      	movs	r2, #32
 800819e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d135      	bne.n	800821c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	330c      	adds	r3, #12
 80081bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	e853 3f00 	ldrex	r3, [r3]
 80081c4:	613b      	str	r3, [r7, #16]
   return(result);
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	f023 0310 	bic.w	r3, r3, #16
 80081cc:	627b      	str	r3, [r7, #36]	; 0x24
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	330c      	adds	r3, #12
 80081d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081d6:	623a      	str	r2, [r7, #32]
 80081d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081da:	69f9      	ldr	r1, [r7, #28]
 80081dc:	6a3a      	ldr	r2, [r7, #32]
 80081de:	e841 2300 	strex	r3, r2, [r1]
 80081e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1e5      	bne.n	80081b6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 0310 	and.w	r3, r3, #16
 80081f4:	2b10      	cmp	r3, #16
 80081f6:	d10a      	bne.n	800820e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081f8:	2300      	movs	r3, #0
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	60fb      	str	r3, [r7, #12]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	60fb      	str	r3, [r7, #12]
 800820c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008212:	4619      	mov	r1, r3
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f7f9 f8e1 	bl	80013dc <HAL_UARTEx_RxEventCallback>
 800821a:	e002      	b.n	8008222 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f7ff fc39 	bl	8007a94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	e002      	b.n	800822c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	e000      	b.n	800822c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800822a:	2302      	movs	r3, #2
  }
}
 800822c:	4618      	mov	r0, r3
 800822e:	3730      	adds	r7, #48	; 0x30
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	68da      	ldr	r2, [r3, #12]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	430a      	orrs	r2, r1
 8008250:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	689a      	ldr	r2, [r3, #8]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	431a      	orrs	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	695b      	ldr	r3, [r3, #20]
 8008260:	4313      	orrs	r3, r2
 8008262:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800826e:	f023 030c 	bic.w	r3, r3, #12
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	6812      	ldr	r2, [r2, #0]
 8008276:	68b9      	ldr	r1, [r7, #8]
 8008278:	430b      	orrs	r3, r1
 800827a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	695b      	ldr	r3, [r3, #20]
 8008282:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	699a      	ldr	r2, [r3, #24]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	430a      	orrs	r2, r1
 8008290:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a2c      	ldr	r2, [pc, #176]	; (8008348 <UART_SetConfig+0x114>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d103      	bne.n	80082a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800829c:	f7fe f8a8 	bl	80063f0 <HAL_RCC_GetPCLK2Freq>
 80082a0:	60f8      	str	r0, [r7, #12]
 80082a2:	e002      	b.n	80082aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80082a4:	f7fe f890 	bl	80063c8 <HAL_RCC_GetPCLK1Freq>
 80082a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	4613      	mov	r3, r2
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	4413      	add	r3, r2
 80082b2:	009a      	lsls	r2, r3, #2
 80082b4:	441a      	add	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80082c0:	4a22      	ldr	r2, [pc, #136]	; (800834c <UART_SetConfig+0x118>)
 80082c2:	fba2 2303 	umull	r2, r3, r2, r3
 80082c6:	095b      	lsrs	r3, r3, #5
 80082c8:	0119      	lsls	r1, r3, #4
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	4613      	mov	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	009a      	lsls	r2, r3, #2
 80082d4:	441a      	add	r2, r3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80082e0:	4b1a      	ldr	r3, [pc, #104]	; (800834c <UART_SetConfig+0x118>)
 80082e2:	fba3 0302 	umull	r0, r3, r3, r2
 80082e6:	095b      	lsrs	r3, r3, #5
 80082e8:	2064      	movs	r0, #100	; 0x64
 80082ea:	fb00 f303 	mul.w	r3, r0, r3
 80082ee:	1ad3      	subs	r3, r2, r3
 80082f0:	011b      	lsls	r3, r3, #4
 80082f2:	3332      	adds	r3, #50	; 0x32
 80082f4:	4a15      	ldr	r2, [pc, #84]	; (800834c <UART_SetConfig+0x118>)
 80082f6:	fba2 2303 	umull	r2, r3, r2, r3
 80082fa:	095b      	lsrs	r3, r3, #5
 80082fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008300:	4419      	add	r1, r3
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	4613      	mov	r3, r2
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	4413      	add	r3, r2
 800830a:	009a      	lsls	r2, r3, #2
 800830c:	441a      	add	r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	fbb2 f2f3 	udiv	r2, r2, r3
 8008318:	4b0c      	ldr	r3, [pc, #48]	; (800834c <UART_SetConfig+0x118>)
 800831a:	fba3 0302 	umull	r0, r3, r3, r2
 800831e:	095b      	lsrs	r3, r3, #5
 8008320:	2064      	movs	r0, #100	; 0x64
 8008322:	fb00 f303 	mul.w	r3, r0, r3
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	011b      	lsls	r3, r3, #4
 800832a:	3332      	adds	r3, #50	; 0x32
 800832c:	4a07      	ldr	r2, [pc, #28]	; (800834c <UART_SetConfig+0x118>)
 800832e:	fba2 2303 	umull	r2, r3, r2, r3
 8008332:	095b      	lsrs	r3, r3, #5
 8008334:	f003 020f 	and.w	r2, r3, #15
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	440a      	add	r2, r1
 800833e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008340:	bf00      	nop
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	40013800 	.word	0x40013800
 800834c:	51eb851f 	.word	0x51eb851f

08008350 <__cvt>:
 8008350:	2b00      	cmp	r3, #0
 8008352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008356:	461f      	mov	r7, r3
 8008358:	bfbb      	ittet	lt
 800835a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800835e:	461f      	movlt	r7, r3
 8008360:	2300      	movge	r3, #0
 8008362:	232d      	movlt	r3, #45	; 0x2d
 8008364:	b088      	sub	sp, #32
 8008366:	4614      	mov	r4, r2
 8008368:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800836a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800836c:	7013      	strb	r3, [r2, #0]
 800836e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008370:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008374:	f023 0820 	bic.w	r8, r3, #32
 8008378:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800837c:	d005      	beq.n	800838a <__cvt+0x3a>
 800837e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008382:	d100      	bne.n	8008386 <__cvt+0x36>
 8008384:	3501      	adds	r5, #1
 8008386:	2302      	movs	r3, #2
 8008388:	e000      	b.n	800838c <__cvt+0x3c>
 800838a:	2303      	movs	r3, #3
 800838c:	aa07      	add	r2, sp, #28
 800838e:	9204      	str	r2, [sp, #16]
 8008390:	aa06      	add	r2, sp, #24
 8008392:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008396:	e9cd 3500 	strd	r3, r5, [sp]
 800839a:	4622      	mov	r2, r4
 800839c:	463b      	mov	r3, r7
 800839e:	f001 f8a3 	bl	80094e8 <_dtoa_r>
 80083a2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80083a6:	4606      	mov	r6, r0
 80083a8:	d102      	bne.n	80083b0 <__cvt+0x60>
 80083aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083ac:	07db      	lsls	r3, r3, #31
 80083ae:	d522      	bpl.n	80083f6 <__cvt+0xa6>
 80083b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80083b4:	eb06 0905 	add.w	r9, r6, r5
 80083b8:	d110      	bne.n	80083dc <__cvt+0x8c>
 80083ba:	7833      	ldrb	r3, [r6, #0]
 80083bc:	2b30      	cmp	r3, #48	; 0x30
 80083be:	d10a      	bne.n	80083d6 <__cvt+0x86>
 80083c0:	2200      	movs	r2, #0
 80083c2:	2300      	movs	r3, #0
 80083c4:	4620      	mov	r0, r4
 80083c6:	4639      	mov	r1, r7
 80083c8:	f7f8 faee 	bl	80009a8 <__aeabi_dcmpeq>
 80083cc:	b918      	cbnz	r0, 80083d6 <__cvt+0x86>
 80083ce:	f1c5 0501 	rsb	r5, r5, #1
 80083d2:	f8ca 5000 	str.w	r5, [sl]
 80083d6:	f8da 3000 	ldr.w	r3, [sl]
 80083da:	4499      	add	r9, r3
 80083dc:	2200      	movs	r2, #0
 80083de:	2300      	movs	r3, #0
 80083e0:	4620      	mov	r0, r4
 80083e2:	4639      	mov	r1, r7
 80083e4:	f7f8 fae0 	bl	80009a8 <__aeabi_dcmpeq>
 80083e8:	b108      	cbz	r0, 80083ee <__cvt+0x9e>
 80083ea:	f8cd 901c 	str.w	r9, [sp, #28]
 80083ee:	2230      	movs	r2, #48	; 0x30
 80083f0:	9b07      	ldr	r3, [sp, #28]
 80083f2:	454b      	cmp	r3, r9
 80083f4:	d307      	bcc.n	8008406 <__cvt+0xb6>
 80083f6:	4630      	mov	r0, r6
 80083f8:	9b07      	ldr	r3, [sp, #28]
 80083fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80083fc:	1b9b      	subs	r3, r3, r6
 80083fe:	6013      	str	r3, [r2, #0]
 8008400:	b008      	add	sp, #32
 8008402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008406:	1c59      	adds	r1, r3, #1
 8008408:	9107      	str	r1, [sp, #28]
 800840a:	701a      	strb	r2, [r3, #0]
 800840c:	e7f0      	b.n	80083f0 <__cvt+0xa0>

0800840e <__exponent>:
 800840e:	4603      	mov	r3, r0
 8008410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008412:	2900      	cmp	r1, #0
 8008414:	f803 2b02 	strb.w	r2, [r3], #2
 8008418:	bfb6      	itet	lt
 800841a:	222d      	movlt	r2, #45	; 0x2d
 800841c:	222b      	movge	r2, #43	; 0x2b
 800841e:	4249      	neglt	r1, r1
 8008420:	2909      	cmp	r1, #9
 8008422:	7042      	strb	r2, [r0, #1]
 8008424:	dd2a      	ble.n	800847c <__exponent+0x6e>
 8008426:	f10d 0207 	add.w	r2, sp, #7
 800842a:	4617      	mov	r7, r2
 800842c:	260a      	movs	r6, #10
 800842e:	fb91 f5f6 	sdiv	r5, r1, r6
 8008432:	4694      	mov	ip, r2
 8008434:	fb06 1415 	mls	r4, r6, r5, r1
 8008438:	3430      	adds	r4, #48	; 0x30
 800843a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800843e:	460c      	mov	r4, r1
 8008440:	2c63      	cmp	r4, #99	; 0x63
 8008442:	4629      	mov	r1, r5
 8008444:	f102 32ff 	add.w	r2, r2, #4294967295
 8008448:	dcf1      	bgt.n	800842e <__exponent+0x20>
 800844a:	3130      	adds	r1, #48	; 0x30
 800844c:	f1ac 0402 	sub.w	r4, ip, #2
 8008450:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008454:	4622      	mov	r2, r4
 8008456:	1c41      	adds	r1, r0, #1
 8008458:	42ba      	cmp	r2, r7
 800845a:	d30a      	bcc.n	8008472 <__exponent+0x64>
 800845c:	f10d 0209 	add.w	r2, sp, #9
 8008460:	eba2 020c 	sub.w	r2, r2, ip
 8008464:	42bc      	cmp	r4, r7
 8008466:	bf88      	it	hi
 8008468:	2200      	movhi	r2, #0
 800846a:	4413      	add	r3, r2
 800846c:	1a18      	subs	r0, r3, r0
 800846e:	b003      	add	sp, #12
 8008470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008472:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008476:	f801 5f01 	strb.w	r5, [r1, #1]!
 800847a:	e7ed      	b.n	8008458 <__exponent+0x4a>
 800847c:	2330      	movs	r3, #48	; 0x30
 800847e:	3130      	adds	r1, #48	; 0x30
 8008480:	7083      	strb	r3, [r0, #2]
 8008482:	70c1      	strb	r1, [r0, #3]
 8008484:	1d03      	adds	r3, r0, #4
 8008486:	e7f1      	b.n	800846c <__exponent+0x5e>

08008488 <_printf_float>:
 8008488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800848c:	b091      	sub	sp, #68	; 0x44
 800848e:	460c      	mov	r4, r1
 8008490:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008494:	4616      	mov	r6, r2
 8008496:	461f      	mov	r7, r3
 8008498:	4605      	mov	r5, r0
 800849a:	f000 ff03 	bl	80092a4 <_localeconv_r>
 800849e:	6803      	ldr	r3, [r0, #0]
 80084a0:	4618      	mov	r0, r3
 80084a2:	9309      	str	r3, [sp, #36]	; 0x24
 80084a4:	f7f7 fe54 	bl	8000150 <strlen>
 80084a8:	2300      	movs	r3, #0
 80084aa:	930e      	str	r3, [sp, #56]	; 0x38
 80084ac:	f8d8 3000 	ldr.w	r3, [r8]
 80084b0:	900a      	str	r0, [sp, #40]	; 0x28
 80084b2:	3307      	adds	r3, #7
 80084b4:	f023 0307 	bic.w	r3, r3, #7
 80084b8:	f103 0208 	add.w	r2, r3, #8
 80084bc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80084c0:	f8d4 b000 	ldr.w	fp, [r4]
 80084c4:	f8c8 2000 	str.w	r2, [r8]
 80084c8:	e9d3 a800 	ldrd	sl, r8, [r3]
 80084cc:	4652      	mov	r2, sl
 80084ce:	4643      	mov	r3, r8
 80084d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80084d4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80084d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80084da:	f04f 32ff 	mov.w	r2, #4294967295
 80084de:	4650      	mov	r0, sl
 80084e0:	4b9c      	ldr	r3, [pc, #624]	; (8008754 <_printf_float+0x2cc>)
 80084e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80084e4:	f7f8 fa92 	bl	8000a0c <__aeabi_dcmpun>
 80084e8:	bb70      	cbnz	r0, 8008548 <_printf_float+0xc0>
 80084ea:	f04f 32ff 	mov.w	r2, #4294967295
 80084ee:	4650      	mov	r0, sl
 80084f0:	4b98      	ldr	r3, [pc, #608]	; (8008754 <_printf_float+0x2cc>)
 80084f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80084f4:	f7f8 fa6c 	bl	80009d0 <__aeabi_dcmple>
 80084f8:	bb30      	cbnz	r0, 8008548 <_printf_float+0xc0>
 80084fa:	2200      	movs	r2, #0
 80084fc:	2300      	movs	r3, #0
 80084fe:	4650      	mov	r0, sl
 8008500:	4641      	mov	r1, r8
 8008502:	f7f8 fa5b 	bl	80009bc <__aeabi_dcmplt>
 8008506:	b110      	cbz	r0, 800850e <_printf_float+0x86>
 8008508:	232d      	movs	r3, #45	; 0x2d
 800850a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800850e:	4a92      	ldr	r2, [pc, #584]	; (8008758 <_printf_float+0x2d0>)
 8008510:	4b92      	ldr	r3, [pc, #584]	; (800875c <_printf_float+0x2d4>)
 8008512:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008516:	bf94      	ite	ls
 8008518:	4690      	movls	r8, r2
 800851a:	4698      	movhi	r8, r3
 800851c:	2303      	movs	r3, #3
 800851e:	f04f 0a00 	mov.w	sl, #0
 8008522:	6123      	str	r3, [r4, #16]
 8008524:	f02b 0304 	bic.w	r3, fp, #4
 8008528:	6023      	str	r3, [r4, #0]
 800852a:	4633      	mov	r3, r6
 800852c:	4621      	mov	r1, r4
 800852e:	4628      	mov	r0, r5
 8008530:	9700      	str	r7, [sp, #0]
 8008532:	aa0f      	add	r2, sp, #60	; 0x3c
 8008534:	f000 f9d6 	bl	80088e4 <_printf_common>
 8008538:	3001      	adds	r0, #1
 800853a:	f040 8090 	bne.w	800865e <_printf_float+0x1d6>
 800853e:	f04f 30ff 	mov.w	r0, #4294967295
 8008542:	b011      	add	sp, #68	; 0x44
 8008544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008548:	4652      	mov	r2, sl
 800854a:	4643      	mov	r3, r8
 800854c:	4650      	mov	r0, sl
 800854e:	4641      	mov	r1, r8
 8008550:	f7f8 fa5c 	bl	8000a0c <__aeabi_dcmpun>
 8008554:	b148      	cbz	r0, 800856a <_printf_float+0xe2>
 8008556:	f1b8 0f00 	cmp.w	r8, #0
 800855a:	bfb8      	it	lt
 800855c:	232d      	movlt	r3, #45	; 0x2d
 800855e:	4a80      	ldr	r2, [pc, #512]	; (8008760 <_printf_float+0x2d8>)
 8008560:	bfb8      	it	lt
 8008562:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008566:	4b7f      	ldr	r3, [pc, #508]	; (8008764 <_printf_float+0x2dc>)
 8008568:	e7d3      	b.n	8008512 <_printf_float+0x8a>
 800856a:	6863      	ldr	r3, [r4, #4]
 800856c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008570:	1c5a      	adds	r2, r3, #1
 8008572:	d142      	bne.n	80085fa <_printf_float+0x172>
 8008574:	2306      	movs	r3, #6
 8008576:	6063      	str	r3, [r4, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	9206      	str	r2, [sp, #24]
 800857c:	aa0e      	add	r2, sp, #56	; 0x38
 800857e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008582:	aa0d      	add	r2, sp, #52	; 0x34
 8008584:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008588:	9203      	str	r2, [sp, #12]
 800858a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800858e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008592:	6023      	str	r3, [r4, #0]
 8008594:	6863      	ldr	r3, [r4, #4]
 8008596:	4652      	mov	r2, sl
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	4628      	mov	r0, r5
 800859c:	4643      	mov	r3, r8
 800859e:	910b      	str	r1, [sp, #44]	; 0x2c
 80085a0:	f7ff fed6 	bl	8008350 <__cvt>
 80085a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085a6:	4680      	mov	r8, r0
 80085a8:	2947      	cmp	r1, #71	; 0x47
 80085aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80085ac:	d108      	bne.n	80085c0 <_printf_float+0x138>
 80085ae:	1cc8      	adds	r0, r1, #3
 80085b0:	db02      	blt.n	80085b8 <_printf_float+0x130>
 80085b2:	6863      	ldr	r3, [r4, #4]
 80085b4:	4299      	cmp	r1, r3
 80085b6:	dd40      	ble.n	800863a <_printf_float+0x1b2>
 80085b8:	f1a9 0902 	sub.w	r9, r9, #2
 80085bc:	fa5f f989 	uxtb.w	r9, r9
 80085c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80085c4:	d81f      	bhi.n	8008606 <_printf_float+0x17e>
 80085c6:	464a      	mov	r2, r9
 80085c8:	3901      	subs	r1, #1
 80085ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80085ce:	910d      	str	r1, [sp, #52]	; 0x34
 80085d0:	f7ff ff1d 	bl	800840e <__exponent>
 80085d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085d6:	4682      	mov	sl, r0
 80085d8:	1813      	adds	r3, r2, r0
 80085da:	2a01      	cmp	r2, #1
 80085dc:	6123      	str	r3, [r4, #16]
 80085de:	dc02      	bgt.n	80085e6 <_printf_float+0x15e>
 80085e0:	6822      	ldr	r2, [r4, #0]
 80085e2:	07d2      	lsls	r2, r2, #31
 80085e4:	d501      	bpl.n	80085ea <_printf_float+0x162>
 80085e6:	3301      	adds	r3, #1
 80085e8:	6123      	str	r3, [r4, #16]
 80085ea:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d09b      	beq.n	800852a <_printf_float+0xa2>
 80085f2:	232d      	movs	r3, #45	; 0x2d
 80085f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085f8:	e797      	b.n	800852a <_printf_float+0xa2>
 80085fa:	2947      	cmp	r1, #71	; 0x47
 80085fc:	d1bc      	bne.n	8008578 <_printf_float+0xf0>
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1ba      	bne.n	8008578 <_printf_float+0xf0>
 8008602:	2301      	movs	r3, #1
 8008604:	e7b7      	b.n	8008576 <_printf_float+0xee>
 8008606:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800860a:	d118      	bne.n	800863e <_printf_float+0x1b6>
 800860c:	2900      	cmp	r1, #0
 800860e:	6863      	ldr	r3, [r4, #4]
 8008610:	dd0b      	ble.n	800862a <_printf_float+0x1a2>
 8008612:	6121      	str	r1, [r4, #16]
 8008614:	b913      	cbnz	r3, 800861c <_printf_float+0x194>
 8008616:	6822      	ldr	r2, [r4, #0]
 8008618:	07d0      	lsls	r0, r2, #31
 800861a:	d502      	bpl.n	8008622 <_printf_float+0x19a>
 800861c:	3301      	adds	r3, #1
 800861e:	440b      	add	r3, r1
 8008620:	6123      	str	r3, [r4, #16]
 8008622:	f04f 0a00 	mov.w	sl, #0
 8008626:	65a1      	str	r1, [r4, #88]	; 0x58
 8008628:	e7df      	b.n	80085ea <_printf_float+0x162>
 800862a:	b913      	cbnz	r3, 8008632 <_printf_float+0x1aa>
 800862c:	6822      	ldr	r2, [r4, #0]
 800862e:	07d2      	lsls	r2, r2, #31
 8008630:	d501      	bpl.n	8008636 <_printf_float+0x1ae>
 8008632:	3302      	adds	r3, #2
 8008634:	e7f4      	b.n	8008620 <_printf_float+0x198>
 8008636:	2301      	movs	r3, #1
 8008638:	e7f2      	b.n	8008620 <_printf_float+0x198>
 800863a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800863e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008640:	4299      	cmp	r1, r3
 8008642:	db05      	blt.n	8008650 <_printf_float+0x1c8>
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	6121      	str	r1, [r4, #16]
 8008648:	07d8      	lsls	r0, r3, #31
 800864a:	d5ea      	bpl.n	8008622 <_printf_float+0x19a>
 800864c:	1c4b      	adds	r3, r1, #1
 800864e:	e7e7      	b.n	8008620 <_printf_float+0x198>
 8008650:	2900      	cmp	r1, #0
 8008652:	bfcc      	ite	gt
 8008654:	2201      	movgt	r2, #1
 8008656:	f1c1 0202 	rsble	r2, r1, #2
 800865a:	4413      	add	r3, r2
 800865c:	e7e0      	b.n	8008620 <_printf_float+0x198>
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	055a      	lsls	r2, r3, #21
 8008662:	d407      	bmi.n	8008674 <_printf_float+0x1ec>
 8008664:	6923      	ldr	r3, [r4, #16]
 8008666:	4642      	mov	r2, r8
 8008668:	4631      	mov	r1, r6
 800866a:	4628      	mov	r0, r5
 800866c:	47b8      	blx	r7
 800866e:	3001      	adds	r0, #1
 8008670:	d12b      	bne.n	80086ca <_printf_float+0x242>
 8008672:	e764      	b.n	800853e <_printf_float+0xb6>
 8008674:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008678:	f240 80dd 	bls.w	8008836 <_printf_float+0x3ae>
 800867c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008680:	2200      	movs	r2, #0
 8008682:	2300      	movs	r3, #0
 8008684:	f7f8 f990 	bl	80009a8 <__aeabi_dcmpeq>
 8008688:	2800      	cmp	r0, #0
 800868a:	d033      	beq.n	80086f4 <_printf_float+0x26c>
 800868c:	2301      	movs	r3, #1
 800868e:	4631      	mov	r1, r6
 8008690:	4628      	mov	r0, r5
 8008692:	4a35      	ldr	r2, [pc, #212]	; (8008768 <_printf_float+0x2e0>)
 8008694:	47b8      	blx	r7
 8008696:	3001      	adds	r0, #1
 8008698:	f43f af51 	beq.w	800853e <_printf_float+0xb6>
 800869c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80086a0:	429a      	cmp	r2, r3
 80086a2:	db02      	blt.n	80086aa <_printf_float+0x222>
 80086a4:	6823      	ldr	r3, [r4, #0]
 80086a6:	07d8      	lsls	r0, r3, #31
 80086a8:	d50f      	bpl.n	80086ca <_printf_float+0x242>
 80086aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086ae:	4631      	mov	r1, r6
 80086b0:	4628      	mov	r0, r5
 80086b2:	47b8      	blx	r7
 80086b4:	3001      	adds	r0, #1
 80086b6:	f43f af42 	beq.w	800853e <_printf_float+0xb6>
 80086ba:	f04f 0800 	mov.w	r8, #0
 80086be:	f104 091a 	add.w	r9, r4, #26
 80086c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086c4:	3b01      	subs	r3, #1
 80086c6:	4543      	cmp	r3, r8
 80086c8:	dc09      	bgt.n	80086de <_printf_float+0x256>
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	079b      	lsls	r3, r3, #30
 80086ce:	f100 8104 	bmi.w	80088da <_printf_float+0x452>
 80086d2:	68e0      	ldr	r0, [r4, #12]
 80086d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086d6:	4298      	cmp	r0, r3
 80086d8:	bfb8      	it	lt
 80086da:	4618      	movlt	r0, r3
 80086dc:	e731      	b.n	8008542 <_printf_float+0xba>
 80086de:	2301      	movs	r3, #1
 80086e0:	464a      	mov	r2, r9
 80086e2:	4631      	mov	r1, r6
 80086e4:	4628      	mov	r0, r5
 80086e6:	47b8      	blx	r7
 80086e8:	3001      	adds	r0, #1
 80086ea:	f43f af28 	beq.w	800853e <_printf_float+0xb6>
 80086ee:	f108 0801 	add.w	r8, r8, #1
 80086f2:	e7e6      	b.n	80086c2 <_printf_float+0x23a>
 80086f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	dc38      	bgt.n	800876c <_printf_float+0x2e4>
 80086fa:	2301      	movs	r3, #1
 80086fc:	4631      	mov	r1, r6
 80086fe:	4628      	mov	r0, r5
 8008700:	4a19      	ldr	r2, [pc, #100]	; (8008768 <_printf_float+0x2e0>)
 8008702:	47b8      	blx	r7
 8008704:	3001      	adds	r0, #1
 8008706:	f43f af1a 	beq.w	800853e <_printf_float+0xb6>
 800870a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800870e:	4313      	orrs	r3, r2
 8008710:	d102      	bne.n	8008718 <_printf_float+0x290>
 8008712:	6823      	ldr	r3, [r4, #0]
 8008714:	07d9      	lsls	r1, r3, #31
 8008716:	d5d8      	bpl.n	80086ca <_printf_float+0x242>
 8008718:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800871c:	4631      	mov	r1, r6
 800871e:	4628      	mov	r0, r5
 8008720:	47b8      	blx	r7
 8008722:	3001      	adds	r0, #1
 8008724:	f43f af0b 	beq.w	800853e <_printf_float+0xb6>
 8008728:	f04f 0900 	mov.w	r9, #0
 800872c:	f104 0a1a 	add.w	sl, r4, #26
 8008730:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008732:	425b      	negs	r3, r3
 8008734:	454b      	cmp	r3, r9
 8008736:	dc01      	bgt.n	800873c <_printf_float+0x2b4>
 8008738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800873a:	e794      	b.n	8008666 <_printf_float+0x1de>
 800873c:	2301      	movs	r3, #1
 800873e:	4652      	mov	r2, sl
 8008740:	4631      	mov	r1, r6
 8008742:	4628      	mov	r0, r5
 8008744:	47b8      	blx	r7
 8008746:	3001      	adds	r0, #1
 8008748:	f43f aef9 	beq.w	800853e <_printf_float+0xb6>
 800874c:	f109 0901 	add.w	r9, r9, #1
 8008750:	e7ee      	b.n	8008730 <_printf_float+0x2a8>
 8008752:	bf00      	nop
 8008754:	7fefffff 	.word	0x7fefffff
 8008758:	0800f902 	.word	0x0800f902
 800875c:	0800f906 	.word	0x0800f906
 8008760:	0800f90a 	.word	0x0800f90a
 8008764:	0800f90e 	.word	0x0800f90e
 8008768:	0800f912 	.word	0x0800f912
 800876c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800876e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008770:	429a      	cmp	r2, r3
 8008772:	bfa8      	it	ge
 8008774:	461a      	movge	r2, r3
 8008776:	2a00      	cmp	r2, #0
 8008778:	4691      	mov	r9, r2
 800877a:	dc37      	bgt.n	80087ec <_printf_float+0x364>
 800877c:	f04f 0b00 	mov.w	fp, #0
 8008780:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008784:	f104 021a 	add.w	r2, r4, #26
 8008788:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800878c:	ebaa 0309 	sub.w	r3, sl, r9
 8008790:	455b      	cmp	r3, fp
 8008792:	dc33      	bgt.n	80087fc <_printf_float+0x374>
 8008794:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008798:	429a      	cmp	r2, r3
 800879a:	db3b      	blt.n	8008814 <_printf_float+0x38c>
 800879c:	6823      	ldr	r3, [r4, #0]
 800879e:	07da      	lsls	r2, r3, #31
 80087a0:	d438      	bmi.n	8008814 <_printf_float+0x38c>
 80087a2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80087a6:	eba2 0903 	sub.w	r9, r2, r3
 80087aa:	eba2 020a 	sub.w	r2, r2, sl
 80087ae:	4591      	cmp	r9, r2
 80087b0:	bfa8      	it	ge
 80087b2:	4691      	movge	r9, r2
 80087b4:	f1b9 0f00 	cmp.w	r9, #0
 80087b8:	dc34      	bgt.n	8008824 <_printf_float+0x39c>
 80087ba:	f04f 0800 	mov.w	r8, #0
 80087be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087c2:	f104 0a1a 	add.w	sl, r4, #26
 80087c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80087ca:	1a9b      	subs	r3, r3, r2
 80087cc:	eba3 0309 	sub.w	r3, r3, r9
 80087d0:	4543      	cmp	r3, r8
 80087d2:	f77f af7a 	ble.w	80086ca <_printf_float+0x242>
 80087d6:	2301      	movs	r3, #1
 80087d8:	4652      	mov	r2, sl
 80087da:	4631      	mov	r1, r6
 80087dc:	4628      	mov	r0, r5
 80087de:	47b8      	blx	r7
 80087e0:	3001      	adds	r0, #1
 80087e2:	f43f aeac 	beq.w	800853e <_printf_float+0xb6>
 80087e6:	f108 0801 	add.w	r8, r8, #1
 80087ea:	e7ec      	b.n	80087c6 <_printf_float+0x33e>
 80087ec:	4613      	mov	r3, r2
 80087ee:	4631      	mov	r1, r6
 80087f0:	4642      	mov	r2, r8
 80087f2:	4628      	mov	r0, r5
 80087f4:	47b8      	blx	r7
 80087f6:	3001      	adds	r0, #1
 80087f8:	d1c0      	bne.n	800877c <_printf_float+0x2f4>
 80087fa:	e6a0      	b.n	800853e <_printf_float+0xb6>
 80087fc:	2301      	movs	r3, #1
 80087fe:	4631      	mov	r1, r6
 8008800:	4628      	mov	r0, r5
 8008802:	920b      	str	r2, [sp, #44]	; 0x2c
 8008804:	47b8      	blx	r7
 8008806:	3001      	adds	r0, #1
 8008808:	f43f ae99 	beq.w	800853e <_printf_float+0xb6>
 800880c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800880e:	f10b 0b01 	add.w	fp, fp, #1
 8008812:	e7b9      	b.n	8008788 <_printf_float+0x300>
 8008814:	4631      	mov	r1, r6
 8008816:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800881a:	4628      	mov	r0, r5
 800881c:	47b8      	blx	r7
 800881e:	3001      	adds	r0, #1
 8008820:	d1bf      	bne.n	80087a2 <_printf_float+0x31a>
 8008822:	e68c      	b.n	800853e <_printf_float+0xb6>
 8008824:	464b      	mov	r3, r9
 8008826:	4631      	mov	r1, r6
 8008828:	4628      	mov	r0, r5
 800882a:	eb08 020a 	add.w	r2, r8, sl
 800882e:	47b8      	blx	r7
 8008830:	3001      	adds	r0, #1
 8008832:	d1c2      	bne.n	80087ba <_printf_float+0x332>
 8008834:	e683      	b.n	800853e <_printf_float+0xb6>
 8008836:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008838:	2a01      	cmp	r2, #1
 800883a:	dc01      	bgt.n	8008840 <_printf_float+0x3b8>
 800883c:	07db      	lsls	r3, r3, #31
 800883e:	d539      	bpl.n	80088b4 <_printf_float+0x42c>
 8008840:	2301      	movs	r3, #1
 8008842:	4642      	mov	r2, r8
 8008844:	4631      	mov	r1, r6
 8008846:	4628      	mov	r0, r5
 8008848:	47b8      	blx	r7
 800884a:	3001      	adds	r0, #1
 800884c:	f43f ae77 	beq.w	800853e <_printf_float+0xb6>
 8008850:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008854:	4631      	mov	r1, r6
 8008856:	4628      	mov	r0, r5
 8008858:	47b8      	blx	r7
 800885a:	3001      	adds	r0, #1
 800885c:	f43f ae6f 	beq.w	800853e <_printf_float+0xb6>
 8008860:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008864:	2200      	movs	r2, #0
 8008866:	2300      	movs	r3, #0
 8008868:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800886c:	f7f8 f89c 	bl	80009a8 <__aeabi_dcmpeq>
 8008870:	b9d8      	cbnz	r0, 80088aa <_printf_float+0x422>
 8008872:	f109 33ff 	add.w	r3, r9, #4294967295
 8008876:	f108 0201 	add.w	r2, r8, #1
 800887a:	4631      	mov	r1, r6
 800887c:	4628      	mov	r0, r5
 800887e:	47b8      	blx	r7
 8008880:	3001      	adds	r0, #1
 8008882:	d10e      	bne.n	80088a2 <_printf_float+0x41a>
 8008884:	e65b      	b.n	800853e <_printf_float+0xb6>
 8008886:	2301      	movs	r3, #1
 8008888:	464a      	mov	r2, r9
 800888a:	4631      	mov	r1, r6
 800888c:	4628      	mov	r0, r5
 800888e:	47b8      	blx	r7
 8008890:	3001      	adds	r0, #1
 8008892:	f43f ae54 	beq.w	800853e <_printf_float+0xb6>
 8008896:	f108 0801 	add.w	r8, r8, #1
 800889a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800889c:	3b01      	subs	r3, #1
 800889e:	4543      	cmp	r3, r8
 80088a0:	dcf1      	bgt.n	8008886 <_printf_float+0x3fe>
 80088a2:	4653      	mov	r3, sl
 80088a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80088a8:	e6de      	b.n	8008668 <_printf_float+0x1e0>
 80088aa:	f04f 0800 	mov.w	r8, #0
 80088ae:	f104 091a 	add.w	r9, r4, #26
 80088b2:	e7f2      	b.n	800889a <_printf_float+0x412>
 80088b4:	2301      	movs	r3, #1
 80088b6:	4642      	mov	r2, r8
 80088b8:	e7df      	b.n	800887a <_printf_float+0x3f2>
 80088ba:	2301      	movs	r3, #1
 80088bc:	464a      	mov	r2, r9
 80088be:	4631      	mov	r1, r6
 80088c0:	4628      	mov	r0, r5
 80088c2:	47b8      	blx	r7
 80088c4:	3001      	adds	r0, #1
 80088c6:	f43f ae3a 	beq.w	800853e <_printf_float+0xb6>
 80088ca:	f108 0801 	add.w	r8, r8, #1
 80088ce:	68e3      	ldr	r3, [r4, #12]
 80088d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80088d2:	1a5b      	subs	r3, r3, r1
 80088d4:	4543      	cmp	r3, r8
 80088d6:	dcf0      	bgt.n	80088ba <_printf_float+0x432>
 80088d8:	e6fb      	b.n	80086d2 <_printf_float+0x24a>
 80088da:	f04f 0800 	mov.w	r8, #0
 80088de:	f104 0919 	add.w	r9, r4, #25
 80088e2:	e7f4      	b.n	80088ce <_printf_float+0x446>

080088e4 <_printf_common>:
 80088e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088e8:	4616      	mov	r6, r2
 80088ea:	4699      	mov	r9, r3
 80088ec:	688a      	ldr	r2, [r1, #8]
 80088ee:	690b      	ldr	r3, [r1, #16]
 80088f0:	4607      	mov	r7, r0
 80088f2:	4293      	cmp	r3, r2
 80088f4:	bfb8      	it	lt
 80088f6:	4613      	movlt	r3, r2
 80088f8:	6033      	str	r3, [r6, #0]
 80088fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088fe:	460c      	mov	r4, r1
 8008900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008904:	b10a      	cbz	r2, 800890a <_printf_common+0x26>
 8008906:	3301      	adds	r3, #1
 8008908:	6033      	str	r3, [r6, #0]
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	0699      	lsls	r1, r3, #26
 800890e:	bf42      	ittt	mi
 8008910:	6833      	ldrmi	r3, [r6, #0]
 8008912:	3302      	addmi	r3, #2
 8008914:	6033      	strmi	r3, [r6, #0]
 8008916:	6825      	ldr	r5, [r4, #0]
 8008918:	f015 0506 	ands.w	r5, r5, #6
 800891c:	d106      	bne.n	800892c <_printf_common+0x48>
 800891e:	f104 0a19 	add.w	sl, r4, #25
 8008922:	68e3      	ldr	r3, [r4, #12]
 8008924:	6832      	ldr	r2, [r6, #0]
 8008926:	1a9b      	subs	r3, r3, r2
 8008928:	42ab      	cmp	r3, r5
 800892a:	dc2b      	bgt.n	8008984 <_printf_common+0xa0>
 800892c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008930:	1e13      	subs	r3, r2, #0
 8008932:	6822      	ldr	r2, [r4, #0]
 8008934:	bf18      	it	ne
 8008936:	2301      	movne	r3, #1
 8008938:	0692      	lsls	r2, r2, #26
 800893a:	d430      	bmi.n	800899e <_printf_common+0xba>
 800893c:	4649      	mov	r1, r9
 800893e:	4638      	mov	r0, r7
 8008940:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008944:	47c0      	blx	r8
 8008946:	3001      	adds	r0, #1
 8008948:	d023      	beq.n	8008992 <_printf_common+0xae>
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	6922      	ldr	r2, [r4, #16]
 800894e:	f003 0306 	and.w	r3, r3, #6
 8008952:	2b04      	cmp	r3, #4
 8008954:	bf14      	ite	ne
 8008956:	2500      	movne	r5, #0
 8008958:	6833      	ldreq	r3, [r6, #0]
 800895a:	f04f 0600 	mov.w	r6, #0
 800895e:	bf08      	it	eq
 8008960:	68e5      	ldreq	r5, [r4, #12]
 8008962:	f104 041a 	add.w	r4, r4, #26
 8008966:	bf08      	it	eq
 8008968:	1aed      	subeq	r5, r5, r3
 800896a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800896e:	bf08      	it	eq
 8008970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008974:	4293      	cmp	r3, r2
 8008976:	bfc4      	itt	gt
 8008978:	1a9b      	subgt	r3, r3, r2
 800897a:	18ed      	addgt	r5, r5, r3
 800897c:	42b5      	cmp	r5, r6
 800897e:	d11a      	bne.n	80089b6 <_printf_common+0xd2>
 8008980:	2000      	movs	r0, #0
 8008982:	e008      	b.n	8008996 <_printf_common+0xb2>
 8008984:	2301      	movs	r3, #1
 8008986:	4652      	mov	r2, sl
 8008988:	4649      	mov	r1, r9
 800898a:	4638      	mov	r0, r7
 800898c:	47c0      	blx	r8
 800898e:	3001      	adds	r0, #1
 8008990:	d103      	bne.n	800899a <_printf_common+0xb6>
 8008992:	f04f 30ff 	mov.w	r0, #4294967295
 8008996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800899a:	3501      	adds	r5, #1
 800899c:	e7c1      	b.n	8008922 <_printf_common+0x3e>
 800899e:	2030      	movs	r0, #48	; 0x30
 80089a0:	18e1      	adds	r1, r4, r3
 80089a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089a6:	1c5a      	adds	r2, r3, #1
 80089a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089ac:	4422      	add	r2, r4
 80089ae:	3302      	adds	r3, #2
 80089b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089b4:	e7c2      	b.n	800893c <_printf_common+0x58>
 80089b6:	2301      	movs	r3, #1
 80089b8:	4622      	mov	r2, r4
 80089ba:	4649      	mov	r1, r9
 80089bc:	4638      	mov	r0, r7
 80089be:	47c0      	blx	r8
 80089c0:	3001      	adds	r0, #1
 80089c2:	d0e6      	beq.n	8008992 <_printf_common+0xae>
 80089c4:	3601      	adds	r6, #1
 80089c6:	e7d9      	b.n	800897c <_printf_common+0x98>

080089c8 <_printf_i>:
 80089c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089cc:	7e0f      	ldrb	r7, [r1, #24]
 80089ce:	4691      	mov	r9, r2
 80089d0:	2f78      	cmp	r7, #120	; 0x78
 80089d2:	4680      	mov	r8, r0
 80089d4:	460c      	mov	r4, r1
 80089d6:	469a      	mov	sl, r3
 80089d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80089da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80089de:	d807      	bhi.n	80089f0 <_printf_i+0x28>
 80089e0:	2f62      	cmp	r7, #98	; 0x62
 80089e2:	d80a      	bhi.n	80089fa <_printf_i+0x32>
 80089e4:	2f00      	cmp	r7, #0
 80089e6:	f000 80d5 	beq.w	8008b94 <_printf_i+0x1cc>
 80089ea:	2f58      	cmp	r7, #88	; 0x58
 80089ec:	f000 80c1 	beq.w	8008b72 <_printf_i+0x1aa>
 80089f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80089f8:	e03a      	b.n	8008a70 <_printf_i+0xa8>
 80089fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80089fe:	2b15      	cmp	r3, #21
 8008a00:	d8f6      	bhi.n	80089f0 <_printf_i+0x28>
 8008a02:	a101      	add	r1, pc, #4	; (adr r1, 8008a08 <_printf_i+0x40>)
 8008a04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a08:	08008a61 	.word	0x08008a61
 8008a0c:	08008a75 	.word	0x08008a75
 8008a10:	080089f1 	.word	0x080089f1
 8008a14:	080089f1 	.word	0x080089f1
 8008a18:	080089f1 	.word	0x080089f1
 8008a1c:	080089f1 	.word	0x080089f1
 8008a20:	08008a75 	.word	0x08008a75
 8008a24:	080089f1 	.word	0x080089f1
 8008a28:	080089f1 	.word	0x080089f1
 8008a2c:	080089f1 	.word	0x080089f1
 8008a30:	080089f1 	.word	0x080089f1
 8008a34:	08008b7b 	.word	0x08008b7b
 8008a38:	08008aa1 	.word	0x08008aa1
 8008a3c:	08008b35 	.word	0x08008b35
 8008a40:	080089f1 	.word	0x080089f1
 8008a44:	080089f1 	.word	0x080089f1
 8008a48:	08008b9d 	.word	0x08008b9d
 8008a4c:	080089f1 	.word	0x080089f1
 8008a50:	08008aa1 	.word	0x08008aa1
 8008a54:	080089f1 	.word	0x080089f1
 8008a58:	080089f1 	.word	0x080089f1
 8008a5c:	08008b3d 	.word	0x08008b3d
 8008a60:	682b      	ldr	r3, [r5, #0]
 8008a62:	1d1a      	adds	r2, r3, #4
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	602a      	str	r2, [r5, #0]
 8008a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a70:	2301      	movs	r3, #1
 8008a72:	e0a0      	b.n	8008bb6 <_printf_i+0x1ee>
 8008a74:	6820      	ldr	r0, [r4, #0]
 8008a76:	682b      	ldr	r3, [r5, #0]
 8008a78:	0607      	lsls	r7, r0, #24
 8008a7a:	f103 0104 	add.w	r1, r3, #4
 8008a7e:	6029      	str	r1, [r5, #0]
 8008a80:	d501      	bpl.n	8008a86 <_printf_i+0xbe>
 8008a82:	681e      	ldr	r6, [r3, #0]
 8008a84:	e003      	b.n	8008a8e <_printf_i+0xc6>
 8008a86:	0646      	lsls	r6, r0, #25
 8008a88:	d5fb      	bpl.n	8008a82 <_printf_i+0xba>
 8008a8a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008a8e:	2e00      	cmp	r6, #0
 8008a90:	da03      	bge.n	8008a9a <_printf_i+0xd2>
 8008a92:	232d      	movs	r3, #45	; 0x2d
 8008a94:	4276      	negs	r6, r6
 8008a96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a9a:	230a      	movs	r3, #10
 8008a9c:	4859      	ldr	r0, [pc, #356]	; (8008c04 <_printf_i+0x23c>)
 8008a9e:	e012      	b.n	8008ac6 <_printf_i+0xfe>
 8008aa0:	682b      	ldr	r3, [r5, #0]
 8008aa2:	6820      	ldr	r0, [r4, #0]
 8008aa4:	1d19      	adds	r1, r3, #4
 8008aa6:	6029      	str	r1, [r5, #0]
 8008aa8:	0605      	lsls	r5, r0, #24
 8008aaa:	d501      	bpl.n	8008ab0 <_printf_i+0xe8>
 8008aac:	681e      	ldr	r6, [r3, #0]
 8008aae:	e002      	b.n	8008ab6 <_printf_i+0xee>
 8008ab0:	0641      	lsls	r1, r0, #25
 8008ab2:	d5fb      	bpl.n	8008aac <_printf_i+0xe4>
 8008ab4:	881e      	ldrh	r6, [r3, #0]
 8008ab6:	2f6f      	cmp	r7, #111	; 0x6f
 8008ab8:	bf0c      	ite	eq
 8008aba:	2308      	moveq	r3, #8
 8008abc:	230a      	movne	r3, #10
 8008abe:	4851      	ldr	r0, [pc, #324]	; (8008c04 <_printf_i+0x23c>)
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ac6:	6865      	ldr	r5, [r4, #4]
 8008ac8:	2d00      	cmp	r5, #0
 8008aca:	bfa8      	it	ge
 8008acc:	6821      	ldrge	r1, [r4, #0]
 8008ace:	60a5      	str	r5, [r4, #8]
 8008ad0:	bfa4      	itt	ge
 8008ad2:	f021 0104 	bicge.w	r1, r1, #4
 8008ad6:	6021      	strge	r1, [r4, #0]
 8008ad8:	b90e      	cbnz	r6, 8008ade <_printf_i+0x116>
 8008ada:	2d00      	cmp	r5, #0
 8008adc:	d04b      	beq.n	8008b76 <_printf_i+0x1ae>
 8008ade:	4615      	mov	r5, r2
 8008ae0:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ae4:	fb03 6711 	mls	r7, r3, r1, r6
 8008ae8:	5dc7      	ldrb	r7, [r0, r7]
 8008aea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008aee:	4637      	mov	r7, r6
 8008af0:	42bb      	cmp	r3, r7
 8008af2:	460e      	mov	r6, r1
 8008af4:	d9f4      	bls.n	8008ae0 <_printf_i+0x118>
 8008af6:	2b08      	cmp	r3, #8
 8008af8:	d10b      	bne.n	8008b12 <_printf_i+0x14a>
 8008afa:	6823      	ldr	r3, [r4, #0]
 8008afc:	07de      	lsls	r6, r3, #31
 8008afe:	d508      	bpl.n	8008b12 <_printf_i+0x14a>
 8008b00:	6923      	ldr	r3, [r4, #16]
 8008b02:	6861      	ldr	r1, [r4, #4]
 8008b04:	4299      	cmp	r1, r3
 8008b06:	bfde      	ittt	le
 8008b08:	2330      	movle	r3, #48	; 0x30
 8008b0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b12:	1b52      	subs	r2, r2, r5
 8008b14:	6122      	str	r2, [r4, #16]
 8008b16:	464b      	mov	r3, r9
 8008b18:	4621      	mov	r1, r4
 8008b1a:	4640      	mov	r0, r8
 8008b1c:	f8cd a000 	str.w	sl, [sp]
 8008b20:	aa03      	add	r2, sp, #12
 8008b22:	f7ff fedf 	bl	80088e4 <_printf_common>
 8008b26:	3001      	adds	r0, #1
 8008b28:	d14a      	bne.n	8008bc0 <_printf_i+0x1f8>
 8008b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b2e:	b004      	add	sp, #16
 8008b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b34:	6823      	ldr	r3, [r4, #0]
 8008b36:	f043 0320 	orr.w	r3, r3, #32
 8008b3a:	6023      	str	r3, [r4, #0]
 8008b3c:	2778      	movs	r7, #120	; 0x78
 8008b3e:	4832      	ldr	r0, [pc, #200]	; (8008c08 <_printf_i+0x240>)
 8008b40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008b44:	6823      	ldr	r3, [r4, #0]
 8008b46:	6829      	ldr	r1, [r5, #0]
 8008b48:	061f      	lsls	r7, r3, #24
 8008b4a:	f851 6b04 	ldr.w	r6, [r1], #4
 8008b4e:	d402      	bmi.n	8008b56 <_printf_i+0x18e>
 8008b50:	065f      	lsls	r7, r3, #25
 8008b52:	bf48      	it	mi
 8008b54:	b2b6      	uxthmi	r6, r6
 8008b56:	07df      	lsls	r7, r3, #31
 8008b58:	bf48      	it	mi
 8008b5a:	f043 0320 	orrmi.w	r3, r3, #32
 8008b5e:	6029      	str	r1, [r5, #0]
 8008b60:	bf48      	it	mi
 8008b62:	6023      	strmi	r3, [r4, #0]
 8008b64:	b91e      	cbnz	r6, 8008b6e <_printf_i+0x1a6>
 8008b66:	6823      	ldr	r3, [r4, #0]
 8008b68:	f023 0320 	bic.w	r3, r3, #32
 8008b6c:	6023      	str	r3, [r4, #0]
 8008b6e:	2310      	movs	r3, #16
 8008b70:	e7a6      	b.n	8008ac0 <_printf_i+0xf8>
 8008b72:	4824      	ldr	r0, [pc, #144]	; (8008c04 <_printf_i+0x23c>)
 8008b74:	e7e4      	b.n	8008b40 <_printf_i+0x178>
 8008b76:	4615      	mov	r5, r2
 8008b78:	e7bd      	b.n	8008af6 <_printf_i+0x12e>
 8008b7a:	682b      	ldr	r3, [r5, #0]
 8008b7c:	6826      	ldr	r6, [r4, #0]
 8008b7e:	1d18      	adds	r0, r3, #4
 8008b80:	6961      	ldr	r1, [r4, #20]
 8008b82:	6028      	str	r0, [r5, #0]
 8008b84:	0635      	lsls	r5, r6, #24
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	d501      	bpl.n	8008b8e <_printf_i+0x1c6>
 8008b8a:	6019      	str	r1, [r3, #0]
 8008b8c:	e002      	b.n	8008b94 <_printf_i+0x1cc>
 8008b8e:	0670      	lsls	r0, r6, #25
 8008b90:	d5fb      	bpl.n	8008b8a <_printf_i+0x1c2>
 8008b92:	8019      	strh	r1, [r3, #0]
 8008b94:	2300      	movs	r3, #0
 8008b96:	4615      	mov	r5, r2
 8008b98:	6123      	str	r3, [r4, #16]
 8008b9a:	e7bc      	b.n	8008b16 <_printf_i+0x14e>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	1d1a      	adds	r2, r3, #4
 8008ba2:	602a      	str	r2, [r5, #0]
 8008ba4:	681d      	ldr	r5, [r3, #0]
 8008ba6:	6862      	ldr	r2, [r4, #4]
 8008ba8:	4628      	mov	r0, r5
 8008baa:	f000 fbf2 	bl	8009392 <memchr>
 8008bae:	b108      	cbz	r0, 8008bb4 <_printf_i+0x1ec>
 8008bb0:	1b40      	subs	r0, r0, r5
 8008bb2:	6060      	str	r0, [r4, #4]
 8008bb4:	6863      	ldr	r3, [r4, #4]
 8008bb6:	6123      	str	r3, [r4, #16]
 8008bb8:	2300      	movs	r3, #0
 8008bba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bbe:	e7aa      	b.n	8008b16 <_printf_i+0x14e>
 8008bc0:	462a      	mov	r2, r5
 8008bc2:	4649      	mov	r1, r9
 8008bc4:	4640      	mov	r0, r8
 8008bc6:	6923      	ldr	r3, [r4, #16]
 8008bc8:	47d0      	blx	sl
 8008bca:	3001      	adds	r0, #1
 8008bcc:	d0ad      	beq.n	8008b2a <_printf_i+0x162>
 8008bce:	6823      	ldr	r3, [r4, #0]
 8008bd0:	079b      	lsls	r3, r3, #30
 8008bd2:	d413      	bmi.n	8008bfc <_printf_i+0x234>
 8008bd4:	68e0      	ldr	r0, [r4, #12]
 8008bd6:	9b03      	ldr	r3, [sp, #12]
 8008bd8:	4298      	cmp	r0, r3
 8008bda:	bfb8      	it	lt
 8008bdc:	4618      	movlt	r0, r3
 8008bde:	e7a6      	b.n	8008b2e <_printf_i+0x166>
 8008be0:	2301      	movs	r3, #1
 8008be2:	4632      	mov	r2, r6
 8008be4:	4649      	mov	r1, r9
 8008be6:	4640      	mov	r0, r8
 8008be8:	47d0      	blx	sl
 8008bea:	3001      	adds	r0, #1
 8008bec:	d09d      	beq.n	8008b2a <_printf_i+0x162>
 8008bee:	3501      	adds	r5, #1
 8008bf0:	68e3      	ldr	r3, [r4, #12]
 8008bf2:	9903      	ldr	r1, [sp, #12]
 8008bf4:	1a5b      	subs	r3, r3, r1
 8008bf6:	42ab      	cmp	r3, r5
 8008bf8:	dcf2      	bgt.n	8008be0 <_printf_i+0x218>
 8008bfa:	e7eb      	b.n	8008bd4 <_printf_i+0x20c>
 8008bfc:	2500      	movs	r5, #0
 8008bfe:	f104 0619 	add.w	r6, r4, #25
 8008c02:	e7f5      	b.n	8008bf0 <_printf_i+0x228>
 8008c04:	0800f914 	.word	0x0800f914
 8008c08:	0800f925 	.word	0x0800f925

08008c0c <_scanf_float>:
 8008c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c10:	b087      	sub	sp, #28
 8008c12:	9303      	str	r3, [sp, #12]
 8008c14:	688b      	ldr	r3, [r1, #8]
 8008c16:	4617      	mov	r7, r2
 8008c18:	1e5a      	subs	r2, r3, #1
 8008c1a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008c1e:	bf85      	ittet	hi
 8008c20:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008c24:	195b      	addhi	r3, r3, r5
 8008c26:	2300      	movls	r3, #0
 8008c28:	9302      	strhi	r3, [sp, #8]
 8008c2a:	bf88      	it	hi
 8008c2c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008c30:	468b      	mov	fp, r1
 8008c32:	f04f 0500 	mov.w	r5, #0
 8008c36:	bf8c      	ite	hi
 8008c38:	608b      	strhi	r3, [r1, #8]
 8008c3a:	9302      	strls	r3, [sp, #8]
 8008c3c:	680b      	ldr	r3, [r1, #0]
 8008c3e:	4680      	mov	r8, r0
 8008c40:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008c44:	f84b 3b1c 	str.w	r3, [fp], #28
 8008c48:	460c      	mov	r4, r1
 8008c4a:	465e      	mov	r6, fp
 8008c4c:	46aa      	mov	sl, r5
 8008c4e:	46a9      	mov	r9, r5
 8008c50:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008c54:	9501      	str	r5, [sp, #4]
 8008c56:	68a2      	ldr	r2, [r4, #8]
 8008c58:	b152      	cbz	r2, 8008c70 <_scanf_float+0x64>
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	2b4e      	cmp	r3, #78	; 0x4e
 8008c60:	d864      	bhi.n	8008d2c <_scanf_float+0x120>
 8008c62:	2b40      	cmp	r3, #64	; 0x40
 8008c64:	d83c      	bhi.n	8008ce0 <_scanf_float+0xd4>
 8008c66:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008c6a:	b2c8      	uxtb	r0, r1
 8008c6c:	280e      	cmp	r0, #14
 8008c6e:	d93a      	bls.n	8008ce6 <_scanf_float+0xda>
 8008c70:	f1b9 0f00 	cmp.w	r9, #0
 8008c74:	d003      	beq.n	8008c7e <_scanf_float+0x72>
 8008c76:	6823      	ldr	r3, [r4, #0]
 8008c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c7c:	6023      	str	r3, [r4, #0]
 8008c7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c82:	f1ba 0f01 	cmp.w	sl, #1
 8008c86:	f200 8113 	bhi.w	8008eb0 <_scanf_float+0x2a4>
 8008c8a:	455e      	cmp	r6, fp
 8008c8c:	f200 8105 	bhi.w	8008e9a <_scanf_float+0x28e>
 8008c90:	2501      	movs	r5, #1
 8008c92:	4628      	mov	r0, r5
 8008c94:	b007      	add	sp, #28
 8008c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c9a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008c9e:	2a0d      	cmp	r2, #13
 8008ca0:	d8e6      	bhi.n	8008c70 <_scanf_float+0x64>
 8008ca2:	a101      	add	r1, pc, #4	; (adr r1, 8008ca8 <_scanf_float+0x9c>)
 8008ca4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008ca8:	08008de7 	.word	0x08008de7
 8008cac:	08008c71 	.word	0x08008c71
 8008cb0:	08008c71 	.word	0x08008c71
 8008cb4:	08008c71 	.word	0x08008c71
 8008cb8:	08008e47 	.word	0x08008e47
 8008cbc:	08008e1f 	.word	0x08008e1f
 8008cc0:	08008c71 	.word	0x08008c71
 8008cc4:	08008c71 	.word	0x08008c71
 8008cc8:	08008df5 	.word	0x08008df5
 8008ccc:	08008c71 	.word	0x08008c71
 8008cd0:	08008c71 	.word	0x08008c71
 8008cd4:	08008c71 	.word	0x08008c71
 8008cd8:	08008c71 	.word	0x08008c71
 8008cdc:	08008dad 	.word	0x08008dad
 8008ce0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008ce4:	e7db      	b.n	8008c9e <_scanf_float+0x92>
 8008ce6:	290e      	cmp	r1, #14
 8008ce8:	d8c2      	bhi.n	8008c70 <_scanf_float+0x64>
 8008cea:	a001      	add	r0, pc, #4	; (adr r0, 8008cf0 <_scanf_float+0xe4>)
 8008cec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008cf0:	08008d9f 	.word	0x08008d9f
 8008cf4:	08008c71 	.word	0x08008c71
 8008cf8:	08008d9f 	.word	0x08008d9f
 8008cfc:	08008e33 	.word	0x08008e33
 8008d00:	08008c71 	.word	0x08008c71
 8008d04:	08008d4d 	.word	0x08008d4d
 8008d08:	08008d89 	.word	0x08008d89
 8008d0c:	08008d89 	.word	0x08008d89
 8008d10:	08008d89 	.word	0x08008d89
 8008d14:	08008d89 	.word	0x08008d89
 8008d18:	08008d89 	.word	0x08008d89
 8008d1c:	08008d89 	.word	0x08008d89
 8008d20:	08008d89 	.word	0x08008d89
 8008d24:	08008d89 	.word	0x08008d89
 8008d28:	08008d89 	.word	0x08008d89
 8008d2c:	2b6e      	cmp	r3, #110	; 0x6e
 8008d2e:	d809      	bhi.n	8008d44 <_scanf_float+0x138>
 8008d30:	2b60      	cmp	r3, #96	; 0x60
 8008d32:	d8b2      	bhi.n	8008c9a <_scanf_float+0x8e>
 8008d34:	2b54      	cmp	r3, #84	; 0x54
 8008d36:	d077      	beq.n	8008e28 <_scanf_float+0x21c>
 8008d38:	2b59      	cmp	r3, #89	; 0x59
 8008d3a:	d199      	bne.n	8008c70 <_scanf_float+0x64>
 8008d3c:	2d07      	cmp	r5, #7
 8008d3e:	d197      	bne.n	8008c70 <_scanf_float+0x64>
 8008d40:	2508      	movs	r5, #8
 8008d42:	e029      	b.n	8008d98 <_scanf_float+0x18c>
 8008d44:	2b74      	cmp	r3, #116	; 0x74
 8008d46:	d06f      	beq.n	8008e28 <_scanf_float+0x21c>
 8008d48:	2b79      	cmp	r3, #121	; 0x79
 8008d4a:	e7f6      	b.n	8008d3a <_scanf_float+0x12e>
 8008d4c:	6821      	ldr	r1, [r4, #0]
 8008d4e:	05c8      	lsls	r0, r1, #23
 8008d50:	d51a      	bpl.n	8008d88 <_scanf_float+0x17c>
 8008d52:	9b02      	ldr	r3, [sp, #8]
 8008d54:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008d58:	6021      	str	r1, [r4, #0]
 8008d5a:	f109 0901 	add.w	r9, r9, #1
 8008d5e:	b11b      	cbz	r3, 8008d68 <_scanf_float+0x15c>
 8008d60:	3b01      	subs	r3, #1
 8008d62:	3201      	adds	r2, #1
 8008d64:	9302      	str	r3, [sp, #8]
 8008d66:	60a2      	str	r2, [r4, #8]
 8008d68:	68a3      	ldr	r3, [r4, #8]
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	60a3      	str	r3, [r4, #8]
 8008d6e:	6923      	ldr	r3, [r4, #16]
 8008d70:	3301      	adds	r3, #1
 8008d72:	6123      	str	r3, [r4, #16]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	3b01      	subs	r3, #1
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	607b      	str	r3, [r7, #4]
 8008d7c:	f340 8084 	ble.w	8008e88 <_scanf_float+0x27c>
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	3301      	adds	r3, #1
 8008d84:	603b      	str	r3, [r7, #0]
 8008d86:	e766      	b.n	8008c56 <_scanf_float+0x4a>
 8008d88:	eb1a 0f05 	cmn.w	sl, r5
 8008d8c:	f47f af70 	bne.w	8008c70 <_scanf_float+0x64>
 8008d90:	6822      	ldr	r2, [r4, #0]
 8008d92:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008d96:	6022      	str	r2, [r4, #0]
 8008d98:	f806 3b01 	strb.w	r3, [r6], #1
 8008d9c:	e7e4      	b.n	8008d68 <_scanf_float+0x15c>
 8008d9e:	6822      	ldr	r2, [r4, #0]
 8008da0:	0610      	lsls	r0, r2, #24
 8008da2:	f57f af65 	bpl.w	8008c70 <_scanf_float+0x64>
 8008da6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008daa:	e7f4      	b.n	8008d96 <_scanf_float+0x18a>
 8008dac:	f1ba 0f00 	cmp.w	sl, #0
 8008db0:	d10e      	bne.n	8008dd0 <_scanf_float+0x1c4>
 8008db2:	f1b9 0f00 	cmp.w	r9, #0
 8008db6:	d10e      	bne.n	8008dd6 <_scanf_float+0x1ca>
 8008db8:	6822      	ldr	r2, [r4, #0]
 8008dba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008dbe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008dc2:	d108      	bne.n	8008dd6 <_scanf_float+0x1ca>
 8008dc4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008dc8:	f04f 0a01 	mov.w	sl, #1
 8008dcc:	6022      	str	r2, [r4, #0]
 8008dce:	e7e3      	b.n	8008d98 <_scanf_float+0x18c>
 8008dd0:	f1ba 0f02 	cmp.w	sl, #2
 8008dd4:	d055      	beq.n	8008e82 <_scanf_float+0x276>
 8008dd6:	2d01      	cmp	r5, #1
 8008dd8:	d002      	beq.n	8008de0 <_scanf_float+0x1d4>
 8008dda:	2d04      	cmp	r5, #4
 8008ddc:	f47f af48 	bne.w	8008c70 <_scanf_float+0x64>
 8008de0:	3501      	adds	r5, #1
 8008de2:	b2ed      	uxtb	r5, r5
 8008de4:	e7d8      	b.n	8008d98 <_scanf_float+0x18c>
 8008de6:	f1ba 0f01 	cmp.w	sl, #1
 8008dea:	f47f af41 	bne.w	8008c70 <_scanf_float+0x64>
 8008dee:	f04f 0a02 	mov.w	sl, #2
 8008df2:	e7d1      	b.n	8008d98 <_scanf_float+0x18c>
 8008df4:	b97d      	cbnz	r5, 8008e16 <_scanf_float+0x20a>
 8008df6:	f1b9 0f00 	cmp.w	r9, #0
 8008dfa:	f47f af3c 	bne.w	8008c76 <_scanf_float+0x6a>
 8008dfe:	6822      	ldr	r2, [r4, #0]
 8008e00:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008e04:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008e08:	f47f af39 	bne.w	8008c7e <_scanf_float+0x72>
 8008e0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008e10:	2501      	movs	r5, #1
 8008e12:	6022      	str	r2, [r4, #0]
 8008e14:	e7c0      	b.n	8008d98 <_scanf_float+0x18c>
 8008e16:	2d03      	cmp	r5, #3
 8008e18:	d0e2      	beq.n	8008de0 <_scanf_float+0x1d4>
 8008e1a:	2d05      	cmp	r5, #5
 8008e1c:	e7de      	b.n	8008ddc <_scanf_float+0x1d0>
 8008e1e:	2d02      	cmp	r5, #2
 8008e20:	f47f af26 	bne.w	8008c70 <_scanf_float+0x64>
 8008e24:	2503      	movs	r5, #3
 8008e26:	e7b7      	b.n	8008d98 <_scanf_float+0x18c>
 8008e28:	2d06      	cmp	r5, #6
 8008e2a:	f47f af21 	bne.w	8008c70 <_scanf_float+0x64>
 8008e2e:	2507      	movs	r5, #7
 8008e30:	e7b2      	b.n	8008d98 <_scanf_float+0x18c>
 8008e32:	6822      	ldr	r2, [r4, #0]
 8008e34:	0591      	lsls	r1, r2, #22
 8008e36:	f57f af1b 	bpl.w	8008c70 <_scanf_float+0x64>
 8008e3a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008e3e:	6022      	str	r2, [r4, #0]
 8008e40:	f8cd 9004 	str.w	r9, [sp, #4]
 8008e44:	e7a8      	b.n	8008d98 <_scanf_float+0x18c>
 8008e46:	6822      	ldr	r2, [r4, #0]
 8008e48:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008e4c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008e50:	d006      	beq.n	8008e60 <_scanf_float+0x254>
 8008e52:	0550      	lsls	r0, r2, #21
 8008e54:	f57f af0c 	bpl.w	8008c70 <_scanf_float+0x64>
 8008e58:	f1b9 0f00 	cmp.w	r9, #0
 8008e5c:	f43f af0f 	beq.w	8008c7e <_scanf_float+0x72>
 8008e60:	0591      	lsls	r1, r2, #22
 8008e62:	bf58      	it	pl
 8008e64:	9901      	ldrpl	r1, [sp, #4]
 8008e66:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008e6a:	bf58      	it	pl
 8008e6c:	eba9 0101 	subpl.w	r1, r9, r1
 8008e70:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008e74:	f04f 0900 	mov.w	r9, #0
 8008e78:	bf58      	it	pl
 8008e7a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008e7e:	6022      	str	r2, [r4, #0]
 8008e80:	e78a      	b.n	8008d98 <_scanf_float+0x18c>
 8008e82:	f04f 0a03 	mov.w	sl, #3
 8008e86:	e787      	b.n	8008d98 <_scanf_float+0x18c>
 8008e88:	4639      	mov	r1, r7
 8008e8a:	4640      	mov	r0, r8
 8008e8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008e90:	4798      	blx	r3
 8008e92:	2800      	cmp	r0, #0
 8008e94:	f43f aedf 	beq.w	8008c56 <_scanf_float+0x4a>
 8008e98:	e6ea      	b.n	8008c70 <_scanf_float+0x64>
 8008e9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e9e:	463a      	mov	r2, r7
 8008ea0:	4640      	mov	r0, r8
 8008ea2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ea6:	4798      	blx	r3
 8008ea8:	6923      	ldr	r3, [r4, #16]
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	6123      	str	r3, [r4, #16]
 8008eae:	e6ec      	b.n	8008c8a <_scanf_float+0x7e>
 8008eb0:	1e6b      	subs	r3, r5, #1
 8008eb2:	2b06      	cmp	r3, #6
 8008eb4:	d825      	bhi.n	8008f02 <_scanf_float+0x2f6>
 8008eb6:	2d02      	cmp	r5, #2
 8008eb8:	d836      	bhi.n	8008f28 <_scanf_float+0x31c>
 8008eba:	455e      	cmp	r6, fp
 8008ebc:	f67f aee8 	bls.w	8008c90 <_scanf_float+0x84>
 8008ec0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ec4:	463a      	mov	r2, r7
 8008ec6:	4640      	mov	r0, r8
 8008ec8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ecc:	4798      	blx	r3
 8008ece:	6923      	ldr	r3, [r4, #16]
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	6123      	str	r3, [r4, #16]
 8008ed4:	e7f1      	b.n	8008eba <_scanf_float+0x2ae>
 8008ed6:	9802      	ldr	r0, [sp, #8]
 8008ed8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008edc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008ee0:	463a      	mov	r2, r7
 8008ee2:	9002      	str	r0, [sp, #8]
 8008ee4:	4640      	mov	r0, r8
 8008ee6:	4798      	blx	r3
 8008ee8:	6923      	ldr	r3, [r4, #16]
 8008eea:	3b01      	subs	r3, #1
 8008eec:	6123      	str	r3, [r4, #16]
 8008eee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ef2:	fa5f fa8a 	uxtb.w	sl, sl
 8008ef6:	f1ba 0f02 	cmp.w	sl, #2
 8008efa:	d1ec      	bne.n	8008ed6 <_scanf_float+0x2ca>
 8008efc:	3d03      	subs	r5, #3
 8008efe:	b2ed      	uxtb	r5, r5
 8008f00:	1b76      	subs	r6, r6, r5
 8008f02:	6823      	ldr	r3, [r4, #0]
 8008f04:	05da      	lsls	r2, r3, #23
 8008f06:	d52f      	bpl.n	8008f68 <_scanf_float+0x35c>
 8008f08:	055b      	lsls	r3, r3, #21
 8008f0a:	d510      	bpl.n	8008f2e <_scanf_float+0x322>
 8008f0c:	455e      	cmp	r6, fp
 8008f0e:	f67f aebf 	bls.w	8008c90 <_scanf_float+0x84>
 8008f12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f16:	463a      	mov	r2, r7
 8008f18:	4640      	mov	r0, r8
 8008f1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f1e:	4798      	blx	r3
 8008f20:	6923      	ldr	r3, [r4, #16]
 8008f22:	3b01      	subs	r3, #1
 8008f24:	6123      	str	r3, [r4, #16]
 8008f26:	e7f1      	b.n	8008f0c <_scanf_float+0x300>
 8008f28:	46aa      	mov	sl, r5
 8008f2a:	9602      	str	r6, [sp, #8]
 8008f2c:	e7df      	b.n	8008eee <_scanf_float+0x2e2>
 8008f2e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008f32:	6923      	ldr	r3, [r4, #16]
 8008f34:	2965      	cmp	r1, #101	; 0x65
 8008f36:	f103 33ff 	add.w	r3, r3, #4294967295
 8008f3a:	f106 35ff 	add.w	r5, r6, #4294967295
 8008f3e:	6123      	str	r3, [r4, #16]
 8008f40:	d00c      	beq.n	8008f5c <_scanf_float+0x350>
 8008f42:	2945      	cmp	r1, #69	; 0x45
 8008f44:	d00a      	beq.n	8008f5c <_scanf_float+0x350>
 8008f46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f4a:	463a      	mov	r2, r7
 8008f4c:	4640      	mov	r0, r8
 8008f4e:	4798      	blx	r3
 8008f50:	6923      	ldr	r3, [r4, #16]
 8008f52:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008f56:	3b01      	subs	r3, #1
 8008f58:	1eb5      	subs	r5, r6, #2
 8008f5a:	6123      	str	r3, [r4, #16]
 8008f5c:	463a      	mov	r2, r7
 8008f5e:	4640      	mov	r0, r8
 8008f60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f64:	4798      	blx	r3
 8008f66:	462e      	mov	r6, r5
 8008f68:	6825      	ldr	r5, [r4, #0]
 8008f6a:	f015 0510 	ands.w	r5, r5, #16
 8008f6e:	d155      	bne.n	800901c <_scanf_float+0x410>
 8008f70:	7035      	strb	r5, [r6, #0]
 8008f72:	6823      	ldr	r3, [r4, #0]
 8008f74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f7c:	d11d      	bne.n	8008fba <_scanf_float+0x3ae>
 8008f7e:	9b01      	ldr	r3, [sp, #4]
 8008f80:	454b      	cmp	r3, r9
 8008f82:	eba3 0209 	sub.w	r2, r3, r9
 8008f86:	d125      	bne.n	8008fd4 <_scanf_float+0x3c8>
 8008f88:	2200      	movs	r2, #0
 8008f8a:	4659      	mov	r1, fp
 8008f8c:	4640      	mov	r0, r8
 8008f8e:	f002 fc3f 	bl	800b810 <_strtod_r>
 8008f92:	9b03      	ldr	r3, [sp, #12]
 8008f94:	f8d4 c000 	ldr.w	ip, [r4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f01c 0f02 	tst.w	ip, #2
 8008f9e:	4606      	mov	r6, r0
 8008fa0:	460f      	mov	r7, r1
 8008fa2:	f103 0204 	add.w	r2, r3, #4
 8008fa6:	d020      	beq.n	8008fea <_scanf_float+0x3de>
 8008fa8:	9903      	ldr	r1, [sp, #12]
 8008faa:	600a      	str	r2, [r1, #0]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	e9c3 6700 	strd	r6, r7, [r3]
 8008fb2:	68e3      	ldr	r3, [r4, #12]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	60e3      	str	r3, [r4, #12]
 8008fb8:	e66b      	b.n	8008c92 <_scanf_float+0x86>
 8008fba:	9b04      	ldr	r3, [sp, #16]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d0e3      	beq.n	8008f88 <_scanf_float+0x37c>
 8008fc0:	9905      	ldr	r1, [sp, #20]
 8008fc2:	230a      	movs	r3, #10
 8008fc4:	462a      	mov	r2, r5
 8008fc6:	4640      	mov	r0, r8
 8008fc8:	3101      	adds	r1, #1
 8008fca:	f002 fca5 	bl	800b918 <_strtol_r>
 8008fce:	9b04      	ldr	r3, [sp, #16]
 8008fd0:	9e05      	ldr	r6, [sp, #20]
 8008fd2:	1ac2      	subs	r2, r0, r3
 8008fd4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008fd8:	429e      	cmp	r6, r3
 8008fda:	bf28      	it	cs
 8008fdc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	490f      	ldr	r1, [pc, #60]	; (8009020 <_scanf_float+0x414>)
 8008fe4:	f000 f8e2 	bl	80091ac <siprintf>
 8008fe8:	e7ce      	b.n	8008f88 <_scanf_float+0x37c>
 8008fea:	f01c 0f04 	tst.w	ip, #4
 8008fee:	d1db      	bne.n	8008fa8 <_scanf_float+0x39c>
 8008ff0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008ff4:	f8cc 2000 	str.w	r2, [ip]
 8008ff8:	f8d3 8000 	ldr.w	r8, [r3]
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	460b      	mov	r3, r1
 8009000:	f7f7 fd04 	bl	8000a0c <__aeabi_dcmpun>
 8009004:	b128      	cbz	r0, 8009012 <_scanf_float+0x406>
 8009006:	4807      	ldr	r0, [pc, #28]	; (8009024 <_scanf_float+0x418>)
 8009008:	f000 f9e0 	bl	80093cc <nanf>
 800900c:	f8c8 0000 	str.w	r0, [r8]
 8009010:	e7cf      	b.n	8008fb2 <_scanf_float+0x3a6>
 8009012:	4630      	mov	r0, r6
 8009014:	4639      	mov	r1, r7
 8009016:	f7f7 fd57 	bl	8000ac8 <__aeabi_d2f>
 800901a:	e7f7      	b.n	800900c <_scanf_float+0x400>
 800901c:	2500      	movs	r5, #0
 800901e:	e638      	b.n	8008c92 <_scanf_float+0x86>
 8009020:	0800f936 	.word	0x0800f936
 8009024:	0800fccd 	.word	0x0800fccd

08009028 <std>:
 8009028:	2300      	movs	r3, #0
 800902a:	b510      	push	{r4, lr}
 800902c:	4604      	mov	r4, r0
 800902e:	e9c0 3300 	strd	r3, r3, [r0]
 8009032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009036:	6083      	str	r3, [r0, #8]
 8009038:	8181      	strh	r1, [r0, #12]
 800903a:	6643      	str	r3, [r0, #100]	; 0x64
 800903c:	81c2      	strh	r2, [r0, #14]
 800903e:	6183      	str	r3, [r0, #24]
 8009040:	4619      	mov	r1, r3
 8009042:	2208      	movs	r2, #8
 8009044:	305c      	adds	r0, #92	; 0x5c
 8009046:	f000 f924 	bl	8009292 <memset>
 800904a:	4b0d      	ldr	r3, [pc, #52]	; (8009080 <std+0x58>)
 800904c:	6224      	str	r4, [r4, #32]
 800904e:	6263      	str	r3, [r4, #36]	; 0x24
 8009050:	4b0c      	ldr	r3, [pc, #48]	; (8009084 <std+0x5c>)
 8009052:	62a3      	str	r3, [r4, #40]	; 0x28
 8009054:	4b0c      	ldr	r3, [pc, #48]	; (8009088 <std+0x60>)
 8009056:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009058:	4b0c      	ldr	r3, [pc, #48]	; (800908c <std+0x64>)
 800905a:	6323      	str	r3, [r4, #48]	; 0x30
 800905c:	4b0c      	ldr	r3, [pc, #48]	; (8009090 <std+0x68>)
 800905e:	429c      	cmp	r4, r3
 8009060:	d006      	beq.n	8009070 <std+0x48>
 8009062:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009066:	4294      	cmp	r4, r2
 8009068:	d002      	beq.n	8009070 <std+0x48>
 800906a:	33d0      	adds	r3, #208	; 0xd0
 800906c:	429c      	cmp	r4, r3
 800906e:	d105      	bne.n	800907c <std+0x54>
 8009070:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009078:	f000 b988 	b.w	800938c <__retarget_lock_init_recursive>
 800907c:	bd10      	pop	{r4, pc}
 800907e:	bf00      	nop
 8009080:	080091ed 	.word	0x080091ed
 8009084:	0800920f 	.word	0x0800920f
 8009088:	08009247 	.word	0x08009247
 800908c:	0800926b 	.word	0x0800926b
 8009090:	200008a4 	.word	0x200008a4

08009094 <stdio_exit_handler>:
 8009094:	4a02      	ldr	r2, [pc, #8]	; (80090a0 <stdio_exit_handler+0xc>)
 8009096:	4903      	ldr	r1, [pc, #12]	; (80090a4 <stdio_exit_handler+0x10>)
 8009098:	4803      	ldr	r0, [pc, #12]	; (80090a8 <stdio_exit_handler+0x14>)
 800909a:	f000 b869 	b.w	8009170 <_fwalk_sglue>
 800909e:	bf00      	nop
 80090a0:	20000034 	.word	0x20000034
 80090a4:	0800bcd1 	.word	0x0800bcd1
 80090a8:	20000040 	.word	0x20000040

080090ac <cleanup_stdio>:
 80090ac:	6841      	ldr	r1, [r0, #4]
 80090ae:	4b0c      	ldr	r3, [pc, #48]	; (80090e0 <cleanup_stdio+0x34>)
 80090b0:	b510      	push	{r4, lr}
 80090b2:	4299      	cmp	r1, r3
 80090b4:	4604      	mov	r4, r0
 80090b6:	d001      	beq.n	80090bc <cleanup_stdio+0x10>
 80090b8:	f002 fe0a 	bl	800bcd0 <_fflush_r>
 80090bc:	68a1      	ldr	r1, [r4, #8]
 80090be:	4b09      	ldr	r3, [pc, #36]	; (80090e4 <cleanup_stdio+0x38>)
 80090c0:	4299      	cmp	r1, r3
 80090c2:	d002      	beq.n	80090ca <cleanup_stdio+0x1e>
 80090c4:	4620      	mov	r0, r4
 80090c6:	f002 fe03 	bl	800bcd0 <_fflush_r>
 80090ca:	68e1      	ldr	r1, [r4, #12]
 80090cc:	4b06      	ldr	r3, [pc, #24]	; (80090e8 <cleanup_stdio+0x3c>)
 80090ce:	4299      	cmp	r1, r3
 80090d0:	d004      	beq.n	80090dc <cleanup_stdio+0x30>
 80090d2:	4620      	mov	r0, r4
 80090d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090d8:	f002 bdfa 	b.w	800bcd0 <_fflush_r>
 80090dc:	bd10      	pop	{r4, pc}
 80090de:	bf00      	nop
 80090e0:	200008a4 	.word	0x200008a4
 80090e4:	2000090c 	.word	0x2000090c
 80090e8:	20000974 	.word	0x20000974

080090ec <global_stdio_init.part.0>:
 80090ec:	b510      	push	{r4, lr}
 80090ee:	4b0b      	ldr	r3, [pc, #44]	; (800911c <global_stdio_init.part.0+0x30>)
 80090f0:	4c0b      	ldr	r4, [pc, #44]	; (8009120 <global_stdio_init.part.0+0x34>)
 80090f2:	4a0c      	ldr	r2, [pc, #48]	; (8009124 <global_stdio_init.part.0+0x38>)
 80090f4:	4620      	mov	r0, r4
 80090f6:	601a      	str	r2, [r3, #0]
 80090f8:	2104      	movs	r1, #4
 80090fa:	2200      	movs	r2, #0
 80090fc:	f7ff ff94 	bl	8009028 <std>
 8009100:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009104:	2201      	movs	r2, #1
 8009106:	2109      	movs	r1, #9
 8009108:	f7ff ff8e 	bl	8009028 <std>
 800910c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009110:	2202      	movs	r2, #2
 8009112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009116:	2112      	movs	r1, #18
 8009118:	f7ff bf86 	b.w	8009028 <std>
 800911c:	200009dc 	.word	0x200009dc
 8009120:	200008a4 	.word	0x200008a4
 8009124:	08009095 	.word	0x08009095

08009128 <__sfp_lock_acquire>:
 8009128:	4801      	ldr	r0, [pc, #4]	; (8009130 <__sfp_lock_acquire+0x8>)
 800912a:	f000 b930 	b.w	800938e <__retarget_lock_acquire_recursive>
 800912e:	bf00      	nop
 8009130:	200009e5 	.word	0x200009e5

08009134 <__sfp_lock_release>:
 8009134:	4801      	ldr	r0, [pc, #4]	; (800913c <__sfp_lock_release+0x8>)
 8009136:	f000 b92b 	b.w	8009390 <__retarget_lock_release_recursive>
 800913a:	bf00      	nop
 800913c:	200009e5 	.word	0x200009e5

08009140 <__sinit>:
 8009140:	b510      	push	{r4, lr}
 8009142:	4604      	mov	r4, r0
 8009144:	f7ff fff0 	bl	8009128 <__sfp_lock_acquire>
 8009148:	6a23      	ldr	r3, [r4, #32]
 800914a:	b11b      	cbz	r3, 8009154 <__sinit+0x14>
 800914c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009150:	f7ff bff0 	b.w	8009134 <__sfp_lock_release>
 8009154:	4b04      	ldr	r3, [pc, #16]	; (8009168 <__sinit+0x28>)
 8009156:	6223      	str	r3, [r4, #32]
 8009158:	4b04      	ldr	r3, [pc, #16]	; (800916c <__sinit+0x2c>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1f5      	bne.n	800914c <__sinit+0xc>
 8009160:	f7ff ffc4 	bl	80090ec <global_stdio_init.part.0>
 8009164:	e7f2      	b.n	800914c <__sinit+0xc>
 8009166:	bf00      	nop
 8009168:	080090ad 	.word	0x080090ad
 800916c:	200009dc 	.word	0x200009dc

08009170 <_fwalk_sglue>:
 8009170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009174:	4607      	mov	r7, r0
 8009176:	4688      	mov	r8, r1
 8009178:	4614      	mov	r4, r2
 800917a:	2600      	movs	r6, #0
 800917c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009180:	f1b9 0901 	subs.w	r9, r9, #1
 8009184:	d505      	bpl.n	8009192 <_fwalk_sglue+0x22>
 8009186:	6824      	ldr	r4, [r4, #0]
 8009188:	2c00      	cmp	r4, #0
 800918a:	d1f7      	bne.n	800917c <_fwalk_sglue+0xc>
 800918c:	4630      	mov	r0, r6
 800918e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009192:	89ab      	ldrh	r3, [r5, #12]
 8009194:	2b01      	cmp	r3, #1
 8009196:	d907      	bls.n	80091a8 <_fwalk_sglue+0x38>
 8009198:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800919c:	3301      	adds	r3, #1
 800919e:	d003      	beq.n	80091a8 <_fwalk_sglue+0x38>
 80091a0:	4629      	mov	r1, r5
 80091a2:	4638      	mov	r0, r7
 80091a4:	47c0      	blx	r8
 80091a6:	4306      	orrs	r6, r0
 80091a8:	3568      	adds	r5, #104	; 0x68
 80091aa:	e7e9      	b.n	8009180 <_fwalk_sglue+0x10>

080091ac <siprintf>:
 80091ac:	b40e      	push	{r1, r2, r3}
 80091ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80091b2:	b500      	push	{lr}
 80091b4:	b09c      	sub	sp, #112	; 0x70
 80091b6:	ab1d      	add	r3, sp, #116	; 0x74
 80091b8:	9002      	str	r0, [sp, #8]
 80091ba:	9006      	str	r0, [sp, #24]
 80091bc:	9107      	str	r1, [sp, #28]
 80091be:	9104      	str	r1, [sp, #16]
 80091c0:	4808      	ldr	r0, [pc, #32]	; (80091e4 <siprintf+0x38>)
 80091c2:	4909      	ldr	r1, [pc, #36]	; (80091e8 <siprintf+0x3c>)
 80091c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80091c8:	9105      	str	r1, [sp, #20]
 80091ca:	6800      	ldr	r0, [r0, #0]
 80091cc:	a902      	add	r1, sp, #8
 80091ce:	9301      	str	r3, [sp, #4]
 80091d0:	f002 fbfe 	bl	800b9d0 <_svfiprintf_r>
 80091d4:	2200      	movs	r2, #0
 80091d6:	9b02      	ldr	r3, [sp, #8]
 80091d8:	701a      	strb	r2, [r3, #0]
 80091da:	b01c      	add	sp, #112	; 0x70
 80091dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80091e0:	b003      	add	sp, #12
 80091e2:	4770      	bx	lr
 80091e4:	2000008c 	.word	0x2000008c
 80091e8:	ffff0208 	.word	0xffff0208

080091ec <__sread>:
 80091ec:	b510      	push	{r4, lr}
 80091ee:	460c      	mov	r4, r1
 80091f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091f4:	f000 f87c 	bl	80092f0 <_read_r>
 80091f8:	2800      	cmp	r0, #0
 80091fa:	bfab      	itete	ge
 80091fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80091fe:	89a3      	ldrhlt	r3, [r4, #12]
 8009200:	181b      	addge	r3, r3, r0
 8009202:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009206:	bfac      	ite	ge
 8009208:	6563      	strge	r3, [r4, #84]	; 0x54
 800920a:	81a3      	strhlt	r3, [r4, #12]
 800920c:	bd10      	pop	{r4, pc}

0800920e <__swrite>:
 800920e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009212:	461f      	mov	r7, r3
 8009214:	898b      	ldrh	r3, [r1, #12]
 8009216:	4605      	mov	r5, r0
 8009218:	05db      	lsls	r3, r3, #23
 800921a:	460c      	mov	r4, r1
 800921c:	4616      	mov	r6, r2
 800921e:	d505      	bpl.n	800922c <__swrite+0x1e>
 8009220:	2302      	movs	r3, #2
 8009222:	2200      	movs	r2, #0
 8009224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009228:	f000 f850 	bl	80092cc <_lseek_r>
 800922c:	89a3      	ldrh	r3, [r4, #12]
 800922e:	4632      	mov	r2, r6
 8009230:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009234:	81a3      	strh	r3, [r4, #12]
 8009236:	4628      	mov	r0, r5
 8009238:	463b      	mov	r3, r7
 800923a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800923e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009242:	f000 b867 	b.w	8009314 <_write_r>

08009246 <__sseek>:
 8009246:	b510      	push	{r4, lr}
 8009248:	460c      	mov	r4, r1
 800924a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800924e:	f000 f83d 	bl	80092cc <_lseek_r>
 8009252:	1c43      	adds	r3, r0, #1
 8009254:	89a3      	ldrh	r3, [r4, #12]
 8009256:	bf15      	itete	ne
 8009258:	6560      	strne	r0, [r4, #84]	; 0x54
 800925a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800925e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009262:	81a3      	strheq	r3, [r4, #12]
 8009264:	bf18      	it	ne
 8009266:	81a3      	strhne	r3, [r4, #12]
 8009268:	bd10      	pop	{r4, pc}

0800926a <__sclose>:
 800926a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800926e:	f000 b81d 	b.w	80092ac <_close_r>

08009272 <memcmp>:
 8009272:	b510      	push	{r4, lr}
 8009274:	3901      	subs	r1, #1
 8009276:	4402      	add	r2, r0
 8009278:	4290      	cmp	r0, r2
 800927a:	d101      	bne.n	8009280 <memcmp+0xe>
 800927c:	2000      	movs	r0, #0
 800927e:	e005      	b.n	800928c <memcmp+0x1a>
 8009280:	7803      	ldrb	r3, [r0, #0]
 8009282:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009286:	42a3      	cmp	r3, r4
 8009288:	d001      	beq.n	800928e <memcmp+0x1c>
 800928a:	1b18      	subs	r0, r3, r4
 800928c:	bd10      	pop	{r4, pc}
 800928e:	3001      	adds	r0, #1
 8009290:	e7f2      	b.n	8009278 <memcmp+0x6>

08009292 <memset>:
 8009292:	4603      	mov	r3, r0
 8009294:	4402      	add	r2, r0
 8009296:	4293      	cmp	r3, r2
 8009298:	d100      	bne.n	800929c <memset+0xa>
 800929a:	4770      	bx	lr
 800929c:	f803 1b01 	strb.w	r1, [r3], #1
 80092a0:	e7f9      	b.n	8009296 <memset+0x4>
	...

080092a4 <_localeconv_r>:
 80092a4:	4800      	ldr	r0, [pc, #0]	; (80092a8 <_localeconv_r+0x4>)
 80092a6:	4770      	bx	lr
 80092a8:	20000180 	.word	0x20000180

080092ac <_close_r>:
 80092ac:	b538      	push	{r3, r4, r5, lr}
 80092ae:	2300      	movs	r3, #0
 80092b0:	4d05      	ldr	r5, [pc, #20]	; (80092c8 <_close_r+0x1c>)
 80092b2:	4604      	mov	r4, r0
 80092b4:	4608      	mov	r0, r1
 80092b6:	602b      	str	r3, [r5, #0]
 80092b8:	f7f8 ff2e 	bl	8002118 <_close>
 80092bc:	1c43      	adds	r3, r0, #1
 80092be:	d102      	bne.n	80092c6 <_close_r+0x1a>
 80092c0:	682b      	ldr	r3, [r5, #0]
 80092c2:	b103      	cbz	r3, 80092c6 <_close_r+0x1a>
 80092c4:	6023      	str	r3, [r4, #0]
 80092c6:	bd38      	pop	{r3, r4, r5, pc}
 80092c8:	200009e0 	.word	0x200009e0

080092cc <_lseek_r>:
 80092cc:	b538      	push	{r3, r4, r5, lr}
 80092ce:	4604      	mov	r4, r0
 80092d0:	4608      	mov	r0, r1
 80092d2:	4611      	mov	r1, r2
 80092d4:	2200      	movs	r2, #0
 80092d6:	4d05      	ldr	r5, [pc, #20]	; (80092ec <_lseek_r+0x20>)
 80092d8:	602a      	str	r2, [r5, #0]
 80092da:	461a      	mov	r2, r3
 80092dc:	f7f8 ff40 	bl	8002160 <_lseek>
 80092e0:	1c43      	adds	r3, r0, #1
 80092e2:	d102      	bne.n	80092ea <_lseek_r+0x1e>
 80092e4:	682b      	ldr	r3, [r5, #0]
 80092e6:	b103      	cbz	r3, 80092ea <_lseek_r+0x1e>
 80092e8:	6023      	str	r3, [r4, #0]
 80092ea:	bd38      	pop	{r3, r4, r5, pc}
 80092ec:	200009e0 	.word	0x200009e0

080092f0 <_read_r>:
 80092f0:	b538      	push	{r3, r4, r5, lr}
 80092f2:	4604      	mov	r4, r0
 80092f4:	4608      	mov	r0, r1
 80092f6:	4611      	mov	r1, r2
 80092f8:	2200      	movs	r2, #0
 80092fa:	4d05      	ldr	r5, [pc, #20]	; (8009310 <_read_r+0x20>)
 80092fc:	602a      	str	r2, [r5, #0]
 80092fe:	461a      	mov	r2, r3
 8009300:	f7f8 fed1 	bl	80020a6 <_read>
 8009304:	1c43      	adds	r3, r0, #1
 8009306:	d102      	bne.n	800930e <_read_r+0x1e>
 8009308:	682b      	ldr	r3, [r5, #0]
 800930a:	b103      	cbz	r3, 800930e <_read_r+0x1e>
 800930c:	6023      	str	r3, [r4, #0]
 800930e:	bd38      	pop	{r3, r4, r5, pc}
 8009310:	200009e0 	.word	0x200009e0

08009314 <_write_r>:
 8009314:	b538      	push	{r3, r4, r5, lr}
 8009316:	4604      	mov	r4, r0
 8009318:	4608      	mov	r0, r1
 800931a:	4611      	mov	r1, r2
 800931c:	2200      	movs	r2, #0
 800931e:	4d05      	ldr	r5, [pc, #20]	; (8009334 <_write_r+0x20>)
 8009320:	602a      	str	r2, [r5, #0]
 8009322:	461a      	mov	r2, r3
 8009324:	f7f8 fedc 	bl	80020e0 <_write>
 8009328:	1c43      	adds	r3, r0, #1
 800932a:	d102      	bne.n	8009332 <_write_r+0x1e>
 800932c:	682b      	ldr	r3, [r5, #0]
 800932e:	b103      	cbz	r3, 8009332 <_write_r+0x1e>
 8009330:	6023      	str	r3, [r4, #0]
 8009332:	bd38      	pop	{r3, r4, r5, pc}
 8009334:	200009e0 	.word	0x200009e0

08009338 <__errno>:
 8009338:	4b01      	ldr	r3, [pc, #4]	; (8009340 <__errno+0x8>)
 800933a:	6818      	ldr	r0, [r3, #0]
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	2000008c 	.word	0x2000008c

08009344 <__libc_init_array>:
 8009344:	b570      	push	{r4, r5, r6, lr}
 8009346:	2600      	movs	r6, #0
 8009348:	4d0c      	ldr	r5, [pc, #48]	; (800937c <__libc_init_array+0x38>)
 800934a:	4c0d      	ldr	r4, [pc, #52]	; (8009380 <__libc_init_array+0x3c>)
 800934c:	1b64      	subs	r4, r4, r5
 800934e:	10a4      	asrs	r4, r4, #2
 8009350:	42a6      	cmp	r6, r4
 8009352:	d109      	bne.n	8009368 <__libc_init_array+0x24>
 8009354:	f004 faca 	bl	800d8ec <_init>
 8009358:	2600      	movs	r6, #0
 800935a:	4d0a      	ldr	r5, [pc, #40]	; (8009384 <__libc_init_array+0x40>)
 800935c:	4c0a      	ldr	r4, [pc, #40]	; (8009388 <__libc_init_array+0x44>)
 800935e:	1b64      	subs	r4, r4, r5
 8009360:	10a4      	asrs	r4, r4, #2
 8009362:	42a6      	cmp	r6, r4
 8009364:	d105      	bne.n	8009372 <__libc_init_array+0x2e>
 8009366:	bd70      	pop	{r4, r5, r6, pc}
 8009368:	f855 3b04 	ldr.w	r3, [r5], #4
 800936c:	4798      	blx	r3
 800936e:	3601      	adds	r6, #1
 8009370:	e7ee      	b.n	8009350 <__libc_init_array+0xc>
 8009372:	f855 3b04 	ldr.w	r3, [r5], #4
 8009376:	4798      	blx	r3
 8009378:	3601      	adds	r6, #1
 800937a:	e7f2      	b.n	8009362 <__libc_init_array+0x1e>
 800937c:	0800fd60 	.word	0x0800fd60
 8009380:	0800fd60 	.word	0x0800fd60
 8009384:	0800fd60 	.word	0x0800fd60
 8009388:	0800fd64 	.word	0x0800fd64

0800938c <__retarget_lock_init_recursive>:
 800938c:	4770      	bx	lr

0800938e <__retarget_lock_acquire_recursive>:
 800938e:	4770      	bx	lr

08009390 <__retarget_lock_release_recursive>:
 8009390:	4770      	bx	lr

08009392 <memchr>:
 8009392:	4603      	mov	r3, r0
 8009394:	b510      	push	{r4, lr}
 8009396:	b2c9      	uxtb	r1, r1
 8009398:	4402      	add	r2, r0
 800939a:	4293      	cmp	r3, r2
 800939c:	4618      	mov	r0, r3
 800939e:	d101      	bne.n	80093a4 <memchr+0x12>
 80093a0:	2000      	movs	r0, #0
 80093a2:	e003      	b.n	80093ac <memchr+0x1a>
 80093a4:	7804      	ldrb	r4, [r0, #0]
 80093a6:	3301      	adds	r3, #1
 80093a8:	428c      	cmp	r4, r1
 80093aa:	d1f6      	bne.n	800939a <memchr+0x8>
 80093ac:	bd10      	pop	{r4, pc}

080093ae <memcpy>:
 80093ae:	440a      	add	r2, r1
 80093b0:	4291      	cmp	r1, r2
 80093b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80093b6:	d100      	bne.n	80093ba <memcpy+0xc>
 80093b8:	4770      	bx	lr
 80093ba:	b510      	push	{r4, lr}
 80093bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093c0:	4291      	cmp	r1, r2
 80093c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093c6:	d1f9      	bne.n	80093bc <memcpy+0xe>
 80093c8:	bd10      	pop	{r4, pc}
	...

080093cc <nanf>:
 80093cc:	4800      	ldr	r0, [pc, #0]	; (80093d0 <nanf+0x4>)
 80093ce:	4770      	bx	lr
 80093d0:	7fc00000 	.word	0x7fc00000

080093d4 <quorem>:
 80093d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d8:	6903      	ldr	r3, [r0, #16]
 80093da:	690c      	ldr	r4, [r1, #16]
 80093dc:	4607      	mov	r7, r0
 80093de:	42a3      	cmp	r3, r4
 80093e0:	db7f      	blt.n	80094e2 <quorem+0x10e>
 80093e2:	3c01      	subs	r4, #1
 80093e4:	f100 0514 	add.w	r5, r0, #20
 80093e8:	f101 0814 	add.w	r8, r1, #20
 80093ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093f0:	9301      	str	r3, [sp, #4]
 80093f2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80093f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093fa:	3301      	adds	r3, #1
 80093fc:	429a      	cmp	r2, r3
 80093fe:	fbb2 f6f3 	udiv	r6, r2, r3
 8009402:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009406:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800940a:	d331      	bcc.n	8009470 <quorem+0x9c>
 800940c:	f04f 0e00 	mov.w	lr, #0
 8009410:	4640      	mov	r0, r8
 8009412:	46ac      	mov	ip, r5
 8009414:	46f2      	mov	sl, lr
 8009416:	f850 2b04 	ldr.w	r2, [r0], #4
 800941a:	b293      	uxth	r3, r2
 800941c:	fb06 e303 	mla	r3, r6, r3, lr
 8009420:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009424:	0c1a      	lsrs	r2, r3, #16
 8009426:	b29b      	uxth	r3, r3
 8009428:	fb06 220e 	mla	r2, r6, lr, r2
 800942c:	ebaa 0303 	sub.w	r3, sl, r3
 8009430:	f8dc a000 	ldr.w	sl, [ip]
 8009434:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009438:	fa1f fa8a 	uxth.w	sl, sl
 800943c:	4453      	add	r3, sl
 800943e:	f8dc a000 	ldr.w	sl, [ip]
 8009442:	b292      	uxth	r2, r2
 8009444:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009448:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800944c:	b29b      	uxth	r3, r3
 800944e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009452:	4581      	cmp	r9, r0
 8009454:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009458:	f84c 3b04 	str.w	r3, [ip], #4
 800945c:	d2db      	bcs.n	8009416 <quorem+0x42>
 800945e:	f855 300b 	ldr.w	r3, [r5, fp]
 8009462:	b92b      	cbnz	r3, 8009470 <quorem+0x9c>
 8009464:	9b01      	ldr	r3, [sp, #4]
 8009466:	3b04      	subs	r3, #4
 8009468:	429d      	cmp	r5, r3
 800946a:	461a      	mov	r2, r3
 800946c:	d32d      	bcc.n	80094ca <quorem+0xf6>
 800946e:	613c      	str	r4, [r7, #16]
 8009470:	4638      	mov	r0, r7
 8009472:	f001 f9dd 	bl	800a830 <__mcmp>
 8009476:	2800      	cmp	r0, #0
 8009478:	db23      	blt.n	80094c2 <quorem+0xee>
 800947a:	4629      	mov	r1, r5
 800947c:	2000      	movs	r0, #0
 800947e:	3601      	adds	r6, #1
 8009480:	f858 2b04 	ldr.w	r2, [r8], #4
 8009484:	f8d1 c000 	ldr.w	ip, [r1]
 8009488:	b293      	uxth	r3, r2
 800948a:	1ac3      	subs	r3, r0, r3
 800948c:	0c12      	lsrs	r2, r2, #16
 800948e:	fa1f f08c 	uxth.w	r0, ip
 8009492:	4403      	add	r3, r0
 8009494:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009498:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800949c:	b29b      	uxth	r3, r3
 800949e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094a2:	45c1      	cmp	r9, r8
 80094a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80094a8:	f841 3b04 	str.w	r3, [r1], #4
 80094ac:	d2e8      	bcs.n	8009480 <quorem+0xac>
 80094ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094b6:	b922      	cbnz	r2, 80094c2 <quorem+0xee>
 80094b8:	3b04      	subs	r3, #4
 80094ba:	429d      	cmp	r5, r3
 80094bc:	461a      	mov	r2, r3
 80094be:	d30a      	bcc.n	80094d6 <quorem+0x102>
 80094c0:	613c      	str	r4, [r7, #16]
 80094c2:	4630      	mov	r0, r6
 80094c4:	b003      	add	sp, #12
 80094c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ca:	6812      	ldr	r2, [r2, #0]
 80094cc:	3b04      	subs	r3, #4
 80094ce:	2a00      	cmp	r2, #0
 80094d0:	d1cd      	bne.n	800946e <quorem+0x9a>
 80094d2:	3c01      	subs	r4, #1
 80094d4:	e7c8      	b.n	8009468 <quorem+0x94>
 80094d6:	6812      	ldr	r2, [r2, #0]
 80094d8:	3b04      	subs	r3, #4
 80094da:	2a00      	cmp	r2, #0
 80094dc:	d1f0      	bne.n	80094c0 <quorem+0xec>
 80094de:	3c01      	subs	r4, #1
 80094e0:	e7eb      	b.n	80094ba <quorem+0xe6>
 80094e2:	2000      	movs	r0, #0
 80094e4:	e7ee      	b.n	80094c4 <quorem+0xf0>
	...

080094e8 <_dtoa_r>:
 80094e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ec:	4616      	mov	r6, r2
 80094ee:	461f      	mov	r7, r3
 80094f0:	69c4      	ldr	r4, [r0, #28]
 80094f2:	b099      	sub	sp, #100	; 0x64
 80094f4:	4605      	mov	r5, r0
 80094f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80094fa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80094fe:	b974      	cbnz	r4, 800951e <_dtoa_r+0x36>
 8009500:	2010      	movs	r0, #16
 8009502:	f000 fe1d 	bl	800a140 <malloc>
 8009506:	4602      	mov	r2, r0
 8009508:	61e8      	str	r0, [r5, #28]
 800950a:	b920      	cbnz	r0, 8009516 <_dtoa_r+0x2e>
 800950c:	21ef      	movs	r1, #239	; 0xef
 800950e:	4bac      	ldr	r3, [pc, #688]	; (80097c0 <_dtoa_r+0x2d8>)
 8009510:	48ac      	ldr	r0, [pc, #688]	; (80097c4 <_dtoa_r+0x2dc>)
 8009512:	f002 fc47 	bl	800bda4 <__assert_func>
 8009516:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800951a:	6004      	str	r4, [r0, #0]
 800951c:	60c4      	str	r4, [r0, #12]
 800951e:	69eb      	ldr	r3, [r5, #28]
 8009520:	6819      	ldr	r1, [r3, #0]
 8009522:	b151      	cbz	r1, 800953a <_dtoa_r+0x52>
 8009524:	685a      	ldr	r2, [r3, #4]
 8009526:	2301      	movs	r3, #1
 8009528:	4093      	lsls	r3, r2
 800952a:	604a      	str	r2, [r1, #4]
 800952c:	608b      	str	r3, [r1, #8]
 800952e:	4628      	mov	r0, r5
 8009530:	f000 fefa 	bl	800a328 <_Bfree>
 8009534:	2200      	movs	r2, #0
 8009536:	69eb      	ldr	r3, [r5, #28]
 8009538:	601a      	str	r2, [r3, #0]
 800953a:	1e3b      	subs	r3, r7, #0
 800953c:	bfaf      	iteee	ge
 800953e:	2300      	movge	r3, #0
 8009540:	2201      	movlt	r2, #1
 8009542:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009546:	9305      	strlt	r3, [sp, #20]
 8009548:	bfa8      	it	ge
 800954a:	f8c8 3000 	strge.w	r3, [r8]
 800954e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009552:	4b9d      	ldr	r3, [pc, #628]	; (80097c8 <_dtoa_r+0x2e0>)
 8009554:	bfb8      	it	lt
 8009556:	f8c8 2000 	strlt.w	r2, [r8]
 800955a:	ea33 0309 	bics.w	r3, r3, r9
 800955e:	d119      	bne.n	8009594 <_dtoa_r+0xac>
 8009560:	f242 730f 	movw	r3, #9999	; 0x270f
 8009564:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009566:	6013      	str	r3, [r2, #0]
 8009568:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800956c:	4333      	orrs	r3, r6
 800956e:	f000 8589 	beq.w	800a084 <_dtoa_r+0xb9c>
 8009572:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009574:	b953      	cbnz	r3, 800958c <_dtoa_r+0xa4>
 8009576:	4b95      	ldr	r3, [pc, #596]	; (80097cc <_dtoa_r+0x2e4>)
 8009578:	e023      	b.n	80095c2 <_dtoa_r+0xda>
 800957a:	4b95      	ldr	r3, [pc, #596]	; (80097d0 <_dtoa_r+0x2e8>)
 800957c:	9303      	str	r3, [sp, #12]
 800957e:	3308      	adds	r3, #8
 8009580:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009582:	6013      	str	r3, [r2, #0]
 8009584:	9803      	ldr	r0, [sp, #12]
 8009586:	b019      	add	sp, #100	; 0x64
 8009588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800958c:	4b8f      	ldr	r3, [pc, #572]	; (80097cc <_dtoa_r+0x2e4>)
 800958e:	9303      	str	r3, [sp, #12]
 8009590:	3303      	adds	r3, #3
 8009592:	e7f5      	b.n	8009580 <_dtoa_r+0x98>
 8009594:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009598:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800959c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80095a0:	2200      	movs	r2, #0
 80095a2:	2300      	movs	r3, #0
 80095a4:	f7f7 fa00 	bl	80009a8 <__aeabi_dcmpeq>
 80095a8:	4680      	mov	r8, r0
 80095aa:	b160      	cbz	r0, 80095c6 <_dtoa_r+0xde>
 80095ac:	2301      	movs	r3, #1
 80095ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80095b0:	6013      	str	r3, [r2, #0]
 80095b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f000 8562 	beq.w	800a07e <_dtoa_r+0xb96>
 80095ba:	4b86      	ldr	r3, [pc, #536]	; (80097d4 <_dtoa_r+0x2ec>)
 80095bc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80095be:	6013      	str	r3, [r2, #0]
 80095c0:	3b01      	subs	r3, #1
 80095c2:	9303      	str	r3, [sp, #12]
 80095c4:	e7de      	b.n	8009584 <_dtoa_r+0x9c>
 80095c6:	ab16      	add	r3, sp, #88	; 0x58
 80095c8:	9301      	str	r3, [sp, #4]
 80095ca:	ab17      	add	r3, sp, #92	; 0x5c
 80095cc:	9300      	str	r3, [sp, #0]
 80095ce:	4628      	mov	r0, r5
 80095d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80095d4:	f001 fa3c 	bl	800aa50 <__d2b>
 80095d8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80095dc:	4682      	mov	sl, r0
 80095de:	2c00      	cmp	r4, #0
 80095e0:	d07e      	beq.n	80096e0 <_dtoa_r+0x1f8>
 80095e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80095e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095e8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80095ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095f0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80095f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80095f8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80095fc:	4619      	mov	r1, r3
 80095fe:	2200      	movs	r2, #0
 8009600:	4b75      	ldr	r3, [pc, #468]	; (80097d8 <_dtoa_r+0x2f0>)
 8009602:	f7f6 fdb1 	bl	8000168 <__aeabi_dsub>
 8009606:	a368      	add	r3, pc, #416	; (adr r3, 80097a8 <_dtoa_r+0x2c0>)
 8009608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960c:	f7f6 ff64 	bl	80004d8 <__aeabi_dmul>
 8009610:	a367      	add	r3, pc, #412	; (adr r3, 80097b0 <_dtoa_r+0x2c8>)
 8009612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009616:	f7f6 fda9 	bl	800016c <__adddf3>
 800961a:	4606      	mov	r6, r0
 800961c:	4620      	mov	r0, r4
 800961e:	460f      	mov	r7, r1
 8009620:	f7f6 fef0 	bl	8000404 <__aeabi_i2d>
 8009624:	a364      	add	r3, pc, #400	; (adr r3, 80097b8 <_dtoa_r+0x2d0>)
 8009626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962a:	f7f6 ff55 	bl	80004d8 <__aeabi_dmul>
 800962e:	4602      	mov	r2, r0
 8009630:	460b      	mov	r3, r1
 8009632:	4630      	mov	r0, r6
 8009634:	4639      	mov	r1, r7
 8009636:	f7f6 fd99 	bl	800016c <__adddf3>
 800963a:	4606      	mov	r6, r0
 800963c:	460f      	mov	r7, r1
 800963e:	f7f7 f9fb 	bl	8000a38 <__aeabi_d2iz>
 8009642:	2200      	movs	r2, #0
 8009644:	4683      	mov	fp, r0
 8009646:	2300      	movs	r3, #0
 8009648:	4630      	mov	r0, r6
 800964a:	4639      	mov	r1, r7
 800964c:	f7f7 f9b6 	bl	80009bc <__aeabi_dcmplt>
 8009650:	b148      	cbz	r0, 8009666 <_dtoa_r+0x17e>
 8009652:	4658      	mov	r0, fp
 8009654:	f7f6 fed6 	bl	8000404 <__aeabi_i2d>
 8009658:	4632      	mov	r2, r6
 800965a:	463b      	mov	r3, r7
 800965c:	f7f7 f9a4 	bl	80009a8 <__aeabi_dcmpeq>
 8009660:	b908      	cbnz	r0, 8009666 <_dtoa_r+0x17e>
 8009662:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009666:	f1bb 0f16 	cmp.w	fp, #22
 800966a:	d857      	bhi.n	800971c <_dtoa_r+0x234>
 800966c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009670:	4b5a      	ldr	r3, [pc, #360]	; (80097dc <_dtoa_r+0x2f4>)
 8009672:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967a:	f7f7 f99f 	bl	80009bc <__aeabi_dcmplt>
 800967e:	2800      	cmp	r0, #0
 8009680:	d04e      	beq.n	8009720 <_dtoa_r+0x238>
 8009682:	2300      	movs	r3, #0
 8009684:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009688:	930f      	str	r3, [sp, #60]	; 0x3c
 800968a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800968c:	1b1b      	subs	r3, r3, r4
 800968e:	1e5a      	subs	r2, r3, #1
 8009690:	bf46      	itte	mi
 8009692:	f1c3 0901 	rsbmi	r9, r3, #1
 8009696:	2300      	movmi	r3, #0
 8009698:	f04f 0900 	movpl.w	r9, #0
 800969c:	9209      	str	r2, [sp, #36]	; 0x24
 800969e:	bf48      	it	mi
 80096a0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80096a2:	f1bb 0f00 	cmp.w	fp, #0
 80096a6:	db3d      	blt.n	8009724 <_dtoa_r+0x23c>
 80096a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096aa:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80096ae:	445b      	add	r3, fp
 80096b0:	9309      	str	r3, [sp, #36]	; 0x24
 80096b2:	2300      	movs	r3, #0
 80096b4:	930a      	str	r3, [sp, #40]	; 0x28
 80096b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80096b8:	2b09      	cmp	r3, #9
 80096ba:	d867      	bhi.n	800978c <_dtoa_r+0x2a4>
 80096bc:	2b05      	cmp	r3, #5
 80096be:	bfc4      	itt	gt
 80096c0:	3b04      	subgt	r3, #4
 80096c2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80096c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80096c6:	bfc8      	it	gt
 80096c8:	2400      	movgt	r4, #0
 80096ca:	f1a3 0302 	sub.w	r3, r3, #2
 80096ce:	bfd8      	it	le
 80096d0:	2401      	movle	r4, #1
 80096d2:	2b03      	cmp	r3, #3
 80096d4:	f200 8086 	bhi.w	80097e4 <_dtoa_r+0x2fc>
 80096d8:	e8df f003 	tbb	[pc, r3]
 80096dc:	5637392c 	.word	0x5637392c
 80096e0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80096e4:	441c      	add	r4, r3
 80096e6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80096ea:	2b20      	cmp	r3, #32
 80096ec:	bfc1      	itttt	gt
 80096ee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80096f2:	fa09 f903 	lslgt.w	r9, r9, r3
 80096f6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80096fa:	fa26 f303 	lsrgt.w	r3, r6, r3
 80096fe:	bfd6      	itet	le
 8009700:	f1c3 0320 	rsble	r3, r3, #32
 8009704:	ea49 0003 	orrgt.w	r0, r9, r3
 8009708:	fa06 f003 	lslle.w	r0, r6, r3
 800970c:	f7f6 fe6a 	bl	80003e4 <__aeabi_ui2d>
 8009710:	2201      	movs	r2, #1
 8009712:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009716:	3c01      	subs	r4, #1
 8009718:	9213      	str	r2, [sp, #76]	; 0x4c
 800971a:	e76f      	b.n	80095fc <_dtoa_r+0x114>
 800971c:	2301      	movs	r3, #1
 800971e:	e7b3      	b.n	8009688 <_dtoa_r+0x1a0>
 8009720:	900f      	str	r0, [sp, #60]	; 0x3c
 8009722:	e7b2      	b.n	800968a <_dtoa_r+0x1a2>
 8009724:	f1cb 0300 	rsb	r3, fp, #0
 8009728:	930a      	str	r3, [sp, #40]	; 0x28
 800972a:	2300      	movs	r3, #0
 800972c:	eba9 090b 	sub.w	r9, r9, fp
 8009730:	930e      	str	r3, [sp, #56]	; 0x38
 8009732:	e7c0      	b.n	80096b6 <_dtoa_r+0x1ce>
 8009734:	2300      	movs	r3, #0
 8009736:	930b      	str	r3, [sp, #44]	; 0x2c
 8009738:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800973a:	2b00      	cmp	r3, #0
 800973c:	dc55      	bgt.n	80097ea <_dtoa_r+0x302>
 800973e:	2301      	movs	r3, #1
 8009740:	461a      	mov	r2, r3
 8009742:	9306      	str	r3, [sp, #24]
 8009744:	9308      	str	r3, [sp, #32]
 8009746:	9223      	str	r2, [sp, #140]	; 0x8c
 8009748:	e00b      	b.n	8009762 <_dtoa_r+0x27a>
 800974a:	2301      	movs	r3, #1
 800974c:	e7f3      	b.n	8009736 <_dtoa_r+0x24e>
 800974e:	2300      	movs	r3, #0
 8009750:	930b      	str	r3, [sp, #44]	; 0x2c
 8009752:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009754:	445b      	add	r3, fp
 8009756:	9306      	str	r3, [sp, #24]
 8009758:	3301      	adds	r3, #1
 800975a:	2b01      	cmp	r3, #1
 800975c:	9308      	str	r3, [sp, #32]
 800975e:	bfb8      	it	lt
 8009760:	2301      	movlt	r3, #1
 8009762:	2100      	movs	r1, #0
 8009764:	2204      	movs	r2, #4
 8009766:	69e8      	ldr	r0, [r5, #28]
 8009768:	f102 0614 	add.w	r6, r2, #20
 800976c:	429e      	cmp	r6, r3
 800976e:	d940      	bls.n	80097f2 <_dtoa_r+0x30a>
 8009770:	6041      	str	r1, [r0, #4]
 8009772:	4628      	mov	r0, r5
 8009774:	f000 fd98 	bl	800a2a8 <_Balloc>
 8009778:	9003      	str	r0, [sp, #12]
 800977a:	2800      	cmp	r0, #0
 800977c:	d13c      	bne.n	80097f8 <_dtoa_r+0x310>
 800977e:	4602      	mov	r2, r0
 8009780:	f240 11af 	movw	r1, #431	; 0x1af
 8009784:	4b16      	ldr	r3, [pc, #88]	; (80097e0 <_dtoa_r+0x2f8>)
 8009786:	e6c3      	b.n	8009510 <_dtoa_r+0x28>
 8009788:	2301      	movs	r3, #1
 800978a:	e7e1      	b.n	8009750 <_dtoa_r+0x268>
 800978c:	2401      	movs	r4, #1
 800978e:	2300      	movs	r3, #0
 8009790:	940b      	str	r4, [sp, #44]	; 0x2c
 8009792:	9322      	str	r3, [sp, #136]	; 0x88
 8009794:	f04f 33ff 	mov.w	r3, #4294967295
 8009798:	2200      	movs	r2, #0
 800979a:	9306      	str	r3, [sp, #24]
 800979c:	9308      	str	r3, [sp, #32]
 800979e:	2312      	movs	r3, #18
 80097a0:	e7d1      	b.n	8009746 <_dtoa_r+0x25e>
 80097a2:	bf00      	nop
 80097a4:	f3af 8000 	nop.w
 80097a8:	636f4361 	.word	0x636f4361
 80097ac:	3fd287a7 	.word	0x3fd287a7
 80097b0:	8b60c8b3 	.word	0x8b60c8b3
 80097b4:	3fc68a28 	.word	0x3fc68a28
 80097b8:	509f79fb 	.word	0x509f79fb
 80097bc:	3fd34413 	.word	0x3fd34413
 80097c0:	0800f948 	.word	0x0800f948
 80097c4:	0800f95f 	.word	0x0800f95f
 80097c8:	7ff00000 	.word	0x7ff00000
 80097cc:	0800f944 	.word	0x0800f944
 80097d0:	0800f93b 	.word	0x0800f93b
 80097d4:	0800f913 	.word	0x0800f913
 80097d8:	3ff80000 	.word	0x3ff80000
 80097dc:	0800fa50 	.word	0x0800fa50
 80097e0:	0800f9b7 	.word	0x0800f9b7
 80097e4:	2301      	movs	r3, #1
 80097e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80097e8:	e7d4      	b.n	8009794 <_dtoa_r+0x2ac>
 80097ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80097ec:	9306      	str	r3, [sp, #24]
 80097ee:	9308      	str	r3, [sp, #32]
 80097f0:	e7b7      	b.n	8009762 <_dtoa_r+0x27a>
 80097f2:	3101      	adds	r1, #1
 80097f4:	0052      	lsls	r2, r2, #1
 80097f6:	e7b7      	b.n	8009768 <_dtoa_r+0x280>
 80097f8:	69eb      	ldr	r3, [r5, #28]
 80097fa:	9a03      	ldr	r2, [sp, #12]
 80097fc:	601a      	str	r2, [r3, #0]
 80097fe:	9b08      	ldr	r3, [sp, #32]
 8009800:	2b0e      	cmp	r3, #14
 8009802:	f200 80a8 	bhi.w	8009956 <_dtoa_r+0x46e>
 8009806:	2c00      	cmp	r4, #0
 8009808:	f000 80a5 	beq.w	8009956 <_dtoa_r+0x46e>
 800980c:	f1bb 0f00 	cmp.w	fp, #0
 8009810:	dd34      	ble.n	800987c <_dtoa_r+0x394>
 8009812:	4b9a      	ldr	r3, [pc, #616]	; (8009a7c <_dtoa_r+0x594>)
 8009814:	f00b 020f 	and.w	r2, fp, #15
 8009818:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800981c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009820:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009824:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009828:	ea4f 142b 	mov.w	r4, fp, asr #4
 800982c:	d016      	beq.n	800985c <_dtoa_r+0x374>
 800982e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009832:	4b93      	ldr	r3, [pc, #588]	; (8009a80 <_dtoa_r+0x598>)
 8009834:	2703      	movs	r7, #3
 8009836:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800983a:	f7f6 ff77 	bl	800072c <__aeabi_ddiv>
 800983e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009842:	f004 040f 	and.w	r4, r4, #15
 8009846:	4e8e      	ldr	r6, [pc, #568]	; (8009a80 <_dtoa_r+0x598>)
 8009848:	b954      	cbnz	r4, 8009860 <_dtoa_r+0x378>
 800984a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800984e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009852:	f7f6 ff6b 	bl	800072c <__aeabi_ddiv>
 8009856:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800985a:	e029      	b.n	80098b0 <_dtoa_r+0x3c8>
 800985c:	2702      	movs	r7, #2
 800985e:	e7f2      	b.n	8009846 <_dtoa_r+0x35e>
 8009860:	07e1      	lsls	r1, r4, #31
 8009862:	d508      	bpl.n	8009876 <_dtoa_r+0x38e>
 8009864:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009868:	e9d6 2300 	ldrd	r2, r3, [r6]
 800986c:	f7f6 fe34 	bl	80004d8 <__aeabi_dmul>
 8009870:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009874:	3701      	adds	r7, #1
 8009876:	1064      	asrs	r4, r4, #1
 8009878:	3608      	adds	r6, #8
 800987a:	e7e5      	b.n	8009848 <_dtoa_r+0x360>
 800987c:	f000 80a5 	beq.w	80099ca <_dtoa_r+0x4e2>
 8009880:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009884:	f1cb 0400 	rsb	r4, fp, #0
 8009888:	4b7c      	ldr	r3, [pc, #496]	; (8009a7c <_dtoa_r+0x594>)
 800988a:	f004 020f 	and.w	r2, r4, #15
 800988e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009896:	f7f6 fe1f 	bl	80004d8 <__aeabi_dmul>
 800989a:	2702      	movs	r7, #2
 800989c:	2300      	movs	r3, #0
 800989e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098a2:	4e77      	ldr	r6, [pc, #476]	; (8009a80 <_dtoa_r+0x598>)
 80098a4:	1124      	asrs	r4, r4, #4
 80098a6:	2c00      	cmp	r4, #0
 80098a8:	f040 8084 	bne.w	80099b4 <_dtoa_r+0x4cc>
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d1d2      	bne.n	8009856 <_dtoa_r+0x36e>
 80098b0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80098b4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80098b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f000 8087 	beq.w	80099ce <_dtoa_r+0x4e6>
 80098c0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80098c4:	2200      	movs	r2, #0
 80098c6:	4b6f      	ldr	r3, [pc, #444]	; (8009a84 <_dtoa_r+0x59c>)
 80098c8:	f7f7 f878 	bl	80009bc <__aeabi_dcmplt>
 80098cc:	2800      	cmp	r0, #0
 80098ce:	d07e      	beq.n	80099ce <_dtoa_r+0x4e6>
 80098d0:	9b08      	ldr	r3, [sp, #32]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d07b      	beq.n	80099ce <_dtoa_r+0x4e6>
 80098d6:	9b06      	ldr	r3, [sp, #24]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	dd38      	ble.n	800994e <_dtoa_r+0x466>
 80098dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80098e0:	2200      	movs	r2, #0
 80098e2:	4b69      	ldr	r3, [pc, #420]	; (8009a88 <_dtoa_r+0x5a0>)
 80098e4:	f7f6 fdf8 	bl	80004d8 <__aeabi_dmul>
 80098e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098ec:	9c06      	ldr	r4, [sp, #24]
 80098ee:	f10b 38ff 	add.w	r8, fp, #4294967295
 80098f2:	3701      	adds	r7, #1
 80098f4:	4638      	mov	r0, r7
 80098f6:	f7f6 fd85 	bl	8000404 <__aeabi_i2d>
 80098fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098fe:	f7f6 fdeb 	bl	80004d8 <__aeabi_dmul>
 8009902:	2200      	movs	r2, #0
 8009904:	4b61      	ldr	r3, [pc, #388]	; (8009a8c <_dtoa_r+0x5a4>)
 8009906:	f7f6 fc31 	bl	800016c <__adddf3>
 800990a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800990e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009912:	9611      	str	r6, [sp, #68]	; 0x44
 8009914:	2c00      	cmp	r4, #0
 8009916:	d15d      	bne.n	80099d4 <_dtoa_r+0x4ec>
 8009918:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800991c:	2200      	movs	r2, #0
 800991e:	4b5c      	ldr	r3, [pc, #368]	; (8009a90 <_dtoa_r+0x5a8>)
 8009920:	f7f6 fc22 	bl	8000168 <__aeabi_dsub>
 8009924:	4602      	mov	r2, r0
 8009926:	460b      	mov	r3, r1
 8009928:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800992c:	4633      	mov	r3, r6
 800992e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009930:	f7f7 f862 	bl	80009f8 <__aeabi_dcmpgt>
 8009934:	2800      	cmp	r0, #0
 8009936:	f040 8295 	bne.w	8009e64 <_dtoa_r+0x97c>
 800993a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800993e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009940:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009944:	f7f7 f83a 	bl	80009bc <__aeabi_dcmplt>
 8009948:	2800      	cmp	r0, #0
 800994a:	f040 8289 	bne.w	8009e60 <_dtoa_r+0x978>
 800994e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009952:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009956:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009958:	2b00      	cmp	r3, #0
 800995a:	f2c0 8151 	blt.w	8009c00 <_dtoa_r+0x718>
 800995e:	f1bb 0f0e 	cmp.w	fp, #14
 8009962:	f300 814d 	bgt.w	8009c00 <_dtoa_r+0x718>
 8009966:	4b45      	ldr	r3, [pc, #276]	; (8009a7c <_dtoa_r+0x594>)
 8009968:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800996c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009970:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009974:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009976:	2b00      	cmp	r3, #0
 8009978:	f280 80da 	bge.w	8009b30 <_dtoa_r+0x648>
 800997c:	9b08      	ldr	r3, [sp, #32]
 800997e:	2b00      	cmp	r3, #0
 8009980:	f300 80d6 	bgt.w	8009b30 <_dtoa_r+0x648>
 8009984:	f040 826b 	bne.w	8009e5e <_dtoa_r+0x976>
 8009988:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800998c:	2200      	movs	r2, #0
 800998e:	4b40      	ldr	r3, [pc, #256]	; (8009a90 <_dtoa_r+0x5a8>)
 8009990:	f7f6 fda2 	bl	80004d8 <__aeabi_dmul>
 8009994:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009998:	f7f7 f824 	bl	80009e4 <__aeabi_dcmpge>
 800999c:	9c08      	ldr	r4, [sp, #32]
 800999e:	4626      	mov	r6, r4
 80099a0:	2800      	cmp	r0, #0
 80099a2:	f040 8241 	bne.w	8009e28 <_dtoa_r+0x940>
 80099a6:	2331      	movs	r3, #49	; 0x31
 80099a8:	9f03      	ldr	r7, [sp, #12]
 80099aa:	f10b 0b01 	add.w	fp, fp, #1
 80099ae:	f807 3b01 	strb.w	r3, [r7], #1
 80099b2:	e23d      	b.n	8009e30 <_dtoa_r+0x948>
 80099b4:	07e2      	lsls	r2, r4, #31
 80099b6:	d505      	bpl.n	80099c4 <_dtoa_r+0x4dc>
 80099b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80099bc:	f7f6 fd8c 	bl	80004d8 <__aeabi_dmul>
 80099c0:	2301      	movs	r3, #1
 80099c2:	3701      	adds	r7, #1
 80099c4:	1064      	asrs	r4, r4, #1
 80099c6:	3608      	adds	r6, #8
 80099c8:	e76d      	b.n	80098a6 <_dtoa_r+0x3be>
 80099ca:	2702      	movs	r7, #2
 80099cc:	e770      	b.n	80098b0 <_dtoa_r+0x3c8>
 80099ce:	46d8      	mov	r8, fp
 80099d0:	9c08      	ldr	r4, [sp, #32]
 80099d2:	e78f      	b.n	80098f4 <_dtoa_r+0x40c>
 80099d4:	9903      	ldr	r1, [sp, #12]
 80099d6:	4b29      	ldr	r3, [pc, #164]	; (8009a7c <_dtoa_r+0x594>)
 80099d8:	4421      	add	r1, r4
 80099da:	9112      	str	r1, [sp, #72]	; 0x48
 80099dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80099de:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80099e2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80099e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80099ea:	2900      	cmp	r1, #0
 80099ec:	d054      	beq.n	8009a98 <_dtoa_r+0x5b0>
 80099ee:	2000      	movs	r0, #0
 80099f0:	4928      	ldr	r1, [pc, #160]	; (8009a94 <_dtoa_r+0x5ac>)
 80099f2:	f7f6 fe9b 	bl	800072c <__aeabi_ddiv>
 80099f6:	463b      	mov	r3, r7
 80099f8:	4632      	mov	r2, r6
 80099fa:	f7f6 fbb5 	bl	8000168 <__aeabi_dsub>
 80099fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009a02:	9f03      	ldr	r7, [sp, #12]
 8009a04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a08:	f7f7 f816 	bl	8000a38 <__aeabi_d2iz>
 8009a0c:	4604      	mov	r4, r0
 8009a0e:	f7f6 fcf9 	bl	8000404 <__aeabi_i2d>
 8009a12:	4602      	mov	r2, r0
 8009a14:	460b      	mov	r3, r1
 8009a16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a1a:	f7f6 fba5 	bl	8000168 <__aeabi_dsub>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	460b      	mov	r3, r1
 8009a22:	3430      	adds	r4, #48	; 0x30
 8009a24:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009a2c:	f807 4b01 	strb.w	r4, [r7], #1
 8009a30:	f7f6 ffc4 	bl	80009bc <__aeabi_dcmplt>
 8009a34:	2800      	cmp	r0, #0
 8009a36:	d173      	bne.n	8009b20 <_dtoa_r+0x638>
 8009a38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	4911      	ldr	r1, [pc, #68]	; (8009a84 <_dtoa_r+0x59c>)
 8009a40:	f7f6 fb92 	bl	8000168 <__aeabi_dsub>
 8009a44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009a48:	f7f6 ffb8 	bl	80009bc <__aeabi_dcmplt>
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	f040 80b6 	bne.w	8009bbe <_dtoa_r+0x6d6>
 8009a52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a54:	429f      	cmp	r7, r3
 8009a56:	f43f af7a 	beq.w	800994e <_dtoa_r+0x466>
 8009a5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009a5e:	2200      	movs	r2, #0
 8009a60:	4b09      	ldr	r3, [pc, #36]	; (8009a88 <_dtoa_r+0x5a0>)
 8009a62:	f7f6 fd39 	bl	80004d8 <__aeabi_dmul>
 8009a66:	2200      	movs	r2, #0
 8009a68:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009a6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a70:	4b05      	ldr	r3, [pc, #20]	; (8009a88 <_dtoa_r+0x5a0>)
 8009a72:	f7f6 fd31 	bl	80004d8 <__aeabi_dmul>
 8009a76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a7a:	e7c3      	b.n	8009a04 <_dtoa_r+0x51c>
 8009a7c:	0800fa50 	.word	0x0800fa50
 8009a80:	0800fa28 	.word	0x0800fa28
 8009a84:	3ff00000 	.word	0x3ff00000
 8009a88:	40240000 	.word	0x40240000
 8009a8c:	401c0000 	.word	0x401c0000
 8009a90:	40140000 	.word	0x40140000
 8009a94:	3fe00000 	.word	0x3fe00000
 8009a98:	4630      	mov	r0, r6
 8009a9a:	4639      	mov	r1, r7
 8009a9c:	f7f6 fd1c 	bl	80004d8 <__aeabi_dmul>
 8009aa0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009aa2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009aa6:	9c03      	ldr	r4, [sp, #12]
 8009aa8:	9314      	str	r3, [sp, #80]	; 0x50
 8009aaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009aae:	f7f6 ffc3 	bl	8000a38 <__aeabi_d2iz>
 8009ab2:	9015      	str	r0, [sp, #84]	; 0x54
 8009ab4:	f7f6 fca6 	bl	8000404 <__aeabi_i2d>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	460b      	mov	r3, r1
 8009abc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ac0:	f7f6 fb52 	bl	8000168 <__aeabi_dsub>
 8009ac4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ac6:	4606      	mov	r6, r0
 8009ac8:	3330      	adds	r3, #48	; 0x30
 8009aca:	f804 3b01 	strb.w	r3, [r4], #1
 8009ace:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ad0:	460f      	mov	r7, r1
 8009ad2:	429c      	cmp	r4, r3
 8009ad4:	f04f 0200 	mov.w	r2, #0
 8009ad8:	d124      	bne.n	8009b24 <_dtoa_r+0x63c>
 8009ada:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009ade:	4baf      	ldr	r3, [pc, #700]	; (8009d9c <_dtoa_r+0x8b4>)
 8009ae0:	f7f6 fb44 	bl	800016c <__adddf3>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	4630      	mov	r0, r6
 8009aea:	4639      	mov	r1, r7
 8009aec:	f7f6 ff84 	bl	80009f8 <__aeabi_dcmpgt>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	d163      	bne.n	8009bbc <_dtoa_r+0x6d4>
 8009af4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009af8:	2000      	movs	r0, #0
 8009afa:	49a8      	ldr	r1, [pc, #672]	; (8009d9c <_dtoa_r+0x8b4>)
 8009afc:	f7f6 fb34 	bl	8000168 <__aeabi_dsub>
 8009b00:	4602      	mov	r2, r0
 8009b02:	460b      	mov	r3, r1
 8009b04:	4630      	mov	r0, r6
 8009b06:	4639      	mov	r1, r7
 8009b08:	f7f6 ff58 	bl	80009bc <__aeabi_dcmplt>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	f43f af1e 	beq.w	800994e <_dtoa_r+0x466>
 8009b12:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009b14:	1e7b      	subs	r3, r7, #1
 8009b16:	9314      	str	r3, [sp, #80]	; 0x50
 8009b18:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009b1c:	2b30      	cmp	r3, #48	; 0x30
 8009b1e:	d0f8      	beq.n	8009b12 <_dtoa_r+0x62a>
 8009b20:	46c3      	mov	fp, r8
 8009b22:	e03b      	b.n	8009b9c <_dtoa_r+0x6b4>
 8009b24:	4b9e      	ldr	r3, [pc, #632]	; (8009da0 <_dtoa_r+0x8b8>)
 8009b26:	f7f6 fcd7 	bl	80004d8 <__aeabi_dmul>
 8009b2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b2e:	e7bc      	b.n	8009aaa <_dtoa_r+0x5c2>
 8009b30:	9f03      	ldr	r7, [sp, #12]
 8009b32:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009b36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b3a:	4640      	mov	r0, r8
 8009b3c:	4649      	mov	r1, r9
 8009b3e:	f7f6 fdf5 	bl	800072c <__aeabi_ddiv>
 8009b42:	f7f6 ff79 	bl	8000a38 <__aeabi_d2iz>
 8009b46:	4604      	mov	r4, r0
 8009b48:	f7f6 fc5c 	bl	8000404 <__aeabi_i2d>
 8009b4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b50:	f7f6 fcc2 	bl	80004d8 <__aeabi_dmul>
 8009b54:	4602      	mov	r2, r0
 8009b56:	460b      	mov	r3, r1
 8009b58:	4640      	mov	r0, r8
 8009b5a:	4649      	mov	r1, r9
 8009b5c:	f7f6 fb04 	bl	8000168 <__aeabi_dsub>
 8009b60:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009b64:	f807 6b01 	strb.w	r6, [r7], #1
 8009b68:	9e03      	ldr	r6, [sp, #12]
 8009b6a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009b6e:	1bbe      	subs	r6, r7, r6
 8009b70:	45b4      	cmp	ip, r6
 8009b72:	4602      	mov	r2, r0
 8009b74:	460b      	mov	r3, r1
 8009b76:	d136      	bne.n	8009be6 <_dtoa_r+0x6fe>
 8009b78:	f7f6 faf8 	bl	800016c <__adddf3>
 8009b7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b80:	4680      	mov	r8, r0
 8009b82:	4689      	mov	r9, r1
 8009b84:	f7f6 ff38 	bl	80009f8 <__aeabi_dcmpgt>
 8009b88:	bb58      	cbnz	r0, 8009be2 <_dtoa_r+0x6fa>
 8009b8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b8e:	4640      	mov	r0, r8
 8009b90:	4649      	mov	r1, r9
 8009b92:	f7f6 ff09 	bl	80009a8 <__aeabi_dcmpeq>
 8009b96:	b108      	cbz	r0, 8009b9c <_dtoa_r+0x6b4>
 8009b98:	07e3      	lsls	r3, r4, #31
 8009b9a:	d422      	bmi.n	8009be2 <_dtoa_r+0x6fa>
 8009b9c:	4651      	mov	r1, sl
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	f000 fbc2 	bl	800a328 <_Bfree>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009ba8:	703b      	strb	r3, [r7, #0]
 8009baa:	f10b 0301 	add.w	r3, fp, #1
 8009bae:	6013      	str	r3, [r2, #0]
 8009bb0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	f43f ace6 	beq.w	8009584 <_dtoa_r+0x9c>
 8009bb8:	601f      	str	r7, [r3, #0]
 8009bba:	e4e3      	b.n	8009584 <_dtoa_r+0x9c>
 8009bbc:	4627      	mov	r7, r4
 8009bbe:	463b      	mov	r3, r7
 8009bc0:	461f      	mov	r7, r3
 8009bc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bc6:	2a39      	cmp	r2, #57	; 0x39
 8009bc8:	d107      	bne.n	8009bda <_dtoa_r+0x6f2>
 8009bca:	9a03      	ldr	r2, [sp, #12]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d1f7      	bne.n	8009bc0 <_dtoa_r+0x6d8>
 8009bd0:	2230      	movs	r2, #48	; 0x30
 8009bd2:	9903      	ldr	r1, [sp, #12]
 8009bd4:	f108 0801 	add.w	r8, r8, #1
 8009bd8:	700a      	strb	r2, [r1, #0]
 8009bda:	781a      	ldrb	r2, [r3, #0]
 8009bdc:	3201      	adds	r2, #1
 8009bde:	701a      	strb	r2, [r3, #0]
 8009be0:	e79e      	b.n	8009b20 <_dtoa_r+0x638>
 8009be2:	46d8      	mov	r8, fp
 8009be4:	e7eb      	b.n	8009bbe <_dtoa_r+0x6d6>
 8009be6:	2200      	movs	r2, #0
 8009be8:	4b6d      	ldr	r3, [pc, #436]	; (8009da0 <_dtoa_r+0x8b8>)
 8009bea:	f7f6 fc75 	bl	80004d8 <__aeabi_dmul>
 8009bee:	2200      	movs	r2, #0
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	4680      	mov	r8, r0
 8009bf4:	4689      	mov	r9, r1
 8009bf6:	f7f6 fed7 	bl	80009a8 <__aeabi_dcmpeq>
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	d09b      	beq.n	8009b36 <_dtoa_r+0x64e>
 8009bfe:	e7cd      	b.n	8009b9c <_dtoa_r+0x6b4>
 8009c00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c02:	2a00      	cmp	r2, #0
 8009c04:	f000 80c4 	beq.w	8009d90 <_dtoa_r+0x8a8>
 8009c08:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009c0a:	2a01      	cmp	r2, #1
 8009c0c:	f300 80a8 	bgt.w	8009d60 <_dtoa_r+0x878>
 8009c10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009c12:	2a00      	cmp	r2, #0
 8009c14:	f000 80a0 	beq.w	8009d58 <_dtoa_r+0x870>
 8009c18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009c1c:	464f      	mov	r7, r9
 8009c1e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009c20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c22:	2101      	movs	r1, #1
 8009c24:	441a      	add	r2, r3
 8009c26:	4628      	mov	r0, r5
 8009c28:	4499      	add	r9, r3
 8009c2a:	9209      	str	r2, [sp, #36]	; 0x24
 8009c2c:	f000 fc7c 	bl	800a528 <__i2b>
 8009c30:	4606      	mov	r6, r0
 8009c32:	b15f      	cbz	r7, 8009c4c <_dtoa_r+0x764>
 8009c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	dd08      	ble.n	8009c4c <_dtoa_r+0x764>
 8009c3a:	42bb      	cmp	r3, r7
 8009c3c:	bfa8      	it	ge
 8009c3e:	463b      	movge	r3, r7
 8009c40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c42:	eba9 0903 	sub.w	r9, r9, r3
 8009c46:	1aff      	subs	r7, r7, r3
 8009c48:	1ad3      	subs	r3, r2, r3
 8009c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c4e:	b1f3      	cbz	r3, 8009c8e <_dtoa_r+0x7a6>
 8009c50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f000 80a0 	beq.w	8009d98 <_dtoa_r+0x8b0>
 8009c58:	2c00      	cmp	r4, #0
 8009c5a:	dd10      	ble.n	8009c7e <_dtoa_r+0x796>
 8009c5c:	4631      	mov	r1, r6
 8009c5e:	4622      	mov	r2, r4
 8009c60:	4628      	mov	r0, r5
 8009c62:	f000 fd1f 	bl	800a6a4 <__pow5mult>
 8009c66:	4652      	mov	r2, sl
 8009c68:	4601      	mov	r1, r0
 8009c6a:	4606      	mov	r6, r0
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	f000 fc71 	bl	800a554 <__multiply>
 8009c72:	4680      	mov	r8, r0
 8009c74:	4651      	mov	r1, sl
 8009c76:	4628      	mov	r0, r5
 8009c78:	f000 fb56 	bl	800a328 <_Bfree>
 8009c7c:	46c2      	mov	sl, r8
 8009c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c80:	1b1a      	subs	r2, r3, r4
 8009c82:	d004      	beq.n	8009c8e <_dtoa_r+0x7a6>
 8009c84:	4651      	mov	r1, sl
 8009c86:	4628      	mov	r0, r5
 8009c88:	f000 fd0c 	bl	800a6a4 <__pow5mult>
 8009c8c:	4682      	mov	sl, r0
 8009c8e:	2101      	movs	r1, #1
 8009c90:	4628      	mov	r0, r5
 8009c92:	f000 fc49 	bl	800a528 <__i2b>
 8009c96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c98:	4604      	mov	r4, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	f340 8082 	ble.w	8009da4 <_dtoa_r+0x8bc>
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	4601      	mov	r1, r0
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	f000 fcfd 	bl	800a6a4 <__pow5mult>
 8009caa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009cac:	4604      	mov	r4, r0
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	dd7b      	ble.n	8009daa <_dtoa_r+0x8c2>
 8009cb2:	f04f 0800 	mov.w	r8, #0
 8009cb6:	6923      	ldr	r3, [r4, #16]
 8009cb8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009cbc:	6918      	ldr	r0, [r3, #16]
 8009cbe:	f000 fbe5 	bl	800a48c <__hi0bits>
 8009cc2:	f1c0 0020 	rsb	r0, r0, #32
 8009cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cc8:	4418      	add	r0, r3
 8009cca:	f010 001f 	ands.w	r0, r0, #31
 8009cce:	f000 8092 	beq.w	8009df6 <_dtoa_r+0x90e>
 8009cd2:	f1c0 0320 	rsb	r3, r0, #32
 8009cd6:	2b04      	cmp	r3, #4
 8009cd8:	f340 8085 	ble.w	8009de6 <_dtoa_r+0x8fe>
 8009cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cde:	f1c0 001c 	rsb	r0, r0, #28
 8009ce2:	4403      	add	r3, r0
 8009ce4:	4481      	add	r9, r0
 8009ce6:	4407      	add	r7, r0
 8009ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8009cea:	f1b9 0f00 	cmp.w	r9, #0
 8009cee:	dd05      	ble.n	8009cfc <_dtoa_r+0x814>
 8009cf0:	4651      	mov	r1, sl
 8009cf2:	464a      	mov	r2, r9
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	f000 fd2f 	bl	800a758 <__lshift>
 8009cfa:	4682      	mov	sl, r0
 8009cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	dd05      	ble.n	8009d0e <_dtoa_r+0x826>
 8009d02:	4621      	mov	r1, r4
 8009d04:	461a      	mov	r2, r3
 8009d06:	4628      	mov	r0, r5
 8009d08:	f000 fd26 	bl	800a758 <__lshift>
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d072      	beq.n	8009dfa <_dtoa_r+0x912>
 8009d14:	4621      	mov	r1, r4
 8009d16:	4650      	mov	r0, sl
 8009d18:	f000 fd8a 	bl	800a830 <__mcmp>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	da6c      	bge.n	8009dfa <_dtoa_r+0x912>
 8009d20:	2300      	movs	r3, #0
 8009d22:	4651      	mov	r1, sl
 8009d24:	220a      	movs	r2, #10
 8009d26:	4628      	mov	r0, r5
 8009d28:	f000 fb20 	bl	800a36c <__multadd>
 8009d2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d2e:	4682      	mov	sl, r0
 8009d30:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f000 81ac 	beq.w	800a092 <_dtoa_r+0xbaa>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	4631      	mov	r1, r6
 8009d3e:	220a      	movs	r2, #10
 8009d40:	4628      	mov	r0, r5
 8009d42:	f000 fb13 	bl	800a36c <__multadd>
 8009d46:	9b06      	ldr	r3, [sp, #24]
 8009d48:	4606      	mov	r6, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	f300 8093 	bgt.w	8009e76 <_dtoa_r+0x98e>
 8009d50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d52:	2b02      	cmp	r3, #2
 8009d54:	dc59      	bgt.n	8009e0a <_dtoa_r+0x922>
 8009d56:	e08e      	b.n	8009e76 <_dtoa_r+0x98e>
 8009d58:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009d5a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009d5e:	e75d      	b.n	8009c1c <_dtoa_r+0x734>
 8009d60:	9b08      	ldr	r3, [sp, #32]
 8009d62:	1e5c      	subs	r4, r3, #1
 8009d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d66:	42a3      	cmp	r3, r4
 8009d68:	bfbf      	itttt	lt
 8009d6a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009d6c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009d6e:	1ae3      	sublt	r3, r4, r3
 8009d70:	18d2      	addlt	r2, r2, r3
 8009d72:	bfa8      	it	ge
 8009d74:	1b1c      	subge	r4, r3, r4
 8009d76:	9b08      	ldr	r3, [sp, #32]
 8009d78:	bfbe      	ittt	lt
 8009d7a:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009d7c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8009d7e:	2400      	movlt	r4, #0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	bfb5      	itete	lt
 8009d84:	eba9 0703 	sublt.w	r7, r9, r3
 8009d88:	464f      	movge	r7, r9
 8009d8a:	2300      	movlt	r3, #0
 8009d8c:	9b08      	ldrge	r3, [sp, #32]
 8009d8e:	e747      	b.n	8009c20 <_dtoa_r+0x738>
 8009d90:	464f      	mov	r7, r9
 8009d92:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009d94:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009d96:	e74c      	b.n	8009c32 <_dtoa_r+0x74a>
 8009d98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d9a:	e773      	b.n	8009c84 <_dtoa_r+0x79c>
 8009d9c:	3fe00000 	.word	0x3fe00000
 8009da0:	40240000 	.word	0x40240000
 8009da4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	dc18      	bgt.n	8009ddc <_dtoa_r+0x8f4>
 8009daa:	9b04      	ldr	r3, [sp, #16]
 8009dac:	b9b3      	cbnz	r3, 8009ddc <_dtoa_r+0x8f4>
 8009dae:	9b05      	ldr	r3, [sp, #20]
 8009db0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009db4:	b993      	cbnz	r3, 8009ddc <_dtoa_r+0x8f4>
 8009db6:	9b05      	ldr	r3, [sp, #20]
 8009db8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009dbc:	0d1b      	lsrs	r3, r3, #20
 8009dbe:	051b      	lsls	r3, r3, #20
 8009dc0:	b17b      	cbz	r3, 8009de2 <_dtoa_r+0x8fa>
 8009dc2:	f04f 0801 	mov.w	r8, #1
 8009dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dc8:	f109 0901 	add.w	r9, r9, #1
 8009dcc:	3301      	adds	r3, #1
 8009dce:	9309      	str	r3, [sp, #36]	; 0x24
 8009dd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	f47f af6f 	bne.w	8009cb6 <_dtoa_r+0x7ce>
 8009dd8:	2001      	movs	r0, #1
 8009dda:	e774      	b.n	8009cc6 <_dtoa_r+0x7de>
 8009ddc:	f04f 0800 	mov.w	r8, #0
 8009de0:	e7f6      	b.n	8009dd0 <_dtoa_r+0x8e8>
 8009de2:	4698      	mov	r8, r3
 8009de4:	e7f4      	b.n	8009dd0 <_dtoa_r+0x8e8>
 8009de6:	d080      	beq.n	8009cea <_dtoa_r+0x802>
 8009de8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dea:	331c      	adds	r3, #28
 8009dec:	441a      	add	r2, r3
 8009dee:	4499      	add	r9, r3
 8009df0:	441f      	add	r7, r3
 8009df2:	9209      	str	r2, [sp, #36]	; 0x24
 8009df4:	e779      	b.n	8009cea <_dtoa_r+0x802>
 8009df6:	4603      	mov	r3, r0
 8009df8:	e7f6      	b.n	8009de8 <_dtoa_r+0x900>
 8009dfa:	9b08      	ldr	r3, [sp, #32]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	dc34      	bgt.n	8009e6a <_dtoa_r+0x982>
 8009e00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e02:	2b02      	cmp	r3, #2
 8009e04:	dd31      	ble.n	8009e6a <_dtoa_r+0x982>
 8009e06:	9b08      	ldr	r3, [sp, #32]
 8009e08:	9306      	str	r3, [sp, #24]
 8009e0a:	9b06      	ldr	r3, [sp, #24]
 8009e0c:	b963      	cbnz	r3, 8009e28 <_dtoa_r+0x940>
 8009e0e:	4621      	mov	r1, r4
 8009e10:	2205      	movs	r2, #5
 8009e12:	4628      	mov	r0, r5
 8009e14:	f000 faaa 	bl	800a36c <__multadd>
 8009e18:	4601      	mov	r1, r0
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	4650      	mov	r0, sl
 8009e1e:	f000 fd07 	bl	800a830 <__mcmp>
 8009e22:	2800      	cmp	r0, #0
 8009e24:	f73f adbf 	bgt.w	80099a6 <_dtoa_r+0x4be>
 8009e28:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009e2a:	9f03      	ldr	r7, [sp, #12]
 8009e2c:	ea6f 0b03 	mvn.w	fp, r3
 8009e30:	f04f 0800 	mov.w	r8, #0
 8009e34:	4621      	mov	r1, r4
 8009e36:	4628      	mov	r0, r5
 8009e38:	f000 fa76 	bl	800a328 <_Bfree>
 8009e3c:	2e00      	cmp	r6, #0
 8009e3e:	f43f aead 	beq.w	8009b9c <_dtoa_r+0x6b4>
 8009e42:	f1b8 0f00 	cmp.w	r8, #0
 8009e46:	d005      	beq.n	8009e54 <_dtoa_r+0x96c>
 8009e48:	45b0      	cmp	r8, r6
 8009e4a:	d003      	beq.n	8009e54 <_dtoa_r+0x96c>
 8009e4c:	4641      	mov	r1, r8
 8009e4e:	4628      	mov	r0, r5
 8009e50:	f000 fa6a 	bl	800a328 <_Bfree>
 8009e54:	4631      	mov	r1, r6
 8009e56:	4628      	mov	r0, r5
 8009e58:	f000 fa66 	bl	800a328 <_Bfree>
 8009e5c:	e69e      	b.n	8009b9c <_dtoa_r+0x6b4>
 8009e5e:	2400      	movs	r4, #0
 8009e60:	4626      	mov	r6, r4
 8009e62:	e7e1      	b.n	8009e28 <_dtoa_r+0x940>
 8009e64:	46c3      	mov	fp, r8
 8009e66:	4626      	mov	r6, r4
 8009e68:	e59d      	b.n	80099a6 <_dtoa_r+0x4be>
 8009e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	f000 80c8 	beq.w	800a002 <_dtoa_r+0xb1a>
 8009e72:	9b08      	ldr	r3, [sp, #32]
 8009e74:	9306      	str	r3, [sp, #24]
 8009e76:	2f00      	cmp	r7, #0
 8009e78:	dd05      	ble.n	8009e86 <_dtoa_r+0x99e>
 8009e7a:	4631      	mov	r1, r6
 8009e7c:	463a      	mov	r2, r7
 8009e7e:	4628      	mov	r0, r5
 8009e80:	f000 fc6a 	bl	800a758 <__lshift>
 8009e84:	4606      	mov	r6, r0
 8009e86:	f1b8 0f00 	cmp.w	r8, #0
 8009e8a:	d05b      	beq.n	8009f44 <_dtoa_r+0xa5c>
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	6871      	ldr	r1, [r6, #4]
 8009e90:	f000 fa0a 	bl	800a2a8 <_Balloc>
 8009e94:	4607      	mov	r7, r0
 8009e96:	b928      	cbnz	r0, 8009ea4 <_dtoa_r+0x9bc>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009e9e:	4b81      	ldr	r3, [pc, #516]	; (800a0a4 <_dtoa_r+0xbbc>)
 8009ea0:	f7ff bb36 	b.w	8009510 <_dtoa_r+0x28>
 8009ea4:	6932      	ldr	r2, [r6, #16]
 8009ea6:	f106 010c 	add.w	r1, r6, #12
 8009eaa:	3202      	adds	r2, #2
 8009eac:	0092      	lsls	r2, r2, #2
 8009eae:	300c      	adds	r0, #12
 8009eb0:	f7ff fa7d 	bl	80093ae <memcpy>
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	4639      	mov	r1, r7
 8009eb8:	4628      	mov	r0, r5
 8009eba:	f000 fc4d 	bl	800a758 <__lshift>
 8009ebe:	46b0      	mov	r8, r6
 8009ec0:	4606      	mov	r6, r0
 8009ec2:	9b03      	ldr	r3, [sp, #12]
 8009ec4:	9a03      	ldr	r2, [sp, #12]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	9308      	str	r3, [sp, #32]
 8009eca:	9b06      	ldr	r3, [sp, #24]
 8009ecc:	4413      	add	r3, r2
 8009ece:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ed0:	9b04      	ldr	r3, [sp, #16]
 8009ed2:	f003 0301 	and.w	r3, r3, #1
 8009ed6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ed8:	9b08      	ldr	r3, [sp, #32]
 8009eda:	4621      	mov	r1, r4
 8009edc:	3b01      	subs	r3, #1
 8009ede:	4650      	mov	r0, sl
 8009ee0:	9304      	str	r3, [sp, #16]
 8009ee2:	f7ff fa77 	bl	80093d4 <quorem>
 8009ee6:	4641      	mov	r1, r8
 8009ee8:	9006      	str	r0, [sp, #24]
 8009eea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009eee:	4650      	mov	r0, sl
 8009ef0:	f000 fc9e 	bl	800a830 <__mcmp>
 8009ef4:	4632      	mov	r2, r6
 8009ef6:	9009      	str	r0, [sp, #36]	; 0x24
 8009ef8:	4621      	mov	r1, r4
 8009efa:	4628      	mov	r0, r5
 8009efc:	f000 fcb4 	bl	800a868 <__mdiff>
 8009f00:	68c2      	ldr	r2, [r0, #12]
 8009f02:	4607      	mov	r7, r0
 8009f04:	bb02      	cbnz	r2, 8009f48 <_dtoa_r+0xa60>
 8009f06:	4601      	mov	r1, r0
 8009f08:	4650      	mov	r0, sl
 8009f0a:	f000 fc91 	bl	800a830 <__mcmp>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	4639      	mov	r1, r7
 8009f12:	4628      	mov	r0, r5
 8009f14:	920c      	str	r2, [sp, #48]	; 0x30
 8009f16:	f000 fa07 	bl	800a328 <_Bfree>
 8009f1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f1e:	9f08      	ldr	r7, [sp, #32]
 8009f20:	ea43 0102 	orr.w	r1, r3, r2
 8009f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f26:	4319      	orrs	r1, r3
 8009f28:	d110      	bne.n	8009f4c <_dtoa_r+0xa64>
 8009f2a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009f2e:	d029      	beq.n	8009f84 <_dtoa_r+0xa9c>
 8009f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	dd02      	ble.n	8009f3c <_dtoa_r+0xa54>
 8009f36:	9b06      	ldr	r3, [sp, #24]
 8009f38:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009f3c:	9b04      	ldr	r3, [sp, #16]
 8009f3e:	f883 9000 	strb.w	r9, [r3]
 8009f42:	e777      	b.n	8009e34 <_dtoa_r+0x94c>
 8009f44:	4630      	mov	r0, r6
 8009f46:	e7ba      	b.n	8009ebe <_dtoa_r+0x9d6>
 8009f48:	2201      	movs	r2, #1
 8009f4a:	e7e1      	b.n	8009f10 <_dtoa_r+0xa28>
 8009f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	db04      	blt.n	8009f5c <_dtoa_r+0xa74>
 8009f52:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009f54:	430b      	orrs	r3, r1
 8009f56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009f58:	430b      	orrs	r3, r1
 8009f5a:	d120      	bne.n	8009f9e <_dtoa_r+0xab6>
 8009f5c:	2a00      	cmp	r2, #0
 8009f5e:	dded      	ble.n	8009f3c <_dtoa_r+0xa54>
 8009f60:	4651      	mov	r1, sl
 8009f62:	2201      	movs	r2, #1
 8009f64:	4628      	mov	r0, r5
 8009f66:	f000 fbf7 	bl	800a758 <__lshift>
 8009f6a:	4621      	mov	r1, r4
 8009f6c:	4682      	mov	sl, r0
 8009f6e:	f000 fc5f 	bl	800a830 <__mcmp>
 8009f72:	2800      	cmp	r0, #0
 8009f74:	dc03      	bgt.n	8009f7e <_dtoa_r+0xa96>
 8009f76:	d1e1      	bne.n	8009f3c <_dtoa_r+0xa54>
 8009f78:	f019 0f01 	tst.w	r9, #1
 8009f7c:	d0de      	beq.n	8009f3c <_dtoa_r+0xa54>
 8009f7e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009f82:	d1d8      	bne.n	8009f36 <_dtoa_r+0xa4e>
 8009f84:	2339      	movs	r3, #57	; 0x39
 8009f86:	9a04      	ldr	r2, [sp, #16]
 8009f88:	7013      	strb	r3, [r2, #0]
 8009f8a:	463b      	mov	r3, r7
 8009f8c:	461f      	mov	r7, r3
 8009f8e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009f92:	3b01      	subs	r3, #1
 8009f94:	2a39      	cmp	r2, #57	; 0x39
 8009f96:	d06b      	beq.n	800a070 <_dtoa_r+0xb88>
 8009f98:	3201      	adds	r2, #1
 8009f9a:	701a      	strb	r2, [r3, #0]
 8009f9c:	e74a      	b.n	8009e34 <_dtoa_r+0x94c>
 8009f9e:	2a00      	cmp	r2, #0
 8009fa0:	dd07      	ble.n	8009fb2 <_dtoa_r+0xaca>
 8009fa2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009fa6:	d0ed      	beq.n	8009f84 <_dtoa_r+0xa9c>
 8009fa8:	9a04      	ldr	r2, [sp, #16]
 8009faa:	f109 0301 	add.w	r3, r9, #1
 8009fae:	7013      	strb	r3, [r2, #0]
 8009fb0:	e740      	b.n	8009e34 <_dtoa_r+0x94c>
 8009fb2:	9b08      	ldr	r3, [sp, #32]
 8009fb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009fb6:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d042      	beq.n	800a044 <_dtoa_r+0xb5c>
 8009fbe:	4651      	mov	r1, sl
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	220a      	movs	r2, #10
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	f000 f9d1 	bl	800a36c <__multadd>
 8009fca:	45b0      	cmp	r8, r6
 8009fcc:	4682      	mov	sl, r0
 8009fce:	f04f 0300 	mov.w	r3, #0
 8009fd2:	f04f 020a 	mov.w	r2, #10
 8009fd6:	4641      	mov	r1, r8
 8009fd8:	4628      	mov	r0, r5
 8009fda:	d107      	bne.n	8009fec <_dtoa_r+0xb04>
 8009fdc:	f000 f9c6 	bl	800a36c <__multadd>
 8009fe0:	4680      	mov	r8, r0
 8009fe2:	4606      	mov	r6, r0
 8009fe4:	9b08      	ldr	r3, [sp, #32]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	9308      	str	r3, [sp, #32]
 8009fea:	e775      	b.n	8009ed8 <_dtoa_r+0x9f0>
 8009fec:	f000 f9be 	bl	800a36c <__multadd>
 8009ff0:	4631      	mov	r1, r6
 8009ff2:	4680      	mov	r8, r0
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	220a      	movs	r2, #10
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	f000 f9b7 	bl	800a36c <__multadd>
 8009ffe:	4606      	mov	r6, r0
 800a000:	e7f0      	b.n	8009fe4 <_dtoa_r+0xafc>
 800a002:	9b08      	ldr	r3, [sp, #32]
 800a004:	9306      	str	r3, [sp, #24]
 800a006:	9f03      	ldr	r7, [sp, #12]
 800a008:	4621      	mov	r1, r4
 800a00a:	4650      	mov	r0, sl
 800a00c:	f7ff f9e2 	bl	80093d4 <quorem>
 800a010:	9b03      	ldr	r3, [sp, #12]
 800a012:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a016:	f807 9b01 	strb.w	r9, [r7], #1
 800a01a:	1afa      	subs	r2, r7, r3
 800a01c:	9b06      	ldr	r3, [sp, #24]
 800a01e:	4293      	cmp	r3, r2
 800a020:	dd07      	ble.n	800a032 <_dtoa_r+0xb4a>
 800a022:	4651      	mov	r1, sl
 800a024:	2300      	movs	r3, #0
 800a026:	220a      	movs	r2, #10
 800a028:	4628      	mov	r0, r5
 800a02a:	f000 f99f 	bl	800a36c <__multadd>
 800a02e:	4682      	mov	sl, r0
 800a030:	e7ea      	b.n	800a008 <_dtoa_r+0xb20>
 800a032:	9b06      	ldr	r3, [sp, #24]
 800a034:	f04f 0800 	mov.w	r8, #0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	bfcc      	ite	gt
 800a03c:	461f      	movgt	r7, r3
 800a03e:	2701      	movle	r7, #1
 800a040:	9b03      	ldr	r3, [sp, #12]
 800a042:	441f      	add	r7, r3
 800a044:	4651      	mov	r1, sl
 800a046:	2201      	movs	r2, #1
 800a048:	4628      	mov	r0, r5
 800a04a:	f000 fb85 	bl	800a758 <__lshift>
 800a04e:	4621      	mov	r1, r4
 800a050:	4682      	mov	sl, r0
 800a052:	f000 fbed 	bl	800a830 <__mcmp>
 800a056:	2800      	cmp	r0, #0
 800a058:	dc97      	bgt.n	8009f8a <_dtoa_r+0xaa2>
 800a05a:	d102      	bne.n	800a062 <_dtoa_r+0xb7a>
 800a05c:	f019 0f01 	tst.w	r9, #1
 800a060:	d193      	bne.n	8009f8a <_dtoa_r+0xaa2>
 800a062:	463b      	mov	r3, r7
 800a064:	461f      	mov	r7, r3
 800a066:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a06a:	2a30      	cmp	r2, #48	; 0x30
 800a06c:	d0fa      	beq.n	800a064 <_dtoa_r+0xb7c>
 800a06e:	e6e1      	b.n	8009e34 <_dtoa_r+0x94c>
 800a070:	9a03      	ldr	r2, [sp, #12]
 800a072:	429a      	cmp	r2, r3
 800a074:	d18a      	bne.n	8009f8c <_dtoa_r+0xaa4>
 800a076:	2331      	movs	r3, #49	; 0x31
 800a078:	f10b 0b01 	add.w	fp, fp, #1
 800a07c:	e797      	b.n	8009fae <_dtoa_r+0xac6>
 800a07e:	4b0a      	ldr	r3, [pc, #40]	; (800a0a8 <_dtoa_r+0xbc0>)
 800a080:	f7ff ba9f 	b.w	80095c2 <_dtoa_r+0xda>
 800a084:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a086:	2b00      	cmp	r3, #0
 800a088:	f47f aa77 	bne.w	800957a <_dtoa_r+0x92>
 800a08c:	4b07      	ldr	r3, [pc, #28]	; (800a0ac <_dtoa_r+0xbc4>)
 800a08e:	f7ff ba98 	b.w	80095c2 <_dtoa_r+0xda>
 800a092:	9b06      	ldr	r3, [sp, #24]
 800a094:	2b00      	cmp	r3, #0
 800a096:	dcb6      	bgt.n	800a006 <_dtoa_r+0xb1e>
 800a098:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	f73f aeb5 	bgt.w	8009e0a <_dtoa_r+0x922>
 800a0a0:	e7b1      	b.n	800a006 <_dtoa_r+0xb1e>
 800a0a2:	bf00      	nop
 800a0a4:	0800f9b7 	.word	0x0800f9b7
 800a0a8:	0800f912 	.word	0x0800f912
 800a0ac:	0800f93b 	.word	0x0800f93b

0800a0b0 <_free_r>:
 800a0b0:	b538      	push	{r3, r4, r5, lr}
 800a0b2:	4605      	mov	r5, r0
 800a0b4:	2900      	cmp	r1, #0
 800a0b6:	d040      	beq.n	800a13a <_free_r+0x8a>
 800a0b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0bc:	1f0c      	subs	r4, r1, #4
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	bfb8      	it	lt
 800a0c2:	18e4      	addlt	r4, r4, r3
 800a0c4:	f000 f8e4 	bl	800a290 <__malloc_lock>
 800a0c8:	4a1c      	ldr	r2, [pc, #112]	; (800a13c <_free_r+0x8c>)
 800a0ca:	6813      	ldr	r3, [r2, #0]
 800a0cc:	b933      	cbnz	r3, 800a0dc <_free_r+0x2c>
 800a0ce:	6063      	str	r3, [r4, #4]
 800a0d0:	6014      	str	r4, [r2, #0]
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0d8:	f000 b8e0 	b.w	800a29c <__malloc_unlock>
 800a0dc:	42a3      	cmp	r3, r4
 800a0de:	d908      	bls.n	800a0f2 <_free_r+0x42>
 800a0e0:	6820      	ldr	r0, [r4, #0]
 800a0e2:	1821      	adds	r1, r4, r0
 800a0e4:	428b      	cmp	r3, r1
 800a0e6:	bf01      	itttt	eq
 800a0e8:	6819      	ldreq	r1, [r3, #0]
 800a0ea:	685b      	ldreq	r3, [r3, #4]
 800a0ec:	1809      	addeq	r1, r1, r0
 800a0ee:	6021      	streq	r1, [r4, #0]
 800a0f0:	e7ed      	b.n	800a0ce <_free_r+0x1e>
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	b10b      	cbz	r3, 800a0fc <_free_r+0x4c>
 800a0f8:	42a3      	cmp	r3, r4
 800a0fa:	d9fa      	bls.n	800a0f2 <_free_r+0x42>
 800a0fc:	6811      	ldr	r1, [r2, #0]
 800a0fe:	1850      	adds	r0, r2, r1
 800a100:	42a0      	cmp	r0, r4
 800a102:	d10b      	bne.n	800a11c <_free_r+0x6c>
 800a104:	6820      	ldr	r0, [r4, #0]
 800a106:	4401      	add	r1, r0
 800a108:	1850      	adds	r0, r2, r1
 800a10a:	4283      	cmp	r3, r0
 800a10c:	6011      	str	r1, [r2, #0]
 800a10e:	d1e0      	bne.n	800a0d2 <_free_r+0x22>
 800a110:	6818      	ldr	r0, [r3, #0]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	4408      	add	r0, r1
 800a116:	6010      	str	r0, [r2, #0]
 800a118:	6053      	str	r3, [r2, #4]
 800a11a:	e7da      	b.n	800a0d2 <_free_r+0x22>
 800a11c:	d902      	bls.n	800a124 <_free_r+0x74>
 800a11e:	230c      	movs	r3, #12
 800a120:	602b      	str	r3, [r5, #0]
 800a122:	e7d6      	b.n	800a0d2 <_free_r+0x22>
 800a124:	6820      	ldr	r0, [r4, #0]
 800a126:	1821      	adds	r1, r4, r0
 800a128:	428b      	cmp	r3, r1
 800a12a:	bf01      	itttt	eq
 800a12c:	6819      	ldreq	r1, [r3, #0]
 800a12e:	685b      	ldreq	r3, [r3, #4]
 800a130:	1809      	addeq	r1, r1, r0
 800a132:	6021      	streq	r1, [r4, #0]
 800a134:	6063      	str	r3, [r4, #4]
 800a136:	6054      	str	r4, [r2, #4]
 800a138:	e7cb      	b.n	800a0d2 <_free_r+0x22>
 800a13a:	bd38      	pop	{r3, r4, r5, pc}
 800a13c:	200009e8 	.word	0x200009e8

0800a140 <malloc>:
 800a140:	4b02      	ldr	r3, [pc, #8]	; (800a14c <malloc+0xc>)
 800a142:	4601      	mov	r1, r0
 800a144:	6818      	ldr	r0, [r3, #0]
 800a146:	f000 b823 	b.w	800a190 <_malloc_r>
 800a14a:	bf00      	nop
 800a14c:	2000008c 	.word	0x2000008c

0800a150 <sbrk_aligned>:
 800a150:	b570      	push	{r4, r5, r6, lr}
 800a152:	4e0e      	ldr	r6, [pc, #56]	; (800a18c <sbrk_aligned+0x3c>)
 800a154:	460c      	mov	r4, r1
 800a156:	6831      	ldr	r1, [r6, #0]
 800a158:	4605      	mov	r5, r0
 800a15a:	b911      	cbnz	r1, 800a162 <sbrk_aligned+0x12>
 800a15c:	f001 fe0c 	bl	800bd78 <_sbrk_r>
 800a160:	6030      	str	r0, [r6, #0]
 800a162:	4621      	mov	r1, r4
 800a164:	4628      	mov	r0, r5
 800a166:	f001 fe07 	bl	800bd78 <_sbrk_r>
 800a16a:	1c43      	adds	r3, r0, #1
 800a16c:	d00a      	beq.n	800a184 <sbrk_aligned+0x34>
 800a16e:	1cc4      	adds	r4, r0, #3
 800a170:	f024 0403 	bic.w	r4, r4, #3
 800a174:	42a0      	cmp	r0, r4
 800a176:	d007      	beq.n	800a188 <sbrk_aligned+0x38>
 800a178:	1a21      	subs	r1, r4, r0
 800a17a:	4628      	mov	r0, r5
 800a17c:	f001 fdfc 	bl	800bd78 <_sbrk_r>
 800a180:	3001      	adds	r0, #1
 800a182:	d101      	bne.n	800a188 <sbrk_aligned+0x38>
 800a184:	f04f 34ff 	mov.w	r4, #4294967295
 800a188:	4620      	mov	r0, r4
 800a18a:	bd70      	pop	{r4, r5, r6, pc}
 800a18c:	200009ec 	.word	0x200009ec

0800a190 <_malloc_r>:
 800a190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a194:	1ccd      	adds	r5, r1, #3
 800a196:	f025 0503 	bic.w	r5, r5, #3
 800a19a:	3508      	adds	r5, #8
 800a19c:	2d0c      	cmp	r5, #12
 800a19e:	bf38      	it	cc
 800a1a0:	250c      	movcc	r5, #12
 800a1a2:	2d00      	cmp	r5, #0
 800a1a4:	4607      	mov	r7, r0
 800a1a6:	db01      	blt.n	800a1ac <_malloc_r+0x1c>
 800a1a8:	42a9      	cmp	r1, r5
 800a1aa:	d905      	bls.n	800a1b8 <_malloc_r+0x28>
 800a1ac:	230c      	movs	r3, #12
 800a1ae:	2600      	movs	r6, #0
 800a1b0:	603b      	str	r3, [r7, #0]
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a28c <_malloc_r+0xfc>
 800a1bc:	f000 f868 	bl	800a290 <__malloc_lock>
 800a1c0:	f8d8 3000 	ldr.w	r3, [r8]
 800a1c4:	461c      	mov	r4, r3
 800a1c6:	bb5c      	cbnz	r4, 800a220 <_malloc_r+0x90>
 800a1c8:	4629      	mov	r1, r5
 800a1ca:	4638      	mov	r0, r7
 800a1cc:	f7ff ffc0 	bl	800a150 <sbrk_aligned>
 800a1d0:	1c43      	adds	r3, r0, #1
 800a1d2:	4604      	mov	r4, r0
 800a1d4:	d155      	bne.n	800a282 <_malloc_r+0xf2>
 800a1d6:	f8d8 4000 	ldr.w	r4, [r8]
 800a1da:	4626      	mov	r6, r4
 800a1dc:	2e00      	cmp	r6, #0
 800a1de:	d145      	bne.n	800a26c <_malloc_r+0xdc>
 800a1e0:	2c00      	cmp	r4, #0
 800a1e2:	d048      	beq.n	800a276 <_malloc_r+0xe6>
 800a1e4:	6823      	ldr	r3, [r4, #0]
 800a1e6:	4631      	mov	r1, r6
 800a1e8:	4638      	mov	r0, r7
 800a1ea:	eb04 0903 	add.w	r9, r4, r3
 800a1ee:	f001 fdc3 	bl	800bd78 <_sbrk_r>
 800a1f2:	4581      	cmp	r9, r0
 800a1f4:	d13f      	bne.n	800a276 <_malloc_r+0xe6>
 800a1f6:	6821      	ldr	r1, [r4, #0]
 800a1f8:	4638      	mov	r0, r7
 800a1fa:	1a6d      	subs	r5, r5, r1
 800a1fc:	4629      	mov	r1, r5
 800a1fe:	f7ff ffa7 	bl	800a150 <sbrk_aligned>
 800a202:	3001      	adds	r0, #1
 800a204:	d037      	beq.n	800a276 <_malloc_r+0xe6>
 800a206:	6823      	ldr	r3, [r4, #0]
 800a208:	442b      	add	r3, r5
 800a20a:	6023      	str	r3, [r4, #0]
 800a20c:	f8d8 3000 	ldr.w	r3, [r8]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d038      	beq.n	800a286 <_malloc_r+0xf6>
 800a214:	685a      	ldr	r2, [r3, #4]
 800a216:	42a2      	cmp	r2, r4
 800a218:	d12b      	bne.n	800a272 <_malloc_r+0xe2>
 800a21a:	2200      	movs	r2, #0
 800a21c:	605a      	str	r2, [r3, #4]
 800a21e:	e00f      	b.n	800a240 <_malloc_r+0xb0>
 800a220:	6822      	ldr	r2, [r4, #0]
 800a222:	1b52      	subs	r2, r2, r5
 800a224:	d41f      	bmi.n	800a266 <_malloc_r+0xd6>
 800a226:	2a0b      	cmp	r2, #11
 800a228:	d917      	bls.n	800a25a <_malloc_r+0xca>
 800a22a:	1961      	adds	r1, r4, r5
 800a22c:	42a3      	cmp	r3, r4
 800a22e:	6025      	str	r5, [r4, #0]
 800a230:	bf18      	it	ne
 800a232:	6059      	strne	r1, [r3, #4]
 800a234:	6863      	ldr	r3, [r4, #4]
 800a236:	bf08      	it	eq
 800a238:	f8c8 1000 	streq.w	r1, [r8]
 800a23c:	5162      	str	r2, [r4, r5]
 800a23e:	604b      	str	r3, [r1, #4]
 800a240:	4638      	mov	r0, r7
 800a242:	f104 060b 	add.w	r6, r4, #11
 800a246:	f000 f829 	bl	800a29c <__malloc_unlock>
 800a24a:	f026 0607 	bic.w	r6, r6, #7
 800a24e:	1d23      	adds	r3, r4, #4
 800a250:	1af2      	subs	r2, r6, r3
 800a252:	d0ae      	beq.n	800a1b2 <_malloc_r+0x22>
 800a254:	1b9b      	subs	r3, r3, r6
 800a256:	50a3      	str	r3, [r4, r2]
 800a258:	e7ab      	b.n	800a1b2 <_malloc_r+0x22>
 800a25a:	42a3      	cmp	r3, r4
 800a25c:	6862      	ldr	r2, [r4, #4]
 800a25e:	d1dd      	bne.n	800a21c <_malloc_r+0x8c>
 800a260:	f8c8 2000 	str.w	r2, [r8]
 800a264:	e7ec      	b.n	800a240 <_malloc_r+0xb0>
 800a266:	4623      	mov	r3, r4
 800a268:	6864      	ldr	r4, [r4, #4]
 800a26a:	e7ac      	b.n	800a1c6 <_malloc_r+0x36>
 800a26c:	4634      	mov	r4, r6
 800a26e:	6876      	ldr	r6, [r6, #4]
 800a270:	e7b4      	b.n	800a1dc <_malloc_r+0x4c>
 800a272:	4613      	mov	r3, r2
 800a274:	e7cc      	b.n	800a210 <_malloc_r+0x80>
 800a276:	230c      	movs	r3, #12
 800a278:	4638      	mov	r0, r7
 800a27a:	603b      	str	r3, [r7, #0]
 800a27c:	f000 f80e 	bl	800a29c <__malloc_unlock>
 800a280:	e797      	b.n	800a1b2 <_malloc_r+0x22>
 800a282:	6025      	str	r5, [r4, #0]
 800a284:	e7dc      	b.n	800a240 <_malloc_r+0xb0>
 800a286:	605b      	str	r3, [r3, #4]
 800a288:	deff      	udf	#255	; 0xff
 800a28a:	bf00      	nop
 800a28c:	200009e8 	.word	0x200009e8

0800a290 <__malloc_lock>:
 800a290:	4801      	ldr	r0, [pc, #4]	; (800a298 <__malloc_lock+0x8>)
 800a292:	f7ff b87c 	b.w	800938e <__retarget_lock_acquire_recursive>
 800a296:	bf00      	nop
 800a298:	200009e4 	.word	0x200009e4

0800a29c <__malloc_unlock>:
 800a29c:	4801      	ldr	r0, [pc, #4]	; (800a2a4 <__malloc_unlock+0x8>)
 800a29e:	f7ff b877 	b.w	8009390 <__retarget_lock_release_recursive>
 800a2a2:	bf00      	nop
 800a2a4:	200009e4 	.word	0x200009e4

0800a2a8 <_Balloc>:
 800a2a8:	b570      	push	{r4, r5, r6, lr}
 800a2aa:	69c6      	ldr	r6, [r0, #28]
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	460d      	mov	r5, r1
 800a2b0:	b976      	cbnz	r6, 800a2d0 <_Balloc+0x28>
 800a2b2:	2010      	movs	r0, #16
 800a2b4:	f7ff ff44 	bl	800a140 <malloc>
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	61e0      	str	r0, [r4, #28]
 800a2bc:	b920      	cbnz	r0, 800a2c8 <_Balloc+0x20>
 800a2be:	216b      	movs	r1, #107	; 0x6b
 800a2c0:	4b17      	ldr	r3, [pc, #92]	; (800a320 <_Balloc+0x78>)
 800a2c2:	4818      	ldr	r0, [pc, #96]	; (800a324 <_Balloc+0x7c>)
 800a2c4:	f001 fd6e 	bl	800bda4 <__assert_func>
 800a2c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2cc:	6006      	str	r6, [r0, #0]
 800a2ce:	60c6      	str	r6, [r0, #12]
 800a2d0:	69e6      	ldr	r6, [r4, #28]
 800a2d2:	68f3      	ldr	r3, [r6, #12]
 800a2d4:	b183      	cbz	r3, 800a2f8 <_Balloc+0x50>
 800a2d6:	69e3      	ldr	r3, [r4, #28]
 800a2d8:	68db      	ldr	r3, [r3, #12]
 800a2da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2de:	b9b8      	cbnz	r0, 800a310 <_Balloc+0x68>
 800a2e0:	2101      	movs	r1, #1
 800a2e2:	fa01 f605 	lsl.w	r6, r1, r5
 800a2e6:	1d72      	adds	r2, r6, #5
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	0092      	lsls	r2, r2, #2
 800a2ec:	f001 fd78 	bl	800bde0 <_calloc_r>
 800a2f0:	b160      	cbz	r0, 800a30c <_Balloc+0x64>
 800a2f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a2f6:	e00e      	b.n	800a316 <_Balloc+0x6e>
 800a2f8:	2221      	movs	r2, #33	; 0x21
 800a2fa:	2104      	movs	r1, #4
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	f001 fd6f 	bl	800bde0 <_calloc_r>
 800a302:	69e3      	ldr	r3, [r4, #28]
 800a304:	60f0      	str	r0, [r6, #12]
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1e4      	bne.n	800a2d6 <_Balloc+0x2e>
 800a30c:	2000      	movs	r0, #0
 800a30e:	bd70      	pop	{r4, r5, r6, pc}
 800a310:	6802      	ldr	r2, [r0, #0]
 800a312:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a316:	2300      	movs	r3, #0
 800a318:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a31c:	e7f7      	b.n	800a30e <_Balloc+0x66>
 800a31e:	bf00      	nop
 800a320:	0800f948 	.word	0x0800f948
 800a324:	0800f9c8 	.word	0x0800f9c8

0800a328 <_Bfree>:
 800a328:	b570      	push	{r4, r5, r6, lr}
 800a32a:	69c6      	ldr	r6, [r0, #28]
 800a32c:	4605      	mov	r5, r0
 800a32e:	460c      	mov	r4, r1
 800a330:	b976      	cbnz	r6, 800a350 <_Bfree+0x28>
 800a332:	2010      	movs	r0, #16
 800a334:	f7ff ff04 	bl	800a140 <malloc>
 800a338:	4602      	mov	r2, r0
 800a33a:	61e8      	str	r0, [r5, #28]
 800a33c:	b920      	cbnz	r0, 800a348 <_Bfree+0x20>
 800a33e:	218f      	movs	r1, #143	; 0x8f
 800a340:	4b08      	ldr	r3, [pc, #32]	; (800a364 <_Bfree+0x3c>)
 800a342:	4809      	ldr	r0, [pc, #36]	; (800a368 <_Bfree+0x40>)
 800a344:	f001 fd2e 	bl	800bda4 <__assert_func>
 800a348:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a34c:	6006      	str	r6, [r0, #0]
 800a34e:	60c6      	str	r6, [r0, #12]
 800a350:	b13c      	cbz	r4, 800a362 <_Bfree+0x3a>
 800a352:	69eb      	ldr	r3, [r5, #28]
 800a354:	6862      	ldr	r2, [r4, #4]
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a35c:	6021      	str	r1, [r4, #0]
 800a35e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a362:	bd70      	pop	{r4, r5, r6, pc}
 800a364:	0800f948 	.word	0x0800f948
 800a368:	0800f9c8 	.word	0x0800f9c8

0800a36c <__multadd>:
 800a36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a370:	4607      	mov	r7, r0
 800a372:	460c      	mov	r4, r1
 800a374:	461e      	mov	r6, r3
 800a376:	2000      	movs	r0, #0
 800a378:	690d      	ldr	r5, [r1, #16]
 800a37a:	f101 0c14 	add.w	ip, r1, #20
 800a37e:	f8dc 3000 	ldr.w	r3, [ip]
 800a382:	3001      	adds	r0, #1
 800a384:	b299      	uxth	r1, r3
 800a386:	fb02 6101 	mla	r1, r2, r1, r6
 800a38a:	0c1e      	lsrs	r6, r3, #16
 800a38c:	0c0b      	lsrs	r3, r1, #16
 800a38e:	fb02 3306 	mla	r3, r2, r6, r3
 800a392:	b289      	uxth	r1, r1
 800a394:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a398:	4285      	cmp	r5, r0
 800a39a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a39e:	f84c 1b04 	str.w	r1, [ip], #4
 800a3a2:	dcec      	bgt.n	800a37e <__multadd+0x12>
 800a3a4:	b30e      	cbz	r6, 800a3ea <__multadd+0x7e>
 800a3a6:	68a3      	ldr	r3, [r4, #8]
 800a3a8:	42ab      	cmp	r3, r5
 800a3aa:	dc19      	bgt.n	800a3e0 <__multadd+0x74>
 800a3ac:	6861      	ldr	r1, [r4, #4]
 800a3ae:	4638      	mov	r0, r7
 800a3b0:	3101      	adds	r1, #1
 800a3b2:	f7ff ff79 	bl	800a2a8 <_Balloc>
 800a3b6:	4680      	mov	r8, r0
 800a3b8:	b928      	cbnz	r0, 800a3c6 <__multadd+0x5a>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	21ba      	movs	r1, #186	; 0xba
 800a3be:	4b0c      	ldr	r3, [pc, #48]	; (800a3f0 <__multadd+0x84>)
 800a3c0:	480c      	ldr	r0, [pc, #48]	; (800a3f4 <__multadd+0x88>)
 800a3c2:	f001 fcef 	bl	800bda4 <__assert_func>
 800a3c6:	6922      	ldr	r2, [r4, #16]
 800a3c8:	f104 010c 	add.w	r1, r4, #12
 800a3cc:	3202      	adds	r2, #2
 800a3ce:	0092      	lsls	r2, r2, #2
 800a3d0:	300c      	adds	r0, #12
 800a3d2:	f7fe ffec 	bl	80093ae <memcpy>
 800a3d6:	4621      	mov	r1, r4
 800a3d8:	4638      	mov	r0, r7
 800a3da:	f7ff ffa5 	bl	800a328 <_Bfree>
 800a3de:	4644      	mov	r4, r8
 800a3e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a3e4:	3501      	adds	r5, #1
 800a3e6:	615e      	str	r6, [r3, #20]
 800a3e8:	6125      	str	r5, [r4, #16]
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3f0:	0800f9b7 	.word	0x0800f9b7
 800a3f4:	0800f9c8 	.word	0x0800f9c8

0800a3f8 <__s2b>:
 800a3f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3fc:	4615      	mov	r5, r2
 800a3fe:	2209      	movs	r2, #9
 800a400:	461f      	mov	r7, r3
 800a402:	3308      	adds	r3, #8
 800a404:	460c      	mov	r4, r1
 800a406:	fb93 f3f2 	sdiv	r3, r3, r2
 800a40a:	4606      	mov	r6, r0
 800a40c:	2201      	movs	r2, #1
 800a40e:	2100      	movs	r1, #0
 800a410:	429a      	cmp	r2, r3
 800a412:	db09      	blt.n	800a428 <__s2b+0x30>
 800a414:	4630      	mov	r0, r6
 800a416:	f7ff ff47 	bl	800a2a8 <_Balloc>
 800a41a:	b940      	cbnz	r0, 800a42e <__s2b+0x36>
 800a41c:	4602      	mov	r2, r0
 800a41e:	21d3      	movs	r1, #211	; 0xd3
 800a420:	4b18      	ldr	r3, [pc, #96]	; (800a484 <__s2b+0x8c>)
 800a422:	4819      	ldr	r0, [pc, #100]	; (800a488 <__s2b+0x90>)
 800a424:	f001 fcbe 	bl	800bda4 <__assert_func>
 800a428:	0052      	lsls	r2, r2, #1
 800a42a:	3101      	adds	r1, #1
 800a42c:	e7f0      	b.n	800a410 <__s2b+0x18>
 800a42e:	9b08      	ldr	r3, [sp, #32]
 800a430:	2d09      	cmp	r5, #9
 800a432:	6143      	str	r3, [r0, #20]
 800a434:	f04f 0301 	mov.w	r3, #1
 800a438:	6103      	str	r3, [r0, #16]
 800a43a:	dd16      	ble.n	800a46a <__s2b+0x72>
 800a43c:	f104 0909 	add.w	r9, r4, #9
 800a440:	46c8      	mov	r8, r9
 800a442:	442c      	add	r4, r5
 800a444:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a448:	4601      	mov	r1, r0
 800a44a:	220a      	movs	r2, #10
 800a44c:	4630      	mov	r0, r6
 800a44e:	3b30      	subs	r3, #48	; 0x30
 800a450:	f7ff ff8c 	bl	800a36c <__multadd>
 800a454:	45a0      	cmp	r8, r4
 800a456:	d1f5      	bne.n	800a444 <__s2b+0x4c>
 800a458:	f1a5 0408 	sub.w	r4, r5, #8
 800a45c:	444c      	add	r4, r9
 800a45e:	1b2d      	subs	r5, r5, r4
 800a460:	1963      	adds	r3, r4, r5
 800a462:	42bb      	cmp	r3, r7
 800a464:	db04      	blt.n	800a470 <__s2b+0x78>
 800a466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a46a:	2509      	movs	r5, #9
 800a46c:	340a      	adds	r4, #10
 800a46e:	e7f6      	b.n	800a45e <__s2b+0x66>
 800a470:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a474:	4601      	mov	r1, r0
 800a476:	220a      	movs	r2, #10
 800a478:	4630      	mov	r0, r6
 800a47a:	3b30      	subs	r3, #48	; 0x30
 800a47c:	f7ff ff76 	bl	800a36c <__multadd>
 800a480:	e7ee      	b.n	800a460 <__s2b+0x68>
 800a482:	bf00      	nop
 800a484:	0800f9b7 	.word	0x0800f9b7
 800a488:	0800f9c8 	.word	0x0800f9c8

0800a48c <__hi0bits>:
 800a48c:	0c02      	lsrs	r2, r0, #16
 800a48e:	0412      	lsls	r2, r2, #16
 800a490:	4603      	mov	r3, r0
 800a492:	b9ca      	cbnz	r2, 800a4c8 <__hi0bits+0x3c>
 800a494:	0403      	lsls	r3, r0, #16
 800a496:	2010      	movs	r0, #16
 800a498:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a49c:	bf04      	itt	eq
 800a49e:	021b      	lsleq	r3, r3, #8
 800a4a0:	3008      	addeq	r0, #8
 800a4a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a4a6:	bf04      	itt	eq
 800a4a8:	011b      	lsleq	r3, r3, #4
 800a4aa:	3004      	addeq	r0, #4
 800a4ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a4b0:	bf04      	itt	eq
 800a4b2:	009b      	lsleq	r3, r3, #2
 800a4b4:	3002      	addeq	r0, #2
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	db05      	blt.n	800a4c6 <__hi0bits+0x3a>
 800a4ba:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a4be:	f100 0001 	add.w	r0, r0, #1
 800a4c2:	bf08      	it	eq
 800a4c4:	2020      	moveq	r0, #32
 800a4c6:	4770      	bx	lr
 800a4c8:	2000      	movs	r0, #0
 800a4ca:	e7e5      	b.n	800a498 <__hi0bits+0xc>

0800a4cc <__lo0bits>:
 800a4cc:	6803      	ldr	r3, [r0, #0]
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	f013 0007 	ands.w	r0, r3, #7
 800a4d4:	d00b      	beq.n	800a4ee <__lo0bits+0x22>
 800a4d6:	07d9      	lsls	r1, r3, #31
 800a4d8:	d421      	bmi.n	800a51e <__lo0bits+0x52>
 800a4da:	0798      	lsls	r0, r3, #30
 800a4dc:	bf49      	itett	mi
 800a4de:	085b      	lsrmi	r3, r3, #1
 800a4e0:	089b      	lsrpl	r3, r3, #2
 800a4e2:	2001      	movmi	r0, #1
 800a4e4:	6013      	strmi	r3, [r2, #0]
 800a4e6:	bf5c      	itt	pl
 800a4e8:	2002      	movpl	r0, #2
 800a4ea:	6013      	strpl	r3, [r2, #0]
 800a4ec:	4770      	bx	lr
 800a4ee:	b299      	uxth	r1, r3
 800a4f0:	b909      	cbnz	r1, 800a4f6 <__lo0bits+0x2a>
 800a4f2:	2010      	movs	r0, #16
 800a4f4:	0c1b      	lsrs	r3, r3, #16
 800a4f6:	b2d9      	uxtb	r1, r3
 800a4f8:	b909      	cbnz	r1, 800a4fe <__lo0bits+0x32>
 800a4fa:	3008      	adds	r0, #8
 800a4fc:	0a1b      	lsrs	r3, r3, #8
 800a4fe:	0719      	lsls	r1, r3, #28
 800a500:	bf04      	itt	eq
 800a502:	091b      	lsreq	r3, r3, #4
 800a504:	3004      	addeq	r0, #4
 800a506:	0799      	lsls	r1, r3, #30
 800a508:	bf04      	itt	eq
 800a50a:	089b      	lsreq	r3, r3, #2
 800a50c:	3002      	addeq	r0, #2
 800a50e:	07d9      	lsls	r1, r3, #31
 800a510:	d403      	bmi.n	800a51a <__lo0bits+0x4e>
 800a512:	085b      	lsrs	r3, r3, #1
 800a514:	f100 0001 	add.w	r0, r0, #1
 800a518:	d003      	beq.n	800a522 <__lo0bits+0x56>
 800a51a:	6013      	str	r3, [r2, #0]
 800a51c:	4770      	bx	lr
 800a51e:	2000      	movs	r0, #0
 800a520:	4770      	bx	lr
 800a522:	2020      	movs	r0, #32
 800a524:	4770      	bx	lr
	...

0800a528 <__i2b>:
 800a528:	b510      	push	{r4, lr}
 800a52a:	460c      	mov	r4, r1
 800a52c:	2101      	movs	r1, #1
 800a52e:	f7ff febb 	bl	800a2a8 <_Balloc>
 800a532:	4602      	mov	r2, r0
 800a534:	b928      	cbnz	r0, 800a542 <__i2b+0x1a>
 800a536:	f240 1145 	movw	r1, #325	; 0x145
 800a53a:	4b04      	ldr	r3, [pc, #16]	; (800a54c <__i2b+0x24>)
 800a53c:	4804      	ldr	r0, [pc, #16]	; (800a550 <__i2b+0x28>)
 800a53e:	f001 fc31 	bl	800bda4 <__assert_func>
 800a542:	2301      	movs	r3, #1
 800a544:	6144      	str	r4, [r0, #20]
 800a546:	6103      	str	r3, [r0, #16]
 800a548:	bd10      	pop	{r4, pc}
 800a54a:	bf00      	nop
 800a54c:	0800f9b7 	.word	0x0800f9b7
 800a550:	0800f9c8 	.word	0x0800f9c8

0800a554 <__multiply>:
 800a554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a558:	4691      	mov	r9, r2
 800a55a:	690a      	ldr	r2, [r1, #16]
 800a55c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a560:	460c      	mov	r4, r1
 800a562:	429a      	cmp	r2, r3
 800a564:	bfbe      	ittt	lt
 800a566:	460b      	movlt	r3, r1
 800a568:	464c      	movlt	r4, r9
 800a56a:	4699      	movlt	r9, r3
 800a56c:	6927      	ldr	r7, [r4, #16]
 800a56e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a572:	68a3      	ldr	r3, [r4, #8]
 800a574:	6861      	ldr	r1, [r4, #4]
 800a576:	eb07 060a 	add.w	r6, r7, sl
 800a57a:	42b3      	cmp	r3, r6
 800a57c:	b085      	sub	sp, #20
 800a57e:	bfb8      	it	lt
 800a580:	3101      	addlt	r1, #1
 800a582:	f7ff fe91 	bl	800a2a8 <_Balloc>
 800a586:	b930      	cbnz	r0, 800a596 <__multiply+0x42>
 800a588:	4602      	mov	r2, r0
 800a58a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a58e:	4b43      	ldr	r3, [pc, #268]	; (800a69c <__multiply+0x148>)
 800a590:	4843      	ldr	r0, [pc, #268]	; (800a6a0 <__multiply+0x14c>)
 800a592:	f001 fc07 	bl	800bda4 <__assert_func>
 800a596:	f100 0514 	add.w	r5, r0, #20
 800a59a:	462b      	mov	r3, r5
 800a59c:	2200      	movs	r2, #0
 800a59e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a5a2:	4543      	cmp	r3, r8
 800a5a4:	d321      	bcc.n	800a5ea <__multiply+0x96>
 800a5a6:	f104 0314 	add.w	r3, r4, #20
 800a5aa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a5ae:	f109 0314 	add.w	r3, r9, #20
 800a5b2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a5b6:	9202      	str	r2, [sp, #8]
 800a5b8:	1b3a      	subs	r2, r7, r4
 800a5ba:	3a15      	subs	r2, #21
 800a5bc:	f022 0203 	bic.w	r2, r2, #3
 800a5c0:	3204      	adds	r2, #4
 800a5c2:	f104 0115 	add.w	r1, r4, #21
 800a5c6:	428f      	cmp	r7, r1
 800a5c8:	bf38      	it	cc
 800a5ca:	2204      	movcc	r2, #4
 800a5cc:	9201      	str	r2, [sp, #4]
 800a5ce:	9a02      	ldr	r2, [sp, #8]
 800a5d0:	9303      	str	r3, [sp, #12]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d80c      	bhi.n	800a5f0 <__multiply+0x9c>
 800a5d6:	2e00      	cmp	r6, #0
 800a5d8:	dd03      	ble.n	800a5e2 <__multiply+0x8e>
 800a5da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d05a      	beq.n	800a698 <__multiply+0x144>
 800a5e2:	6106      	str	r6, [r0, #16]
 800a5e4:	b005      	add	sp, #20
 800a5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ea:	f843 2b04 	str.w	r2, [r3], #4
 800a5ee:	e7d8      	b.n	800a5a2 <__multiply+0x4e>
 800a5f0:	f8b3 a000 	ldrh.w	sl, [r3]
 800a5f4:	f1ba 0f00 	cmp.w	sl, #0
 800a5f8:	d023      	beq.n	800a642 <__multiply+0xee>
 800a5fa:	46a9      	mov	r9, r5
 800a5fc:	f04f 0c00 	mov.w	ip, #0
 800a600:	f104 0e14 	add.w	lr, r4, #20
 800a604:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a608:	f8d9 1000 	ldr.w	r1, [r9]
 800a60c:	fa1f fb82 	uxth.w	fp, r2
 800a610:	b289      	uxth	r1, r1
 800a612:	fb0a 110b 	mla	r1, sl, fp, r1
 800a616:	4461      	add	r1, ip
 800a618:	f8d9 c000 	ldr.w	ip, [r9]
 800a61c:	0c12      	lsrs	r2, r2, #16
 800a61e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a622:	fb0a c202 	mla	r2, sl, r2, ip
 800a626:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a62a:	b289      	uxth	r1, r1
 800a62c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a630:	4577      	cmp	r7, lr
 800a632:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a636:	f849 1b04 	str.w	r1, [r9], #4
 800a63a:	d8e3      	bhi.n	800a604 <__multiply+0xb0>
 800a63c:	9a01      	ldr	r2, [sp, #4]
 800a63e:	f845 c002 	str.w	ip, [r5, r2]
 800a642:	9a03      	ldr	r2, [sp, #12]
 800a644:	3304      	adds	r3, #4
 800a646:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a64a:	f1b9 0f00 	cmp.w	r9, #0
 800a64e:	d021      	beq.n	800a694 <__multiply+0x140>
 800a650:	46ae      	mov	lr, r5
 800a652:	f04f 0a00 	mov.w	sl, #0
 800a656:	6829      	ldr	r1, [r5, #0]
 800a658:	f104 0c14 	add.w	ip, r4, #20
 800a65c:	f8bc b000 	ldrh.w	fp, [ip]
 800a660:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a664:	b289      	uxth	r1, r1
 800a666:	fb09 220b 	mla	r2, r9, fp, r2
 800a66a:	4452      	add	r2, sl
 800a66c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a670:	f84e 1b04 	str.w	r1, [lr], #4
 800a674:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a678:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a67c:	f8be 1000 	ldrh.w	r1, [lr]
 800a680:	4567      	cmp	r7, ip
 800a682:	fb09 110a 	mla	r1, r9, sl, r1
 800a686:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a68a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a68e:	d8e5      	bhi.n	800a65c <__multiply+0x108>
 800a690:	9a01      	ldr	r2, [sp, #4]
 800a692:	50a9      	str	r1, [r5, r2]
 800a694:	3504      	adds	r5, #4
 800a696:	e79a      	b.n	800a5ce <__multiply+0x7a>
 800a698:	3e01      	subs	r6, #1
 800a69a:	e79c      	b.n	800a5d6 <__multiply+0x82>
 800a69c:	0800f9b7 	.word	0x0800f9b7
 800a6a0:	0800f9c8 	.word	0x0800f9c8

0800a6a4 <__pow5mult>:
 800a6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6a8:	4615      	mov	r5, r2
 800a6aa:	f012 0203 	ands.w	r2, r2, #3
 800a6ae:	4606      	mov	r6, r0
 800a6b0:	460f      	mov	r7, r1
 800a6b2:	d007      	beq.n	800a6c4 <__pow5mult+0x20>
 800a6b4:	4c25      	ldr	r4, [pc, #148]	; (800a74c <__pow5mult+0xa8>)
 800a6b6:	3a01      	subs	r2, #1
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a6be:	f7ff fe55 	bl	800a36c <__multadd>
 800a6c2:	4607      	mov	r7, r0
 800a6c4:	10ad      	asrs	r5, r5, #2
 800a6c6:	d03d      	beq.n	800a744 <__pow5mult+0xa0>
 800a6c8:	69f4      	ldr	r4, [r6, #28]
 800a6ca:	b97c      	cbnz	r4, 800a6ec <__pow5mult+0x48>
 800a6cc:	2010      	movs	r0, #16
 800a6ce:	f7ff fd37 	bl	800a140 <malloc>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	61f0      	str	r0, [r6, #28]
 800a6d6:	b928      	cbnz	r0, 800a6e4 <__pow5mult+0x40>
 800a6d8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a6dc:	4b1c      	ldr	r3, [pc, #112]	; (800a750 <__pow5mult+0xac>)
 800a6de:	481d      	ldr	r0, [pc, #116]	; (800a754 <__pow5mult+0xb0>)
 800a6e0:	f001 fb60 	bl	800bda4 <__assert_func>
 800a6e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a6e8:	6004      	str	r4, [r0, #0]
 800a6ea:	60c4      	str	r4, [r0, #12]
 800a6ec:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a6f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a6f4:	b94c      	cbnz	r4, 800a70a <__pow5mult+0x66>
 800a6f6:	f240 2171 	movw	r1, #625	; 0x271
 800a6fa:	4630      	mov	r0, r6
 800a6fc:	f7ff ff14 	bl	800a528 <__i2b>
 800a700:	2300      	movs	r3, #0
 800a702:	4604      	mov	r4, r0
 800a704:	f8c8 0008 	str.w	r0, [r8, #8]
 800a708:	6003      	str	r3, [r0, #0]
 800a70a:	f04f 0900 	mov.w	r9, #0
 800a70e:	07eb      	lsls	r3, r5, #31
 800a710:	d50a      	bpl.n	800a728 <__pow5mult+0x84>
 800a712:	4639      	mov	r1, r7
 800a714:	4622      	mov	r2, r4
 800a716:	4630      	mov	r0, r6
 800a718:	f7ff ff1c 	bl	800a554 <__multiply>
 800a71c:	4680      	mov	r8, r0
 800a71e:	4639      	mov	r1, r7
 800a720:	4630      	mov	r0, r6
 800a722:	f7ff fe01 	bl	800a328 <_Bfree>
 800a726:	4647      	mov	r7, r8
 800a728:	106d      	asrs	r5, r5, #1
 800a72a:	d00b      	beq.n	800a744 <__pow5mult+0xa0>
 800a72c:	6820      	ldr	r0, [r4, #0]
 800a72e:	b938      	cbnz	r0, 800a740 <__pow5mult+0x9c>
 800a730:	4622      	mov	r2, r4
 800a732:	4621      	mov	r1, r4
 800a734:	4630      	mov	r0, r6
 800a736:	f7ff ff0d 	bl	800a554 <__multiply>
 800a73a:	6020      	str	r0, [r4, #0]
 800a73c:	f8c0 9000 	str.w	r9, [r0]
 800a740:	4604      	mov	r4, r0
 800a742:	e7e4      	b.n	800a70e <__pow5mult+0x6a>
 800a744:	4638      	mov	r0, r7
 800a746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a74a:	bf00      	nop
 800a74c:	0800fb18 	.word	0x0800fb18
 800a750:	0800f948 	.word	0x0800f948
 800a754:	0800f9c8 	.word	0x0800f9c8

0800a758 <__lshift>:
 800a758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a75c:	460c      	mov	r4, r1
 800a75e:	4607      	mov	r7, r0
 800a760:	4691      	mov	r9, r2
 800a762:	6923      	ldr	r3, [r4, #16]
 800a764:	6849      	ldr	r1, [r1, #4]
 800a766:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a76a:	68a3      	ldr	r3, [r4, #8]
 800a76c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a770:	f108 0601 	add.w	r6, r8, #1
 800a774:	42b3      	cmp	r3, r6
 800a776:	db0b      	blt.n	800a790 <__lshift+0x38>
 800a778:	4638      	mov	r0, r7
 800a77a:	f7ff fd95 	bl	800a2a8 <_Balloc>
 800a77e:	4605      	mov	r5, r0
 800a780:	b948      	cbnz	r0, 800a796 <__lshift+0x3e>
 800a782:	4602      	mov	r2, r0
 800a784:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a788:	4b27      	ldr	r3, [pc, #156]	; (800a828 <__lshift+0xd0>)
 800a78a:	4828      	ldr	r0, [pc, #160]	; (800a82c <__lshift+0xd4>)
 800a78c:	f001 fb0a 	bl	800bda4 <__assert_func>
 800a790:	3101      	adds	r1, #1
 800a792:	005b      	lsls	r3, r3, #1
 800a794:	e7ee      	b.n	800a774 <__lshift+0x1c>
 800a796:	2300      	movs	r3, #0
 800a798:	f100 0114 	add.w	r1, r0, #20
 800a79c:	f100 0210 	add.w	r2, r0, #16
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	4553      	cmp	r3, sl
 800a7a4:	db33      	blt.n	800a80e <__lshift+0xb6>
 800a7a6:	6920      	ldr	r0, [r4, #16]
 800a7a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a7ac:	f104 0314 	add.w	r3, r4, #20
 800a7b0:	f019 091f 	ands.w	r9, r9, #31
 800a7b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a7b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a7bc:	d02b      	beq.n	800a816 <__lshift+0xbe>
 800a7be:	468a      	mov	sl, r1
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f1c9 0e20 	rsb	lr, r9, #32
 800a7c6:	6818      	ldr	r0, [r3, #0]
 800a7c8:	fa00 f009 	lsl.w	r0, r0, r9
 800a7cc:	4310      	orrs	r0, r2
 800a7ce:	f84a 0b04 	str.w	r0, [sl], #4
 800a7d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7d6:	459c      	cmp	ip, r3
 800a7d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a7dc:	d8f3      	bhi.n	800a7c6 <__lshift+0x6e>
 800a7de:	ebac 0304 	sub.w	r3, ip, r4
 800a7e2:	3b15      	subs	r3, #21
 800a7e4:	f023 0303 	bic.w	r3, r3, #3
 800a7e8:	3304      	adds	r3, #4
 800a7ea:	f104 0015 	add.w	r0, r4, #21
 800a7ee:	4584      	cmp	ip, r0
 800a7f0:	bf38      	it	cc
 800a7f2:	2304      	movcc	r3, #4
 800a7f4:	50ca      	str	r2, [r1, r3]
 800a7f6:	b10a      	cbz	r2, 800a7fc <__lshift+0xa4>
 800a7f8:	f108 0602 	add.w	r6, r8, #2
 800a7fc:	3e01      	subs	r6, #1
 800a7fe:	4638      	mov	r0, r7
 800a800:	4621      	mov	r1, r4
 800a802:	612e      	str	r6, [r5, #16]
 800a804:	f7ff fd90 	bl	800a328 <_Bfree>
 800a808:	4628      	mov	r0, r5
 800a80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a80e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a812:	3301      	adds	r3, #1
 800a814:	e7c5      	b.n	800a7a2 <__lshift+0x4a>
 800a816:	3904      	subs	r1, #4
 800a818:	f853 2b04 	ldr.w	r2, [r3], #4
 800a81c:	459c      	cmp	ip, r3
 800a81e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a822:	d8f9      	bhi.n	800a818 <__lshift+0xc0>
 800a824:	e7ea      	b.n	800a7fc <__lshift+0xa4>
 800a826:	bf00      	nop
 800a828:	0800f9b7 	.word	0x0800f9b7
 800a82c:	0800f9c8 	.word	0x0800f9c8

0800a830 <__mcmp>:
 800a830:	4603      	mov	r3, r0
 800a832:	690a      	ldr	r2, [r1, #16]
 800a834:	6900      	ldr	r0, [r0, #16]
 800a836:	b530      	push	{r4, r5, lr}
 800a838:	1a80      	subs	r0, r0, r2
 800a83a:	d10d      	bne.n	800a858 <__mcmp+0x28>
 800a83c:	3314      	adds	r3, #20
 800a83e:	3114      	adds	r1, #20
 800a840:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a844:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a848:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a84c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a850:	4295      	cmp	r5, r2
 800a852:	d002      	beq.n	800a85a <__mcmp+0x2a>
 800a854:	d304      	bcc.n	800a860 <__mcmp+0x30>
 800a856:	2001      	movs	r0, #1
 800a858:	bd30      	pop	{r4, r5, pc}
 800a85a:	42a3      	cmp	r3, r4
 800a85c:	d3f4      	bcc.n	800a848 <__mcmp+0x18>
 800a85e:	e7fb      	b.n	800a858 <__mcmp+0x28>
 800a860:	f04f 30ff 	mov.w	r0, #4294967295
 800a864:	e7f8      	b.n	800a858 <__mcmp+0x28>
	...

0800a868 <__mdiff>:
 800a868:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a86c:	460d      	mov	r5, r1
 800a86e:	4607      	mov	r7, r0
 800a870:	4611      	mov	r1, r2
 800a872:	4628      	mov	r0, r5
 800a874:	4614      	mov	r4, r2
 800a876:	f7ff ffdb 	bl	800a830 <__mcmp>
 800a87a:	1e06      	subs	r6, r0, #0
 800a87c:	d111      	bne.n	800a8a2 <__mdiff+0x3a>
 800a87e:	4631      	mov	r1, r6
 800a880:	4638      	mov	r0, r7
 800a882:	f7ff fd11 	bl	800a2a8 <_Balloc>
 800a886:	4602      	mov	r2, r0
 800a888:	b928      	cbnz	r0, 800a896 <__mdiff+0x2e>
 800a88a:	f240 2137 	movw	r1, #567	; 0x237
 800a88e:	4b3a      	ldr	r3, [pc, #232]	; (800a978 <__mdiff+0x110>)
 800a890:	483a      	ldr	r0, [pc, #232]	; (800a97c <__mdiff+0x114>)
 800a892:	f001 fa87 	bl	800bda4 <__assert_func>
 800a896:	2301      	movs	r3, #1
 800a898:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a89c:	4610      	mov	r0, r2
 800a89e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8a2:	bfa4      	itt	ge
 800a8a4:	4623      	movge	r3, r4
 800a8a6:	462c      	movge	r4, r5
 800a8a8:	4638      	mov	r0, r7
 800a8aa:	6861      	ldr	r1, [r4, #4]
 800a8ac:	bfa6      	itte	ge
 800a8ae:	461d      	movge	r5, r3
 800a8b0:	2600      	movge	r6, #0
 800a8b2:	2601      	movlt	r6, #1
 800a8b4:	f7ff fcf8 	bl	800a2a8 <_Balloc>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	b918      	cbnz	r0, 800a8c4 <__mdiff+0x5c>
 800a8bc:	f240 2145 	movw	r1, #581	; 0x245
 800a8c0:	4b2d      	ldr	r3, [pc, #180]	; (800a978 <__mdiff+0x110>)
 800a8c2:	e7e5      	b.n	800a890 <__mdiff+0x28>
 800a8c4:	f102 0814 	add.w	r8, r2, #20
 800a8c8:	46c2      	mov	sl, r8
 800a8ca:	f04f 0c00 	mov.w	ip, #0
 800a8ce:	6927      	ldr	r7, [r4, #16]
 800a8d0:	60c6      	str	r6, [r0, #12]
 800a8d2:	692e      	ldr	r6, [r5, #16]
 800a8d4:	f104 0014 	add.w	r0, r4, #20
 800a8d8:	f105 0914 	add.w	r9, r5, #20
 800a8dc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a8e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a8e4:	3410      	adds	r4, #16
 800a8e6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a8ea:	f859 3b04 	ldr.w	r3, [r9], #4
 800a8ee:	fa1f f18b 	uxth.w	r1, fp
 800a8f2:	4461      	add	r1, ip
 800a8f4:	fa1f fc83 	uxth.w	ip, r3
 800a8f8:	0c1b      	lsrs	r3, r3, #16
 800a8fa:	eba1 010c 	sub.w	r1, r1, ip
 800a8fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a902:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a906:	b289      	uxth	r1, r1
 800a908:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800a90c:	454e      	cmp	r6, r9
 800a90e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a912:	f84a 1b04 	str.w	r1, [sl], #4
 800a916:	d8e6      	bhi.n	800a8e6 <__mdiff+0x7e>
 800a918:	1b73      	subs	r3, r6, r5
 800a91a:	3b15      	subs	r3, #21
 800a91c:	f023 0303 	bic.w	r3, r3, #3
 800a920:	3515      	adds	r5, #21
 800a922:	3304      	adds	r3, #4
 800a924:	42ae      	cmp	r6, r5
 800a926:	bf38      	it	cc
 800a928:	2304      	movcc	r3, #4
 800a92a:	4418      	add	r0, r3
 800a92c:	4443      	add	r3, r8
 800a92e:	461e      	mov	r6, r3
 800a930:	4605      	mov	r5, r0
 800a932:	4575      	cmp	r5, lr
 800a934:	d30e      	bcc.n	800a954 <__mdiff+0xec>
 800a936:	f10e 0103 	add.w	r1, lr, #3
 800a93a:	1a09      	subs	r1, r1, r0
 800a93c:	f021 0103 	bic.w	r1, r1, #3
 800a940:	3803      	subs	r0, #3
 800a942:	4586      	cmp	lr, r0
 800a944:	bf38      	it	cc
 800a946:	2100      	movcc	r1, #0
 800a948:	440b      	add	r3, r1
 800a94a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a94e:	b189      	cbz	r1, 800a974 <__mdiff+0x10c>
 800a950:	6117      	str	r7, [r2, #16]
 800a952:	e7a3      	b.n	800a89c <__mdiff+0x34>
 800a954:	f855 8b04 	ldr.w	r8, [r5], #4
 800a958:	fa1f f188 	uxth.w	r1, r8
 800a95c:	4461      	add	r1, ip
 800a95e:	140c      	asrs	r4, r1, #16
 800a960:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a964:	b289      	uxth	r1, r1
 800a966:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a96a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a96e:	f846 1b04 	str.w	r1, [r6], #4
 800a972:	e7de      	b.n	800a932 <__mdiff+0xca>
 800a974:	3f01      	subs	r7, #1
 800a976:	e7e8      	b.n	800a94a <__mdiff+0xe2>
 800a978:	0800f9b7 	.word	0x0800f9b7
 800a97c:	0800f9c8 	.word	0x0800f9c8

0800a980 <__ulp>:
 800a980:	4b0e      	ldr	r3, [pc, #56]	; (800a9bc <__ulp+0x3c>)
 800a982:	400b      	ands	r3, r1
 800a984:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a988:	2b00      	cmp	r3, #0
 800a98a:	dc08      	bgt.n	800a99e <__ulp+0x1e>
 800a98c:	425b      	negs	r3, r3
 800a98e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a992:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a996:	da04      	bge.n	800a9a2 <__ulp+0x22>
 800a998:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a99c:	4113      	asrs	r3, r2
 800a99e:	2200      	movs	r2, #0
 800a9a0:	e008      	b.n	800a9b4 <__ulp+0x34>
 800a9a2:	f1a2 0314 	sub.w	r3, r2, #20
 800a9a6:	2b1e      	cmp	r3, #30
 800a9a8:	bfd6      	itet	le
 800a9aa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a9ae:	2201      	movgt	r2, #1
 800a9b0:	40da      	lsrle	r2, r3
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	4610      	mov	r0, r2
 800a9b8:	4770      	bx	lr
 800a9ba:	bf00      	nop
 800a9bc:	7ff00000 	.word	0x7ff00000

0800a9c0 <__b2d>:
 800a9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9c2:	6905      	ldr	r5, [r0, #16]
 800a9c4:	f100 0714 	add.w	r7, r0, #20
 800a9c8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a9cc:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a9d0:	1f2e      	subs	r6, r5, #4
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f7ff fd5a 	bl	800a48c <__hi0bits>
 800a9d8:	f1c0 0220 	rsb	r2, r0, #32
 800a9dc:	280a      	cmp	r0, #10
 800a9de:	4603      	mov	r3, r0
 800a9e0:	f8df c068 	ldr.w	ip, [pc, #104]	; 800aa4c <__b2d+0x8c>
 800a9e4:	600a      	str	r2, [r1, #0]
 800a9e6:	dc12      	bgt.n	800aa0e <__b2d+0x4e>
 800a9e8:	f1c0 0e0b 	rsb	lr, r0, #11
 800a9ec:	fa24 f20e 	lsr.w	r2, r4, lr
 800a9f0:	42b7      	cmp	r7, r6
 800a9f2:	ea42 010c 	orr.w	r1, r2, ip
 800a9f6:	bf2c      	ite	cs
 800a9f8:	2200      	movcs	r2, #0
 800a9fa:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800a9fe:	3315      	adds	r3, #21
 800aa00:	fa04 f303 	lsl.w	r3, r4, r3
 800aa04:	fa22 f20e 	lsr.w	r2, r2, lr
 800aa08:	431a      	orrs	r2, r3
 800aa0a:	4610      	mov	r0, r2
 800aa0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa0e:	42b7      	cmp	r7, r6
 800aa10:	bf2e      	itee	cs
 800aa12:	2200      	movcs	r2, #0
 800aa14:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800aa18:	f1a5 0608 	subcc.w	r6, r5, #8
 800aa1c:	3b0b      	subs	r3, #11
 800aa1e:	d012      	beq.n	800aa46 <__b2d+0x86>
 800aa20:	f1c3 0520 	rsb	r5, r3, #32
 800aa24:	fa22 f105 	lsr.w	r1, r2, r5
 800aa28:	409c      	lsls	r4, r3
 800aa2a:	430c      	orrs	r4, r1
 800aa2c:	42be      	cmp	r6, r7
 800aa2e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800aa32:	bf94      	ite	ls
 800aa34:	2400      	movls	r4, #0
 800aa36:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800aa3a:	409a      	lsls	r2, r3
 800aa3c:	40ec      	lsrs	r4, r5
 800aa3e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800aa42:	4322      	orrs	r2, r4
 800aa44:	e7e1      	b.n	800aa0a <__b2d+0x4a>
 800aa46:	ea44 010c 	orr.w	r1, r4, ip
 800aa4a:	e7de      	b.n	800aa0a <__b2d+0x4a>
 800aa4c:	3ff00000 	.word	0x3ff00000

0800aa50 <__d2b>:
 800aa50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa52:	2101      	movs	r1, #1
 800aa54:	4617      	mov	r7, r2
 800aa56:	461c      	mov	r4, r3
 800aa58:	9e08      	ldr	r6, [sp, #32]
 800aa5a:	f7ff fc25 	bl	800a2a8 <_Balloc>
 800aa5e:	4605      	mov	r5, r0
 800aa60:	b930      	cbnz	r0, 800aa70 <__d2b+0x20>
 800aa62:	4602      	mov	r2, r0
 800aa64:	f240 310f 	movw	r1, #783	; 0x30f
 800aa68:	4b22      	ldr	r3, [pc, #136]	; (800aaf4 <__d2b+0xa4>)
 800aa6a:	4823      	ldr	r0, [pc, #140]	; (800aaf8 <__d2b+0xa8>)
 800aa6c:	f001 f99a 	bl	800bda4 <__assert_func>
 800aa70:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800aa74:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800aa78:	bb24      	cbnz	r4, 800aac4 <__d2b+0x74>
 800aa7a:	2f00      	cmp	r7, #0
 800aa7c:	9301      	str	r3, [sp, #4]
 800aa7e:	d026      	beq.n	800aace <__d2b+0x7e>
 800aa80:	4668      	mov	r0, sp
 800aa82:	9700      	str	r7, [sp, #0]
 800aa84:	f7ff fd22 	bl	800a4cc <__lo0bits>
 800aa88:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aa8c:	b1e8      	cbz	r0, 800aaca <__d2b+0x7a>
 800aa8e:	f1c0 0320 	rsb	r3, r0, #32
 800aa92:	fa02 f303 	lsl.w	r3, r2, r3
 800aa96:	430b      	orrs	r3, r1
 800aa98:	40c2      	lsrs	r2, r0
 800aa9a:	616b      	str	r3, [r5, #20]
 800aa9c:	9201      	str	r2, [sp, #4]
 800aa9e:	9b01      	ldr	r3, [sp, #4]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	bf14      	ite	ne
 800aaa4:	2102      	movne	r1, #2
 800aaa6:	2101      	moveq	r1, #1
 800aaa8:	61ab      	str	r3, [r5, #24]
 800aaaa:	6129      	str	r1, [r5, #16]
 800aaac:	b1bc      	cbz	r4, 800aade <__d2b+0x8e>
 800aaae:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800aab2:	4404      	add	r4, r0
 800aab4:	6034      	str	r4, [r6, #0]
 800aab6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aaba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aabc:	6018      	str	r0, [r3, #0]
 800aabe:	4628      	mov	r0, r5
 800aac0:	b003      	add	sp, #12
 800aac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aac4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aac8:	e7d7      	b.n	800aa7a <__d2b+0x2a>
 800aaca:	6169      	str	r1, [r5, #20]
 800aacc:	e7e7      	b.n	800aa9e <__d2b+0x4e>
 800aace:	a801      	add	r0, sp, #4
 800aad0:	f7ff fcfc 	bl	800a4cc <__lo0bits>
 800aad4:	9b01      	ldr	r3, [sp, #4]
 800aad6:	2101      	movs	r1, #1
 800aad8:	616b      	str	r3, [r5, #20]
 800aada:	3020      	adds	r0, #32
 800aadc:	e7e5      	b.n	800aaaa <__d2b+0x5a>
 800aade:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aae2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800aae6:	6030      	str	r0, [r6, #0]
 800aae8:	6918      	ldr	r0, [r3, #16]
 800aaea:	f7ff fccf 	bl	800a48c <__hi0bits>
 800aaee:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800aaf2:	e7e2      	b.n	800aaba <__d2b+0x6a>
 800aaf4:	0800f9b7 	.word	0x0800f9b7
 800aaf8:	0800f9c8 	.word	0x0800f9c8

0800aafc <__ratio>:
 800aafc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab00:	4688      	mov	r8, r1
 800ab02:	4669      	mov	r1, sp
 800ab04:	4681      	mov	r9, r0
 800ab06:	f7ff ff5b 	bl	800a9c0 <__b2d>
 800ab0a:	460f      	mov	r7, r1
 800ab0c:	4604      	mov	r4, r0
 800ab0e:	460d      	mov	r5, r1
 800ab10:	4640      	mov	r0, r8
 800ab12:	a901      	add	r1, sp, #4
 800ab14:	f7ff ff54 	bl	800a9c0 <__b2d>
 800ab18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab1c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ab20:	468b      	mov	fp, r1
 800ab22:	eba3 0c02 	sub.w	ip, r3, r2
 800ab26:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ab2a:	1a9b      	subs	r3, r3, r2
 800ab2c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	bfd5      	itete	le
 800ab34:	460a      	movle	r2, r1
 800ab36:	462a      	movgt	r2, r5
 800ab38:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ab3c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ab40:	bfd8      	it	le
 800ab42:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ab46:	465b      	mov	r3, fp
 800ab48:	4602      	mov	r2, r0
 800ab4a:	4639      	mov	r1, r7
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f7f5 fded 	bl	800072c <__aeabi_ddiv>
 800ab52:	b003      	add	sp, #12
 800ab54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab58 <__copybits>:
 800ab58:	3901      	subs	r1, #1
 800ab5a:	b570      	push	{r4, r5, r6, lr}
 800ab5c:	1149      	asrs	r1, r1, #5
 800ab5e:	6914      	ldr	r4, [r2, #16]
 800ab60:	3101      	adds	r1, #1
 800ab62:	f102 0314 	add.w	r3, r2, #20
 800ab66:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ab6a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ab6e:	1f05      	subs	r5, r0, #4
 800ab70:	42a3      	cmp	r3, r4
 800ab72:	d30c      	bcc.n	800ab8e <__copybits+0x36>
 800ab74:	1aa3      	subs	r3, r4, r2
 800ab76:	3b11      	subs	r3, #17
 800ab78:	f023 0303 	bic.w	r3, r3, #3
 800ab7c:	3211      	adds	r2, #17
 800ab7e:	42a2      	cmp	r2, r4
 800ab80:	bf88      	it	hi
 800ab82:	2300      	movhi	r3, #0
 800ab84:	4418      	add	r0, r3
 800ab86:	2300      	movs	r3, #0
 800ab88:	4288      	cmp	r0, r1
 800ab8a:	d305      	bcc.n	800ab98 <__copybits+0x40>
 800ab8c:	bd70      	pop	{r4, r5, r6, pc}
 800ab8e:	f853 6b04 	ldr.w	r6, [r3], #4
 800ab92:	f845 6f04 	str.w	r6, [r5, #4]!
 800ab96:	e7eb      	b.n	800ab70 <__copybits+0x18>
 800ab98:	f840 3b04 	str.w	r3, [r0], #4
 800ab9c:	e7f4      	b.n	800ab88 <__copybits+0x30>

0800ab9e <__any_on>:
 800ab9e:	f100 0214 	add.w	r2, r0, #20
 800aba2:	6900      	ldr	r0, [r0, #16]
 800aba4:	114b      	asrs	r3, r1, #5
 800aba6:	4298      	cmp	r0, r3
 800aba8:	b510      	push	{r4, lr}
 800abaa:	db11      	blt.n	800abd0 <__any_on+0x32>
 800abac:	dd0a      	ble.n	800abc4 <__any_on+0x26>
 800abae:	f011 011f 	ands.w	r1, r1, #31
 800abb2:	d007      	beq.n	800abc4 <__any_on+0x26>
 800abb4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800abb8:	fa24 f001 	lsr.w	r0, r4, r1
 800abbc:	fa00 f101 	lsl.w	r1, r0, r1
 800abc0:	428c      	cmp	r4, r1
 800abc2:	d10b      	bne.n	800abdc <__any_on+0x3e>
 800abc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800abc8:	4293      	cmp	r3, r2
 800abca:	d803      	bhi.n	800abd4 <__any_on+0x36>
 800abcc:	2000      	movs	r0, #0
 800abce:	bd10      	pop	{r4, pc}
 800abd0:	4603      	mov	r3, r0
 800abd2:	e7f7      	b.n	800abc4 <__any_on+0x26>
 800abd4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800abd8:	2900      	cmp	r1, #0
 800abda:	d0f5      	beq.n	800abc8 <__any_on+0x2a>
 800abdc:	2001      	movs	r0, #1
 800abde:	e7f6      	b.n	800abce <__any_on+0x30>

0800abe0 <sulp>:
 800abe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abe4:	460f      	mov	r7, r1
 800abe6:	4690      	mov	r8, r2
 800abe8:	f7ff feca 	bl	800a980 <__ulp>
 800abec:	4604      	mov	r4, r0
 800abee:	460d      	mov	r5, r1
 800abf0:	f1b8 0f00 	cmp.w	r8, #0
 800abf4:	d011      	beq.n	800ac1a <sulp+0x3a>
 800abf6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800abfa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	dd0b      	ble.n	800ac1a <sulp+0x3a>
 800ac02:	2400      	movs	r4, #0
 800ac04:	051b      	lsls	r3, r3, #20
 800ac06:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ac0a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ac0e:	4622      	mov	r2, r4
 800ac10:	462b      	mov	r3, r5
 800ac12:	f7f5 fc61 	bl	80004d8 <__aeabi_dmul>
 800ac16:	4604      	mov	r4, r0
 800ac18:	460d      	mov	r5, r1
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	4629      	mov	r1, r5
 800ac1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac22:	0000      	movs	r0, r0
 800ac24:	0000      	movs	r0, r0
	...

0800ac28 <_strtod_l>:
 800ac28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac2c:	b09f      	sub	sp, #124	; 0x7c
 800ac2e:	9217      	str	r2, [sp, #92]	; 0x5c
 800ac30:	2200      	movs	r2, #0
 800ac32:	4604      	mov	r4, r0
 800ac34:	921a      	str	r2, [sp, #104]	; 0x68
 800ac36:	460d      	mov	r5, r1
 800ac38:	f04f 0800 	mov.w	r8, #0
 800ac3c:	f04f 0900 	mov.w	r9, #0
 800ac40:	460a      	mov	r2, r1
 800ac42:	9219      	str	r2, [sp, #100]	; 0x64
 800ac44:	7811      	ldrb	r1, [r2, #0]
 800ac46:	292b      	cmp	r1, #43	; 0x2b
 800ac48:	d04a      	beq.n	800ace0 <_strtod_l+0xb8>
 800ac4a:	d838      	bhi.n	800acbe <_strtod_l+0x96>
 800ac4c:	290d      	cmp	r1, #13
 800ac4e:	d832      	bhi.n	800acb6 <_strtod_l+0x8e>
 800ac50:	2908      	cmp	r1, #8
 800ac52:	d832      	bhi.n	800acba <_strtod_l+0x92>
 800ac54:	2900      	cmp	r1, #0
 800ac56:	d03b      	beq.n	800acd0 <_strtod_l+0xa8>
 800ac58:	2200      	movs	r2, #0
 800ac5a:	920e      	str	r2, [sp, #56]	; 0x38
 800ac5c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800ac5e:	7832      	ldrb	r2, [r6, #0]
 800ac60:	2a30      	cmp	r2, #48	; 0x30
 800ac62:	f040 80b2 	bne.w	800adca <_strtod_l+0x1a2>
 800ac66:	7872      	ldrb	r2, [r6, #1]
 800ac68:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ac6c:	2a58      	cmp	r2, #88	; 0x58
 800ac6e:	d16e      	bne.n	800ad4e <_strtod_l+0x126>
 800ac70:	9302      	str	r3, [sp, #8]
 800ac72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac74:	4620      	mov	r0, r4
 800ac76:	9301      	str	r3, [sp, #4]
 800ac78:	ab1a      	add	r3, sp, #104	; 0x68
 800ac7a:	9300      	str	r3, [sp, #0]
 800ac7c:	4a8c      	ldr	r2, [pc, #560]	; (800aeb0 <_strtod_l+0x288>)
 800ac7e:	ab1b      	add	r3, sp, #108	; 0x6c
 800ac80:	a919      	add	r1, sp, #100	; 0x64
 800ac82:	f001 f929 	bl	800bed8 <__gethex>
 800ac86:	f010 070f 	ands.w	r7, r0, #15
 800ac8a:	4605      	mov	r5, r0
 800ac8c:	d005      	beq.n	800ac9a <_strtod_l+0x72>
 800ac8e:	2f06      	cmp	r7, #6
 800ac90:	d128      	bne.n	800ace4 <_strtod_l+0xbc>
 800ac92:	2300      	movs	r3, #0
 800ac94:	3601      	adds	r6, #1
 800ac96:	9619      	str	r6, [sp, #100]	; 0x64
 800ac98:	930e      	str	r3, [sp, #56]	; 0x38
 800ac9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	f040 85a0 	bne.w	800b7e2 <_strtod_l+0xbba>
 800aca2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aca4:	b1cb      	cbz	r3, 800acda <_strtod_l+0xb2>
 800aca6:	4642      	mov	r2, r8
 800aca8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800acac:	4610      	mov	r0, r2
 800acae:	4619      	mov	r1, r3
 800acb0:	b01f      	add	sp, #124	; 0x7c
 800acb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acb6:	2920      	cmp	r1, #32
 800acb8:	d1ce      	bne.n	800ac58 <_strtod_l+0x30>
 800acba:	3201      	adds	r2, #1
 800acbc:	e7c1      	b.n	800ac42 <_strtod_l+0x1a>
 800acbe:	292d      	cmp	r1, #45	; 0x2d
 800acc0:	d1ca      	bne.n	800ac58 <_strtod_l+0x30>
 800acc2:	2101      	movs	r1, #1
 800acc4:	910e      	str	r1, [sp, #56]	; 0x38
 800acc6:	1c51      	adds	r1, r2, #1
 800acc8:	9119      	str	r1, [sp, #100]	; 0x64
 800acca:	7852      	ldrb	r2, [r2, #1]
 800accc:	2a00      	cmp	r2, #0
 800acce:	d1c5      	bne.n	800ac5c <_strtod_l+0x34>
 800acd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800acd2:	9519      	str	r5, [sp, #100]	; 0x64
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f040 8582 	bne.w	800b7de <_strtod_l+0xbb6>
 800acda:	4642      	mov	r2, r8
 800acdc:	464b      	mov	r3, r9
 800acde:	e7e5      	b.n	800acac <_strtod_l+0x84>
 800ace0:	2100      	movs	r1, #0
 800ace2:	e7ef      	b.n	800acc4 <_strtod_l+0x9c>
 800ace4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ace6:	b13a      	cbz	r2, 800acf8 <_strtod_l+0xd0>
 800ace8:	2135      	movs	r1, #53	; 0x35
 800acea:	a81c      	add	r0, sp, #112	; 0x70
 800acec:	f7ff ff34 	bl	800ab58 <__copybits>
 800acf0:	4620      	mov	r0, r4
 800acf2:	991a      	ldr	r1, [sp, #104]	; 0x68
 800acf4:	f7ff fb18 	bl	800a328 <_Bfree>
 800acf8:	3f01      	subs	r7, #1
 800acfa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800acfc:	2f04      	cmp	r7, #4
 800acfe:	d806      	bhi.n	800ad0e <_strtod_l+0xe6>
 800ad00:	e8df f007 	tbb	[pc, r7]
 800ad04:	201d0314 	.word	0x201d0314
 800ad08:	14          	.byte	0x14
 800ad09:	00          	.byte	0x00
 800ad0a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800ad0e:	05e9      	lsls	r1, r5, #23
 800ad10:	bf48      	it	mi
 800ad12:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ad16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ad1a:	0d1b      	lsrs	r3, r3, #20
 800ad1c:	051b      	lsls	r3, r3, #20
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d1bb      	bne.n	800ac9a <_strtod_l+0x72>
 800ad22:	f7fe fb09 	bl	8009338 <__errno>
 800ad26:	2322      	movs	r3, #34	; 0x22
 800ad28:	6003      	str	r3, [r0, #0]
 800ad2a:	e7b6      	b.n	800ac9a <_strtod_l+0x72>
 800ad2c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ad30:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800ad34:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ad38:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ad3c:	e7e7      	b.n	800ad0e <_strtod_l+0xe6>
 800ad3e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800aeb4 <_strtod_l+0x28c>
 800ad42:	e7e4      	b.n	800ad0e <_strtod_l+0xe6>
 800ad44:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ad48:	f04f 38ff 	mov.w	r8, #4294967295
 800ad4c:	e7df      	b.n	800ad0e <_strtod_l+0xe6>
 800ad4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad50:	1c5a      	adds	r2, r3, #1
 800ad52:	9219      	str	r2, [sp, #100]	; 0x64
 800ad54:	785b      	ldrb	r3, [r3, #1]
 800ad56:	2b30      	cmp	r3, #48	; 0x30
 800ad58:	d0f9      	beq.n	800ad4e <_strtod_l+0x126>
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d09d      	beq.n	800ac9a <_strtod_l+0x72>
 800ad5e:	2301      	movs	r3, #1
 800ad60:	f04f 0a00 	mov.w	sl, #0
 800ad64:	220a      	movs	r2, #10
 800ad66:	46d3      	mov	fp, sl
 800ad68:	9305      	str	r3, [sp, #20]
 800ad6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad6c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800ad70:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad72:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ad74:	7806      	ldrb	r6, [r0, #0]
 800ad76:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ad7a:	b2d9      	uxtb	r1, r3
 800ad7c:	2909      	cmp	r1, #9
 800ad7e:	d926      	bls.n	800adce <_strtod_l+0x1a6>
 800ad80:	2201      	movs	r2, #1
 800ad82:	494d      	ldr	r1, [pc, #308]	; (800aeb8 <_strtod_l+0x290>)
 800ad84:	f000 ffe6 	bl	800bd54 <strncmp>
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	d030      	beq.n	800adee <_strtod_l+0x1c6>
 800ad8c:	2000      	movs	r0, #0
 800ad8e:	4632      	mov	r2, r6
 800ad90:	4603      	mov	r3, r0
 800ad92:	465e      	mov	r6, fp
 800ad94:	9008      	str	r0, [sp, #32]
 800ad96:	2a65      	cmp	r2, #101	; 0x65
 800ad98:	d001      	beq.n	800ad9e <_strtod_l+0x176>
 800ad9a:	2a45      	cmp	r2, #69	; 0x45
 800ad9c:	d113      	bne.n	800adc6 <_strtod_l+0x19e>
 800ad9e:	b91e      	cbnz	r6, 800ada8 <_strtod_l+0x180>
 800ada0:	9a05      	ldr	r2, [sp, #20]
 800ada2:	4302      	orrs	r2, r0
 800ada4:	d094      	beq.n	800acd0 <_strtod_l+0xa8>
 800ada6:	2600      	movs	r6, #0
 800ada8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800adaa:	1c6a      	adds	r2, r5, #1
 800adac:	9219      	str	r2, [sp, #100]	; 0x64
 800adae:	786a      	ldrb	r2, [r5, #1]
 800adb0:	2a2b      	cmp	r2, #43	; 0x2b
 800adb2:	d074      	beq.n	800ae9e <_strtod_l+0x276>
 800adb4:	2a2d      	cmp	r2, #45	; 0x2d
 800adb6:	d078      	beq.n	800aeaa <_strtod_l+0x282>
 800adb8:	f04f 0c00 	mov.w	ip, #0
 800adbc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800adc0:	2909      	cmp	r1, #9
 800adc2:	d97f      	bls.n	800aec4 <_strtod_l+0x29c>
 800adc4:	9519      	str	r5, [sp, #100]	; 0x64
 800adc6:	2700      	movs	r7, #0
 800adc8:	e09e      	b.n	800af08 <_strtod_l+0x2e0>
 800adca:	2300      	movs	r3, #0
 800adcc:	e7c8      	b.n	800ad60 <_strtod_l+0x138>
 800adce:	f1bb 0f08 	cmp.w	fp, #8
 800add2:	bfd8      	it	le
 800add4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800add6:	f100 0001 	add.w	r0, r0, #1
 800adda:	bfd6      	itet	le
 800addc:	fb02 3301 	mlale	r3, r2, r1, r3
 800ade0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ade4:	930a      	strle	r3, [sp, #40]	; 0x28
 800ade6:	f10b 0b01 	add.w	fp, fp, #1
 800adea:	9019      	str	r0, [sp, #100]	; 0x64
 800adec:	e7c1      	b.n	800ad72 <_strtod_l+0x14a>
 800adee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800adf0:	1c5a      	adds	r2, r3, #1
 800adf2:	9219      	str	r2, [sp, #100]	; 0x64
 800adf4:	785a      	ldrb	r2, [r3, #1]
 800adf6:	f1bb 0f00 	cmp.w	fp, #0
 800adfa:	d037      	beq.n	800ae6c <_strtod_l+0x244>
 800adfc:	465e      	mov	r6, fp
 800adfe:	9008      	str	r0, [sp, #32]
 800ae00:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ae04:	2b09      	cmp	r3, #9
 800ae06:	d912      	bls.n	800ae2e <_strtod_l+0x206>
 800ae08:	2301      	movs	r3, #1
 800ae0a:	e7c4      	b.n	800ad96 <_strtod_l+0x16e>
 800ae0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ae0e:	3001      	adds	r0, #1
 800ae10:	1c5a      	adds	r2, r3, #1
 800ae12:	9219      	str	r2, [sp, #100]	; 0x64
 800ae14:	785a      	ldrb	r2, [r3, #1]
 800ae16:	2a30      	cmp	r2, #48	; 0x30
 800ae18:	d0f8      	beq.n	800ae0c <_strtod_l+0x1e4>
 800ae1a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ae1e:	2b08      	cmp	r3, #8
 800ae20:	f200 84e4 	bhi.w	800b7ec <_strtod_l+0xbc4>
 800ae24:	9008      	str	r0, [sp, #32]
 800ae26:	2000      	movs	r0, #0
 800ae28:	4606      	mov	r6, r0
 800ae2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ae2c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae2e:	3a30      	subs	r2, #48	; 0x30
 800ae30:	f100 0301 	add.w	r3, r0, #1
 800ae34:	d014      	beq.n	800ae60 <_strtod_l+0x238>
 800ae36:	9908      	ldr	r1, [sp, #32]
 800ae38:	eb00 0c06 	add.w	ip, r0, r6
 800ae3c:	4419      	add	r1, r3
 800ae3e:	9108      	str	r1, [sp, #32]
 800ae40:	4633      	mov	r3, r6
 800ae42:	210a      	movs	r1, #10
 800ae44:	4563      	cmp	r3, ip
 800ae46:	d113      	bne.n	800ae70 <_strtod_l+0x248>
 800ae48:	1833      	adds	r3, r6, r0
 800ae4a:	2b08      	cmp	r3, #8
 800ae4c:	f106 0601 	add.w	r6, r6, #1
 800ae50:	4406      	add	r6, r0
 800ae52:	dc1a      	bgt.n	800ae8a <_strtod_l+0x262>
 800ae54:	230a      	movs	r3, #10
 800ae56:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ae58:	fb03 2301 	mla	r3, r3, r1, r2
 800ae5c:	930a      	str	r3, [sp, #40]	; 0x28
 800ae5e:	2300      	movs	r3, #0
 800ae60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ae62:	4618      	mov	r0, r3
 800ae64:	1c51      	adds	r1, r2, #1
 800ae66:	9119      	str	r1, [sp, #100]	; 0x64
 800ae68:	7852      	ldrb	r2, [r2, #1]
 800ae6a:	e7c9      	b.n	800ae00 <_strtod_l+0x1d8>
 800ae6c:	4658      	mov	r0, fp
 800ae6e:	e7d2      	b.n	800ae16 <_strtod_l+0x1ee>
 800ae70:	2b08      	cmp	r3, #8
 800ae72:	f103 0301 	add.w	r3, r3, #1
 800ae76:	dc03      	bgt.n	800ae80 <_strtod_l+0x258>
 800ae78:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ae7a:	434f      	muls	r7, r1
 800ae7c:	970a      	str	r7, [sp, #40]	; 0x28
 800ae7e:	e7e1      	b.n	800ae44 <_strtod_l+0x21c>
 800ae80:	2b10      	cmp	r3, #16
 800ae82:	bfd8      	it	le
 800ae84:	fb01 fa0a 	mulle.w	sl, r1, sl
 800ae88:	e7dc      	b.n	800ae44 <_strtod_l+0x21c>
 800ae8a:	2e10      	cmp	r6, #16
 800ae8c:	bfdc      	itt	le
 800ae8e:	230a      	movle	r3, #10
 800ae90:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800ae94:	e7e3      	b.n	800ae5e <_strtod_l+0x236>
 800ae96:	2300      	movs	r3, #0
 800ae98:	9308      	str	r3, [sp, #32]
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e780      	b.n	800ada0 <_strtod_l+0x178>
 800ae9e:	f04f 0c00 	mov.w	ip, #0
 800aea2:	1caa      	adds	r2, r5, #2
 800aea4:	9219      	str	r2, [sp, #100]	; 0x64
 800aea6:	78aa      	ldrb	r2, [r5, #2]
 800aea8:	e788      	b.n	800adbc <_strtod_l+0x194>
 800aeaa:	f04f 0c01 	mov.w	ip, #1
 800aeae:	e7f8      	b.n	800aea2 <_strtod_l+0x27a>
 800aeb0:	0800fb28 	.word	0x0800fb28
 800aeb4:	7ff00000 	.word	0x7ff00000
 800aeb8:	0800fb24 	.word	0x0800fb24
 800aebc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800aebe:	1c51      	adds	r1, r2, #1
 800aec0:	9119      	str	r1, [sp, #100]	; 0x64
 800aec2:	7852      	ldrb	r2, [r2, #1]
 800aec4:	2a30      	cmp	r2, #48	; 0x30
 800aec6:	d0f9      	beq.n	800aebc <_strtod_l+0x294>
 800aec8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800aecc:	2908      	cmp	r1, #8
 800aece:	f63f af7a 	bhi.w	800adc6 <_strtod_l+0x19e>
 800aed2:	3a30      	subs	r2, #48	; 0x30
 800aed4:	9209      	str	r2, [sp, #36]	; 0x24
 800aed6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800aed8:	920c      	str	r2, [sp, #48]	; 0x30
 800aeda:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800aedc:	1c57      	adds	r7, r2, #1
 800aede:	9719      	str	r7, [sp, #100]	; 0x64
 800aee0:	7852      	ldrb	r2, [r2, #1]
 800aee2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800aee6:	f1be 0f09 	cmp.w	lr, #9
 800aeea:	d938      	bls.n	800af5e <_strtod_l+0x336>
 800aeec:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aeee:	1a7f      	subs	r7, r7, r1
 800aef0:	2f08      	cmp	r7, #8
 800aef2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800aef6:	dc03      	bgt.n	800af00 <_strtod_l+0x2d8>
 800aef8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aefa:	428f      	cmp	r7, r1
 800aefc:	bfa8      	it	ge
 800aefe:	460f      	movge	r7, r1
 800af00:	f1bc 0f00 	cmp.w	ip, #0
 800af04:	d000      	beq.n	800af08 <_strtod_l+0x2e0>
 800af06:	427f      	negs	r7, r7
 800af08:	2e00      	cmp	r6, #0
 800af0a:	d14f      	bne.n	800afac <_strtod_l+0x384>
 800af0c:	9905      	ldr	r1, [sp, #20]
 800af0e:	4301      	orrs	r1, r0
 800af10:	f47f aec3 	bne.w	800ac9a <_strtod_l+0x72>
 800af14:	2b00      	cmp	r3, #0
 800af16:	f47f aedb 	bne.w	800acd0 <_strtod_l+0xa8>
 800af1a:	2a69      	cmp	r2, #105	; 0x69
 800af1c:	d029      	beq.n	800af72 <_strtod_l+0x34a>
 800af1e:	dc26      	bgt.n	800af6e <_strtod_l+0x346>
 800af20:	2a49      	cmp	r2, #73	; 0x49
 800af22:	d026      	beq.n	800af72 <_strtod_l+0x34a>
 800af24:	2a4e      	cmp	r2, #78	; 0x4e
 800af26:	f47f aed3 	bne.w	800acd0 <_strtod_l+0xa8>
 800af2a:	499a      	ldr	r1, [pc, #616]	; (800b194 <_strtod_l+0x56c>)
 800af2c:	a819      	add	r0, sp, #100	; 0x64
 800af2e:	f001 fa15 	bl	800c35c <__match>
 800af32:	2800      	cmp	r0, #0
 800af34:	f43f aecc 	beq.w	800acd0 <_strtod_l+0xa8>
 800af38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	2b28      	cmp	r3, #40	; 0x28
 800af3e:	d12f      	bne.n	800afa0 <_strtod_l+0x378>
 800af40:	4995      	ldr	r1, [pc, #596]	; (800b198 <_strtod_l+0x570>)
 800af42:	aa1c      	add	r2, sp, #112	; 0x70
 800af44:	a819      	add	r0, sp, #100	; 0x64
 800af46:	f001 fa1d 	bl	800c384 <__hexnan>
 800af4a:	2805      	cmp	r0, #5
 800af4c:	d128      	bne.n	800afa0 <_strtod_l+0x378>
 800af4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800af50:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800af54:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800af58:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800af5c:	e69d      	b.n	800ac9a <_strtod_l+0x72>
 800af5e:	210a      	movs	r1, #10
 800af60:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800af62:	fb01 2107 	mla	r1, r1, r7, r2
 800af66:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800af6a:	9209      	str	r2, [sp, #36]	; 0x24
 800af6c:	e7b5      	b.n	800aeda <_strtod_l+0x2b2>
 800af6e:	2a6e      	cmp	r2, #110	; 0x6e
 800af70:	e7d9      	b.n	800af26 <_strtod_l+0x2fe>
 800af72:	498a      	ldr	r1, [pc, #552]	; (800b19c <_strtod_l+0x574>)
 800af74:	a819      	add	r0, sp, #100	; 0x64
 800af76:	f001 f9f1 	bl	800c35c <__match>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	f43f aea8 	beq.w	800acd0 <_strtod_l+0xa8>
 800af80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af82:	4987      	ldr	r1, [pc, #540]	; (800b1a0 <_strtod_l+0x578>)
 800af84:	3b01      	subs	r3, #1
 800af86:	a819      	add	r0, sp, #100	; 0x64
 800af88:	9319      	str	r3, [sp, #100]	; 0x64
 800af8a:	f001 f9e7 	bl	800c35c <__match>
 800af8e:	b910      	cbnz	r0, 800af96 <_strtod_l+0x36e>
 800af90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af92:	3301      	adds	r3, #1
 800af94:	9319      	str	r3, [sp, #100]	; 0x64
 800af96:	f04f 0800 	mov.w	r8, #0
 800af9a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800b1a4 <_strtod_l+0x57c>
 800af9e:	e67c      	b.n	800ac9a <_strtod_l+0x72>
 800afa0:	4881      	ldr	r0, [pc, #516]	; (800b1a8 <_strtod_l+0x580>)
 800afa2:	f000 fef9 	bl	800bd98 <nan>
 800afa6:	4680      	mov	r8, r0
 800afa8:	4689      	mov	r9, r1
 800afaa:	e676      	b.n	800ac9a <_strtod_l+0x72>
 800afac:	9b08      	ldr	r3, [sp, #32]
 800afae:	f1bb 0f00 	cmp.w	fp, #0
 800afb2:	bf08      	it	eq
 800afb4:	46b3      	moveq	fp, r6
 800afb6:	1afb      	subs	r3, r7, r3
 800afb8:	2e10      	cmp	r6, #16
 800afba:	980a      	ldr	r0, [sp, #40]	; 0x28
 800afbc:	4635      	mov	r5, r6
 800afbe:	9309      	str	r3, [sp, #36]	; 0x24
 800afc0:	bfa8      	it	ge
 800afc2:	2510      	movge	r5, #16
 800afc4:	f7f5 fa0e 	bl	80003e4 <__aeabi_ui2d>
 800afc8:	2e09      	cmp	r6, #9
 800afca:	4680      	mov	r8, r0
 800afcc:	4689      	mov	r9, r1
 800afce:	dd13      	ble.n	800aff8 <_strtod_l+0x3d0>
 800afd0:	4b76      	ldr	r3, [pc, #472]	; (800b1ac <_strtod_l+0x584>)
 800afd2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800afd6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800afda:	f7f5 fa7d 	bl	80004d8 <__aeabi_dmul>
 800afde:	4680      	mov	r8, r0
 800afe0:	4650      	mov	r0, sl
 800afe2:	4689      	mov	r9, r1
 800afe4:	f7f5 f9fe 	bl	80003e4 <__aeabi_ui2d>
 800afe8:	4602      	mov	r2, r0
 800afea:	460b      	mov	r3, r1
 800afec:	4640      	mov	r0, r8
 800afee:	4649      	mov	r1, r9
 800aff0:	f7f5 f8bc 	bl	800016c <__adddf3>
 800aff4:	4680      	mov	r8, r0
 800aff6:	4689      	mov	r9, r1
 800aff8:	2e0f      	cmp	r6, #15
 800affa:	dc36      	bgt.n	800b06a <_strtod_l+0x442>
 800affc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800affe:	2b00      	cmp	r3, #0
 800b000:	f43f ae4b 	beq.w	800ac9a <_strtod_l+0x72>
 800b004:	dd22      	ble.n	800b04c <_strtod_l+0x424>
 800b006:	2b16      	cmp	r3, #22
 800b008:	dc09      	bgt.n	800b01e <_strtod_l+0x3f6>
 800b00a:	4968      	ldr	r1, [pc, #416]	; (800b1ac <_strtod_l+0x584>)
 800b00c:	4642      	mov	r2, r8
 800b00e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b012:	464b      	mov	r3, r9
 800b014:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b018:	f7f5 fa5e 	bl	80004d8 <__aeabi_dmul>
 800b01c:	e7c3      	b.n	800afa6 <_strtod_l+0x37e>
 800b01e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b020:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b024:	4293      	cmp	r3, r2
 800b026:	db20      	blt.n	800b06a <_strtod_l+0x442>
 800b028:	4c60      	ldr	r4, [pc, #384]	; (800b1ac <_strtod_l+0x584>)
 800b02a:	f1c6 060f 	rsb	r6, r6, #15
 800b02e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b032:	4642      	mov	r2, r8
 800b034:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b038:	464b      	mov	r3, r9
 800b03a:	f7f5 fa4d 	bl	80004d8 <__aeabi_dmul>
 800b03e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b040:	1b9e      	subs	r6, r3, r6
 800b042:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b046:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b04a:	e7e5      	b.n	800b018 <_strtod_l+0x3f0>
 800b04c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b04e:	3316      	adds	r3, #22
 800b050:	db0b      	blt.n	800b06a <_strtod_l+0x442>
 800b052:	9b08      	ldr	r3, [sp, #32]
 800b054:	4640      	mov	r0, r8
 800b056:	1bdf      	subs	r7, r3, r7
 800b058:	4b54      	ldr	r3, [pc, #336]	; (800b1ac <_strtod_l+0x584>)
 800b05a:	4649      	mov	r1, r9
 800b05c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b060:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b064:	f7f5 fb62 	bl	800072c <__aeabi_ddiv>
 800b068:	e79d      	b.n	800afa6 <_strtod_l+0x37e>
 800b06a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b06c:	1b75      	subs	r5, r6, r5
 800b06e:	441d      	add	r5, r3
 800b070:	2d00      	cmp	r5, #0
 800b072:	dd70      	ble.n	800b156 <_strtod_l+0x52e>
 800b074:	f015 030f 	ands.w	r3, r5, #15
 800b078:	d00a      	beq.n	800b090 <_strtod_l+0x468>
 800b07a:	494c      	ldr	r1, [pc, #304]	; (800b1ac <_strtod_l+0x584>)
 800b07c:	4642      	mov	r2, r8
 800b07e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b082:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b086:	464b      	mov	r3, r9
 800b088:	f7f5 fa26 	bl	80004d8 <__aeabi_dmul>
 800b08c:	4680      	mov	r8, r0
 800b08e:	4689      	mov	r9, r1
 800b090:	f035 050f 	bics.w	r5, r5, #15
 800b094:	d04d      	beq.n	800b132 <_strtod_l+0x50a>
 800b096:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b09a:	dd22      	ble.n	800b0e2 <_strtod_l+0x4ba>
 800b09c:	2600      	movs	r6, #0
 800b09e:	46b3      	mov	fp, r6
 800b0a0:	960b      	str	r6, [sp, #44]	; 0x2c
 800b0a2:	9608      	str	r6, [sp, #32]
 800b0a4:	2322      	movs	r3, #34	; 0x22
 800b0a6:	f04f 0800 	mov.w	r8, #0
 800b0aa:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800b1a4 <_strtod_l+0x57c>
 800b0ae:	6023      	str	r3, [r4, #0]
 800b0b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	f43f adf1 	beq.w	800ac9a <_strtod_l+0x72>
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b0bc:	f7ff f934 	bl	800a328 <_Bfree>
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	9908      	ldr	r1, [sp, #32]
 800b0c4:	f7ff f930 	bl	800a328 <_Bfree>
 800b0c8:	4659      	mov	r1, fp
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	f7ff f92c 	bl	800a328 <_Bfree>
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0d4:	f7ff f928 	bl	800a328 <_Bfree>
 800b0d8:	4631      	mov	r1, r6
 800b0da:	4620      	mov	r0, r4
 800b0dc:	f7ff f924 	bl	800a328 <_Bfree>
 800b0e0:	e5db      	b.n	800ac9a <_strtod_l+0x72>
 800b0e2:	4b33      	ldr	r3, [pc, #204]	; (800b1b0 <_strtod_l+0x588>)
 800b0e4:	4640      	mov	r0, r8
 800b0e6:	9305      	str	r3, [sp, #20]
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	4649      	mov	r1, r9
 800b0ec:	469a      	mov	sl, r3
 800b0ee:	112d      	asrs	r5, r5, #4
 800b0f0:	2d01      	cmp	r5, #1
 800b0f2:	dc21      	bgt.n	800b138 <_strtod_l+0x510>
 800b0f4:	b10b      	cbz	r3, 800b0fa <_strtod_l+0x4d2>
 800b0f6:	4680      	mov	r8, r0
 800b0f8:	4689      	mov	r9, r1
 800b0fa:	492d      	ldr	r1, [pc, #180]	; (800b1b0 <_strtod_l+0x588>)
 800b0fc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b100:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b104:	4642      	mov	r2, r8
 800b106:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b10a:	464b      	mov	r3, r9
 800b10c:	f7f5 f9e4 	bl	80004d8 <__aeabi_dmul>
 800b110:	4b24      	ldr	r3, [pc, #144]	; (800b1a4 <_strtod_l+0x57c>)
 800b112:	460a      	mov	r2, r1
 800b114:	400b      	ands	r3, r1
 800b116:	4927      	ldr	r1, [pc, #156]	; (800b1b4 <_strtod_l+0x58c>)
 800b118:	4680      	mov	r8, r0
 800b11a:	428b      	cmp	r3, r1
 800b11c:	d8be      	bhi.n	800b09c <_strtod_l+0x474>
 800b11e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b122:	428b      	cmp	r3, r1
 800b124:	bf86      	itte	hi
 800b126:	f04f 38ff 	movhi.w	r8, #4294967295
 800b12a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800b1b8 <_strtod_l+0x590>
 800b12e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b132:	2300      	movs	r3, #0
 800b134:	9305      	str	r3, [sp, #20]
 800b136:	e07b      	b.n	800b230 <_strtod_l+0x608>
 800b138:	07ea      	lsls	r2, r5, #31
 800b13a:	d505      	bpl.n	800b148 <_strtod_l+0x520>
 800b13c:	9b05      	ldr	r3, [sp, #20]
 800b13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b142:	f7f5 f9c9 	bl	80004d8 <__aeabi_dmul>
 800b146:	2301      	movs	r3, #1
 800b148:	9a05      	ldr	r2, [sp, #20]
 800b14a:	f10a 0a01 	add.w	sl, sl, #1
 800b14e:	3208      	adds	r2, #8
 800b150:	106d      	asrs	r5, r5, #1
 800b152:	9205      	str	r2, [sp, #20]
 800b154:	e7cc      	b.n	800b0f0 <_strtod_l+0x4c8>
 800b156:	d0ec      	beq.n	800b132 <_strtod_l+0x50a>
 800b158:	426d      	negs	r5, r5
 800b15a:	f015 020f 	ands.w	r2, r5, #15
 800b15e:	d00a      	beq.n	800b176 <_strtod_l+0x54e>
 800b160:	4b12      	ldr	r3, [pc, #72]	; (800b1ac <_strtod_l+0x584>)
 800b162:	4640      	mov	r0, r8
 800b164:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b168:	4649      	mov	r1, r9
 800b16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b16e:	f7f5 fadd 	bl	800072c <__aeabi_ddiv>
 800b172:	4680      	mov	r8, r0
 800b174:	4689      	mov	r9, r1
 800b176:	112d      	asrs	r5, r5, #4
 800b178:	d0db      	beq.n	800b132 <_strtod_l+0x50a>
 800b17a:	2d1f      	cmp	r5, #31
 800b17c:	dd1e      	ble.n	800b1bc <_strtod_l+0x594>
 800b17e:	2600      	movs	r6, #0
 800b180:	46b3      	mov	fp, r6
 800b182:	960b      	str	r6, [sp, #44]	; 0x2c
 800b184:	9608      	str	r6, [sp, #32]
 800b186:	2322      	movs	r3, #34	; 0x22
 800b188:	f04f 0800 	mov.w	r8, #0
 800b18c:	f04f 0900 	mov.w	r9, #0
 800b190:	6023      	str	r3, [r4, #0]
 800b192:	e78d      	b.n	800b0b0 <_strtod_l+0x488>
 800b194:	0800f90f 	.word	0x0800f90f
 800b198:	0800fb3c 	.word	0x0800fb3c
 800b19c:	0800f907 	.word	0x0800f907
 800b1a0:	0800f93e 	.word	0x0800f93e
 800b1a4:	7ff00000 	.word	0x7ff00000
 800b1a8:	0800fccd 	.word	0x0800fccd
 800b1ac:	0800fa50 	.word	0x0800fa50
 800b1b0:	0800fa28 	.word	0x0800fa28
 800b1b4:	7ca00000 	.word	0x7ca00000
 800b1b8:	7fefffff 	.word	0x7fefffff
 800b1bc:	f015 0310 	ands.w	r3, r5, #16
 800b1c0:	bf18      	it	ne
 800b1c2:	236a      	movne	r3, #106	; 0x6a
 800b1c4:	4640      	mov	r0, r8
 800b1c6:	9305      	str	r3, [sp, #20]
 800b1c8:	4649      	mov	r1, r9
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800b498 <_strtod_l+0x870>
 800b1d0:	07ea      	lsls	r2, r5, #31
 800b1d2:	d504      	bpl.n	800b1de <_strtod_l+0x5b6>
 800b1d4:	e9da 2300 	ldrd	r2, r3, [sl]
 800b1d8:	f7f5 f97e 	bl	80004d8 <__aeabi_dmul>
 800b1dc:	2301      	movs	r3, #1
 800b1de:	106d      	asrs	r5, r5, #1
 800b1e0:	f10a 0a08 	add.w	sl, sl, #8
 800b1e4:	d1f4      	bne.n	800b1d0 <_strtod_l+0x5a8>
 800b1e6:	b10b      	cbz	r3, 800b1ec <_strtod_l+0x5c4>
 800b1e8:	4680      	mov	r8, r0
 800b1ea:	4689      	mov	r9, r1
 800b1ec:	9b05      	ldr	r3, [sp, #20]
 800b1ee:	b1bb      	cbz	r3, 800b220 <_strtod_l+0x5f8>
 800b1f0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b1f4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	4649      	mov	r1, r9
 800b1fc:	dd10      	ble.n	800b220 <_strtod_l+0x5f8>
 800b1fe:	2b1f      	cmp	r3, #31
 800b200:	f340 8128 	ble.w	800b454 <_strtod_l+0x82c>
 800b204:	2b34      	cmp	r3, #52	; 0x34
 800b206:	bfd8      	it	le
 800b208:	f04f 33ff 	movle.w	r3, #4294967295
 800b20c:	f04f 0800 	mov.w	r8, #0
 800b210:	bfcf      	iteee	gt
 800b212:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b216:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b21a:	4093      	lslle	r3, r2
 800b21c:	ea03 0901 	andle.w	r9, r3, r1
 800b220:	2200      	movs	r2, #0
 800b222:	2300      	movs	r3, #0
 800b224:	4640      	mov	r0, r8
 800b226:	4649      	mov	r1, r9
 800b228:	f7f5 fbbe 	bl	80009a8 <__aeabi_dcmpeq>
 800b22c:	2800      	cmp	r0, #0
 800b22e:	d1a6      	bne.n	800b17e <_strtod_l+0x556>
 800b230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b232:	465a      	mov	r2, fp
 800b234:	9300      	str	r3, [sp, #0]
 800b236:	4620      	mov	r0, r4
 800b238:	4633      	mov	r3, r6
 800b23a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b23c:	f7ff f8dc 	bl	800a3f8 <__s2b>
 800b240:	900b      	str	r0, [sp, #44]	; 0x2c
 800b242:	2800      	cmp	r0, #0
 800b244:	f43f af2a 	beq.w	800b09c <_strtod_l+0x474>
 800b248:	2600      	movs	r6, #0
 800b24a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b24c:	9b08      	ldr	r3, [sp, #32]
 800b24e:	2a00      	cmp	r2, #0
 800b250:	eba3 0307 	sub.w	r3, r3, r7
 800b254:	bfa8      	it	ge
 800b256:	2300      	movge	r3, #0
 800b258:	46b3      	mov	fp, r6
 800b25a:	9312      	str	r3, [sp, #72]	; 0x48
 800b25c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b260:	9316      	str	r3, [sp, #88]	; 0x58
 800b262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b264:	4620      	mov	r0, r4
 800b266:	6859      	ldr	r1, [r3, #4]
 800b268:	f7ff f81e 	bl	800a2a8 <_Balloc>
 800b26c:	9008      	str	r0, [sp, #32]
 800b26e:	2800      	cmp	r0, #0
 800b270:	f43f af18 	beq.w	800b0a4 <_strtod_l+0x47c>
 800b274:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b276:	300c      	adds	r0, #12
 800b278:	691a      	ldr	r2, [r3, #16]
 800b27a:	f103 010c 	add.w	r1, r3, #12
 800b27e:	3202      	adds	r2, #2
 800b280:	0092      	lsls	r2, r2, #2
 800b282:	f7fe f894 	bl	80093ae <memcpy>
 800b286:	ab1c      	add	r3, sp, #112	; 0x70
 800b288:	9301      	str	r3, [sp, #4]
 800b28a:	ab1b      	add	r3, sp, #108	; 0x6c
 800b28c:	9300      	str	r3, [sp, #0]
 800b28e:	4642      	mov	r2, r8
 800b290:	464b      	mov	r3, r9
 800b292:	4620      	mov	r0, r4
 800b294:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800b298:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800b29c:	f7ff fbd8 	bl	800aa50 <__d2b>
 800b2a0:	901a      	str	r0, [sp, #104]	; 0x68
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	f43f aefe 	beq.w	800b0a4 <_strtod_l+0x47c>
 800b2a8:	2101      	movs	r1, #1
 800b2aa:	4620      	mov	r0, r4
 800b2ac:	f7ff f93c 	bl	800a528 <__i2b>
 800b2b0:	4683      	mov	fp, r0
 800b2b2:	2800      	cmp	r0, #0
 800b2b4:	f43f aef6 	beq.w	800b0a4 <_strtod_l+0x47c>
 800b2b8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b2ba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b2bc:	2f00      	cmp	r7, #0
 800b2be:	bfab      	itete	ge
 800b2c0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800b2c2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800b2c4:	eb07 0a03 	addge.w	sl, r7, r3
 800b2c8:	1bdd      	sublt	r5, r3, r7
 800b2ca:	9b05      	ldr	r3, [sp, #20]
 800b2cc:	bfa8      	it	ge
 800b2ce:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800b2d0:	eba7 0703 	sub.w	r7, r7, r3
 800b2d4:	4417      	add	r7, r2
 800b2d6:	4b71      	ldr	r3, [pc, #452]	; (800b49c <_strtod_l+0x874>)
 800b2d8:	f107 37ff 	add.w	r7, r7, #4294967295
 800b2dc:	bfb8      	it	lt
 800b2de:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800b2e2:	429f      	cmp	r7, r3
 800b2e4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b2e8:	f280 80c7 	bge.w	800b47a <_strtod_l+0x852>
 800b2ec:	1bdb      	subs	r3, r3, r7
 800b2ee:	2b1f      	cmp	r3, #31
 800b2f0:	f04f 0101 	mov.w	r1, #1
 800b2f4:	eba2 0203 	sub.w	r2, r2, r3
 800b2f8:	f300 80b3 	bgt.w	800b462 <_strtod_l+0x83a>
 800b2fc:	fa01 f303 	lsl.w	r3, r1, r3
 800b300:	9313      	str	r3, [sp, #76]	; 0x4c
 800b302:	2300      	movs	r3, #0
 800b304:	9310      	str	r3, [sp, #64]	; 0x40
 800b306:	eb0a 0702 	add.w	r7, sl, r2
 800b30a:	9b05      	ldr	r3, [sp, #20]
 800b30c:	45ba      	cmp	sl, r7
 800b30e:	4415      	add	r5, r2
 800b310:	441d      	add	r5, r3
 800b312:	4653      	mov	r3, sl
 800b314:	bfa8      	it	ge
 800b316:	463b      	movge	r3, r7
 800b318:	42ab      	cmp	r3, r5
 800b31a:	bfa8      	it	ge
 800b31c:	462b      	movge	r3, r5
 800b31e:	2b00      	cmp	r3, #0
 800b320:	bfc2      	ittt	gt
 800b322:	1aff      	subgt	r7, r7, r3
 800b324:	1aed      	subgt	r5, r5, r3
 800b326:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b32a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	dd17      	ble.n	800b360 <_strtod_l+0x738>
 800b330:	4659      	mov	r1, fp
 800b332:	461a      	mov	r2, r3
 800b334:	4620      	mov	r0, r4
 800b336:	f7ff f9b5 	bl	800a6a4 <__pow5mult>
 800b33a:	4683      	mov	fp, r0
 800b33c:	2800      	cmp	r0, #0
 800b33e:	f43f aeb1 	beq.w	800b0a4 <_strtod_l+0x47c>
 800b342:	4601      	mov	r1, r0
 800b344:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b346:	4620      	mov	r0, r4
 800b348:	f7ff f904 	bl	800a554 <__multiply>
 800b34c:	900a      	str	r0, [sp, #40]	; 0x28
 800b34e:	2800      	cmp	r0, #0
 800b350:	f43f aea8 	beq.w	800b0a4 <_strtod_l+0x47c>
 800b354:	4620      	mov	r0, r4
 800b356:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b358:	f7fe ffe6 	bl	800a328 <_Bfree>
 800b35c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b35e:	931a      	str	r3, [sp, #104]	; 0x68
 800b360:	2f00      	cmp	r7, #0
 800b362:	f300 808f 	bgt.w	800b484 <_strtod_l+0x85c>
 800b366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b368:	2b00      	cmp	r3, #0
 800b36a:	dd08      	ble.n	800b37e <_strtod_l+0x756>
 800b36c:	4620      	mov	r0, r4
 800b36e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b370:	9908      	ldr	r1, [sp, #32]
 800b372:	f7ff f997 	bl	800a6a4 <__pow5mult>
 800b376:	9008      	str	r0, [sp, #32]
 800b378:	2800      	cmp	r0, #0
 800b37a:	f43f ae93 	beq.w	800b0a4 <_strtod_l+0x47c>
 800b37e:	2d00      	cmp	r5, #0
 800b380:	dd08      	ble.n	800b394 <_strtod_l+0x76c>
 800b382:	462a      	mov	r2, r5
 800b384:	4620      	mov	r0, r4
 800b386:	9908      	ldr	r1, [sp, #32]
 800b388:	f7ff f9e6 	bl	800a758 <__lshift>
 800b38c:	9008      	str	r0, [sp, #32]
 800b38e:	2800      	cmp	r0, #0
 800b390:	f43f ae88 	beq.w	800b0a4 <_strtod_l+0x47c>
 800b394:	f1ba 0f00 	cmp.w	sl, #0
 800b398:	dd08      	ble.n	800b3ac <_strtod_l+0x784>
 800b39a:	4659      	mov	r1, fp
 800b39c:	4652      	mov	r2, sl
 800b39e:	4620      	mov	r0, r4
 800b3a0:	f7ff f9da 	bl	800a758 <__lshift>
 800b3a4:	4683      	mov	fp, r0
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	f43f ae7c 	beq.w	800b0a4 <_strtod_l+0x47c>
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	9a08      	ldr	r2, [sp, #32]
 800b3b0:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b3b2:	f7ff fa59 	bl	800a868 <__mdiff>
 800b3b6:	4606      	mov	r6, r0
 800b3b8:	2800      	cmp	r0, #0
 800b3ba:	f43f ae73 	beq.w	800b0a4 <_strtod_l+0x47c>
 800b3be:	2500      	movs	r5, #0
 800b3c0:	68c3      	ldr	r3, [r0, #12]
 800b3c2:	4659      	mov	r1, fp
 800b3c4:	60c5      	str	r5, [r0, #12]
 800b3c6:	930a      	str	r3, [sp, #40]	; 0x28
 800b3c8:	f7ff fa32 	bl	800a830 <__mcmp>
 800b3cc:	42a8      	cmp	r0, r5
 800b3ce:	da6b      	bge.n	800b4a8 <_strtod_l+0x880>
 800b3d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3d2:	ea53 0308 	orrs.w	r3, r3, r8
 800b3d6:	f040 808f 	bne.w	800b4f8 <_strtod_l+0x8d0>
 800b3da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	f040 808a 	bne.w	800b4f8 <_strtod_l+0x8d0>
 800b3e4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b3e8:	0d1b      	lsrs	r3, r3, #20
 800b3ea:	051b      	lsls	r3, r3, #20
 800b3ec:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b3f0:	f240 8082 	bls.w	800b4f8 <_strtod_l+0x8d0>
 800b3f4:	6973      	ldr	r3, [r6, #20]
 800b3f6:	b913      	cbnz	r3, 800b3fe <_strtod_l+0x7d6>
 800b3f8:	6933      	ldr	r3, [r6, #16]
 800b3fa:	2b01      	cmp	r3, #1
 800b3fc:	dd7c      	ble.n	800b4f8 <_strtod_l+0x8d0>
 800b3fe:	4631      	mov	r1, r6
 800b400:	2201      	movs	r2, #1
 800b402:	4620      	mov	r0, r4
 800b404:	f7ff f9a8 	bl	800a758 <__lshift>
 800b408:	4659      	mov	r1, fp
 800b40a:	4606      	mov	r6, r0
 800b40c:	f7ff fa10 	bl	800a830 <__mcmp>
 800b410:	2800      	cmp	r0, #0
 800b412:	dd71      	ble.n	800b4f8 <_strtod_l+0x8d0>
 800b414:	9905      	ldr	r1, [sp, #20]
 800b416:	464b      	mov	r3, r9
 800b418:	4a21      	ldr	r2, [pc, #132]	; (800b4a0 <_strtod_l+0x878>)
 800b41a:	2900      	cmp	r1, #0
 800b41c:	f000 808d 	beq.w	800b53a <_strtod_l+0x912>
 800b420:	ea02 0109 	and.w	r1, r2, r9
 800b424:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b428:	f300 8087 	bgt.w	800b53a <_strtod_l+0x912>
 800b42c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b430:	f77f aea9 	ble.w	800b186 <_strtod_l+0x55e>
 800b434:	4640      	mov	r0, r8
 800b436:	4649      	mov	r1, r9
 800b438:	4b1a      	ldr	r3, [pc, #104]	; (800b4a4 <_strtod_l+0x87c>)
 800b43a:	2200      	movs	r2, #0
 800b43c:	f7f5 f84c 	bl	80004d8 <__aeabi_dmul>
 800b440:	4b17      	ldr	r3, [pc, #92]	; (800b4a0 <_strtod_l+0x878>)
 800b442:	4680      	mov	r8, r0
 800b444:	400b      	ands	r3, r1
 800b446:	4689      	mov	r9, r1
 800b448:	2b00      	cmp	r3, #0
 800b44a:	f47f ae35 	bne.w	800b0b8 <_strtod_l+0x490>
 800b44e:	2322      	movs	r3, #34	; 0x22
 800b450:	6023      	str	r3, [r4, #0]
 800b452:	e631      	b.n	800b0b8 <_strtod_l+0x490>
 800b454:	f04f 32ff 	mov.w	r2, #4294967295
 800b458:	fa02 f303 	lsl.w	r3, r2, r3
 800b45c:	ea03 0808 	and.w	r8, r3, r8
 800b460:	e6de      	b.n	800b220 <_strtod_l+0x5f8>
 800b462:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800b466:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800b46a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800b46e:	37e2      	adds	r7, #226	; 0xe2
 800b470:	fa01 f307 	lsl.w	r3, r1, r7
 800b474:	9310      	str	r3, [sp, #64]	; 0x40
 800b476:	9113      	str	r1, [sp, #76]	; 0x4c
 800b478:	e745      	b.n	800b306 <_strtod_l+0x6de>
 800b47a:	2300      	movs	r3, #0
 800b47c:	9310      	str	r3, [sp, #64]	; 0x40
 800b47e:	2301      	movs	r3, #1
 800b480:	9313      	str	r3, [sp, #76]	; 0x4c
 800b482:	e740      	b.n	800b306 <_strtod_l+0x6de>
 800b484:	463a      	mov	r2, r7
 800b486:	4620      	mov	r0, r4
 800b488:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b48a:	f7ff f965 	bl	800a758 <__lshift>
 800b48e:	901a      	str	r0, [sp, #104]	; 0x68
 800b490:	2800      	cmp	r0, #0
 800b492:	f47f af68 	bne.w	800b366 <_strtod_l+0x73e>
 800b496:	e605      	b.n	800b0a4 <_strtod_l+0x47c>
 800b498:	0800fb50 	.word	0x0800fb50
 800b49c:	fffffc02 	.word	0xfffffc02
 800b4a0:	7ff00000 	.word	0x7ff00000
 800b4a4:	39500000 	.word	0x39500000
 800b4a8:	46ca      	mov	sl, r9
 800b4aa:	d165      	bne.n	800b578 <_strtod_l+0x950>
 800b4ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b4b2:	b352      	cbz	r2, 800b50a <_strtod_l+0x8e2>
 800b4b4:	4a9e      	ldr	r2, [pc, #632]	; (800b730 <_strtod_l+0xb08>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d12a      	bne.n	800b510 <_strtod_l+0x8e8>
 800b4ba:	9b05      	ldr	r3, [sp, #20]
 800b4bc:	4641      	mov	r1, r8
 800b4be:	b1fb      	cbz	r3, 800b500 <_strtod_l+0x8d8>
 800b4c0:	4b9c      	ldr	r3, [pc, #624]	; (800b734 <_strtod_l+0xb0c>)
 800b4c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b4c6:	ea09 0303 	and.w	r3, r9, r3
 800b4ca:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b4ce:	d81a      	bhi.n	800b506 <_strtod_l+0x8de>
 800b4d0:	0d1b      	lsrs	r3, r3, #20
 800b4d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b4d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b4da:	4299      	cmp	r1, r3
 800b4dc:	d118      	bne.n	800b510 <_strtod_l+0x8e8>
 800b4de:	4b96      	ldr	r3, [pc, #600]	; (800b738 <_strtod_l+0xb10>)
 800b4e0:	459a      	cmp	sl, r3
 800b4e2:	d102      	bne.n	800b4ea <_strtod_l+0x8c2>
 800b4e4:	3101      	adds	r1, #1
 800b4e6:	f43f addd 	beq.w	800b0a4 <_strtod_l+0x47c>
 800b4ea:	f04f 0800 	mov.w	r8, #0
 800b4ee:	4b91      	ldr	r3, [pc, #580]	; (800b734 <_strtod_l+0xb0c>)
 800b4f0:	ea0a 0303 	and.w	r3, sl, r3
 800b4f4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b4f8:	9b05      	ldr	r3, [sp, #20]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d19a      	bne.n	800b434 <_strtod_l+0x80c>
 800b4fe:	e5db      	b.n	800b0b8 <_strtod_l+0x490>
 800b500:	f04f 33ff 	mov.w	r3, #4294967295
 800b504:	e7e9      	b.n	800b4da <_strtod_l+0x8b2>
 800b506:	4613      	mov	r3, r2
 800b508:	e7e7      	b.n	800b4da <_strtod_l+0x8b2>
 800b50a:	ea53 0308 	orrs.w	r3, r3, r8
 800b50e:	d081      	beq.n	800b414 <_strtod_l+0x7ec>
 800b510:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b512:	b1e3      	cbz	r3, 800b54e <_strtod_l+0x926>
 800b514:	ea13 0f0a 	tst.w	r3, sl
 800b518:	d0ee      	beq.n	800b4f8 <_strtod_l+0x8d0>
 800b51a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b51c:	4640      	mov	r0, r8
 800b51e:	4649      	mov	r1, r9
 800b520:	9a05      	ldr	r2, [sp, #20]
 800b522:	b1c3      	cbz	r3, 800b556 <_strtod_l+0x92e>
 800b524:	f7ff fb5c 	bl	800abe0 <sulp>
 800b528:	4602      	mov	r2, r0
 800b52a:	460b      	mov	r3, r1
 800b52c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b52e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b530:	f7f4 fe1c 	bl	800016c <__adddf3>
 800b534:	4680      	mov	r8, r0
 800b536:	4689      	mov	r9, r1
 800b538:	e7de      	b.n	800b4f8 <_strtod_l+0x8d0>
 800b53a:	4013      	ands	r3, r2
 800b53c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b540:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b544:	f04f 38ff 	mov.w	r8, #4294967295
 800b548:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b54c:	e7d4      	b.n	800b4f8 <_strtod_l+0x8d0>
 800b54e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b550:	ea13 0f08 	tst.w	r3, r8
 800b554:	e7e0      	b.n	800b518 <_strtod_l+0x8f0>
 800b556:	f7ff fb43 	bl	800abe0 <sulp>
 800b55a:	4602      	mov	r2, r0
 800b55c:	460b      	mov	r3, r1
 800b55e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b560:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b562:	f7f4 fe01 	bl	8000168 <__aeabi_dsub>
 800b566:	2200      	movs	r2, #0
 800b568:	2300      	movs	r3, #0
 800b56a:	4680      	mov	r8, r0
 800b56c:	4689      	mov	r9, r1
 800b56e:	f7f5 fa1b 	bl	80009a8 <__aeabi_dcmpeq>
 800b572:	2800      	cmp	r0, #0
 800b574:	d0c0      	beq.n	800b4f8 <_strtod_l+0x8d0>
 800b576:	e606      	b.n	800b186 <_strtod_l+0x55e>
 800b578:	4659      	mov	r1, fp
 800b57a:	4630      	mov	r0, r6
 800b57c:	f7ff fabe 	bl	800aafc <__ratio>
 800b580:	4602      	mov	r2, r0
 800b582:	460b      	mov	r3, r1
 800b584:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b588:	2200      	movs	r2, #0
 800b58a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b58e:	f7f5 fa1f 	bl	80009d0 <__aeabi_dcmple>
 800b592:	2800      	cmp	r0, #0
 800b594:	d06f      	beq.n	800b676 <_strtod_l+0xa4e>
 800b596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d17c      	bne.n	800b696 <_strtod_l+0xa6e>
 800b59c:	f1b8 0f00 	cmp.w	r8, #0
 800b5a0:	d159      	bne.n	800b656 <_strtod_l+0xa2e>
 800b5a2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d17b      	bne.n	800b6a2 <_strtod_l+0xa7a>
 800b5aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	4b62      	ldr	r3, [pc, #392]	; (800b73c <_strtod_l+0xb14>)
 800b5b2:	f7f5 fa03 	bl	80009bc <__aeabi_dcmplt>
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	d15a      	bne.n	800b670 <_strtod_l+0xa48>
 800b5ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b5be:	2200      	movs	r2, #0
 800b5c0:	4b5f      	ldr	r3, [pc, #380]	; (800b740 <_strtod_l+0xb18>)
 800b5c2:	f7f4 ff89 	bl	80004d8 <__aeabi_dmul>
 800b5c6:	4605      	mov	r5, r0
 800b5c8:	460f      	mov	r7, r1
 800b5ca:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b5ce:	9506      	str	r5, [sp, #24]
 800b5d0:	9307      	str	r3, [sp, #28]
 800b5d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b5d6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b5da:	4b56      	ldr	r3, [pc, #344]	; (800b734 <_strtod_l+0xb0c>)
 800b5dc:	4a55      	ldr	r2, [pc, #340]	; (800b734 <_strtod_l+0xb0c>)
 800b5de:	ea0a 0303 	and.w	r3, sl, r3
 800b5e2:	9313      	str	r3, [sp, #76]	; 0x4c
 800b5e4:	4b57      	ldr	r3, [pc, #348]	; (800b744 <_strtod_l+0xb1c>)
 800b5e6:	ea0a 0202 	and.w	r2, sl, r2
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	f040 80b0 	bne.w	800b750 <_strtod_l+0xb28>
 800b5f0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b5f4:	4640      	mov	r0, r8
 800b5f6:	4649      	mov	r1, r9
 800b5f8:	f7ff f9c2 	bl	800a980 <__ulp>
 800b5fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b600:	f7f4 ff6a 	bl	80004d8 <__aeabi_dmul>
 800b604:	4642      	mov	r2, r8
 800b606:	464b      	mov	r3, r9
 800b608:	f7f4 fdb0 	bl	800016c <__adddf3>
 800b60c:	f8df a124 	ldr.w	sl, [pc, #292]	; 800b734 <_strtod_l+0xb0c>
 800b610:	4a4d      	ldr	r2, [pc, #308]	; (800b748 <_strtod_l+0xb20>)
 800b612:	ea01 0a0a 	and.w	sl, r1, sl
 800b616:	4592      	cmp	sl, r2
 800b618:	4680      	mov	r8, r0
 800b61a:	d948      	bls.n	800b6ae <_strtod_l+0xa86>
 800b61c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b61e:	4b46      	ldr	r3, [pc, #280]	; (800b738 <_strtod_l+0xb10>)
 800b620:	429a      	cmp	r2, r3
 800b622:	d103      	bne.n	800b62c <_strtod_l+0xa04>
 800b624:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b626:	3301      	adds	r3, #1
 800b628:	f43f ad3c 	beq.w	800b0a4 <_strtod_l+0x47c>
 800b62c:	f04f 38ff 	mov.w	r8, #4294967295
 800b630:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800b738 <_strtod_l+0xb10>
 800b634:	4620      	mov	r0, r4
 800b636:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b638:	f7fe fe76 	bl	800a328 <_Bfree>
 800b63c:	4620      	mov	r0, r4
 800b63e:	9908      	ldr	r1, [sp, #32]
 800b640:	f7fe fe72 	bl	800a328 <_Bfree>
 800b644:	4659      	mov	r1, fp
 800b646:	4620      	mov	r0, r4
 800b648:	f7fe fe6e 	bl	800a328 <_Bfree>
 800b64c:	4631      	mov	r1, r6
 800b64e:	4620      	mov	r0, r4
 800b650:	f7fe fe6a 	bl	800a328 <_Bfree>
 800b654:	e605      	b.n	800b262 <_strtod_l+0x63a>
 800b656:	f1b8 0f01 	cmp.w	r8, #1
 800b65a:	d103      	bne.n	800b664 <_strtod_l+0xa3c>
 800b65c:	f1b9 0f00 	cmp.w	r9, #0
 800b660:	f43f ad91 	beq.w	800b186 <_strtod_l+0x55e>
 800b664:	2200      	movs	r2, #0
 800b666:	4b39      	ldr	r3, [pc, #228]	; (800b74c <_strtod_l+0xb24>)
 800b668:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b66a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b66e:	e016      	b.n	800b69e <_strtod_l+0xa76>
 800b670:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b672:	4f33      	ldr	r7, [pc, #204]	; (800b740 <_strtod_l+0xb18>)
 800b674:	e7a9      	b.n	800b5ca <_strtod_l+0x9a2>
 800b676:	4b32      	ldr	r3, [pc, #200]	; (800b740 <_strtod_l+0xb18>)
 800b678:	2200      	movs	r2, #0
 800b67a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b67e:	f7f4 ff2b 	bl	80004d8 <__aeabi_dmul>
 800b682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b684:	4605      	mov	r5, r0
 800b686:	460f      	mov	r7, r1
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d09e      	beq.n	800b5ca <_strtod_l+0x9a2>
 800b68c:	4602      	mov	r2, r0
 800b68e:	460b      	mov	r3, r1
 800b690:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b694:	e79d      	b.n	800b5d2 <_strtod_l+0x9aa>
 800b696:	2200      	movs	r2, #0
 800b698:	4b28      	ldr	r3, [pc, #160]	; (800b73c <_strtod_l+0xb14>)
 800b69a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b69e:	4f27      	ldr	r7, [pc, #156]	; (800b73c <_strtod_l+0xb14>)
 800b6a0:	e797      	b.n	800b5d2 <_strtod_l+0x9aa>
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	4b29      	ldr	r3, [pc, #164]	; (800b74c <_strtod_l+0xb24>)
 800b6a6:	4645      	mov	r5, r8
 800b6a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b6ac:	e7f7      	b.n	800b69e <_strtod_l+0xa76>
 800b6ae:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800b6b2:	9b05      	ldr	r3, [sp, #20]
 800b6b4:	46ca      	mov	sl, r9
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d1bc      	bne.n	800b634 <_strtod_l+0xa0c>
 800b6ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b6be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b6c0:	0d1b      	lsrs	r3, r3, #20
 800b6c2:	051b      	lsls	r3, r3, #20
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d1b5      	bne.n	800b634 <_strtod_l+0xa0c>
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	4639      	mov	r1, r7
 800b6cc:	f7f5 fa4c 	bl	8000b68 <__aeabi_d2lz>
 800b6d0:	f7f4 fed4 	bl	800047c <__aeabi_l2d>
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	460b      	mov	r3, r1
 800b6d8:	4628      	mov	r0, r5
 800b6da:	4639      	mov	r1, r7
 800b6dc:	f7f4 fd44 	bl	8000168 <__aeabi_dsub>
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800b6e8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b6ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6ee:	ea4a 0a08 	orr.w	sl, sl, r8
 800b6f2:	ea5a 0a03 	orrs.w	sl, sl, r3
 800b6f6:	d06c      	beq.n	800b7d2 <_strtod_l+0xbaa>
 800b6f8:	a309      	add	r3, pc, #36	; (adr r3, 800b720 <_strtod_l+0xaf8>)
 800b6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fe:	f7f5 f95d 	bl	80009bc <__aeabi_dcmplt>
 800b702:	2800      	cmp	r0, #0
 800b704:	f47f acd8 	bne.w	800b0b8 <_strtod_l+0x490>
 800b708:	a307      	add	r3, pc, #28	; (adr r3, 800b728 <_strtod_l+0xb00>)
 800b70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b712:	f7f5 f971 	bl	80009f8 <__aeabi_dcmpgt>
 800b716:	2800      	cmp	r0, #0
 800b718:	d08c      	beq.n	800b634 <_strtod_l+0xa0c>
 800b71a:	e4cd      	b.n	800b0b8 <_strtod_l+0x490>
 800b71c:	f3af 8000 	nop.w
 800b720:	94a03595 	.word	0x94a03595
 800b724:	3fdfffff 	.word	0x3fdfffff
 800b728:	35afe535 	.word	0x35afe535
 800b72c:	3fe00000 	.word	0x3fe00000
 800b730:	000fffff 	.word	0x000fffff
 800b734:	7ff00000 	.word	0x7ff00000
 800b738:	7fefffff 	.word	0x7fefffff
 800b73c:	3ff00000 	.word	0x3ff00000
 800b740:	3fe00000 	.word	0x3fe00000
 800b744:	7fe00000 	.word	0x7fe00000
 800b748:	7c9fffff 	.word	0x7c9fffff
 800b74c:	bff00000 	.word	0xbff00000
 800b750:	9b05      	ldr	r3, [sp, #20]
 800b752:	b333      	cbz	r3, 800b7a2 <_strtod_l+0xb7a>
 800b754:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b756:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b75a:	d822      	bhi.n	800b7a2 <_strtod_l+0xb7a>
 800b75c:	a328      	add	r3, pc, #160	; (adr r3, 800b800 <_strtod_l+0xbd8>)
 800b75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b762:	4628      	mov	r0, r5
 800b764:	4639      	mov	r1, r7
 800b766:	f7f5 f933 	bl	80009d0 <__aeabi_dcmple>
 800b76a:	b1a0      	cbz	r0, 800b796 <_strtod_l+0xb6e>
 800b76c:	4639      	mov	r1, r7
 800b76e:	4628      	mov	r0, r5
 800b770:	f7f5 f98a 	bl	8000a88 <__aeabi_d2uiz>
 800b774:	2801      	cmp	r0, #1
 800b776:	bf38      	it	cc
 800b778:	2001      	movcc	r0, #1
 800b77a:	f7f4 fe33 	bl	80003e4 <__aeabi_ui2d>
 800b77e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b780:	4605      	mov	r5, r0
 800b782:	460f      	mov	r7, r1
 800b784:	bb03      	cbnz	r3, 800b7c8 <_strtod_l+0xba0>
 800b786:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b78a:	9014      	str	r0, [sp, #80]	; 0x50
 800b78c:	9315      	str	r3, [sp, #84]	; 0x54
 800b78e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b792:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b796:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b798:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b79a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b79e:	1a9b      	subs	r3, r3, r2
 800b7a0:	9311      	str	r3, [sp, #68]	; 0x44
 800b7a2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b7a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b7a6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800b7aa:	f7ff f8e9 	bl	800a980 <__ulp>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	4640      	mov	r0, r8
 800b7b4:	4649      	mov	r1, r9
 800b7b6:	f7f4 fe8f 	bl	80004d8 <__aeabi_dmul>
 800b7ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b7be:	f7f4 fcd5 	bl	800016c <__adddf3>
 800b7c2:	4680      	mov	r8, r0
 800b7c4:	4689      	mov	r9, r1
 800b7c6:	e774      	b.n	800b6b2 <_strtod_l+0xa8a>
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b7d0:	e7dd      	b.n	800b78e <_strtod_l+0xb66>
 800b7d2:	a30d      	add	r3, pc, #52	; (adr r3, 800b808 <_strtod_l+0xbe0>)
 800b7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d8:	f7f5 f8f0 	bl	80009bc <__aeabi_dcmplt>
 800b7dc:	e79b      	b.n	800b716 <_strtod_l+0xaee>
 800b7de:	2300      	movs	r3, #0
 800b7e0:	930e      	str	r3, [sp, #56]	; 0x38
 800b7e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b7e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b7e6:	6013      	str	r3, [r2, #0]
 800b7e8:	f7ff ba5b 	b.w	800aca2 <_strtod_l+0x7a>
 800b7ec:	2a65      	cmp	r2, #101	; 0x65
 800b7ee:	f43f ab52 	beq.w	800ae96 <_strtod_l+0x26e>
 800b7f2:	2a45      	cmp	r2, #69	; 0x45
 800b7f4:	f43f ab4f 	beq.w	800ae96 <_strtod_l+0x26e>
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	f7ff bb87 	b.w	800af0c <_strtod_l+0x2e4>
 800b7fe:	bf00      	nop
 800b800:	ffc00000 	.word	0xffc00000
 800b804:	41dfffff 	.word	0x41dfffff
 800b808:	94a03595 	.word	0x94a03595
 800b80c:	3fcfffff 	.word	0x3fcfffff

0800b810 <_strtod_r>:
 800b810:	4b01      	ldr	r3, [pc, #4]	; (800b818 <_strtod_r+0x8>)
 800b812:	f7ff ba09 	b.w	800ac28 <_strtod_l>
 800b816:	bf00      	nop
 800b818:	20000090 	.word	0x20000090

0800b81c <_strtol_l.constprop.0>:
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b822:	4686      	mov	lr, r0
 800b824:	4690      	mov	r8, r2
 800b826:	d001      	beq.n	800b82c <_strtol_l.constprop.0+0x10>
 800b828:	2b24      	cmp	r3, #36	; 0x24
 800b82a:	d906      	bls.n	800b83a <_strtol_l.constprop.0+0x1e>
 800b82c:	f7fd fd84 	bl	8009338 <__errno>
 800b830:	2316      	movs	r3, #22
 800b832:	6003      	str	r3, [r0, #0]
 800b834:	2000      	movs	r0, #0
 800b836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b83a:	460d      	mov	r5, r1
 800b83c:	4835      	ldr	r0, [pc, #212]	; (800b914 <_strtol_l.constprop.0+0xf8>)
 800b83e:	462a      	mov	r2, r5
 800b840:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b844:	5d06      	ldrb	r6, [r0, r4]
 800b846:	f016 0608 	ands.w	r6, r6, #8
 800b84a:	d1f8      	bne.n	800b83e <_strtol_l.constprop.0+0x22>
 800b84c:	2c2d      	cmp	r4, #45	; 0x2d
 800b84e:	d12e      	bne.n	800b8ae <_strtol_l.constprop.0+0x92>
 800b850:	2601      	movs	r6, #1
 800b852:	782c      	ldrb	r4, [r5, #0]
 800b854:	1c95      	adds	r5, r2, #2
 800b856:	2b00      	cmp	r3, #0
 800b858:	d057      	beq.n	800b90a <_strtol_l.constprop.0+0xee>
 800b85a:	2b10      	cmp	r3, #16
 800b85c:	d109      	bne.n	800b872 <_strtol_l.constprop.0+0x56>
 800b85e:	2c30      	cmp	r4, #48	; 0x30
 800b860:	d107      	bne.n	800b872 <_strtol_l.constprop.0+0x56>
 800b862:	782a      	ldrb	r2, [r5, #0]
 800b864:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b868:	2a58      	cmp	r2, #88	; 0x58
 800b86a:	d149      	bne.n	800b900 <_strtol_l.constprop.0+0xe4>
 800b86c:	2310      	movs	r3, #16
 800b86e:	786c      	ldrb	r4, [r5, #1]
 800b870:	3502      	adds	r5, #2
 800b872:	2200      	movs	r2, #0
 800b874:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800b878:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b87c:	fbbc f9f3 	udiv	r9, ip, r3
 800b880:	4610      	mov	r0, r2
 800b882:	fb03 ca19 	mls	sl, r3, r9, ip
 800b886:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b88a:	2f09      	cmp	r7, #9
 800b88c:	d814      	bhi.n	800b8b8 <_strtol_l.constprop.0+0x9c>
 800b88e:	463c      	mov	r4, r7
 800b890:	42a3      	cmp	r3, r4
 800b892:	dd20      	ble.n	800b8d6 <_strtol_l.constprop.0+0xba>
 800b894:	1c57      	adds	r7, r2, #1
 800b896:	d007      	beq.n	800b8a8 <_strtol_l.constprop.0+0x8c>
 800b898:	4581      	cmp	r9, r0
 800b89a:	d319      	bcc.n	800b8d0 <_strtol_l.constprop.0+0xb4>
 800b89c:	d101      	bne.n	800b8a2 <_strtol_l.constprop.0+0x86>
 800b89e:	45a2      	cmp	sl, r4
 800b8a0:	db16      	blt.n	800b8d0 <_strtol_l.constprop.0+0xb4>
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	fb00 4003 	mla	r0, r0, r3, r4
 800b8a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b8ac:	e7eb      	b.n	800b886 <_strtol_l.constprop.0+0x6a>
 800b8ae:	2c2b      	cmp	r4, #43	; 0x2b
 800b8b0:	bf04      	itt	eq
 800b8b2:	782c      	ldrbeq	r4, [r5, #0]
 800b8b4:	1c95      	addeq	r5, r2, #2
 800b8b6:	e7ce      	b.n	800b856 <_strtol_l.constprop.0+0x3a>
 800b8b8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b8bc:	2f19      	cmp	r7, #25
 800b8be:	d801      	bhi.n	800b8c4 <_strtol_l.constprop.0+0xa8>
 800b8c0:	3c37      	subs	r4, #55	; 0x37
 800b8c2:	e7e5      	b.n	800b890 <_strtol_l.constprop.0+0x74>
 800b8c4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b8c8:	2f19      	cmp	r7, #25
 800b8ca:	d804      	bhi.n	800b8d6 <_strtol_l.constprop.0+0xba>
 800b8cc:	3c57      	subs	r4, #87	; 0x57
 800b8ce:	e7df      	b.n	800b890 <_strtol_l.constprop.0+0x74>
 800b8d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b8d4:	e7e8      	b.n	800b8a8 <_strtol_l.constprop.0+0x8c>
 800b8d6:	1c53      	adds	r3, r2, #1
 800b8d8:	d108      	bne.n	800b8ec <_strtol_l.constprop.0+0xd0>
 800b8da:	2322      	movs	r3, #34	; 0x22
 800b8dc:	4660      	mov	r0, ip
 800b8de:	f8ce 3000 	str.w	r3, [lr]
 800b8e2:	f1b8 0f00 	cmp.w	r8, #0
 800b8e6:	d0a6      	beq.n	800b836 <_strtol_l.constprop.0+0x1a>
 800b8e8:	1e69      	subs	r1, r5, #1
 800b8ea:	e006      	b.n	800b8fa <_strtol_l.constprop.0+0xde>
 800b8ec:	b106      	cbz	r6, 800b8f0 <_strtol_l.constprop.0+0xd4>
 800b8ee:	4240      	negs	r0, r0
 800b8f0:	f1b8 0f00 	cmp.w	r8, #0
 800b8f4:	d09f      	beq.n	800b836 <_strtol_l.constprop.0+0x1a>
 800b8f6:	2a00      	cmp	r2, #0
 800b8f8:	d1f6      	bne.n	800b8e8 <_strtol_l.constprop.0+0xcc>
 800b8fa:	f8c8 1000 	str.w	r1, [r8]
 800b8fe:	e79a      	b.n	800b836 <_strtol_l.constprop.0+0x1a>
 800b900:	2430      	movs	r4, #48	; 0x30
 800b902:	2b00      	cmp	r3, #0
 800b904:	d1b5      	bne.n	800b872 <_strtol_l.constprop.0+0x56>
 800b906:	2308      	movs	r3, #8
 800b908:	e7b3      	b.n	800b872 <_strtol_l.constprop.0+0x56>
 800b90a:	2c30      	cmp	r4, #48	; 0x30
 800b90c:	d0a9      	beq.n	800b862 <_strtol_l.constprop.0+0x46>
 800b90e:	230a      	movs	r3, #10
 800b910:	e7af      	b.n	800b872 <_strtol_l.constprop.0+0x56>
 800b912:	bf00      	nop
 800b914:	0800fb79 	.word	0x0800fb79

0800b918 <_strtol_r>:
 800b918:	f7ff bf80 	b.w	800b81c <_strtol_l.constprop.0>

0800b91c <__ssputs_r>:
 800b91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b920:	461f      	mov	r7, r3
 800b922:	688e      	ldr	r6, [r1, #8]
 800b924:	4682      	mov	sl, r0
 800b926:	42be      	cmp	r6, r7
 800b928:	460c      	mov	r4, r1
 800b92a:	4690      	mov	r8, r2
 800b92c:	680b      	ldr	r3, [r1, #0]
 800b92e:	d82c      	bhi.n	800b98a <__ssputs_r+0x6e>
 800b930:	898a      	ldrh	r2, [r1, #12]
 800b932:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b936:	d026      	beq.n	800b986 <__ssputs_r+0x6a>
 800b938:	6965      	ldr	r5, [r4, #20]
 800b93a:	6909      	ldr	r1, [r1, #16]
 800b93c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b940:	eba3 0901 	sub.w	r9, r3, r1
 800b944:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b948:	1c7b      	adds	r3, r7, #1
 800b94a:	444b      	add	r3, r9
 800b94c:	106d      	asrs	r5, r5, #1
 800b94e:	429d      	cmp	r5, r3
 800b950:	bf38      	it	cc
 800b952:	461d      	movcc	r5, r3
 800b954:	0553      	lsls	r3, r2, #21
 800b956:	d527      	bpl.n	800b9a8 <__ssputs_r+0x8c>
 800b958:	4629      	mov	r1, r5
 800b95a:	f7fe fc19 	bl	800a190 <_malloc_r>
 800b95e:	4606      	mov	r6, r0
 800b960:	b360      	cbz	r0, 800b9bc <__ssputs_r+0xa0>
 800b962:	464a      	mov	r2, r9
 800b964:	6921      	ldr	r1, [r4, #16]
 800b966:	f7fd fd22 	bl	80093ae <memcpy>
 800b96a:	89a3      	ldrh	r3, [r4, #12]
 800b96c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b974:	81a3      	strh	r3, [r4, #12]
 800b976:	6126      	str	r6, [r4, #16]
 800b978:	444e      	add	r6, r9
 800b97a:	6026      	str	r6, [r4, #0]
 800b97c:	463e      	mov	r6, r7
 800b97e:	6165      	str	r5, [r4, #20]
 800b980:	eba5 0509 	sub.w	r5, r5, r9
 800b984:	60a5      	str	r5, [r4, #8]
 800b986:	42be      	cmp	r6, r7
 800b988:	d900      	bls.n	800b98c <__ssputs_r+0x70>
 800b98a:	463e      	mov	r6, r7
 800b98c:	4632      	mov	r2, r6
 800b98e:	4641      	mov	r1, r8
 800b990:	6820      	ldr	r0, [r4, #0]
 800b992:	f000 f9c5 	bl	800bd20 <memmove>
 800b996:	2000      	movs	r0, #0
 800b998:	68a3      	ldr	r3, [r4, #8]
 800b99a:	1b9b      	subs	r3, r3, r6
 800b99c:	60a3      	str	r3, [r4, #8]
 800b99e:	6823      	ldr	r3, [r4, #0]
 800b9a0:	4433      	add	r3, r6
 800b9a2:	6023      	str	r3, [r4, #0]
 800b9a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9a8:	462a      	mov	r2, r5
 800b9aa:	f000 fd98 	bl	800c4de <_realloc_r>
 800b9ae:	4606      	mov	r6, r0
 800b9b0:	2800      	cmp	r0, #0
 800b9b2:	d1e0      	bne.n	800b976 <__ssputs_r+0x5a>
 800b9b4:	4650      	mov	r0, sl
 800b9b6:	6921      	ldr	r1, [r4, #16]
 800b9b8:	f7fe fb7a 	bl	800a0b0 <_free_r>
 800b9bc:	230c      	movs	r3, #12
 800b9be:	f8ca 3000 	str.w	r3, [sl]
 800b9c2:	89a3      	ldrh	r3, [r4, #12]
 800b9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9cc:	81a3      	strh	r3, [r4, #12]
 800b9ce:	e7e9      	b.n	800b9a4 <__ssputs_r+0x88>

0800b9d0 <_svfiprintf_r>:
 800b9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d4:	4698      	mov	r8, r3
 800b9d6:	898b      	ldrh	r3, [r1, #12]
 800b9d8:	4607      	mov	r7, r0
 800b9da:	061b      	lsls	r3, r3, #24
 800b9dc:	460d      	mov	r5, r1
 800b9de:	4614      	mov	r4, r2
 800b9e0:	b09d      	sub	sp, #116	; 0x74
 800b9e2:	d50e      	bpl.n	800ba02 <_svfiprintf_r+0x32>
 800b9e4:	690b      	ldr	r3, [r1, #16]
 800b9e6:	b963      	cbnz	r3, 800ba02 <_svfiprintf_r+0x32>
 800b9e8:	2140      	movs	r1, #64	; 0x40
 800b9ea:	f7fe fbd1 	bl	800a190 <_malloc_r>
 800b9ee:	6028      	str	r0, [r5, #0]
 800b9f0:	6128      	str	r0, [r5, #16]
 800b9f2:	b920      	cbnz	r0, 800b9fe <_svfiprintf_r+0x2e>
 800b9f4:	230c      	movs	r3, #12
 800b9f6:	603b      	str	r3, [r7, #0]
 800b9f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9fc:	e0d0      	b.n	800bba0 <_svfiprintf_r+0x1d0>
 800b9fe:	2340      	movs	r3, #64	; 0x40
 800ba00:	616b      	str	r3, [r5, #20]
 800ba02:	2300      	movs	r3, #0
 800ba04:	9309      	str	r3, [sp, #36]	; 0x24
 800ba06:	2320      	movs	r3, #32
 800ba08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba0c:	2330      	movs	r3, #48	; 0x30
 800ba0e:	f04f 0901 	mov.w	r9, #1
 800ba12:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba16:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800bbb8 <_svfiprintf_r+0x1e8>
 800ba1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba1e:	4623      	mov	r3, r4
 800ba20:	469a      	mov	sl, r3
 800ba22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba26:	b10a      	cbz	r2, 800ba2c <_svfiprintf_r+0x5c>
 800ba28:	2a25      	cmp	r2, #37	; 0x25
 800ba2a:	d1f9      	bne.n	800ba20 <_svfiprintf_r+0x50>
 800ba2c:	ebba 0b04 	subs.w	fp, sl, r4
 800ba30:	d00b      	beq.n	800ba4a <_svfiprintf_r+0x7a>
 800ba32:	465b      	mov	r3, fp
 800ba34:	4622      	mov	r2, r4
 800ba36:	4629      	mov	r1, r5
 800ba38:	4638      	mov	r0, r7
 800ba3a:	f7ff ff6f 	bl	800b91c <__ssputs_r>
 800ba3e:	3001      	adds	r0, #1
 800ba40:	f000 80a9 	beq.w	800bb96 <_svfiprintf_r+0x1c6>
 800ba44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba46:	445a      	add	r2, fp
 800ba48:	9209      	str	r2, [sp, #36]	; 0x24
 800ba4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	f000 80a1 	beq.w	800bb96 <_svfiprintf_r+0x1c6>
 800ba54:	2300      	movs	r3, #0
 800ba56:	f04f 32ff 	mov.w	r2, #4294967295
 800ba5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba5e:	f10a 0a01 	add.w	sl, sl, #1
 800ba62:	9304      	str	r3, [sp, #16]
 800ba64:	9307      	str	r3, [sp, #28]
 800ba66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba6a:	931a      	str	r3, [sp, #104]	; 0x68
 800ba6c:	4654      	mov	r4, sl
 800ba6e:	2205      	movs	r2, #5
 800ba70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba74:	4850      	ldr	r0, [pc, #320]	; (800bbb8 <_svfiprintf_r+0x1e8>)
 800ba76:	f7fd fc8c 	bl	8009392 <memchr>
 800ba7a:	9a04      	ldr	r2, [sp, #16]
 800ba7c:	b9d8      	cbnz	r0, 800bab6 <_svfiprintf_r+0xe6>
 800ba7e:	06d0      	lsls	r0, r2, #27
 800ba80:	bf44      	itt	mi
 800ba82:	2320      	movmi	r3, #32
 800ba84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba88:	0711      	lsls	r1, r2, #28
 800ba8a:	bf44      	itt	mi
 800ba8c:	232b      	movmi	r3, #43	; 0x2b
 800ba8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba92:	f89a 3000 	ldrb.w	r3, [sl]
 800ba96:	2b2a      	cmp	r3, #42	; 0x2a
 800ba98:	d015      	beq.n	800bac6 <_svfiprintf_r+0xf6>
 800ba9a:	4654      	mov	r4, sl
 800ba9c:	2000      	movs	r0, #0
 800ba9e:	f04f 0c0a 	mov.w	ip, #10
 800baa2:	9a07      	ldr	r2, [sp, #28]
 800baa4:	4621      	mov	r1, r4
 800baa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800baaa:	3b30      	subs	r3, #48	; 0x30
 800baac:	2b09      	cmp	r3, #9
 800baae:	d94d      	bls.n	800bb4c <_svfiprintf_r+0x17c>
 800bab0:	b1b0      	cbz	r0, 800bae0 <_svfiprintf_r+0x110>
 800bab2:	9207      	str	r2, [sp, #28]
 800bab4:	e014      	b.n	800bae0 <_svfiprintf_r+0x110>
 800bab6:	eba0 0308 	sub.w	r3, r0, r8
 800baba:	fa09 f303 	lsl.w	r3, r9, r3
 800babe:	4313      	orrs	r3, r2
 800bac0:	46a2      	mov	sl, r4
 800bac2:	9304      	str	r3, [sp, #16]
 800bac4:	e7d2      	b.n	800ba6c <_svfiprintf_r+0x9c>
 800bac6:	9b03      	ldr	r3, [sp, #12]
 800bac8:	1d19      	adds	r1, r3, #4
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	9103      	str	r1, [sp, #12]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	bfbb      	ittet	lt
 800bad2:	425b      	neglt	r3, r3
 800bad4:	f042 0202 	orrlt.w	r2, r2, #2
 800bad8:	9307      	strge	r3, [sp, #28]
 800bada:	9307      	strlt	r3, [sp, #28]
 800badc:	bfb8      	it	lt
 800bade:	9204      	strlt	r2, [sp, #16]
 800bae0:	7823      	ldrb	r3, [r4, #0]
 800bae2:	2b2e      	cmp	r3, #46	; 0x2e
 800bae4:	d10c      	bne.n	800bb00 <_svfiprintf_r+0x130>
 800bae6:	7863      	ldrb	r3, [r4, #1]
 800bae8:	2b2a      	cmp	r3, #42	; 0x2a
 800baea:	d134      	bne.n	800bb56 <_svfiprintf_r+0x186>
 800baec:	9b03      	ldr	r3, [sp, #12]
 800baee:	3402      	adds	r4, #2
 800baf0:	1d1a      	adds	r2, r3, #4
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	9203      	str	r2, [sp, #12]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	bfb8      	it	lt
 800bafa:	f04f 33ff 	movlt.w	r3, #4294967295
 800bafe:	9305      	str	r3, [sp, #20]
 800bb00:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800bbbc <_svfiprintf_r+0x1ec>
 800bb04:	2203      	movs	r2, #3
 800bb06:	4650      	mov	r0, sl
 800bb08:	7821      	ldrb	r1, [r4, #0]
 800bb0a:	f7fd fc42 	bl	8009392 <memchr>
 800bb0e:	b138      	cbz	r0, 800bb20 <_svfiprintf_r+0x150>
 800bb10:	2240      	movs	r2, #64	; 0x40
 800bb12:	9b04      	ldr	r3, [sp, #16]
 800bb14:	eba0 000a 	sub.w	r0, r0, sl
 800bb18:	4082      	lsls	r2, r0
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	3401      	adds	r4, #1
 800bb1e:	9304      	str	r3, [sp, #16]
 800bb20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb24:	2206      	movs	r2, #6
 800bb26:	4826      	ldr	r0, [pc, #152]	; (800bbc0 <_svfiprintf_r+0x1f0>)
 800bb28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb2c:	f7fd fc31 	bl	8009392 <memchr>
 800bb30:	2800      	cmp	r0, #0
 800bb32:	d038      	beq.n	800bba6 <_svfiprintf_r+0x1d6>
 800bb34:	4b23      	ldr	r3, [pc, #140]	; (800bbc4 <_svfiprintf_r+0x1f4>)
 800bb36:	bb1b      	cbnz	r3, 800bb80 <_svfiprintf_r+0x1b0>
 800bb38:	9b03      	ldr	r3, [sp, #12]
 800bb3a:	3307      	adds	r3, #7
 800bb3c:	f023 0307 	bic.w	r3, r3, #7
 800bb40:	3308      	adds	r3, #8
 800bb42:	9303      	str	r3, [sp, #12]
 800bb44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb46:	4433      	add	r3, r6
 800bb48:	9309      	str	r3, [sp, #36]	; 0x24
 800bb4a:	e768      	b.n	800ba1e <_svfiprintf_r+0x4e>
 800bb4c:	460c      	mov	r4, r1
 800bb4e:	2001      	movs	r0, #1
 800bb50:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb54:	e7a6      	b.n	800baa4 <_svfiprintf_r+0xd4>
 800bb56:	2300      	movs	r3, #0
 800bb58:	f04f 0c0a 	mov.w	ip, #10
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	3401      	adds	r4, #1
 800bb60:	9305      	str	r3, [sp, #20]
 800bb62:	4620      	mov	r0, r4
 800bb64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb68:	3a30      	subs	r2, #48	; 0x30
 800bb6a:	2a09      	cmp	r2, #9
 800bb6c:	d903      	bls.n	800bb76 <_svfiprintf_r+0x1a6>
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d0c6      	beq.n	800bb00 <_svfiprintf_r+0x130>
 800bb72:	9105      	str	r1, [sp, #20]
 800bb74:	e7c4      	b.n	800bb00 <_svfiprintf_r+0x130>
 800bb76:	4604      	mov	r4, r0
 800bb78:	2301      	movs	r3, #1
 800bb7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb7e:	e7f0      	b.n	800bb62 <_svfiprintf_r+0x192>
 800bb80:	ab03      	add	r3, sp, #12
 800bb82:	9300      	str	r3, [sp, #0]
 800bb84:	462a      	mov	r2, r5
 800bb86:	4638      	mov	r0, r7
 800bb88:	4b0f      	ldr	r3, [pc, #60]	; (800bbc8 <_svfiprintf_r+0x1f8>)
 800bb8a:	a904      	add	r1, sp, #16
 800bb8c:	f7fc fc7c 	bl	8008488 <_printf_float>
 800bb90:	1c42      	adds	r2, r0, #1
 800bb92:	4606      	mov	r6, r0
 800bb94:	d1d6      	bne.n	800bb44 <_svfiprintf_r+0x174>
 800bb96:	89ab      	ldrh	r3, [r5, #12]
 800bb98:	065b      	lsls	r3, r3, #25
 800bb9a:	f53f af2d 	bmi.w	800b9f8 <_svfiprintf_r+0x28>
 800bb9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bba0:	b01d      	add	sp, #116	; 0x74
 800bba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bba6:	ab03      	add	r3, sp, #12
 800bba8:	9300      	str	r3, [sp, #0]
 800bbaa:	462a      	mov	r2, r5
 800bbac:	4638      	mov	r0, r7
 800bbae:	4b06      	ldr	r3, [pc, #24]	; (800bbc8 <_svfiprintf_r+0x1f8>)
 800bbb0:	a904      	add	r1, sp, #16
 800bbb2:	f7fc ff09 	bl	80089c8 <_printf_i>
 800bbb6:	e7eb      	b.n	800bb90 <_svfiprintf_r+0x1c0>
 800bbb8:	0800fc79 	.word	0x0800fc79
 800bbbc:	0800fc7f 	.word	0x0800fc7f
 800bbc0:	0800fc83 	.word	0x0800fc83
 800bbc4:	08008489 	.word	0x08008489
 800bbc8:	0800b91d 	.word	0x0800b91d

0800bbcc <__sflush_r>:
 800bbcc:	898a      	ldrh	r2, [r1, #12]
 800bbce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbd0:	4605      	mov	r5, r0
 800bbd2:	0710      	lsls	r0, r2, #28
 800bbd4:	460c      	mov	r4, r1
 800bbd6:	d457      	bmi.n	800bc88 <__sflush_r+0xbc>
 800bbd8:	684b      	ldr	r3, [r1, #4]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	dc04      	bgt.n	800bbe8 <__sflush_r+0x1c>
 800bbde:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	dc01      	bgt.n	800bbe8 <__sflush_r+0x1c>
 800bbe4:	2000      	movs	r0, #0
 800bbe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbea:	2e00      	cmp	r6, #0
 800bbec:	d0fa      	beq.n	800bbe4 <__sflush_r+0x18>
 800bbee:	2300      	movs	r3, #0
 800bbf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bbf4:	682f      	ldr	r7, [r5, #0]
 800bbf6:	6a21      	ldr	r1, [r4, #32]
 800bbf8:	602b      	str	r3, [r5, #0]
 800bbfa:	d032      	beq.n	800bc62 <__sflush_r+0x96>
 800bbfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bbfe:	89a3      	ldrh	r3, [r4, #12]
 800bc00:	075a      	lsls	r2, r3, #29
 800bc02:	d505      	bpl.n	800bc10 <__sflush_r+0x44>
 800bc04:	6863      	ldr	r3, [r4, #4]
 800bc06:	1ac0      	subs	r0, r0, r3
 800bc08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc0a:	b10b      	cbz	r3, 800bc10 <__sflush_r+0x44>
 800bc0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc0e:	1ac0      	subs	r0, r0, r3
 800bc10:	2300      	movs	r3, #0
 800bc12:	4602      	mov	r2, r0
 800bc14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc16:	4628      	mov	r0, r5
 800bc18:	6a21      	ldr	r1, [r4, #32]
 800bc1a:	47b0      	blx	r6
 800bc1c:	1c43      	adds	r3, r0, #1
 800bc1e:	89a3      	ldrh	r3, [r4, #12]
 800bc20:	d106      	bne.n	800bc30 <__sflush_r+0x64>
 800bc22:	6829      	ldr	r1, [r5, #0]
 800bc24:	291d      	cmp	r1, #29
 800bc26:	d82b      	bhi.n	800bc80 <__sflush_r+0xb4>
 800bc28:	4a28      	ldr	r2, [pc, #160]	; (800bccc <__sflush_r+0x100>)
 800bc2a:	410a      	asrs	r2, r1
 800bc2c:	07d6      	lsls	r6, r2, #31
 800bc2e:	d427      	bmi.n	800bc80 <__sflush_r+0xb4>
 800bc30:	2200      	movs	r2, #0
 800bc32:	6062      	str	r2, [r4, #4]
 800bc34:	6922      	ldr	r2, [r4, #16]
 800bc36:	04d9      	lsls	r1, r3, #19
 800bc38:	6022      	str	r2, [r4, #0]
 800bc3a:	d504      	bpl.n	800bc46 <__sflush_r+0x7a>
 800bc3c:	1c42      	adds	r2, r0, #1
 800bc3e:	d101      	bne.n	800bc44 <__sflush_r+0x78>
 800bc40:	682b      	ldr	r3, [r5, #0]
 800bc42:	b903      	cbnz	r3, 800bc46 <__sflush_r+0x7a>
 800bc44:	6560      	str	r0, [r4, #84]	; 0x54
 800bc46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc48:	602f      	str	r7, [r5, #0]
 800bc4a:	2900      	cmp	r1, #0
 800bc4c:	d0ca      	beq.n	800bbe4 <__sflush_r+0x18>
 800bc4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc52:	4299      	cmp	r1, r3
 800bc54:	d002      	beq.n	800bc5c <__sflush_r+0x90>
 800bc56:	4628      	mov	r0, r5
 800bc58:	f7fe fa2a 	bl	800a0b0 <_free_r>
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	6360      	str	r0, [r4, #52]	; 0x34
 800bc60:	e7c1      	b.n	800bbe6 <__sflush_r+0x1a>
 800bc62:	2301      	movs	r3, #1
 800bc64:	4628      	mov	r0, r5
 800bc66:	47b0      	blx	r6
 800bc68:	1c41      	adds	r1, r0, #1
 800bc6a:	d1c8      	bne.n	800bbfe <__sflush_r+0x32>
 800bc6c:	682b      	ldr	r3, [r5, #0]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d0c5      	beq.n	800bbfe <__sflush_r+0x32>
 800bc72:	2b1d      	cmp	r3, #29
 800bc74:	d001      	beq.n	800bc7a <__sflush_r+0xae>
 800bc76:	2b16      	cmp	r3, #22
 800bc78:	d101      	bne.n	800bc7e <__sflush_r+0xb2>
 800bc7a:	602f      	str	r7, [r5, #0]
 800bc7c:	e7b2      	b.n	800bbe4 <__sflush_r+0x18>
 800bc7e:	89a3      	ldrh	r3, [r4, #12]
 800bc80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc84:	81a3      	strh	r3, [r4, #12]
 800bc86:	e7ae      	b.n	800bbe6 <__sflush_r+0x1a>
 800bc88:	690f      	ldr	r7, [r1, #16]
 800bc8a:	2f00      	cmp	r7, #0
 800bc8c:	d0aa      	beq.n	800bbe4 <__sflush_r+0x18>
 800bc8e:	0793      	lsls	r3, r2, #30
 800bc90:	bf18      	it	ne
 800bc92:	2300      	movne	r3, #0
 800bc94:	680e      	ldr	r6, [r1, #0]
 800bc96:	bf08      	it	eq
 800bc98:	694b      	ldreq	r3, [r1, #20]
 800bc9a:	1bf6      	subs	r6, r6, r7
 800bc9c:	600f      	str	r7, [r1, #0]
 800bc9e:	608b      	str	r3, [r1, #8]
 800bca0:	2e00      	cmp	r6, #0
 800bca2:	dd9f      	ble.n	800bbe4 <__sflush_r+0x18>
 800bca4:	4633      	mov	r3, r6
 800bca6:	463a      	mov	r2, r7
 800bca8:	4628      	mov	r0, r5
 800bcaa:	6a21      	ldr	r1, [r4, #32]
 800bcac:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800bcb0:	47e0      	blx	ip
 800bcb2:	2800      	cmp	r0, #0
 800bcb4:	dc06      	bgt.n	800bcc4 <__sflush_r+0xf8>
 800bcb6:	89a3      	ldrh	r3, [r4, #12]
 800bcb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcc0:	81a3      	strh	r3, [r4, #12]
 800bcc2:	e790      	b.n	800bbe6 <__sflush_r+0x1a>
 800bcc4:	4407      	add	r7, r0
 800bcc6:	1a36      	subs	r6, r6, r0
 800bcc8:	e7ea      	b.n	800bca0 <__sflush_r+0xd4>
 800bcca:	bf00      	nop
 800bccc:	dfbffffe 	.word	0xdfbffffe

0800bcd0 <_fflush_r>:
 800bcd0:	b538      	push	{r3, r4, r5, lr}
 800bcd2:	690b      	ldr	r3, [r1, #16]
 800bcd4:	4605      	mov	r5, r0
 800bcd6:	460c      	mov	r4, r1
 800bcd8:	b913      	cbnz	r3, 800bce0 <_fflush_r+0x10>
 800bcda:	2500      	movs	r5, #0
 800bcdc:	4628      	mov	r0, r5
 800bcde:	bd38      	pop	{r3, r4, r5, pc}
 800bce0:	b118      	cbz	r0, 800bcea <_fflush_r+0x1a>
 800bce2:	6a03      	ldr	r3, [r0, #32]
 800bce4:	b90b      	cbnz	r3, 800bcea <_fflush_r+0x1a>
 800bce6:	f7fd fa2b 	bl	8009140 <__sinit>
 800bcea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d0f3      	beq.n	800bcda <_fflush_r+0xa>
 800bcf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bcf4:	07d0      	lsls	r0, r2, #31
 800bcf6:	d404      	bmi.n	800bd02 <_fflush_r+0x32>
 800bcf8:	0599      	lsls	r1, r3, #22
 800bcfa:	d402      	bmi.n	800bd02 <_fflush_r+0x32>
 800bcfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcfe:	f7fd fb46 	bl	800938e <__retarget_lock_acquire_recursive>
 800bd02:	4628      	mov	r0, r5
 800bd04:	4621      	mov	r1, r4
 800bd06:	f7ff ff61 	bl	800bbcc <__sflush_r>
 800bd0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd0c:	4605      	mov	r5, r0
 800bd0e:	07da      	lsls	r2, r3, #31
 800bd10:	d4e4      	bmi.n	800bcdc <_fflush_r+0xc>
 800bd12:	89a3      	ldrh	r3, [r4, #12]
 800bd14:	059b      	lsls	r3, r3, #22
 800bd16:	d4e1      	bmi.n	800bcdc <_fflush_r+0xc>
 800bd18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd1a:	f7fd fb39 	bl	8009390 <__retarget_lock_release_recursive>
 800bd1e:	e7dd      	b.n	800bcdc <_fflush_r+0xc>

0800bd20 <memmove>:
 800bd20:	4288      	cmp	r0, r1
 800bd22:	b510      	push	{r4, lr}
 800bd24:	eb01 0402 	add.w	r4, r1, r2
 800bd28:	d902      	bls.n	800bd30 <memmove+0x10>
 800bd2a:	4284      	cmp	r4, r0
 800bd2c:	4623      	mov	r3, r4
 800bd2e:	d807      	bhi.n	800bd40 <memmove+0x20>
 800bd30:	1e43      	subs	r3, r0, #1
 800bd32:	42a1      	cmp	r1, r4
 800bd34:	d008      	beq.n	800bd48 <memmove+0x28>
 800bd36:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd3e:	e7f8      	b.n	800bd32 <memmove+0x12>
 800bd40:	4601      	mov	r1, r0
 800bd42:	4402      	add	r2, r0
 800bd44:	428a      	cmp	r2, r1
 800bd46:	d100      	bne.n	800bd4a <memmove+0x2a>
 800bd48:	bd10      	pop	{r4, pc}
 800bd4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd52:	e7f7      	b.n	800bd44 <memmove+0x24>

0800bd54 <strncmp>:
 800bd54:	b510      	push	{r4, lr}
 800bd56:	b16a      	cbz	r2, 800bd74 <strncmp+0x20>
 800bd58:	3901      	subs	r1, #1
 800bd5a:	1884      	adds	r4, r0, r2
 800bd5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd60:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d103      	bne.n	800bd70 <strncmp+0x1c>
 800bd68:	42a0      	cmp	r0, r4
 800bd6a:	d001      	beq.n	800bd70 <strncmp+0x1c>
 800bd6c:	2a00      	cmp	r2, #0
 800bd6e:	d1f5      	bne.n	800bd5c <strncmp+0x8>
 800bd70:	1ad0      	subs	r0, r2, r3
 800bd72:	bd10      	pop	{r4, pc}
 800bd74:	4610      	mov	r0, r2
 800bd76:	e7fc      	b.n	800bd72 <strncmp+0x1e>

0800bd78 <_sbrk_r>:
 800bd78:	b538      	push	{r3, r4, r5, lr}
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	4d05      	ldr	r5, [pc, #20]	; (800bd94 <_sbrk_r+0x1c>)
 800bd7e:	4604      	mov	r4, r0
 800bd80:	4608      	mov	r0, r1
 800bd82:	602b      	str	r3, [r5, #0]
 800bd84:	f7f6 f9f8 	bl	8002178 <_sbrk>
 800bd88:	1c43      	adds	r3, r0, #1
 800bd8a:	d102      	bne.n	800bd92 <_sbrk_r+0x1a>
 800bd8c:	682b      	ldr	r3, [r5, #0]
 800bd8e:	b103      	cbz	r3, 800bd92 <_sbrk_r+0x1a>
 800bd90:	6023      	str	r3, [r4, #0]
 800bd92:	bd38      	pop	{r3, r4, r5, pc}
 800bd94:	200009e0 	.word	0x200009e0

0800bd98 <nan>:
 800bd98:	2000      	movs	r0, #0
 800bd9a:	4901      	ldr	r1, [pc, #4]	; (800bda0 <nan+0x8>)
 800bd9c:	4770      	bx	lr
 800bd9e:	bf00      	nop
 800bda0:	7ff80000 	.word	0x7ff80000

0800bda4 <__assert_func>:
 800bda4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bda6:	4614      	mov	r4, r2
 800bda8:	461a      	mov	r2, r3
 800bdaa:	4b09      	ldr	r3, [pc, #36]	; (800bdd0 <__assert_func+0x2c>)
 800bdac:	4605      	mov	r5, r0
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	68d8      	ldr	r0, [r3, #12]
 800bdb2:	b14c      	cbz	r4, 800bdc8 <__assert_func+0x24>
 800bdb4:	4b07      	ldr	r3, [pc, #28]	; (800bdd4 <__assert_func+0x30>)
 800bdb6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bdba:	9100      	str	r1, [sp, #0]
 800bdbc:	462b      	mov	r3, r5
 800bdbe:	4906      	ldr	r1, [pc, #24]	; (800bdd8 <__assert_func+0x34>)
 800bdc0:	f000 fbca 	bl	800c558 <fiprintf>
 800bdc4:	f000 fbda 	bl	800c57c <abort>
 800bdc8:	4b04      	ldr	r3, [pc, #16]	; (800bddc <__assert_func+0x38>)
 800bdca:	461c      	mov	r4, r3
 800bdcc:	e7f3      	b.n	800bdb6 <__assert_func+0x12>
 800bdce:	bf00      	nop
 800bdd0:	2000008c 	.word	0x2000008c
 800bdd4:	0800fc92 	.word	0x0800fc92
 800bdd8:	0800fc9f 	.word	0x0800fc9f
 800bddc:	0800fccd 	.word	0x0800fccd

0800bde0 <_calloc_r>:
 800bde0:	b570      	push	{r4, r5, r6, lr}
 800bde2:	fba1 5402 	umull	r5, r4, r1, r2
 800bde6:	b934      	cbnz	r4, 800bdf6 <_calloc_r+0x16>
 800bde8:	4629      	mov	r1, r5
 800bdea:	f7fe f9d1 	bl	800a190 <_malloc_r>
 800bdee:	4606      	mov	r6, r0
 800bdf0:	b928      	cbnz	r0, 800bdfe <_calloc_r+0x1e>
 800bdf2:	4630      	mov	r0, r6
 800bdf4:	bd70      	pop	{r4, r5, r6, pc}
 800bdf6:	220c      	movs	r2, #12
 800bdf8:	2600      	movs	r6, #0
 800bdfa:	6002      	str	r2, [r0, #0]
 800bdfc:	e7f9      	b.n	800bdf2 <_calloc_r+0x12>
 800bdfe:	462a      	mov	r2, r5
 800be00:	4621      	mov	r1, r4
 800be02:	f7fd fa46 	bl	8009292 <memset>
 800be06:	e7f4      	b.n	800bdf2 <_calloc_r+0x12>

0800be08 <rshift>:
 800be08:	6903      	ldr	r3, [r0, #16]
 800be0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be0e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800be12:	f100 0414 	add.w	r4, r0, #20
 800be16:	ea4f 1261 	mov.w	r2, r1, asr #5
 800be1a:	dd46      	ble.n	800beaa <rshift+0xa2>
 800be1c:	f011 011f 	ands.w	r1, r1, #31
 800be20:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800be24:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800be28:	d10c      	bne.n	800be44 <rshift+0x3c>
 800be2a:	4629      	mov	r1, r5
 800be2c:	f100 0710 	add.w	r7, r0, #16
 800be30:	42b1      	cmp	r1, r6
 800be32:	d335      	bcc.n	800bea0 <rshift+0x98>
 800be34:	1a9b      	subs	r3, r3, r2
 800be36:	009b      	lsls	r3, r3, #2
 800be38:	1eea      	subs	r2, r5, #3
 800be3a:	4296      	cmp	r6, r2
 800be3c:	bf38      	it	cc
 800be3e:	2300      	movcc	r3, #0
 800be40:	4423      	add	r3, r4
 800be42:	e015      	b.n	800be70 <rshift+0x68>
 800be44:	46a1      	mov	r9, r4
 800be46:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800be4a:	f1c1 0820 	rsb	r8, r1, #32
 800be4e:	40cf      	lsrs	r7, r1
 800be50:	f105 0e04 	add.w	lr, r5, #4
 800be54:	4576      	cmp	r6, lr
 800be56:	46f4      	mov	ip, lr
 800be58:	d816      	bhi.n	800be88 <rshift+0x80>
 800be5a:	1a9a      	subs	r2, r3, r2
 800be5c:	0092      	lsls	r2, r2, #2
 800be5e:	3a04      	subs	r2, #4
 800be60:	3501      	adds	r5, #1
 800be62:	42ae      	cmp	r6, r5
 800be64:	bf38      	it	cc
 800be66:	2200      	movcc	r2, #0
 800be68:	18a3      	adds	r3, r4, r2
 800be6a:	50a7      	str	r7, [r4, r2]
 800be6c:	b107      	cbz	r7, 800be70 <rshift+0x68>
 800be6e:	3304      	adds	r3, #4
 800be70:	42a3      	cmp	r3, r4
 800be72:	eba3 0204 	sub.w	r2, r3, r4
 800be76:	bf08      	it	eq
 800be78:	2300      	moveq	r3, #0
 800be7a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800be7e:	6102      	str	r2, [r0, #16]
 800be80:	bf08      	it	eq
 800be82:	6143      	streq	r3, [r0, #20]
 800be84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be88:	f8dc c000 	ldr.w	ip, [ip]
 800be8c:	fa0c fc08 	lsl.w	ip, ip, r8
 800be90:	ea4c 0707 	orr.w	r7, ip, r7
 800be94:	f849 7b04 	str.w	r7, [r9], #4
 800be98:	f85e 7b04 	ldr.w	r7, [lr], #4
 800be9c:	40cf      	lsrs	r7, r1
 800be9e:	e7d9      	b.n	800be54 <rshift+0x4c>
 800bea0:	f851 cb04 	ldr.w	ip, [r1], #4
 800bea4:	f847 cf04 	str.w	ip, [r7, #4]!
 800bea8:	e7c2      	b.n	800be30 <rshift+0x28>
 800beaa:	4623      	mov	r3, r4
 800beac:	e7e0      	b.n	800be70 <rshift+0x68>

0800beae <__hexdig_fun>:
 800beae:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800beb2:	2b09      	cmp	r3, #9
 800beb4:	d802      	bhi.n	800bebc <__hexdig_fun+0xe>
 800beb6:	3820      	subs	r0, #32
 800beb8:	b2c0      	uxtb	r0, r0
 800beba:	4770      	bx	lr
 800bebc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bec0:	2b05      	cmp	r3, #5
 800bec2:	d801      	bhi.n	800bec8 <__hexdig_fun+0x1a>
 800bec4:	3847      	subs	r0, #71	; 0x47
 800bec6:	e7f7      	b.n	800beb8 <__hexdig_fun+0xa>
 800bec8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800becc:	2b05      	cmp	r3, #5
 800bece:	d801      	bhi.n	800bed4 <__hexdig_fun+0x26>
 800bed0:	3827      	subs	r0, #39	; 0x27
 800bed2:	e7f1      	b.n	800beb8 <__hexdig_fun+0xa>
 800bed4:	2000      	movs	r0, #0
 800bed6:	4770      	bx	lr

0800bed8 <__gethex>:
 800bed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bedc:	4681      	mov	r9, r0
 800bede:	468a      	mov	sl, r1
 800bee0:	4617      	mov	r7, r2
 800bee2:	680a      	ldr	r2, [r1, #0]
 800bee4:	b085      	sub	sp, #20
 800bee6:	f102 0b02 	add.w	fp, r2, #2
 800beea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800beee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bef2:	9302      	str	r3, [sp, #8]
 800bef4:	32fe      	adds	r2, #254	; 0xfe
 800bef6:	eb02 030b 	add.w	r3, r2, fp
 800befa:	46d8      	mov	r8, fp
 800befc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800bf00:	9301      	str	r3, [sp, #4]
 800bf02:	2830      	cmp	r0, #48	; 0x30
 800bf04:	d0f7      	beq.n	800bef6 <__gethex+0x1e>
 800bf06:	f7ff ffd2 	bl	800beae <__hexdig_fun>
 800bf0a:	4604      	mov	r4, r0
 800bf0c:	2800      	cmp	r0, #0
 800bf0e:	d138      	bne.n	800bf82 <__gethex+0xaa>
 800bf10:	2201      	movs	r2, #1
 800bf12:	4640      	mov	r0, r8
 800bf14:	49a7      	ldr	r1, [pc, #668]	; (800c1b4 <__gethex+0x2dc>)
 800bf16:	f7ff ff1d 	bl	800bd54 <strncmp>
 800bf1a:	4606      	mov	r6, r0
 800bf1c:	2800      	cmp	r0, #0
 800bf1e:	d169      	bne.n	800bff4 <__gethex+0x11c>
 800bf20:	f898 0001 	ldrb.w	r0, [r8, #1]
 800bf24:	465d      	mov	r5, fp
 800bf26:	f7ff ffc2 	bl	800beae <__hexdig_fun>
 800bf2a:	2800      	cmp	r0, #0
 800bf2c:	d064      	beq.n	800bff8 <__gethex+0x120>
 800bf2e:	465a      	mov	r2, fp
 800bf30:	7810      	ldrb	r0, [r2, #0]
 800bf32:	4690      	mov	r8, r2
 800bf34:	2830      	cmp	r0, #48	; 0x30
 800bf36:	f102 0201 	add.w	r2, r2, #1
 800bf3a:	d0f9      	beq.n	800bf30 <__gethex+0x58>
 800bf3c:	f7ff ffb7 	bl	800beae <__hexdig_fun>
 800bf40:	2301      	movs	r3, #1
 800bf42:	fab0 f480 	clz	r4, r0
 800bf46:	465e      	mov	r6, fp
 800bf48:	0964      	lsrs	r4, r4, #5
 800bf4a:	9301      	str	r3, [sp, #4]
 800bf4c:	4642      	mov	r2, r8
 800bf4e:	4615      	mov	r5, r2
 800bf50:	7828      	ldrb	r0, [r5, #0]
 800bf52:	3201      	adds	r2, #1
 800bf54:	f7ff ffab 	bl	800beae <__hexdig_fun>
 800bf58:	2800      	cmp	r0, #0
 800bf5a:	d1f8      	bne.n	800bf4e <__gethex+0x76>
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	4628      	mov	r0, r5
 800bf60:	4994      	ldr	r1, [pc, #592]	; (800c1b4 <__gethex+0x2dc>)
 800bf62:	f7ff fef7 	bl	800bd54 <strncmp>
 800bf66:	b978      	cbnz	r0, 800bf88 <__gethex+0xb0>
 800bf68:	b946      	cbnz	r6, 800bf7c <__gethex+0xa4>
 800bf6a:	1c6e      	adds	r6, r5, #1
 800bf6c:	4632      	mov	r2, r6
 800bf6e:	4615      	mov	r5, r2
 800bf70:	7828      	ldrb	r0, [r5, #0]
 800bf72:	3201      	adds	r2, #1
 800bf74:	f7ff ff9b 	bl	800beae <__hexdig_fun>
 800bf78:	2800      	cmp	r0, #0
 800bf7a:	d1f8      	bne.n	800bf6e <__gethex+0x96>
 800bf7c:	1b73      	subs	r3, r6, r5
 800bf7e:	009e      	lsls	r6, r3, #2
 800bf80:	e004      	b.n	800bf8c <__gethex+0xb4>
 800bf82:	2400      	movs	r4, #0
 800bf84:	4626      	mov	r6, r4
 800bf86:	e7e1      	b.n	800bf4c <__gethex+0x74>
 800bf88:	2e00      	cmp	r6, #0
 800bf8a:	d1f7      	bne.n	800bf7c <__gethex+0xa4>
 800bf8c:	782b      	ldrb	r3, [r5, #0]
 800bf8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bf92:	2b50      	cmp	r3, #80	; 0x50
 800bf94:	d13d      	bne.n	800c012 <__gethex+0x13a>
 800bf96:	786b      	ldrb	r3, [r5, #1]
 800bf98:	2b2b      	cmp	r3, #43	; 0x2b
 800bf9a:	d02f      	beq.n	800bffc <__gethex+0x124>
 800bf9c:	2b2d      	cmp	r3, #45	; 0x2d
 800bf9e:	d031      	beq.n	800c004 <__gethex+0x12c>
 800bfa0:	f04f 0b00 	mov.w	fp, #0
 800bfa4:	1c69      	adds	r1, r5, #1
 800bfa6:	7808      	ldrb	r0, [r1, #0]
 800bfa8:	f7ff ff81 	bl	800beae <__hexdig_fun>
 800bfac:	1e42      	subs	r2, r0, #1
 800bfae:	b2d2      	uxtb	r2, r2
 800bfb0:	2a18      	cmp	r2, #24
 800bfb2:	d82e      	bhi.n	800c012 <__gethex+0x13a>
 800bfb4:	f1a0 0210 	sub.w	r2, r0, #16
 800bfb8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bfbc:	f7ff ff77 	bl	800beae <__hexdig_fun>
 800bfc0:	f100 3cff 	add.w	ip, r0, #4294967295
 800bfc4:	fa5f fc8c 	uxtb.w	ip, ip
 800bfc8:	f1bc 0f18 	cmp.w	ip, #24
 800bfcc:	d91d      	bls.n	800c00a <__gethex+0x132>
 800bfce:	f1bb 0f00 	cmp.w	fp, #0
 800bfd2:	d000      	beq.n	800bfd6 <__gethex+0xfe>
 800bfd4:	4252      	negs	r2, r2
 800bfd6:	4416      	add	r6, r2
 800bfd8:	f8ca 1000 	str.w	r1, [sl]
 800bfdc:	b1dc      	cbz	r4, 800c016 <__gethex+0x13e>
 800bfde:	9b01      	ldr	r3, [sp, #4]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	bf14      	ite	ne
 800bfe4:	f04f 0800 	movne.w	r8, #0
 800bfe8:	f04f 0806 	moveq.w	r8, #6
 800bfec:	4640      	mov	r0, r8
 800bfee:	b005      	add	sp, #20
 800bff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bff4:	4645      	mov	r5, r8
 800bff6:	4626      	mov	r6, r4
 800bff8:	2401      	movs	r4, #1
 800bffa:	e7c7      	b.n	800bf8c <__gethex+0xb4>
 800bffc:	f04f 0b00 	mov.w	fp, #0
 800c000:	1ca9      	adds	r1, r5, #2
 800c002:	e7d0      	b.n	800bfa6 <__gethex+0xce>
 800c004:	f04f 0b01 	mov.w	fp, #1
 800c008:	e7fa      	b.n	800c000 <__gethex+0x128>
 800c00a:	230a      	movs	r3, #10
 800c00c:	fb03 0002 	mla	r0, r3, r2, r0
 800c010:	e7d0      	b.n	800bfb4 <__gethex+0xdc>
 800c012:	4629      	mov	r1, r5
 800c014:	e7e0      	b.n	800bfd8 <__gethex+0x100>
 800c016:	4621      	mov	r1, r4
 800c018:	eba5 0308 	sub.w	r3, r5, r8
 800c01c:	3b01      	subs	r3, #1
 800c01e:	2b07      	cmp	r3, #7
 800c020:	dc0a      	bgt.n	800c038 <__gethex+0x160>
 800c022:	4648      	mov	r0, r9
 800c024:	f7fe f940 	bl	800a2a8 <_Balloc>
 800c028:	4604      	mov	r4, r0
 800c02a:	b940      	cbnz	r0, 800c03e <__gethex+0x166>
 800c02c:	4602      	mov	r2, r0
 800c02e:	21e4      	movs	r1, #228	; 0xe4
 800c030:	4b61      	ldr	r3, [pc, #388]	; (800c1b8 <__gethex+0x2e0>)
 800c032:	4862      	ldr	r0, [pc, #392]	; (800c1bc <__gethex+0x2e4>)
 800c034:	f7ff feb6 	bl	800bda4 <__assert_func>
 800c038:	3101      	adds	r1, #1
 800c03a:	105b      	asrs	r3, r3, #1
 800c03c:	e7ef      	b.n	800c01e <__gethex+0x146>
 800c03e:	2300      	movs	r3, #0
 800c040:	469b      	mov	fp, r3
 800c042:	f100 0a14 	add.w	sl, r0, #20
 800c046:	f8cd a004 	str.w	sl, [sp, #4]
 800c04a:	45a8      	cmp	r8, r5
 800c04c:	d344      	bcc.n	800c0d8 <__gethex+0x200>
 800c04e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c052:	4658      	mov	r0, fp
 800c054:	f848 bb04 	str.w	fp, [r8], #4
 800c058:	eba8 080a 	sub.w	r8, r8, sl
 800c05c:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800c060:	6122      	str	r2, [r4, #16]
 800c062:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800c066:	f7fe fa11 	bl	800a48c <__hi0bits>
 800c06a:	683d      	ldr	r5, [r7, #0]
 800c06c:	eba8 0800 	sub.w	r8, r8, r0
 800c070:	45a8      	cmp	r8, r5
 800c072:	dd59      	ble.n	800c128 <__gethex+0x250>
 800c074:	eba8 0805 	sub.w	r8, r8, r5
 800c078:	4641      	mov	r1, r8
 800c07a:	4620      	mov	r0, r4
 800c07c:	f7fe fd8f 	bl	800ab9e <__any_on>
 800c080:	4683      	mov	fp, r0
 800c082:	b1b8      	cbz	r0, 800c0b4 <__gethex+0x1dc>
 800c084:	f04f 0b01 	mov.w	fp, #1
 800c088:	f108 33ff 	add.w	r3, r8, #4294967295
 800c08c:	1159      	asrs	r1, r3, #5
 800c08e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c092:	f003 021f 	and.w	r2, r3, #31
 800c096:	fa0b f202 	lsl.w	r2, fp, r2
 800c09a:	420a      	tst	r2, r1
 800c09c:	d00a      	beq.n	800c0b4 <__gethex+0x1dc>
 800c09e:	455b      	cmp	r3, fp
 800c0a0:	dd06      	ble.n	800c0b0 <__gethex+0x1d8>
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	f1a8 0102 	sub.w	r1, r8, #2
 800c0a8:	f7fe fd79 	bl	800ab9e <__any_on>
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	d138      	bne.n	800c122 <__gethex+0x24a>
 800c0b0:	f04f 0b02 	mov.w	fp, #2
 800c0b4:	4641      	mov	r1, r8
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	f7ff fea6 	bl	800be08 <rshift>
 800c0bc:	4446      	add	r6, r8
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	42b3      	cmp	r3, r6
 800c0c2:	da41      	bge.n	800c148 <__gethex+0x270>
 800c0c4:	4621      	mov	r1, r4
 800c0c6:	4648      	mov	r0, r9
 800c0c8:	f7fe f92e 	bl	800a328 <_Bfree>
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c0d0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c0d4:	6013      	str	r3, [r2, #0]
 800c0d6:	e789      	b.n	800bfec <__gethex+0x114>
 800c0d8:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c0dc:	2a2e      	cmp	r2, #46	; 0x2e
 800c0de:	d014      	beq.n	800c10a <__gethex+0x232>
 800c0e0:	2b20      	cmp	r3, #32
 800c0e2:	d106      	bne.n	800c0f2 <__gethex+0x21a>
 800c0e4:	9b01      	ldr	r3, [sp, #4]
 800c0e6:	f843 bb04 	str.w	fp, [r3], #4
 800c0ea:	f04f 0b00 	mov.w	fp, #0
 800c0ee:	9301      	str	r3, [sp, #4]
 800c0f0:	465b      	mov	r3, fp
 800c0f2:	7828      	ldrb	r0, [r5, #0]
 800c0f4:	9303      	str	r3, [sp, #12]
 800c0f6:	f7ff feda 	bl	800beae <__hexdig_fun>
 800c0fa:	9b03      	ldr	r3, [sp, #12]
 800c0fc:	f000 000f 	and.w	r0, r0, #15
 800c100:	4098      	lsls	r0, r3
 800c102:	ea4b 0b00 	orr.w	fp, fp, r0
 800c106:	3304      	adds	r3, #4
 800c108:	e79f      	b.n	800c04a <__gethex+0x172>
 800c10a:	45a8      	cmp	r8, r5
 800c10c:	d8e8      	bhi.n	800c0e0 <__gethex+0x208>
 800c10e:	2201      	movs	r2, #1
 800c110:	4628      	mov	r0, r5
 800c112:	4928      	ldr	r1, [pc, #160]	; (800c1b4 <__gethex+0x2dc>)
 800c114:	9303      	str	r3, [sp, #12]
 800c116:	f7ff fe1d 	bl	800bd54 <strncmp>
 800c11a:	9b03      	ldr	r3, [sp, #12]
 800c11c:	2800      	cmp	r0, #0
 800c11e:	d1df      	bne.n	800c0e0 <__gethex+0x208>
 800c120:	e793      	b.n	800c04a <__gethex+0x172>
 800c122:	f04f 0b03 	mov.w	fp, #3
 800c126:	e7c5      	b.n	800c0b4 <__gethex+0x1dc>
 800c128:	da0b      	bge.n	800c142 <__gethex+0x26a>
 800c12a:	eba5 0808 	sub.w	r8, r5, r8
 800c12e:	4621      	mov	r1, r4
 800c130:	4642      	mov	r2, r8
 800c132:	4648      	mov	r0, r9
 800c134:	f7fe fb10 	bl	800a758 <__lshift>
 800c138:	4604      	mov	r4, r0
 800c13a:	eba6 0608 	sub.w	r6, r6, r8
 800c13e:	f100 0a14 	add.w	sl, r0, #20
 800c142:	f04f 0b00 	mov.w	fp, #0
 800c146:	e7ba      	b.n	800c0be <__gethex+0x1e6>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	42b3      	cmp	r3, r6
 800c14c:	dd74      	ble.n	800c238 <__gethex+0x360>
 800c14e:	1b9e      	subs	r6, r3, r6
 800c150:	42b5      	cmp	r5, r6
 800c152:	dc35      	bgt.n	800c1c0 <__gethex+0x2e8>
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2b02      	cmp	r3, #2
 800c158:	d023      	beq.n	800c1a2 <__gethex+0x2ca>
 800c15a:	2b03      	cmp	r3, #3
 800c15c:	d025      	beq.n	800c1aa <__gethex+0x2d2>
 800c15e:	2b01      	cmp	r3, #1
 800c160:	d115      	bne.n	800c18e <__gethex+0x2b6>
 800c162:	42b5      	cmp	r5, r6
 800c164:	d113      	bne.n	800c18e <__gethex+0x2b6>
 800c166:	2d01      	cmp	r5, #1
 800c168:	d10b      	bne.n	800c182 <__gethex+0x2aa>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	9a02      	ldr	r2, [sp, #8]
 800c16e:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c172:	6013      	str	r3, [r2, #0]
 800c174:	2301      	movs	r3, #1
 800c176:	6123      	str	r3, [r4, #16]
 800c178:	f8ca 3000 	str.w	r3, [sl]
 800c17c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c17e:	601c      	str	r4, [r3, #0]
 800c180:	e734      	b.n	800bfec <__gethex+0x114>
 800c182:	4620      	mov	r0, r4
 800c184:	1e69      	subs	r1, r5, #1
 800c186:	f7fe fd0a 	bl	800ab9e <__any_on>
 800c18a:	2800      	cmp	r0, #0
 800c18c:	d1ed      	bne.n	800c16a <__gethex+0x292>
 800c18e:	4621      	mov	r1, r4
 800c190:	4648      	mov	r0, r9
 800c192:	f7fe f8c9 	bl	800a328 <_Bfree>
 800c196:	2300      	movs	r3, #0
 800c198:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c19a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c19e:	6013      	str	r3, [r2, #0]
 800c1a0:	e724      	b.n	800bfec <__gethex+0x114>
 800c1a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d1f2      	bne.n	800c18e <__gethex+0x2b6>
 800c1a8:	e7df      	b.n	800c16a <__gethex+0x292>
 800c1aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d1dc      	bne.n	800c16a <__gethex+0x292>
 800c1b0:	e7ed      	b.n	800c18e <__gethex+0x2b6>
 800c1b2:	bf00      	nop
 800c1b4:	0800fb24 	.word	0x0800fb24
 800c1b8:	0800f9b7 	.word	0x0800f9b7
 800c1bc:	0800fcce 	.word	0x0800fcce
 800c1c0:	f106 38ff 	add.w	r8, r6, #4294967295
 800c1c4:	f1bb 0f00 	cmp.w	fp, #0
 800c1c8:	d133      	bne.n	800c232 <__gethex+0x35a>
 800c1ca:	f1b8 0f00 	cmp.w	r8, #0
 800c1ce:	d004      	beq.n	800c1da <__gethex+0x302>
 800c1d0:	4641      	mov	r1, r8
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	f7fe fce3 	bl	800ab9e <__any_on>
 800c1d8:	4683      	mov	fp, r0
 800c1da:	2301      	movs	r3, #1
 800c1dc:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c1e0:	f008 081f 	and.w	r8, r8, #31
 800c1e4:	fa03 f308 	lsl.w	r3, r3, r8
 800c1e8:	f04f 0802 	mov.w	r8, #2
 800c1ec:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c1f0:	4631      	mov	r1, r6
 800c1f2:	4213      	tst	r3, r2
 800c1f4:	4620      	mov	r0, r4
 800c1f6:	bf18      	it	ne
 800c1f8:	f04b 0b02 	orrne.w	fp, fp, #2
 800c1fc:	1bad      	subs	r5, r5, r6
 800c1fe:	f7ff fe03 	bl	800be08 <rshift>
 800c202:	687e      	ldr	r6, [r7, #4]
 800c204:	f1bb 0f00 	cmp.w	fp, #0
 800c208:	d04a      	beq.n	800c2a0 <__gethex+0x3c8>
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2b02      	cmp	r3, #2
 800c20e:	d016      	beq.n	800c23e <__gethex+0x366>
 800c210:	2b03      	cmp	r3, #3
 800c212:	d018      	beq.n	800c246 <__gethex+0x36e>
 800c214:	2b01      	cmp	r3, #1
 800c216:	d109      	bne.n	800c22c <__gethex+0x354>
 800c218:	f01b 0f02 	tst.w	fp, #2
 800c21c:	d006      	beq.n	800c22c <__gethex+0x354>
 800c21e:	f8da 3000 	ldr.w	r3, [sl]
 800c222:	ea4b 0b03 	orr.w	fp, fp, r3
 800c226:	f01b 0f01 	tst.w	fp, #1
 800c22a:	d10f      	bne.n	800c24c <__gethex+0x374>
 800c22c:	f048 0810 	orr.w	r8, r8, #16
 800c230:	e036      	b.n	800c2a0 <__gethex+0x3c8>
 800c232:	f04f 0b01 	mov.w	fp, #1
 800c236:	e7d0      	b.n	800c1da <__gethex+0x302>
 800c238:	f04f 0801 	mov.w	r8, #1
 800c23c:	e7e2      	b.n	800c204 <__gethex+0x32c>
 800c23e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c240:	f1c3 0301 	rsb	r3, r3, #1
 800c244:	930f      	str	r3, [sp, #60]	; 0x3c
 800c246:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d0ef      	beq.n	800c22c <__gethex+0x354>
 800c24c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c250:	f104 0214 	add.w	r2, r4, #20
 800c254:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c258:	9301      	str	r3, [sp, #4]
 800c25a:	2300      	movs	r3, #0
 800c25c:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c260:	4694      	mov	ip, r2
 800c262:	f852 1b04 	ldr.w	r1, [r2], #4
 800c266:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c26a:	d01e      	beq.n	800c2aa <__gethex+0x3d2>
 800c26c:	3101      	adds	r1, #1
 800c26e:	f8cc 1000 	str.w	r1, [ip]
 800c272:	f1b8 0f02 	cmp.w	r8, #2
 800c276:	f104 0214 	add.w	r2, r4, #20
 800c27a:	d13d      	bne.n	800c2f8 <__gethex+0x420>
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	3b01      	subs	r3, #1
 800c280:	42ab      	cmp	r3, r5
 800c282:	d10b      	bne.n	800c29c <__gethex+0x3c4>
 800c284:	2301      	movs	r3, #1
 800c286:	1169      	asrs	r1, r5, #5
 800c288:	f005 051f 	and.w	r5, r5, #31
 800c28c:	fa03 f505 	lsl.w	r5, r3, r5
 800c290:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c294:	421d      	tst	r5, r3
 800c296:	bf18      	it	ne
 800c298:	f04f 0801 	movne.w	r8, #1
 800c29c:	f048 0820 	orr.w	r8, r8, #32
 800c2a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2a2:	601c      	str	r4, [r3, #0]
 800c2a4:	9b02      	ldr	r3, [sp, #8]
 800c2a6:	601e      	str	r6, [r3, #0]
 800c2a8:	e6a0      	b.n	800bfec <__gethex+0x114>
 800c2aa:	4290      	cmp	r0, r2
 800c2ac:	f842 3c04 	str.w	r3, [r2, #-4]
 800c2b0:	d8d6      	bhi.n	800c260 <__gethex+0x388>
 800c2b2:	68a2      	ldr	r2, [r4, #8]
 800c2b4:	4593      	cmp	fp, r2
 800c2b6:	db17      	blt.n	800c2e8 <__gethex+0x410>
 800c2b8:	6861      	ldr	r1, [r4, #4]
 800c2ba:	4648      	mov	r0, r9
 800c2bc:	3101      	adds	r1, #1
 800c2be:	f7fd fff3 	bl	800a2a8 <_Balloc>
 800c2c2:	4682      	mov	sl, r0
 800c2c4:	b918      	cbnz	r0, 800c2ce <__gethex+0x3f6>
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	2184      	movs	r1, #132	; 0x84
 800c2ca:	4b1a      	ldr	r3, [pc, #104]	; (800c334 <__gethex+0x45c>)
 800c2cc:	e6b1      	b.n	800c032 <__gethex+0x15a>
 800c2ce:	6922      	ldr	r2, [r4, #16]
 800c2d0:	f104 010c 	add.w	r1, r4, #12
 800c2d4:	3202      	adds	r2, #2
 800c2d6:	0092      	lsls	r2, r2, #2
 800c2d8:	300c      	adds	r0, #12
 800c2da:	f7fd f868 	bl	80093ae <memcpy>
 800c2de:	4621      	mov	r1, r4
 800c2e0:	4648      	mov	r0, r9
 800c2e2:	f7fe f821 	bl	800a328 <_Bfree>
 800c2e6:	4654      	mov	r4, sl
 800c2e8:	6922      	ldr	r2, [r4, #16]
 800c2ea:	1c51      	adds	r1, r2, #1
 800c2ec:	6121      	str	r1, [r4, #16]
 800c2ee:	2101      	movs	r1, #1
 800c2f0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c2f4:	6151      	str	r1, [r2, #20]
 800c2f6:	e7bc      	b.n	800c272 <__gethex+0x39a>
 800c2f8:	6921      	ldr	r1, [r4, #16]
 800c2fa:	4559      	cmp	r1, fp
 800c2fc:	dd0b      	ble.n	800c316 <__gethex+0x43e>
 800c2fe:	2101      	movs	r1, #1
 800c300:	4620      	mov	r0, r4
 800c302:	f7ff fd81 	bl	800be08 <rshift>
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	3601      	adds	r6, #1
 800c30a:	42b3      	cmp	r3, r6
 800c30c:	f6ff aeda 	blt.w	800c0c4 <__gethex+0x1ec>
 800c310:	f04f 0801 	mov.w	r8, #1
 800c314:	e7c2      	b.n	800c29c <__gethex+0x3c4>
 800c316:	f015 051f 	ands.w	r5, r5, #31
 800c31a:	d0f9      	beq.n	800c310 <__gethex+0x438>
 800c31c:	9b01      	ldr	r3, [sp, #4]
 800c31e:	f1c5 0520 	rsb	r5, r5, #32
 800c322:	441a      	add	r2, r3
 800c324:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c328:	f7fe f8b0 	bl	800a48c <__hi0bits>
 800c32c:	42a8      	cmp	r0, r5
 800c32e:	dbe6      	blt.n	800c2fe <__gethex+0x426>
 800c330:	e7ee      	b.n	800c310 <__gethex+0x438>
 800c332:	bf00      	nop
 800c334:	0800f9b7 	.word	0x0800f9b7

0800c338 <L_shift>:
 800c338:	f1c2 0208 	rsb	r2, r2, #8
 800c33c:	0092      	lsls	r2, r2, #2
 800c33e:	b570      	push	{r4, r5, r6, lr}
 800c340:	f1c2 0620 	rsb	r6, r2, #32
 800c344:	6843      	ldr	r3, [r0, #4]
 800c346:	6804      	ldr	r4, [r0, #0]
 800c348:	fa03 f506 	lsl.w	r5, r3, r6
 800c34c:	432c      	orrs	r4, r5
 800c34e:	40d3      	lsrs	r3, r2
 800c350:	6004      	str	r4, [r0, #0]
 800c352:	f840 3f04 	str.w	r3, [r0, #4]!
 800c356:	4288      	cmp	r0, r1
 800c358:	d3f4      	bcc.n	800c344 <L_shift+0xc>
 800c35a:	bd70      	pop	{r4, r5, r6, pc}

0800c35c <__match>:
 800c35c:	b530      	push	{r4, r5, lr}
 800c35e:	6803      	ldr	r3, [r0, #0]
 800c360:	3301      	adds	r3, #1
 800c362:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c366:	b914      	cbnz	r4, 800c36e <__match+0x12>
 800c368:	6003      	str	r3, [r0, #0]
 800c36a:	2001      	movs	r0, #1
 800c36c:	bd30      	pop	{r4, r5, pc}
 800c36e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c372:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c376:	2d19      	cmp	r5, #25
 800c378:	bf98      	it	ls
 800c37a:	3220      	addls	r2, #32
 800c37c:	42a2      	cmp	r2, r4
 800c37e:	d0f0      	beq.n	800c362 <__match+0x6>
 800c380:	2000      	movs	r0, #0
 800c382:	e7f3      	b.n	800c36c <__match+0x10>

0800c384 <__hexnan>:
 800c384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c388:	2500      	movs	r5, #0
 800c38a:	680b      	ldr	r3, [r1, #0]
 800c38c:	4682      	mov	sl, r0
 800c38e:	115e      	asrs	r6, r3, #5
 800c390:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c394:	f013 031f 	ands.w	r3, r3, #31
 800c398:	bf18      	it	ne
 800c39a:	3604      	addne	r6, #4
 800c39c:	1f37      	subs	r7, r6, #4
 800c39e:	4690      	mov	r8, r2
 800c3a0:	46b9      	mov	r9, r7
 800c3a2:	463c      	mov	r4, r7
 800c3a4:	46ab      	mov	fp, r5
 800c3a6:	b087      	sub	sp, #28
 800c3a8:	6801      	ldr	r1, [r0, #0]
 800c3aa:	9301      	str	r3, [sp, #4]
 800c3ac:	f846 5c04 	str.w	r5, [r6, #-4]
 800c3b0:	9502      	str	r5, [sp, #8]
 800c3b2:	784a      	ldrb	r2, [r1, #1]
 800c3b4:	1c4b      	adds	r3, r1, #1
 800c3b6:	9303      	str	r3, [sp, #12]
 800c3b8:	b342      	cbz	r2, 800c40c <__hexnan+0x88>
 800c3ba:	4610      	mov	r0, r2
 800c3bc:	9105      	str	r1, [sp, #20]
 800c3be:	9204      	str	r2, [sp, #16]
 800c3c0:	f7ff fd75 	bl	800beae <__hexdig_fun>
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	d14f      	bne.n	800c468 <__hexnan+0xe4>
 800c3c8:	9a04      	ldr	r2, [sp, #16]
 800c3ca:	9905      	ldr	r1, [sp, #20]
 800c3cc:	2a20      	cmp	r2, #32
 800c3ce:	d818      	bhi.n	800c402 <__hexnan+0x7e>
 800c3d0:	9b02      	ldr	r3, [sp, #8]
 800c3d2:	459b      	cmp	fp, r3
 800c3d4:	dd13      	ble.n	800c3fe <__hexnan+0x7a>
 800c3d6:	454c      	cmp	r4, r9
 800c3d8:	d206      	bcs.n	800c3e8 <__hexnan+0x64>
 800c3da:	2d07      	cmp	r5, #7
 800c3dc:	dc04      	bgt.n	800c3e8 <__hexnan+0x64>
 800c3de:	462a      	mov	r2, r5
 800c3e0:	4649      	mov	r1, r9
 800c3e2:	4620      	mov	r0, r4
 800c3e4:	f7ff ffa8 	bl	800c338 <L_shift>
 800c3e8:	4544      	cmp	r4, r8
 800c3ea:	d950      	bls.n	800c48e <__hexnan+0x10a>
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	f1a4 0904 	sub.w	r9, r4, #4
 800c3f2:	f844 3c04 	str.w	r3, [r4, #-4]
 800c3f6:	461d      	mov	r5, r3
 800c3f8:	464c      	mov	r4, r9
 800c3fa:	f8cd b008 	str.w	fp, [sp, #8]
 800c3fe:	9903      	ldr	r1, [sp, #12]
 800c400:	e7d7      	b.n	800c3b2 <__hexnan+0x2e>
 800c402:	2a29      	cmp	r2, #41	; 0x29
 800c404:	d155      	bne.n	800c4b2 <__hexnan+0x12e>
 800c406:	3102      	adds	r1, #2
 800c408:	f8ca 1000 	str.w	r1, [sl]
 800c40c:	f1bb 0f00 	cmp.w	fp, #0
 800c410:	d04f      	beq.n	800c4b2 <__hexnan+0x12e>
 800c412:	454c      	cmp	r4, r9
 800c414:	d206      	bcs.n	800c424 <__hexnan+0xa0>
 800c416:	2d07      	cmp	r5, #7
 800c418:	dc04      	bgt.n	800c424 <__hexnan+0xa0>
 800c41a:	462a      	mov	r2, r5
 800c41c:	4649      	mov	r1, r9
 800c41e:	4620      	mov	r0, r4
 800c420:	f7ff ff8a 	bl	800c338 <L_shift>
 800c424:	4544      	cmp	r4, r8
 800c426:	d934      	bls.n	800c492 <__hexnan+0x10e>
 800c428:	4623      	mov	r3, r4
 800c42a:	f1a8 0204 	sub.w	r2, r8, #4
 800c42e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c432:	429f      	cmp	r7, r3
 800c434:	f842 1f04 	str.w	r1, [r2, #4]!
 800c438:	d2f9      	bcs.n	800c42e <__hexnan+0xaa>
 800c43a:	1b3b      	subs	r3, r7, r4
 800c43c:	f023 0303 	bic.w	r3, r3, #3
 800c440:	3304      	adds	r3, #4
 800c442:	3e03      	subs	r6, #3
 800c444:	3401      	adds	r4, #1
 800c446:	42a6      	cmp	r6, r4
 800c448:	bf38      	it	cc
 800c44a:	2304      	movcc	r3, #4
 800c44c:	2200      	movs	r2, #0
 800c44e:	4443      	add	r3, r8
 800c450:	f843 2b04 	str.w	r2, [r3], #4
 800c454:	429f      	cmp	r7, r3
 800c456:	d2fb      	bcs.n	800c450 <__hexnan+0xcc>
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	b91b      	cbnz	r3, 800c464 <__hexnan+0xe0>
 800c45c:	4547      	cmp	r7, r8
 800c45e:	d126      	bne.n	800c4ae <__hexnan+0x12a>
 800c460:	2301      	movs	r3, #1
 800c462:	603b      	str	r3, [r7, #0]
 800c464:	2005      	movs	r0, #5
 800c466:	e025      	b.n	800c4b4 <__hexnan+0x130>
 800c468:	3501      	adds	r5, #1
 800c46a:	2d08      	cmp	r5, #8
 800c46c:	f10b 0b01 	add.w	fp, fp, #1
 800c470:	dd06      	ble.n	800c480 <__hexnan+0xfc>
 800c472:	4544      	cmp	r4, r8
 800c474:	d9c3      	bls.n	800c3fe <__hexnan+0x7a>
 800c476:	2300      	movs	r3, #0
 800c478:	2501      	movs	r5, #1
 800c47a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c47e:	3c04      	subs	r4, #4
 800c480:	6822      	ldr	r2, [r4, #0]
 800c482:	f000 000f 	and.w	r0, r0, #15
 800c486:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c48a:	6020      	str	r0, [r4, #0]
 800c48c:	e7b7      	b.n	800c3fe <__hexnan+0x7a>
 800c48e:	2508      	movs	r5, #8
 800c490:	e7b5      	b.n	800c3fe <__hexnan+0x7a>
 800c492:	9b01      	ldr	r3, [sp, #4]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d0df      	beq.n	800c458 <__hexnan+0xd4>
 800c498:	f04f 32ff 	mov.w	r2, #4294967295
 800c49c:	f1c3 0320 	rsb	r3, r3, #32
 800c4a0:	40da      	lsrs	r2, r3
 800c4a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c4a6:	4013      	ands	r3, r2
 800c4a8:	f846 3c04 	str.w	r3, [r6, #-4]
 800c4ac:	e7d4      	b.n	800c458 <__hexnan+0xd4>
 800c4ae:	3f04      	subs	r7, #4
 800c4b0:	e7d2      	b.n	800c458 <__hexnan+0xd4>
 800c4b2:	2004      	movs	r0, #4
 800c4b4:	b007      	add	sp, #28
 800c4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c4ba <__ascii_mbtowc>:
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	b901      	cbnz	r1, 800c4c0 <__ascii_mbtowc+0x6>
 800c4be:	a901      	add	r1, sp, #4
 800c4c0:	b142      	cbz	r2, 800c4d4 <__ascii_mbtowc+0x1a>
 800c4c2:	b14b      	cbz	r3, 800c4d8 <__ascii_mbtowc+0x1e>
 800c4c4:	7813      	ldrb	r3, [r2, #0]
 800c4c6:	600b      	str	r3, [r1, #0]
 800c4c8:	7812      	ldrb	r2, [r2, #0]
 800c4ca:	1e10      	subs	r0, r2, #0
 800c4cc:	bf18      	it	ne
 800c4ce:	2001      	movne	r0, #1
 800c4d0:	b002      	add	sp, #8
 800c4d2:	4770      	bx	lr
 800c4d4:	4610      	mov	r0, r2
 800c4d6:	e7fb      	b.n	800c4d0 <__ascii_mbtowc+0x16>
 800c4d8:	f06f 0001 	mvn.w	r0, #1
 800c4dc:	e7f8      	b.n	800c4d0 <__ascii_mbtowc+0x16>

0800c4de <_realloc_r>:
 800c4de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4e2:	4680      	mov	r8, r0
 800c4e4:	4614      	mov	r4, r2
 800c4e6:	460e      	mov	r6, r1
 800c4e8:	b921      	cbnz	r1, 800c4f4 <_realloc_r+0x16>
 800c4ea:	4611      	mov	r1, r2
 800c4ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4f0:	f7fd be4e 	b.w	800a190 <_malloc_r>
 800c4f4:	b92a      	cbnz	r2, 800c502 <_realloc_r+0x24>
 800c4f6:	f7fd fddb 	bl	800a0b0 <_free_r>
 800c4fa:	4625      	mov	r5, r4
 800c4fc:	4628      	mov	r0, r5
 800c4fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c502:	f000 f842 	bl	800c58a <_malloc_usable_size_r>
 800c506:	4284      	cmp	r4, r0
 800c508:	4607      	mov	r7, r0
 800c50a:	d802      	bhi.n	800c512 <_realloc_r+0x34>
 800c50c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c510:	d812      	bhi.n	800c538 <_realloc_r+0x5a>
 800c512:	4621      	mov	r1, r4
 800c514:	4640      	mov	r0, r8
 800c516:	f7fd fe3b 	bl	800a190 <_malloc_r>
 800c51a:	4605      	mov	r5, r0
 800c51c:	2800      	cmp	r0, #0
 800c51e:	d0ed      	beq.n	800c4fc <_realloc_r+0x1e>
 800c520:	42bc      	cmp	r4, r7
 800c522:	4622      	mov	r2, r4
 800c524:	4631      	mov	r1, r6
 800c526:	bf28      	it	cs
 800c528:	463a      	movcs	r2, r7
 800c52a:	f7fc ff40 	bl	80093ae <memcpy>
 800c52e:	4631      	mov	r1, r6
 800c530:	4640      	mov	r0, r8
 800c532:	f7fd fdbd 	bl	800a0b0 <_free_r>
 800c536:	e7e1      	b.n	800c4fc <_realloc_r+0x1e>
 800c538:	4635      	mov	r5, r6
 800c53a:	e7df      	b.n	800c4fc <_realloc_r+0x1e>

0800c53c <__ascii_wctomb>:
 800c53c:	4603      	mov	r3, r0
 800c53e:	4608      	mov	r0, r1
 800c540:	b141      	cbz	r1, 800c554 <__ascii_wctomb+0x18>
 800c542:	2aff      	cmp	r2, #255	; 0xff
 800c544:	d904      	bls.n	800c550 <__ascii_wctomb+0x14>
 800c546:	228a      	movs	r2, #138	; 0x8a
 800c548:	f04f 30ff 	mov.w	r0, #4294967295
 800c54c:	601a      	str	r2, [r3, #0]
 800c54e:	4770      	bx	lr
 800c550:	2001      	movs	r0, #1
 800c552:	700a      	strb	r2, [r1, #0]
 800c554:	4770      	bx	lr
	...

0800c558 <fiprintf>:
 800c558:	b40e      	push	{r1, r2, r3}
 800c55a:	b503      	push	{r0, r1, lr}
 800c55c:	4601      	mov	r1, r0
 800c55e:	ab03      	add	r3, sp, #12
 800c560:	4805      	ldr	r0, [pc, #20]	; (800c578 <fiprintf+0x20>)
 800c562:	f853 2b04 	ldr.w	r2, [r3], #4
 800c566:	6800      	ldr	r0, [r0, #0]
 800c568:	9301      	str	r3, [sp, #4]
 800c56a:	f000 f83d 	bl	800c5e8 <_vfiprintf_r>
 800c56e:	b002      	add	sp, #8
 800c570:	f85d eb04 	ldr.w	lr, [sp], #4
 800c574:	b003      	add	sp, #12
 800c576:	4770      	bx	lr
 800c578:	2000008c 	.word	0x2000008c

0800c57c <abort>:
 800c57c:	2006      	movs	r0, #6
 800c57e:	b508      	push	{r3, lr}
 800c580:	f000 fa0a 	bl	800c998 <raise>
 800c584:	2001      	movs	r0, #1
 800c586:	f7f5 fd84 	bl	8002092 <_exit>

0800c58a <_malloc_usable_size_r>:
 800c58a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c58e:	1f18      	subs	r0, r3, #4
 800c590:	2b00      	cmp	r3, #0
 800c592:	bfbc      	itt	lt
 800c594:	580b      	ldrlt	r3, [r1, r0]
 800c596:	18c0      	addlt	r0, r0, r3
 800c598:	4770      	bx	lr

0800c59a <__sfputc_r>:
 800c59a:	6893      	ldr	r3, [r2, #8]
 800c59c:	b410      	push	{r4}
 800c59e:	3b01      	subs	r3, #1
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	6093      	str	r3, [r2, #8]
 800c5a4:	da07      	bge.n	800c5b6 <__sfputc_r+0x1c>
 800c5a6:	6994      	ldr	r4, [r2, #24]
 800c5a8:	42a3      	cmp	r3, r4
 800c5aa:	db01      	blt.n	800c5b0 <__sfputc_r+0x16>
 800c5ac:	290a      	cmp	r1, #10
 800c5ae:	d102      	bne.n	800c5b6 <__sfputc_r+0x1c>
 800c5b0:	bc10      	pop	{r4}
 800c5b2:	f000 b933 	b.w	800c81c <__swbuf_r>
 800c5b6:	6813      	ldr	r3, [r2, #0]
 800c5b8:	1c58      	adds	r0, r3, #1
 800c5ba:	6010      	str	r0, [r2, #0]
 800c5bc:	7019      	strb	r1, [r3, #0]
 800c5be:	4608      	mov	r0, r1
 800c5c0:	bc10      	pop	{r4}
 800c5c2:	4770      	bx	lr

0800c5c4 <__sfputs_r>:
 800c5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5c6:	4606      	mov	r6, r0
 800c5c8:	460f      	mov	r7, r1
 800c5ca:	4614      	mov	r4, r2
 800c5cc:	18d5      	adds	r5, r2, r3
 800c5ce:	42ac      	cmp	r4, r5
 800c5d0:	d101      	bne.n	800c5d6 <__sfputs_r+0x12>
 800c5d2:	2000      	movs	r0, #0
 800c5d4:	e007      	b.n	800c5e6 <__sfputs_r+0x22>
 800c5d6:	463a      	mov	r2, r7
 800c5d8:	4630      	mov	r0, r6
 800c5da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5de:	f7ff ffdc 	bl	800c59a <__sfputc_r>
 800c5e2:	1c43      	adds	r3, r0, #1
 800c5e4:	d1f3      	bne.n	800c5ce <__sfputs_r+0xa>
 800c5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c5e8 <_vfiprintf_r>:
 800c5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ec:	460d      	mov	r5, r1
 800c5ee:	4614      	mov	r4, r2
 800c5f0:	4698      	mov	r8, r3
 800c5f2:	4606      	mov	r6, r0
 800c5f4:	b09d      	sub	sp, #116	; 0x74
 800c5f6:	b118      	cbz	r0, 800c600 <_vfiprintf_r+0x18>
 800c5f8:	6a03      	ldr	r3, [r0, #32]
 800c5fa:	b90b      	cbnz	r3, 800c600 <_vfiprintf_r+0x18>
 800c5fc:	f7fc fda0 	bl	8009140 <__sinit>
 800c600:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c602:	07d9      	lsls	r1, r3, #31
 800c604:	d405      	bmi.n	800c612 <_vfiprintf_r+0x2a>
 800c606:	89ab      	ldrh	r3, [r5, #12]
 800c608:	059a      	lsls	r2, r3, #22
 800c60a:	d402      	bmi.n	800c612 <_vfiprintf_r+0x2a>
 800c60c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c60e:	f7fc febe 	bl	800938e <__retarget_lock_acquire_recursive>
 800c612:	89ab      	ldrh	r3, [r5, #12]
 800c614:	071b      	lsls	r3, r3, #28
 800c616:	d501      	bpl.n	800c61c <_vfiprintf_r+0x34>
 800c618:	692b      	ldr	r3, [r5, #16]
 800c61a:	b99b      	cbnz	r3, 800c644 <_vfiprintf_r+0x5c>
 800c61c:	4629      	mov	r1, r5
 800c61e:	4630      	mov	r0, r6
 800c620:	f000 f93a 	bl	800c898 <__swsetup_r>
 800c624:	b170      	cbz	r0, 800c644 <_vfiprintf_r+0x5c>
 800c626:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c628:	07dc      	lsls	r4, r3, #31
 800c62a:	d504      	bpl.n	800c636 <_vfiprintf_r+0x4e>
 800c62c:	f04f 30ff 	mov.w	r0, #4294967295
 800c630:	b01d      	add	sp, #116	; 0x74
 800c632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c636:	89ab      	ldrh	r3, [r5, #12]
 800c638:	0598      	lsls	r0, r3, #22
 800c63a:	d4f7      	bmi.n	800c62c <_vfiprintf_r+0x44>
 800c63c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c63e:	f7fc fea7 	bl	8009390 <__retarget_lock_release_recursive>
 800c642:	e7f3      	b.n	800c62c <_vfiprintf_r+0x44>
 800c644:	2300      	movs	r3, #0
 800c646:	9309      	str	r3, [sp, #36]	; 0x24
 800c648:	2320      	movs	r3, #32
 800c64a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c64e:	2330      	movs	r3, #48	; 0x30
 800c650:	f04f 0901 	mov.w	r9, #1
 800c654:	f8cd 800c 	str.w	r8, [sp, #12]
 800c658:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800c808 <_vfiprintf_r+0x220>
 800c65c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c660:	4623      	mov	r3, r4
 800c662:	469a      	mov	sl, r3
 800c664:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c668:	b10a      	cbz	r2, 800c66e <_vfiprintf_r+0x86>
 800c66a:	2a25      	cmp	r2, #37	; 0x25
 800c66c:	d1f9      	bne.n	800c662 <_vfiprintf_r+0x7a>
 800c66e:	ebba 0b04 	subs.w	fp, sl, r4
 800c672:	d00b      	beq.n	800c68c <_vfiprintf_r+0xa4>
 800c674:	465b      	mov	r3, fp
 800c676:	4622      	mov	r2, r4
 800c678:	4629      	mov	r1, r5
 800c67a:	4630      	mov	r0, r6
 800c67c:	f7ff ffa2 	bl	800c5c4 <__sfputs_r>
 800c680:	3001      	adds	r0, #1
 800c682:	f000 80a9 	beq.w	800c7d8 <_vfiprintf_r+0x1f0>
 800c686:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c688:	445a      	add	r2, fp
 800c68a:	9209      	str	r2, [sp, #36]	; 0x24
 800c68c:	f89a 3000 	ldrb.w	r3, [sl]
 800c690:	2b00      	cmp	r3, #0
 800c692:	f000 80a1 	beq.w	800c7d8 <_vfiprintf_r+0x1f0>
 800c696:	2300      	movs	r3, #0
 800c698:	f04f 32ff 	mov.w	r2, #4294967295
 800c69c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6a0:	f10a 0a01 	add.w	sl, sl, #1
 800c6a4:	9304      	str	r3, [sp, #16]
 800c6a6:	9307      	str	r3, [sp, #28]
 800c6a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6ac:	931a      	str	r3, [sp, #104]	; 0x68
 800c6ae:	4654      	mov	r4, sl
 800c6b0:	2205      	movs	r2, #5
 800c6b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6b6:	4854      	ldr	r0, [pc, #336]	; (800c808 <_vfiprintf_r+0x220>)
 800c6b8:	f7fc fe6b 	bl	8009392 <memchr>
 800c6bc:	9a04      	ldr	r2, [sp, #16]
 800c6be:	b9d8      	cbnz	r0, 800c6f8 <_vfiprintf_r+0x110>
 800c6c0:	06d1      	lsls	r1, r2, #27
 800c6c2:	bf44      	itt	mi
 800c6c4:	2320      	movmi	r3, #32
 800c6c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6ca:	0713      	lsls	r3, r2, #28
 800c6cc:	bf44      	itt	mi
 800c6ce:	232b      	movmi	r3, #43	; 0x2b
 800c6d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6d4:	f89a 3000 	ldrb.w	r3, [sl]
 800c6d8:	2b2a      	cmp	r3, #42	; 0x2a
 800c6da:	d015      	beq.n	800c708 <_vfiprintf_r+0x120>
 800c6dc:	4654      	mov	r4, sl
 800c6de:	2000      	movs	r0, #0
 800c6e0:	f04f 0c0a 	mov.w	ip, #10
 800c6e4:	9a07      	ldr	r2, [sp, #28]
 800c6e6:	4621      	mov	r1, r4
 800c6e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6ec:	3b30      	subs	r3, #48	; 0x30
 800c6ee:	2b09      	cmp	r3, #9
 800c6f0:	d94d      	bls.n	800c78e <_vfiprintf_r+0x1a6>
 800c6f2:	b1b0      	cbz	r0, 800c722 <_vfiprintf_r+0x13a>
 800c6f4:	9207      	str	r2, [sp, #28]
 800c6f6:	e014      	b.n	800c722 <_vfiprintf_r+0x13a>
 800c6f8:	eba0 0308 	sub.w	r3, r0, r8
 800c6fc:	fa09 f303 	lsl.w	r3, r9, r3
 800c700:	4313      	orrs	r3, r2
 800c702:	46a2      	mov	sl, r4
 800c704:	9304      	str	r3, [sp, #16]
 800c706:	e7d2      	b.n	800c6ae <_vfiprintf_r+0xc6>
 800c708:	9b03      	ldr	r3, [sp, #12]
 800c70a:	1d19      	adds	r1, r3, #4
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	9103      	str	r1, [sp, #12]
 800c710:	2b00      	cmp	r3, #0
 800c712:	bfbb      	ittet	lt
 800c714:	425b      	neglt	r3, r3
 800c716:	f042 0202 	orrlt.w	r2, r2, #2
 800c71a:	9307      	strge	r3, [sp, #28]
 800c71c:	9307      	strlt	r3, [sp, #28]
 800c71e:	bfb8      	it	lt
 800c720:	9204      	strlt	r2, [sp, #16]
 800c722:	7823      	ldrb	r3, [r4, #0]
 800c724:	2b2e      	cmp	r3, #46	; 0x2e
 800c726:	d10c      	bne.n	800c742 <_vfiprintf_r+0x15a>
 800c728:	7863      	ldrb	r3, [r4, #1]
 800c72a:	2b2a      	cmp	r3, #42	; 0x2a
 800c72c:	d134      	bne.n	800c798 <_vfiprintf_r+0x1b0>
 800c72e:	9b03      	ldr	r3, [sp, #12]
 800c730:	3402      	adds	r4, #2
 800c732:	1d1a      	adds	r2, r3, #4
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	9203      	str	r2, [sp, #12]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	bfb8      	it	lt
 800c73c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c740:	9305      	str	r3, [sp, #20]
 800c742:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c80c <_vfiprintf_r+0x224>
 800c746:	2203      	movs	r2, #3
 800c748:	4650      	mov	r0, sl
 800c74a:	7821      	ldrb	r1, [r4, #0]
 800c74c:	f7fc fe21 	bl	8009392 <memchr>
 800c750:	b138      	cbz	r0, 800c762 <_vfiprintf_r+0x17a>
 800c752:	2240      	movs	r2, #64	; 0x40
 800c754:	9b04      	ldr	r3, [sp, #16]
 800c756:	eba0 000a 	sub.w	r0, r0, sl
 800c75a:	4082      	lsls	r2, r0
 800c75c:	4313      	orrs	r3, r2
 800c75e:	3401      	adds	r4, #1
 800c760:	9304      	str	r3, [sp, #16]
 800c762:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c766:	2206      	movs	r2, #6
 800c768:	4829      	ldr	r0, [pc, #164]	; (800c810 <_vfiprintf_r+0x228>)
 800c76a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c76e:	f7fc fe10 	bl	8009392 <memchr>
 800c772:	2800      	cmp	r0, #0
 800c774:	d03f      	beq.n	800c7f6 <_vfiprintf_r+0x20e>
 800c776:	4b27      	ldr	r3, [pc, #156]	; (800c814 <_vfiprintf_r+0x22c>)
 800c778:	bb1b      	cbnz	r3, 800c7c2 <_vfiprintf_r+0x1da>
 800c77a:	9b03      	ldr	r3, [sp, #12]
 800c77c:	3307      	adds	r3, #7
 800c77e:	f023 0307 	bic.w	r3, r3, #7
 800c782:	3308      	adds	r3, #8
 800c784:	9303      	str	r3, [sp, #12]
 800c786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c788:	443b      	add	r3, r7
 800c78a:	9309      	str	r3, [sp, #36]	; 0x24
 800c78c:	e768      	b.n	800c660 <_vfiprintf_r+0x78>
 800c78e:	460c      	mov	r4, r1
 800c790:	2001      	movs	r0, #1
 800c792:	fb0c 3202 	mla	r2, ip, r2, r3
 800c796:	e7a6      	b.n	800c6e6 <_vfiprintf_r+0xfe>
 800c798:	2300      	movs	r3, #0
 800c79a:	f04f 0c0a 	mov.w	ip, #10
 800c79e:	4619      	mov	r1, r3
 800c7a0:	3401      	adds	r4, #1
 800c7a2:	9305      	str	r3, [sp, #20]
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7aa:	3a30      	subs	r2, #48	; 0x30
 800c7ac:	2a09      	cmp	r2, #9
 800c7ae:	d903      	bls.n	800c7b8 <_vfiprintf_r+0x1d0>
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d0c6      	beq.n	800c742 <_vfiprintf_r+0x15a>
 800c7b4:	9105      	str	r1, [sp, #20]
 800c7b6:	e7c4      	b.n	800c742 <_vfiprintf_r+0x15a>
 800c7b8:	4604      	mov	r4, r0
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7c0:	e7f0      	b.n	800c7a4 <_vfiprintf_r+0x1bc>
 800c7c2:	ab03      	add	r3, sp, #12
 800c7c4:	9300      	str	r3, [sp, #0]
 800c7c6:	462a      	mov	r2, r5
 800c7c8:	4630      	mov	r0, r6
 800c7ca:	4b13      	ldr	r3, [pc, #76]	; (800c818 <_vfiprintf_r+0x230>)
 800c7cc:	a904      	add	r1, sp, #16
 800c7ce:	f7fb fe5b 	bl	8008488 <_printf_float>
 800c7d2:	4607      	mov	r7, r0
 800c7d4:	1c78      	adds	r0, r7, #1
 800c7d6:	d1d6      	bne.n	800c786 <_vfiprintf_r+0x19e>
 800c7d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7da:	07d9      	lsls	r1, r3, #31
 800c7dc:	d405      	bmi.n	800c7ea <_vfiprintf_r+0x202>
 800c7de:	89ab      	ldrh	r3, [r5, #12]
 800c7e0:	059a      	lsls	r2, r3, #22
 800c7e2:	d402      	bmi.n	800c7ea <_vfiprintf_r+0x202>
 800c7e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7e6:	f7fc fdd3 	bl	8009390 <__retarget_lock_release_recursive>
 800c7ea:	89ab      	ldrh	r3, [r5, #12]
 800c7ec:	065b      	lsls	r3, r3, #25
 800c7ee:	f53f af1d 	bmi.w	800c62c <_vfiprintf_r+0x44>
 800c7f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7f4:	e71c      	b.n	800c630 <_vfiprintf_r+0x48>
 800c7f6:	ab03      	add	r3, sp, #12
 800c7f8:	9300      	str	r3, [sp, #0]
 800c7fa:	462a      	mov	r2, r5
 800c7fc:	4630      	mov	r0, r6
 800c7fe:	4b06      	ldr	r3, [pc, #24]	; (800c818 <_vfiprintf_r+0x230>)
 800c800:	a904      	add	r1, sp, #16
 800c802:	f7fc f8e1 	bl	80089c8 <_printf_i>
 800c806:	e7e4      	b.n	800c7d2 <_vfiprintf_r+0x1ea>
 800c808:	0800fc79 	.word	0x0800fc79
 800c80c:	0800fc7f 	.word	0x0800fc7f
 800c810:	0800fc83 	.word	0x0800fc83
 800c814:	08008489 	.word	0x08008489
 800c818:	0800c5c5 	.word	0x0800c5c5

0800c81c <__swbuf_r>:
 800c81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c81e:	460e      	mov	r6, r1
 800c820:	4614      	mov	r4, r2
 800c822:	4605      	mov	r5, r0
 800c824:	b118      	cbz	r0, 800c82e <__swbuf_r+0x12>
 800c826:	6a03      	ldr	r3, [r0, #32]
 800c828:	b90b      	cbnz	r3, 800c82e <__swbuf_r+0x12>
 800c82a:	f7fc fc89 	bl	8009140 <__sinit>
 800c82e:	69a3      	ldr	r3, [r4, #24]
 800c830:	60a3      	str	r3, [r4, #8]
 800c832:	89a3      	ldrh	r3, [r4, #12]
 800c834:	071a      	lsls	r2, r3, #28
 800c836:	d525      	bpl.n	800c884 <__swbuf_r+0x68>
 800c838:	6923      	ldr	r3, [r4, #16]
 800c83a:	b31b      	cbz	r3, 800c884 <__swbuf_r+0x68>
 800c83c:	6823      	ldr	r3, [r4, #0]
 800c83e:	6922      	ldr	r2, [r4, #16]
 800c840:	b2f6      	uxtb	r6, r6
 800c842:	1a98      	subs	r0, r3, r2
 800c844:	6963      	ldr	r3, [r4, #20]
 800c846:	4637      	mov	r7, r6
 800c848:	4283      	cmp	r3, r0
 800c84a:	dc04      	bgt.n	800c856 <__swbuf_r+0x3a>
 800c84c:	4621      	mov	r1, r4
 800c84e:	4628      	mov	r0, r5
 800c850:	f7ff fa3e 	bl	800bcd0 <_fflush_r>
 800c854:	b9e0      	cbnz	r0, 800c890 <__swbuf_r+0x74>
 800c856:	68a3      	ldr	r3, [r4, #8]
 800c858:	3b01      	subs	r3, #1
 800c85a:	60a3      	str	r3, [r4, #8]
 800c85c:	6823      	ldr	r3, [r4, #0]
 800c85e:	1c5a      	adds	r2, r3, #1
 800c860:	6022      	str	r2, [r4, #0]
 800c862:	701e      	strb	r6, [r3, #0]
 800c864:	6962      	ldr	r2, [r4, #20]
 800c866:	1c43      	adds	r3, r0, #1
 800c868:	429a      	cmp	r2, r3
 800c86a:	d004      	beq.n	800c876 <__swbuf_r+0x5a>
 800c86c:	89a3      	ldrh	r3, [r4, #12]
 800c86e:	07db      	lsls	r3, r3, #31
 800c870:	d506      	bpl.n	800c880 <__swbuf_r+0x64>
 800c872:	2e0a      	cmp	r6, #10
 800c874:	d104      	bne.n	800c880 <__swbuf_r+0x64>
 800c876:	4621      	mov	r1, r4
 800c878:	4628      	mov	r0, r5
 800c87a:	f7ff fa29 	bl	800bcd0 <_fflush_r>
 800c87e:	b938      	cbnz	r0, 800c890 <__swbuf_r+0x74>
 800c880:	4638      	mov	r0, r7
 800c882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c884:	4621      	mov	r1, r4
 800c886:	4628      	mov	r0, r5
 800c888:	f000 f806 	bl	800c898 <__swsetup_r>
 800c88c:	2800      	cmp	r0, #0
 800c88e:	d0d5      	beq.n	800c83c <__swbuf_r+0x20>
 800c890:	f04f 37ff 	mov.w	r7, #4294967295
 800c894:	e7f4      	b.n	800c880 <__swbuf_r+0x64>
	...

0800c898 <__swsetup_r>:
 800c898:	b538      	push	{r3, r4, r5, lr}
 800c89a:	4b2a      	ldr	r3, [pc, #168]	; (800c944 <__swsetup_r+0xac>)
 800c89c:	4605      	mov	r5, r0
 800c89e:	6818      	ldr	r0, [r3, #0]
 800c8a0:	460c      	mov	r4, r1
 800c8a2:	b118      	cbz	r0, 800c8ac <__swsetup_r+0x14>
 800c8a4:	6a03      	ldr	r3, [r0, #32]
 800c8a6:	b90b      	cbnz	r3, 800c8ac <__swsetup_r+0x14>
 800c8a8:	f7fc fc4a 	bl	8009140 <__sinit>
 800c8ac:	89a3      	ldrh	r3, [r4, #12]
 800c8ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8b2:	0718      	lsls	r0, r3, #28
 800c8b4:	d422      	bmi.n	800c8fc <__swsetup_r+0x64>
 800c8b6:	06d9      	lsls	r1, r3, #27
 800c8b8:	d407      	bmi.n	800c8ca <__swsetup_r+0x32>
 800c8ba:	2309      	movs	r3, #9
 800c8bc:	602b      	str	r3, [r5, #0]
 800c8be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c8c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c8c6:	81a3      	strh	r3, [r4, #12]
 800c8c8:	e034      	b.n	800c934 <__swsetup_r+0x9c>
 800c8ca:	0758      	lsls	r0, r3, #29
 800c8cc:	d512      	bpl.n	800c8f4 <__swsetup_r+0x5c>
 800c8ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8d0:	b141      	cbz	r1, 800c8e4 <__swsetup_r+0x4c>
 800c8d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8d6:	4299      	cmp	r1, r3
 800c8d8:	d002      	beq.n	800c8e0 <__swsetup_r+0x48>
 800c8da:	4628      	mov	r0, r5
 800c8dc:	f7fd fbe8 	bl	800a0b0 <_free_r>
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	6363      	str	r3, [r4, #52]	; 0x34
 800c8e4:	89a3      	ldrh	r3, [r4, #12]
 800c8e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c8ea:	81a3      	strh	r3, [r4, #12]
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	6063      	str	r3, [r4, #4]
 800c8f0:	6923      	ldr	r3, [r4, #16]
 800c8f2:	6023      	str	r3, [r4, #0]
 800c8f4:	89a3      	ldrh	r3, [r4, #12]
 800c8f6:	f043 0308 	orr.w	r3, r3, #8
 800c8fa:	81a3      	strh	r3, [r4, #12]
 800c8fc:	6923      	ldr	r3, [r4, #16]
 800c8fe:	b94b      	cbnz	r3, 800c914 <__swsetup_r+0x7c>
 800c900:	89a3      	ldrh	r3, [r4, #12]
 800c902:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c90a:	d003      	beq.n	800c914 <__swsetup_r+0x7c>
 800c90c:	4621      	mov	r1, r4
 800c90e:	4628      	mov	r0, r5
 800c910:	f000 f883 	bl	800ca1a <__smakebuf_r>
 800c914:	89a0      	ldrh	r0, [r4, #12]
 800c916:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c91a:	f010 0301 	ands.w	r3, r0, #1
 800c91e:	d00a      	beq.n	800c936 <__swsetup_r+0x9e>
 800c920:	2300      	movs	r3, #0
 800c922:	60a3      	str	r3, [r4, #8]
 800c924:	6963      	ldr	r3, [r4, #20]
 800c926:	425b      	negs	r3, r3
 800c928:	61a3      	str	r3, [r4, #24]
 800c92a:	6923      	ldr	r3, [r4, #16]
 800c92c:	b943      	cbnz	r3, 800c940 <__swsetup_r+0xa8>
 800c92e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c932:	d1c4      	bne.n	800c8be <__swsetup_r+0x26>
 800c934:	bd38      	pop	{r3, r4, r5, pc}
 800c936:	0781      	lsls	r1, r0, #30
 800c938:	bf58      	it	pl
 800c93a:	6963      	ldrpl	r3, [r4, #20]
 800c93c:	60a3      	str	r3, [r4, #8]
 800c93e:	e7f4      	b.n	800c92a <__swsetup_r+0x92>
 800c940:	2000      	movs	r0, #0
 800c942:	e7f7      	b.n	800c934 <__swsetup_r+0x9c>
 800c944:	2000008c 	.word	0x2000008c

0800c948 <_raise_r>:
 800c948:	291f      	cmp	r1, #31
 800c94a:	b538      	push	{r3, r4, r5, lr}
 800c94c:	4604      	mov	r4, r0
 800c94e:	460d      	mov	r5, r1
 800c950:	d904      	bls.n	800c95c <_raise_r+0x14>
 800c952:	2316      	movs	r3, #22
 800c954:	6003      	str	r3, [r0, #0]
 800c956:	f04f 30ff 	mov.w	r0, #4294967295
 800c95a:	bd38      	pop	{r3, r4, r5, pc}
 800c95c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c95e:	b112      	cbz	r2, 800c966 <_raise_r+0x1e>
 800c960:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c964:	b94b      	cbnz	r3, 800c97a <_raise_r+0x32>
 800c966:	4620      	mov	r0, r4
 800c968:	f000 f830 	bl	800c9cc <_getpid_r>
 800c96c:	462a      	mov	r2, r5
 800c96e:	4601      	mov	r1, r0
 800c970:	4620      	mov	r0, r4
 800c972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c976:	f000 b817 	b.w	800c9a8 <_kill_r>
 800c97a:	2b01      	cmp	r3, #1
 800c97c:	d00a      	beq.n	800c994 <_raise_r+0x4c>
 800c97e:	1c59      	adds	r1, r3, #1
 800c980:	d103      	bne.n	800c98a <_raise_r+0x42>
 800c982:	2316      	movs	r3, #22
 800c984:	6003      	str	r3, [r0, #0]
 800c986:	2001      	movs	r0, #1
 800c988:	e7e7      	b.n	800c95a <_raise_r+0x12>
 800c98a:	2400      	movs	r4, #0
 800c98c:	4628      	mov	r0, r5
 800c98e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c992:	4798      	blx	r3
 800c994:	2000      	movs	r0, #0
 800c996:	e7e0      	b.n	800c95a <_raise_r+0x12>

0800c998 <raise>:
 800c998:	4b02      	ldr	r3, [pc, #8]	; (800c9a4 <raise+0xc>)
 800c99a:	4601      	mov	r1, r0
 800c99c:	6818      	ldr	r0, [r3, #0]
 800c99e:	f7ff bfd3 	b.w	800c948 <_raise_r>
 800c9a2:	bf00      	nop
 800c9a4:	2000008c 	.word	0x2000008c

0800c9a8 <_kill_r>:
 800c9a8:	b538      	push	{r3, r4, r5, lr}
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	4d06      	ldr	r5, [pc, #24]	; (800c9c8 <_kill_r+0x20>)
 800c9ae:	4604      	mov	r4, r0
 800c9b0:	4608      	mov	r0, r1
 800c9b2:	4611      	mov	r1, r2
 800c9b4:	602b      	str	r3, [r5, #0]
 800c9b6:	f7f5 fb5c 	bl	8002072 <_kill>
 800c9ba:	1c43      	adds	r3, r0, #1
 800c9bc:	d102      	bne.n	800c9c4 <_kill_r+0x1c>
 800c9be:	682b      	ldr	r3, [r5, #0]
 800c9c0:	b103      	cbz	r3, 800c9c4 <_kill_r+0x1c>
 800c9c2:	6023      	str	r3, [r4, #0]
 800c9c4:	bd38      	pop	{r3, r4, r5, pc}
 800c9c6:	bf00      	nop
 800c9c8:	200009e0 	.word	0x200009e0

0800c9cc <_getpid_r>:
 800c9cc:	f7f5 bb4a 	b.w	8002064 <_getpid>

0800c9d0 <__swhatbuf_r>:
 800c9d0:	b570      	push	{r4, r5, r6, lr}
 800c9d2:	460c      	mov	r4, r1
 800c9d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9d8:	4615      	mov	r5, r2
 800c9da:	2900      	cmp	r1, #0
 800c9dc:	461e      	mov	r6, r3
 800c9de:	b096      	sub	sp, #88	; 0x58
 800c9e0:	da0c      	bge.n	800c9fc <__swhatbuf_r+0x2c>
 800c9e2:	89a3      	ldrh	r3, [r4, #12]
 800c9e4:	2100      	movs	r1, #0
 800c9e6:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c9ea:	bf0c      	ite	eq
 800c9ec:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c9f0:	2340      	movne	r3, #64	; 0x40
 800c9f2:	2000      	movs	r0, #0
 800c9f4:	6031      	str	r1, [r6, #0]
 800c9f6:	602b      	str	r3, [r5, #0]
 800c9f8:	b016      	add	sp, #88	; 0x58
 800c9fa:	bd70      	pop	{r4, r5, r6, pc}
 800c9fc:	466a      	mov	r2, sp
 800c9fe:	f000 f849 	bl	800ca94 <_fstat_r>
 800ca02:	2800      	cmp	r0, #0
 800ca04:	dbed      	blt.n	800c9e2 <__swhatbuf_r+0x12>
 800ca06:	9901      	ldr	r1, [sp, #4]
 800ca08:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ca0c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ca10:	4259      	negs	r1, r3
 800ca12:	4159      	adcs	r1, r3
 800ca14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca18:	e7eb      	b.n	800c9f2 <__swhatbuf_r+0x22>

0800ca1a <__smakebuf_r>:
 800ca1a:	898b      	ldrh	r3, [r1, #12]
 800ca1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca1e:	079d      	lsls	r5, r3, #30
 800ca20:	4606      	mov	r6, r0
 800ca22:	460c      	mov	r4, r1
 800ca24:	d507      	bpl.n	800ca36 <__smakebuf_r+0x1c>
 800ca26:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ca2a:	6023      	str	r3, [r4, #0]
 800ca2c:	6123      	str	r3, [r4, #16]
 800ca2e:	2301      	movs	r3, #1
 800ca30:	6163      	str	r3, [r4, #20]
 800ca32:	b002      	add	sp, #8
 800ca34:	bd70      	pop	{r4, r5, r6, pc}
 800ca36:	466a      	mov	r2, sp
 800ca38:	ab01      	add	r3, sp, #4
 800ca3a:	f7ff ffc9 	bl	800c9d0 <__swhatbuf_r>
 800ca3e:	9900      	ldr	r1, [sp, #0]
 800ca40:	4605      	mov	r5, r0
 800ca42:	4630      	mov	r0, r6
 800ca44:	f7fd fba4 	bl	800a190 <_malloc_r>
 800ca48:	b948      	cbnz	r0, 800ca5e <__smakebuf_r+0x44>
 800ca4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca4e:	059a      	lsls	r2, r3, #22
 800ca50:	d4ef      	bmi.n	800ca32 <__smakebuf_r+0x18>
 800ca52:	f023 0303 	bic.w	r3, r3, #3
 800ca56:	f043 0302 	orr.w	r3, r3, #2
 800ca5a:	81a3      	strh	r3, [r4, #12]
 800ca5c:	e7e3      	b.n	800ca26 <__smakebuf_r+0xc>
 800ca5e:	89a3      	ldrh	r3, [r4, #12]
 800ca60:	6020      	str	r0, [r4, #0]
 800ca62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca66:	81a3      	strh	r3, [r4, #12]
 800ca68:	9b00      	ldr	r3, [sp, #0]
 800ca6a:	6120      	str	r0, [r4, #16]
 800ca6c:	6163      	str	r3, [r4, #20]
 800ca6e:	9b01      	ldr	r3, [sp, #4]
 800ca70:	b15b      	cbz	r3, 800ca8a <__smakebuf_r+0x70>
 800ca72:	4630      	mov	r0, r6
 800ca74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca78:	f000 f81e 	bl	800cab8 <_isatty_r>
 800ca7c:	b128      	cbz	r0, 800ca8a <__smakebuf_r+0x70>
 800ca7e:	89a3      	ldrh	r3, [r4, #12]
 800ca80:	f023 0303 	bic.w	r3, r3, #3
 800ca84:	f043 0301 	orr.w	r3, r3, #1
 800ca88:	81a3      	strh	r3, [r4, #12]
 800ca8a:	89a3      	ldrh	r3, [r4, #12]
 800ca8c:	431d      	orrs	r5, r3
 800ca8e:	81a5      	strh	r5, [r4, #12]
 800ca90:	e7cf      	b.n	800ca32 <__smakebuf_r+0x18>
	...

0800ca94 <_fstat_r>:
 800ca94:	b538      	push	{r3, r4, r5, lr}
 800ca96:	2300      	movs	r3, #0
 800ca98:	4d06      	ldr	r5, [pc, #24]	; (800cab4 <_fstat_r+0x20>)
 800ca9a:	4604      	mov	r4, r0
 800ca9c:	4608      	mov	r0, r1
 800ca9e:	4611      	mov	r1, r2
 800caa0:	602b      	str	r3, [r5, #0]
 800caa2:	f7f5 fb44 	bl	800212e <_fstat>
 800caa6:	1c43      	adds	r3, r0, #1
 800caa8:	d102      	bne.n	800cab0 <_fstat_r+0x1c>
 800caaa:	682b      	ldr	r3, [r5, #0]
 800caac:	b103      	cbz	r3, 800cab0 <_fstat_r+0x1c>
 800caae:	6023      	str	r3, [r4, #0]
 800cab0:	bd38      	pop	{r3, r4, r5, pc}
 800cab2:	bf00      	nop
 800cab4:	200009e0 	.word	0x200009e0

0800cab8 <_isatty_r>:
 800cab8:	b538      	push	{r3, r4, r5, lr}
 800caba:	2300      	movs	r3, #0
 800cabc:	4d05      	ldr	r5, [pc, #20]	; (800cad4 <_isatty_r+0x1c>)
 800cabe:	4604      	mov	r4, r0
 800cac0:	4608      	mov	r0, r1
 800cac2:	602b      	str	r3, [r5, #0]
 800cac4:	f7f5 fb42 	bl	800214c <_isatty>
 800cac8:	1c43      	adds	r3, r0, #1
 800caca:	d102      	bne.n	800cad2 <_isatty_r+0x1a>
 800cacc:	682b      	ldr	r3, [r5, #0]
 800cace:	b103      	cbz	r3, 800cad2 <_isatty_r+0x1a>
 800cad0:	6023      	str	r3, [r4, #0]
 800cad2:	bd38      	pop	{r3, r4, r5, pc}
 800cad4:	200009e0 	.word	0x200009e0

0800cad8 <pow>:
 800cad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cadc:	4614      	mov	r4, r2
 800cade:	461d      	mov	r5, r3
 800cae0:	4680      	mov	r8, r0
 800cae2:	4689      	mov	r9, r1
 800cae4:	f000 f868 	bl	800cbb8 <__ieee754_pow>
 800cae8:	4622      	mov	r2, r4
 800caea:	4606      	mov	r6, r0
 800caec:	460f      	mov	r7, r1
 800caee:	462b      	mov	r3, r5
 800caf0:	4620      	mov	r0, r4
 800caf2:	4629      	mov	r1, r5
 800caf4:	f7f3 ff8a 	bl	8000a0c <__aeabi_dcmpun>
 800caf8:	bbc8      	cbnz	r0, 800cb6e <pow+0x96>
 800cafa:	2200      	movs	r2, #0
 800cafc:	2300      	movs	r3, #0
 800cafe:	4640      	mov	r0, r8
 800cb00:	4649      	mov	r1, r9
 800cb02:	f7f3 ff51 	bl	80009a8 <__aeabi_dcmpeq>
 800cb06:	b1b8      	cbz	r0, 800cb38 <pow+0x60>
 800cb08:	2200      	movs	r2, #0
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	4620      	mov	r0, r4
 800cb0e:	4629      	mov	r1, r5
 800cb10:	f7f3 ff4a 	bl	80009a8 <__aeabi_dcmpeq>
 800cb14:	2800      	cmp	r0, #0
 800cb16:	d141      	bne.n	800cb9c <pow+0xc4>
 800cb18:	4620      	mov	r0, r4
 800cb1a:	4629      	mov	r1, r5
 800cb1c:	f000 f844 	bl	800cba8 <finite>
 800cb20:	b328      	cbz	r0, 800cb6e <pow+0x96>
 800cb22:	2200      	movs	r2, #0
 800cb24:	2300      	movs	r3, #0
 800cb26:	4620      	mov	r0, r4
 800cb28:	4629      	mov	r1, r5
 800cb2a:	f7f3 ff47 	bl	80009bc <__aeabi_dcmplt>
 800cb2e:	b1f0      	cbz	r0, 800cb6e <pow+0x96>
 800cb30:	f7fc fc02 	bl	8009338 <__errno>
 800cb34:	2322      	movs	r3, #34	; 0x22
 800cb36:	e019      	b.n	800cb6c <pow+0x94>
 800cb38:	4630      	mov	r0, r6
 800cb3a:	4639      	mov	r1, r7
 800cb3c:	f000 f834 	bl	800cba8 <finite>
 800cb40:	b9c8      	cbnz	r0, 800cb76 <pow+0x9e>
 800cb42:	4640      	mov	r0, r8
 800cb44:	4649      	mov	r1, r9
 800cb46:	f000 f82f 	bl	800cba8 <finite>
 800cb4a:	b1a0      	cbz	r0, 800cb76 <pow+0x9e>
 800cb4c:	4620      	mov	r0, r4
 800cb4e:	4629      	mov	r1, r5
 800cb50:	f000 f82a 	bl	800cba8 <finite>
 800cb54:	b178      	cbz	r0, 800cb76 <pow+0x9e>
 800cb56:	4632      	mov	r2, r6
 800cb58:	463b      	mov	r3, r7
 800cb5a:	4630      	mov	r0, r6
 800cb5c:	4639      	mov	r1, r7
 800cb5e:	f7f3 ff55 	bl	8000a0c <__aeabi_dcmpun>
 800cb62:	2800      	cmp	r0, #0
 800cb64:	d0e4      	beq.n	800cb30 <pow+0x58>
 800cb66:	f7fc fbe7 	bl	8009338 <__errno>
 800cb6a:	2321      	movs	r3, #33	; 0x21
 800cb6c:	6003      	str	r3, [r0, #0]
 800cb6e:	4630      	mov	r0, r6
 800cb70:	4639      	mov	r1, r7
 800cb72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb76:	2200      	movs	r2, #0
 800cb78:	2300      	movs	r3, #0
 800cb7a:	4630      	mov	r0, r6
 800cb7c:	4639      	mov	r1, r7
 800cb7e:	f7f3 ff13 	bl	80009a8 <__aeabi_dcmpeq>
 800cb82:	2800      	cmp	r0, #0
 800cb84:	d0f3      	beq.n	800cb6e <pow+0x96>
 800cb86:	4640      	mov	r0, r8
 800cb88:	4649      	mov	r1, r9
 800cb8a:	f000 f80d 	bl	800cba8 <finite>
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	d0ed      	beq.n	800cb6e <pow+0x96>
 800cb92:	4620      	mov	r0, r4
 800cb94:	4629      	mov	r1, r5
 800cb96:	f000 f807 	bl	800cba8 <finite>
 800cb9a:	e7c8      	b.n	800cb2e <pow+0x56>
 800cb9c:	2600      	movs	r6, #0
 800cb9e:	4f01      	ldr	r7, [pc, #4]	; (800cba4 <pow+0xcc>)
 800cba0:	e7e5      	b.n	800cb6e <pow+0x96>
 800cba2:	bf00      	nop
 800cba4:	3ff00000 	.word	0x3ff00000

0800cba8 <finite>:
 800cba8:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800cbac:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cbb0:	0fc0      	lsrs	r0, r0, #31
 800cbb2:	4770      	bx	lr
 800cbb4:	0000      	movs	r0, r0
	...

0800cbb8 <__ieee754_pow>:
 800cbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbbc:	b093      	sub	sp, #76	; 0x4c
 800cbbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cbc2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800cbc6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800cbca:	4689      	mov	r9, r1
 800cbcc:	ea56 0102 	orrs.w	r1, r6, r2
 800cbd0:	4680      	mov	r8, r0
 800cbd2:	d111      	bne.n	800cbf8 <__ieee754_pow+0x40>
 800cbd4:	1803      	adds	r3, r0, r0
 800cbd6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800cbda:	4152      	adcs	r2, r2
 800cbdc:	4299      	cmp	r1, r3
 800cbde:	4b82      	ldr	r3, [pc, #520]	; (800cde8 <__ieee754_pow+0x230>)
 800cbe0:	4193      	sbcs	r3, r2
 800cbe2:	f080 84ba 	bcs.w	800d55a <__ieee754_pow+0x9a2>
 800cbe6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cbea:	4640      	mov	r0, r8
 800cbec:	4649      	mov	r1, r9
 800cbee:	f7f3 fabd 	bl	800016c <__adddf3>
 800cbf2:	4683      	mov	fp, r0
 800cbf4:	468c      	mov	ip, r1
 800cbf6:	e06f      	b.n	800ccd8 <__ieee754_pow+0x120>
 800cbf8:	4b7c      	ldr	r3, [pc, #496]	; (800cdec <__ieee754_pow+0x234>)
 800cbfa:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800cbfe:	429c      	cmp	r4, r3
 800cc00:	464d      	mov	r5, r9
 800cc02:	4682      	mov	sl, r0
 800cc04:	dc06      	bgt.n	800cc14 <__ieee754_pow+0x5c>
 800cc06:	d101      	bne.n	800cc0c <__ieee754_pow+0x54>
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	d1ec      	bne.n	800cbe6 <__ieee754_pow+0x2e>
 800cc0c:	429e      	cmp	r6, r3
 800cc0e:	dc01      	bgt.n	800cc14 <__ieee754_pow+0x5c>
 800cc10:	d10f      	bne.n	800cc32 <__ieee754_pow+0x7a>
 800cc12:	b172      	cbz	r2, 800cc32 <__ieee754_pow+0x7a>
 800cc14:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800cc18:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800cc1c:	ea55 050a 	orrs.w	r5, r5, sl
 800cc20:	d1e1      	bne.n	800cbe6 <__ieee754_pow+0x2e>
 800cc22:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cc26:	18db      	adds	r3, r3, r3
 800cc28:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800cc2c:	4152      	adcs	r2, r2
 800cc2e:	429d      	cmp	r5, r3
 800cc30:	e7d5      	b.n	800cbde <__ieee754_pow+0x26>
 800cc32:	2d00      	cmp	r5, #0
 800cc34:	da39      	bge.n	800ccaa <__ieee754_pow+0xf2>
 800cc36:	4b6e      	ldr	r3, [pc, #440]	; (800cdf0 <__ieee754_pow+0x238>)
 800cc38:	429e      	cmp	r6, r3
 800cc3a:	dc52      	bgt.n	800cce2 <__ieee754_pow+0x12a>
 800cc3c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cc40:	429e      	cmp	r6, r3
 800cc42:	f340 849d 	ble.w	800d580 <__ieee754_pow+0x9c8>
 800cc46:	1533      	asrs	r3, r6, #20
 800cc48:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cc4c:	2b14      	cmp	r3, #20
 800cc4e:	dd0f      	ble.n	800cc70 <__ieee754_pow+0xb8>
 800cc50:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cc54:	fa22 f103 	lsr.w	r1, r2, r3
 800cc58:	fa01 f303 	lsl.w	r3, r1, r3
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	f040 848f 	bne.w	800d580 <__ieee754_pow+0x9c8>
 800cc62:	f001 0101 	and.w	r1, r1, #1
 800cc66:	f1c1 0302 	rsb	r3, r1, #2
 800cc6a:	9300      	str	r3, [sp, #0]
 800cc6c:	b182      	cbz	r2, 800cc90 <__ieee754_pow+0xd8>
 800cc6e:	e05d      	b.n	800cd2c <__ieee754_pow+0x174>
 800cc70:	2a00      	cmp	r2, #0
 800cc72:	d159      	bne.n	800cd28 <__ieee754_pow+0x170>
 800cc74:	f1c3 0314 	rsb	r3, r3, #20
 800cc78:	fa46 f103 	asr.w	r1, r6, r3
 800cc7c:	fa01 f303 	lsl.w	r3, r1, r3
 800cc80:	42b3      	cmp	r3, r6
 800cc82:	f040 847a 	bne.w	800d57a <__ieee754_pow+0x9c2>
 800cc86:	f001 0101 	and.w	r1, r1, #1
 800cc8a:	f1c1 0302 	rsb	r3, r1, #2
 800cc8e:	9300      	str	r3, [sp, #0]
 800cc90:	4b58      	ldr	r3, [pc, #352]	; (800cdf4 <__ieee754_pow+0x23c>)
 800cc92:	429e      	cmp	r6, r3
 800cc94:	d132      	bne.n	800ccfc <__ieee754_pow+0x144>
 800cc96:	2f00      	cmp	r7, #0
 800cc98:	f280 846b 	bge.w	800d572 <__ieee754_pow+0x9ba>
 800cc9c:	4642      	mov	r2, r8
 800cc9e:	464b      	mov	r3, r9
 800cca0:	2000      	movs	r0, #0
 800cca2:	4954      	ldr	r1, [pc, #336]	; (800cdf4 <__ieee754_pow+0x23c>)
 800cca4:	f7f3 fd42 	bl	800072c <__aeabi_ddiv>
 800cca8:	e7a3      	b.n	800cbf2 <__ieee754_pow+0x3a>
 800ccaa:	2300      	movs	r3, #0
 800ccac:	9300      	str	r3, [sp, #0]
 800ccae:	2a00      	cmp	r2, #0
 800ccb0:	d13c      	bne.n	800cd2c <__ieee754_pow+0x174>
 800ccb2:	4b4e      	ldr	r3, [pc, #312]	; (800cdec <__ieee754_pow+0x234>)
 800ccb4:	429e      	cmp	r6, r3
 800ccb6:	d1eb      	bne.n	800cc90 <__ieee754_pow+0xd8>
 800ccb8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ccbc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ccc0:	ea53 030a 	orrs.w	r3, r3, sl
 800ccc4:	f000 8449 	beq.w	800d55a <__ieee754_pow+0x9a2>
 800ccc8:	4b4b      	ldr	r3, [pc, #300]	; (800cdf8 <__ieee754_pow+0x240>)
 800ccca:	429c      	cmp	r4, r3
 800cccc:	dd0b      	ble.n	800cce6 <__ieee754_pow+0x12e>
 800ccce:	2f00      	cmp	r7, #0
 800ccd0:	f2c0 8449 	blt.w	800d566 <__ieee754_pow+0x9ae>
 800ccd4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800ccd8:	4658      	mov	r0, fp
 800ccda:	4661      	mov	r1, ip
 800ccdc:	b013      	add	sp, #76	; 0x4c
 800ccde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cce2:	2302      	movs	r3, #2
 800cce4:	e7e2      	b.n	800ccac <__ieee754_pow+0xf4>
 800cce6:	2f00      	cmp	r7, #0
 800cce8:	f04f 0b00 	mov.w	fp, #0
 800ccec:	f04f 0c00 	mov.w	ip, #0
 800ccf0:	daf2      	bge.n	800ccd8 <__ieee754_pow+0x120>
 800ccf2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800ccf6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800ccfa:	e7ed      	b.n	800ccd8 <__ieee754_pow+0x120>
 800ccfc:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800cd00:	d106      	bne.n	800cd10 <__ieee754_pow+0x158>
 800cd02:	4642      	mov	r2, r8
 800cd04:	464b      	mov	r3, r9
 800cd06:	4640      	mov	r0, r8
 800cd08:	4649      	mov	r1, r9
 800cd0a:	f7f3 fbe5 	bl	80004d8 <__aeabi_dmul>
 800cd0e:	e770      	b.n	800cbf2 <__ieee754_pow+0x3a>
 800cd10:	4b3a      	ldr	r3, [pc, #232]	; (800cdfc <__ieee754_pow+0x244>)
 800cd12:	429f      	cmp	r7, r3
 800cd14:	d10a      	bne.n	800cd2c <__ieee754_pow+0x174>
 800cd16:	2d00      	cmp	r5, #0
 800cd18:	db08      	blt.n	800cd2c <__ieee754_pow+0x174>
 800cd1a:	4640      	mov	r0, r8
 800cd1c:	4649      	mov	r1, r9
 800cd1e:	b013      	add	sp, #76	; 0x4c
 800cd20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd24:	f000 bd0a 	b.w	800d73c <__ieee754_sqrt>
 800cd28:	2300      	movs	r3, #0
 800cd2a:	9300      	str	r3, [sp, #0]
 800cd2c:	4640      	mov	r0, r8
 800cd2e:	4649      	mov	r1, r9
 800cd30:	f000 fc58 	bl	800d5e4 <fabs>
 800cd34:	4683      	mov	fp, r0
 800cd36:	468c      	mov	ip, r1
 800cd38:	f1ba 0f00 	cmp.w	sl, #0
 800cd3c:	d128      	bne.n	800cd90 <__ieee754_pow+0x1d8>
 800cd3e:	b124      	cbz	r4, 800cd4a <__ieee754_pow+0x192>
 800cd40:	4b2c      	ldr	r3, [pc, #176]	; (800cdf4 <__ieee754_pow+0x23c>)
 800cd42:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d122      	bne.n	800cd90 <__ieee754_pow+0x1d8>
 800cd4a:	2f00      	cmp	r7, #0
 800cd4c:	da07      	bge.n	800cd5e <__ieee754_pow+0x1a6>
 800cd4e:	465a      	mov	r2, fp
 800cd50:	4663      	mov	r3, ip
 800cd52:	2000      	movs	r0, #0
 800cd54:	4927      	ldr	r1, [pc, #156]	; (800cdf4 <__ieee754_pow+0x23c>)
 800cd56:	f7f3 fce9 	bl	800072c <__aeabi_ddiv>
 800cd5a:	4683      	mov	fp, r0
 800cd5c:	468c      	mov	ip, r1
 800cd5e:	2d00      	cmp	r5, #0
 800cd60:	daba      	bge.n	800ccd8 <__ieee754_pow+0x120>
 800cd62:	9b00      	ldr	r3, [sp, #0]
 800cd64:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cd68:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cd6c:	431c      	orrs	r4, r3
 800cd6e:	d108      	bne.n	800cd82 <__ieee754_pow+0x1ca>
 800cd70:	465a      	mov	r2, fp
 800cd72:	4663      	mov	r3, ip
 800cd74:	4658      	mov	r0, fp
 800cd76:	4661      	mov	r1, ip
 800cd78:	f7f3 f9f6 	bl	8000168 <__aeabi_dsub>
 800cd7c:	4602      	mov	r2, r0
 800cd7e:	460b      	mov	r3, r1
 800cd80:	e790      	b.n	800cca4 <__ieee754_pow+0xec>
 800cd82:	9b00      	ldr	r3, [sp, #0]
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d1a7      	bne.n	800ccd8 <__ieee754_pow+0x120>
 800cd88:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800cd8c:	469c      	mov	ip, r3
 800cd8e:	e7a3      	b.n	800ccd8 <__ieee754_pow+0x120>
 800cd90:	0feb      	lsrs	r3, r5, #31
 800cd92:	3b01      	subs	r3, #1
 800cd94:	930c      	str	r3, [sp, #48]	; 0x30
 800cd96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd98:	9b00      	ldr	r3, [sp, #0]
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	d104      	bne.n	800cda8 <__ieee754_pow+0x1f0>
 800cd9e:	4642      	mov	r2, r8
 800cda0:	464b      	mov	r3, r9
 800cda2:	4640      	mov	r0, r8
 800cda4:	4649      	mov	r1, r9
 800cda6:	e7e7      	b.n	800cd78 <__ieee754_pow+0x1c0>
 800cda8:	4b15      	ldr	r3, [pc, #84]	; (800ce00 <__ieee754_pow+0x248>)
 800cdaa:	429e      	cmp	r6, r3
 800cdac:	f340 80f6 	ble.w	800cf9c <__ieee754_pow+0x3e4>
 800cdb0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800cdb4:	429e      	cmp	r6, r3
 800cdb6:	4b10      	ldr	r3, [pc, #64]	; (800cdf8 <__ieee754_pow+0x240>)
 800cdb8:	dd09      	ble.n	800cdce <__ieee754_pow+0x216>
 800cdba:	429c      	cmp	r4, r3
 800cdbc:	dc0c      	bgt.n	800cdd8 <__ieee754_pow+0x220>
 800cdbe:	2f00      	cmp	r7, #0
 800cdc0:	da0c      	bge.n	800cddc <__ieee754_pow+0x224>
 800cdc2:	2000      	movs	r0, #0
 800cdc4:	b013      	add	sp, #76	; 0x4c
 800cdc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdca:	f000 bcb2 	b.w	800d732 <__math_oflow>
 800cdce:	429c      	cmp	r4, r3
 800cdd0:	dbf5      	blt.n	800cdbe <__ieee754_pow+0x206>
 800cdd2:	4b08      	ldr	r3, [pc, #32]	; (800cdf4 <__ieee754_pow+0x23c>)
 800cdd4:	429c      	cmp	r4, r3
 800cdd6:	dd15      	ble.n	800ce04 <__ieee754_pow+0x24c>
 800cdd8:	2f00      	cmp	r7, #0
 800cdda:	dcf2      	bgt.n	800cdc2 <__ieee754_pow+0x20a>
 800cddc:	2000      	movs	r0, #0
 800cdde:	b013      	add	sp, #76	; 0x4c
 800cde0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde4:	f000 bca0 	b.w	800d728 <__math_uflow>
 800cde8:	fff00000 	.word	0xfff00000
 800cdec:	7ff00000 	.word	0x7ff00000
 800cdf0:	433fffff 	.word	0x433fffff
 800cdf4:	3ff00000 	.word	0x3ff00000
 800cdf8:	3fefffff 	.word	0x3fefffff
 800cdfc:	3fe00000 	.word	0x3fe00000
 800ce00:	41e00000 	.word	0x41e00000
 800ce04:	4661      	mov	r1, ip
 800ce06:	2200      	movs	r2, #0
 800ce08:	4658      	mov	r0, fp
 800ce0a:	4b5f      	ldr	r3, [pc, #380]	; (800cf88 <__ieee754_pow+0x3d0>)
 800ce0c:	f7f3 f9ac 	bl	8000168 <__aeabi_dsub>
 800ce10:	a355      	add	r3, pc, #340	; (adr r3, 800cf68 <__ieee754_pow+0x3b0>)
 800ce12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce16:	4604      	mov	r4, r0
 800ce18:	460d      	mov	r5, r1
 800ce1a:	f7f3 fb5d 	bl	80004d8 <__aeabi_dmul>
 800ce1e:	a354      	add	r3, pc, #336	; (adr r3, 800cf70 <__ieee754_pow+0x3b8>)
 800ce20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce24:	4606      	mov	r6, r0
 800ce26:	460f      	mov	r7, r1
 800ce28:	4620      	mov	r0, r4
 800ce2a:	4629      	mov	r1, r5
 800ce2c:	f7f3 fb54 	bl	80004d8 <__aeabi_dmul>
 800ce30:	2200      	movs	r2, #0
 800ce32:	4682      	mov	sl, r0
 800ce34:	468b      	mov	fp, r1
 800ce36:	4620      	mov	r0, r4
 800ce38:	4629      	mov	r1, r5
 800ce3a:	4b54      	ldr	r3, [pc, #336]	; (800cf8c <__ieee754_pow+0x3d4>)
 800ce3c:	f7f3 fb4c 	bl	80004d8 <__aeabi_dmul>
 800ce40:	4602      	mov	r2, r0
 800ce42:	460b      	mov	r3, r1
 800ce44:	a14c      	add	r1, pc, #304	; (adr r1, 800cf78 <__ieee754_pow+0x3c0>)
 800ce46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce4a:	f7f3 f98d 	bl	8000168 <__aeabi_dsub>
 800ce4e:	4622      	mov	r2, r4
 800ce50:	462b      	mov	r3, r5
 800ce52:	f7f3 fb41 	bl	80004d8 <__aeabi_dmul>
 800ce56:	4602      	mov	r2, r0
 800ce58:	460b      	mov	r3, r1
 800ce5a:	2000      	movs	r0, #0
 800ce5c:	494c      	ldr	r1, [pc, #304]	; (800cf90 <__ieee754_pow+0x3d8>)
 800ce5e:	f7f3 f983 	bl	8000168 <__aeabi_dsub>
 800ce62:	4622      	mov	r2, r4
 800ce64:	462b      	mov	r3, r5
 800ce66:	4680      	mov	r8, r0
 800ce68:	4689      	mov	r9, r1
 800ce6a:	4620      	mov	r0, r4
 800ce6c:	4629      	mov	r1, r5
 800ce6e:	f7f3 fb33 	bl	80004d8 <__aeabi_dmul>
 800ce72:	4602      	mov	r2, r0
 800ce74:	460b      	mov	r3, r1
 800ce76:	4640      	mov	r0, r8
 800ce78:	4649      	mov	r1, r9
 800ce7a:	f7f3 fb2d 	bl	80004d8 <__aeabi_dmul>
 800ce7e:	a340      	add	r3, pc, #256	; (adr r3, 800cf80 <__ieee754_pow+0x3c8>)
 800ce80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce84:	f7f3 fb28 	bl	80004d8 <__aeabi_dmul>
 800ce88:	4602      	mov	r2, r0
 800ce8a:	460b      	mov	r3, r1
 800ce8c:	4650      	mov	r0, sl
 800ce8e:	4659      	mov	r1, fp
 800ce90:	f7f3 f96a 	bl	8000168 <__aeabi_dsub>
 800ce94:	4602      	mov	r2, r0
 800ce96:	460b      	mov	r3, r1
 800ce98:	4604      	mov	r4, r0
 800ce9a:	460d      	mov	r5, r1
 800ce9c:	4630      	mov	r0, r6
 800ce9e:	4639      	mov	r1, r7
 800cea0:	f7f3 f964 	bl	800016c <__adddf3>
 800cea4:	2000      	movs	r0, #0
 800cea6:	4632      	mov	r2, r6
 800cea8:	463b      	mov	r3, r7
 800ceaa:	4682      	mov	sl, r0
 800ceac:	468b      	mov	fp, r1
 800ceae:	f7f3 f95b 	bl	8000168 <__aeabi_dsub>
 800ceb2:	4602      	mov	r2, r0
 800ceb4:	460b      	mov	r3, r1
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	4629      	mov	r1, r5
 800ceba:	f7f3 f955 	bl	8000168 <__aeabi_dsub>
 800cebe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cec2:	9b00      	ldr	r3, [sp, #0]
 800cec4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cec6:	3b01      	subs	r3, #1
 800cec8:	4313      	orrs	r3, r2
 800ceca:	f04f 0600 	mov.w	r6, #0
 800cece:	f04f 0200 	mov.w	r2, #0
 800ced2:	bf0c      	ite	eq
 800ced4:	4b2f      	ldreq	r3, [pc, #188]	; (800cf94 <__ieee754_pow+0x3dc>)
 800ced6:	4b2c      	ldrne	r3, [pc, #176]	; (800cf88 <__ieee754_pow+0x3d0>)
 800ced8:	4604      	mov	r4, r0
 800ceda:	460d      	mov	r5, r1
 800cedc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cee0:	e9cd 2300 	strd	r2, r3, [sp]
 800cee4:	4632      	mov	r2, r6
 800cee6:	463b      	mov	r3, r7
 800cee8:	f7f3 f93e 	bl	8000168 <__aeabi_dsub>
 800ceec:	4652      	mov	r2, sl
 800ceee:	465b      	mov	r3, fp
 800cef0:	f7f3 faf2 	bl	80004d8 <__aeabi_dmul>
 800cef4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cef8:	4680      	mov	r8, r0
 800cefa:	4689      	mov	r9, r1
 800cefc:	4620      	mov	r0, r4
 800cefe:	4629      	mov	r1, r5
 800cf00:	f7f3 faea 	bl	80004d8 <__aeabi_dmul>
 800cf04:	4602      	mov	r2, r0
 800cf06:	460b      	mov	r3, r1
 800cf08:	4640      	mov	r0, r8
 800cf0a:	4649      	mov	r1, r9
 800cf0c:	f7f3 f92e 	bl	800016c <__adddf3>
 800cf10:	4632      	mov	r2, r6
 800cf12:	463b      	mov	r3, r7
 800cf14:	4680      	mov	r8, r0
 800cf16:	4689      	mov	r9, r1
 800cf18:	4650      	mov	r0, sl
 800cf1a:	4659      	mov	r1, fp
 800cf1c:	f7f3 fadc 	bl	80004d8 <__aeabi_dmul>
 800cf20:	4604      	mov	r4, r0
 800cf22:	460d      	mov	r5, r1
 800cf24:	460b      	mov	r3, r1
 800cf26:	4602      	mov	r2, r0
 800cf28:	4649      	mov	r1, r9
 800cf2a:	4640      	mov	r0, r8
 800cf2c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800cf30:	f7f3 f91c 	bl	800016c <__adddf3>
 800cf34:	4b18      	ldr	r3, [pc, #96]	; (800cf98 <__ieee754_pow+0x3e0>)
 800cf36:	4682      	mov	sl, r0
 800cf38:	4299      	cmp	r1, r3
 800cf3a:	460f      	mov	r7, r1
 800cf3c:	460e      	mov	r6, r1
 800cf3e:	f340 82e7 	ble.w	800d510 <__ieee754_pow+0x958>
 800cf42:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800cf46:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800cf4a:	4303      	orrs	r3, r0
 800cf4c:	f000 81e2 	beq.w	800d314 <__ieee754_pow+0x75c>
 800cf50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf54:	2200      	movs	r2, #0
 800cf56:	2300      	movs	r3, #0
 800cf58:	f7f3 fd30 	bl	80009bc <__aeabi_dcmplt>
 800cf5c:	3800      	subs	r0, #0
 800cf5e:	bf18      	it	ne
 800cf60:	2001      	movne	r0, #1
 800cf62:	e72f      	b.n	800cdc4 <__ieee754_pow+0x20c>
 800cf64:	f3af 8000 	nop.w
 800cf68:	60000000 	.word	0x60000000
 800cf6c:	3ff71547 	.word	0x3ff71547
 800cf70:	f85ddf44 	.word	0xf85ddf44
 800cf74:	3e54ae0b 	.word	0x3e54ae0b
 800cf78:	55555555 	.word	0x55555555
 800cf7c:	3fd55555 	.word	0x3fd55555
 800cf80:	652b82fe 	.word	0x652b82fe
 800cf84:	3ff71547 	.word	0x3ff71547
 800cf88:	3ff00000 	.word	0x3ff00000
 800cf8c:	3fd00000 	.word	0x3fd00000
 800cf90:	3fe00000 	.word	0x3fe00000
 800cf94:	bff00000 	.word	0xbff00000
 800cf98:	408fffff 	.word	0x408fffff
 800cf9c:	4bd4      	ldr	r3, [pc, #848]	; (800d2f0 <__ieee754_pow+0x738>)
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	402b      	ands	r3, r5
 800cfa2:	b943      	cbnz	r3, 800cfb6 <__ieee754_pow+0x3fe>
 800cfa4:	4658      	mov	r0, fp
 800cfa6:	4661      	mov	r1, ip
 800cfa8:	4bd2      	ldr	r3, [pc, #840]	; (800d2f4 <__ieee754_pow+0x73c>)
 800cfaa:	f7f3 fa95 	bl	80004d8 <__aeabi_dmul>
 800cfae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800cfb2:	4683      	mov	fp, r0
 800cfb4:	460c      	mov	r4, r1
 800cfb6:	1523      	asrs	r3, r4, #20
 800cfb8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cfbc:	4413      	add	r3, r2
 800cfbe:	930b      	str	r3, [sp, #44]	; 0x2c
 800cfc0:	4bcd      	ldr	r3, [pc, #820]	; (800d2f8 <__ieee754_pow+0x740>)
 800cfc2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800cfc6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800cfca:	429c      	cmp	r4, r3
 800cfcc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cfd0:	dd08      	ble.n	800cfe4 <__ieee754_pow+0x42c>
 800cfd2:	4bca      	ldr	r3, [pc, #808]	; (800d2fc <__ieee754_pow+0x744>)
 800cfd4:	429c      	cmp	r4, r3
 800cfd6:	f340 8164 	ble.w	800d2a2 <__ieee754_pow+0x6ea>
 800cfda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfdc:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800cfe0:	3301      	adds	r3, #1
 800cfe2:	930b      	str	r3, [sp, #44]	; 0x2c
 800cfe4:	2600      	movs	r6, #0
 800cfe6:	00f3      	lsls	r3, r6, #3
 800cfe8:	930d      	str	r3, [sp, #52]	; 0x34
 800cfea:	4bc5      	ldr	r3, [pc, #788]	; (800d300 <__ieee754_pow+0x748>)
 800cfec:	4658      	mov	r0, fp
 800cfee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cff2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cff6:	4629      	mov	r1, r5
 800cff8:	461a      	mov	r2, r3
 800cffa:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800cffe:	4623      	mov	r3, r4
 800d000:	f7f3 f8b2 	bl	8000168 <__aeabi_dsub>
 800d004:	46da      	mov	sl, fp
 800d006:	462b      	mov	r3, r5
 800d008:	4652      	mov	r2, sl
 800d00a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d00e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d012:	f7f3 f8ab 	bl	800016c <__adddf3>
 800d016:	4602      	mov	r2, r0
 800d018:	460b      	mov	r3, r1
 800d01a:	2000      	movs	r0, #0
 800d01c:	49b9      	ldr	r1, [pc, #740]	; (800d304 <__ieee754_pow+0x74c>)
 800d01e:	f7f3 fb85 	bl	800072c <__aeabi_ddiv>
 800d022:	4602      	mov	r2, r0
 800d024:	460b      	mov	r3, r1
 800d026:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d02a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d02e:	f7f3 fa53 	bl	80004d8 <__aeabi_dmul>
 800d032:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d036:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800d03a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d03e:	2300      	movs	r3, #0
 800d040:	2200      	movs	r2, #0
 800d042:	46ab      	mov	fp, r5
 800d044:	106d      	asrs	r5, r5, #1
 800d046:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d04a:	9304      	str	r3, [sp, #16]
 800d04c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d050:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d054:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800d058:	4640      	mov	r0, r8
 800d05a:	4649      	mov	r1, r9
 800d05c:	4614      	mov	r4, r2
 800d05e:	461d      	mov	r5, r3
 800d060:	f7f3 fa3a 	bl	80004d8 <__aeabi_dmul>
 800d064:	4602      	mov	r2, r0
 800d066:	460b      	mov	r3, r1
 800d068:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d06c:	f7f3 f87c 	bl	8000168 <__aeabi_dsub>
 800d070:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d074:	4606      	mov	r6, r0
 800d076:	460f      	mov	r7, r1
 800d078:	4620      	mov	r0, r4
 800d07a:	4629      	mov	r1, r5
 800d07c:	f7f3 f874 	bl	8000168 <__aeabi_dsub>
 800d080:	4602      	mov	r2, r0
 800d082:	460b      	mov	r3, r1
 800d084:	4650      	mov	r0, sl
 800d086:	4659      	mov	r1, fp
 800d088:	f7f3 f86e 	bl	8000168 <__aeabi_dsub>
 800d08c:	4642      	mov	r2, r8
 800d08e:	464b      	mov	r3, r9
 800d090:	f7f3 fa22 	bl	80004d8 <__aeabi_dmul>
 800d094:	4602      	mov	r2, r0
 800d096:	460b      	mov	r3, r1
 800d098:	4630      	mov	r0, r6
 800d09a:	4639      	mov	r1, r7
 800d09c:	f7f3 f864 	bl	8000168 <__aeabi_dsub>
 800d0a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d0a4:	f7f3 fa18 	bl	80004d8 <__aeabi_dmul>
 800d0a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d0ac:	4682      	mov	sl, r0
 800d0ae:	468b      	mov	fp, r1
 800d0b0:	4610      	mov	r0, r2
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	f7f3 fa10 	bl	80004d8 <__aeabi_dmul>
 800d0b8:	a37b      	add	r3, pc, #492	; (adr r3, 800d2a8 <__ieee754_pow+0x6f0>)
 800d0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0be:	4604      	mov	r4, r0
 800d0c0:	460d      	mov	r5, r1
 800d0c2:	f7f3 fa09 	bl	80004d8 <__aeabi_dmul>
 800d0c6:	a37a      	add	r3, pc, #488	; (adr r3, 800d2b0 <__ieee754_pow+0x6f8>)
 800d0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0cc:	f7f3 f84e 	bl	800016c <__adddf3>
 800d0d0:	4622      	mov	r2, r4
 800d0d2:	462b      	mov	r3, r5
 800d0d4:	f7f3 fa00 	bl	80004d8 <__aeabi_dmul>
 800d0d8:	a377      	add	r3, pc, #476	; (adr r3, 800d2b8 <__ieee754_pow+0x700>)
 800d0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0de:	f7f3 f845 	bl	800016c <__adddf3>
 800d0e2:	4622      	mov	r2, r4
 800d0e4:	462b      	mov	r3, r5
 800d0e6:	f7f3 f9f7 	bl	80004d8 <__aeabi_dmul>
 800d0ea:	a375      	add	r3, pc, #468	; (adr r3, 800d2c0 <__ieee754_pow+0x708>)
 800d0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f0:	f7f3 f83c 	bl	800016c <__adddf3>
 800d0f4:	4622      	mov	r2, r4
 800d0f6:	462b      	mov	r3, r5
 800d0f8:	f7f3 f9ee 	bl	80004d8 <__aeabi_dmul>
 800d0fc:	a372      	add	r3, pc, #456	; (adr r3, 800d2c8 <__ieee754_pow+0x710>)
 800d0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d102:	f7f3 f833 	bl	800016c <__adddf3>
 800d106:	4622      	mov	r2, r4
 800d108:	462b      	mov	r3, r5
 800d10a:	f7f3 f9e5 	bl	80004d8 <__aeabi_dmul>
 800d10e:	a370      	add	r3, pc, #448	; (adr r3, 800d2d0 <__ieee754_pow+0x718>)
 800d110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d114:	f7f3 f82a 	bl	800016c <__adddf3>
 800d118:	4622      	mov	r2, r4
 800d11a:	4606      	mov	r6, r0
 800d11c:	460f      	mov	r7, r1
 800d11e:	462b      	mov	r3, r5
 800d120:	4620      	mov	r0, r4
 800d122:	4629      	mov	r1, r5
 800d124:	f7f3 f9d8 	bl	80004d8 <__aeabi_dmul>
 800d128:	4602      	mov	r2, r0
 800d12a:	460b      	mov	r3, r1
 800d12c:	4630      	mov	r0, r6
 800d12e:	4639      	mov	r1, r7
 800d130:	f7f3 f9d2 	bl	80004d8 <__aeabi_dmul>
 800d134:	4604      	mov	r4, r0
 800d136:	460d      	mov	r5, r1
 800d138:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d13c:	4642      	mov	r2, r8
 800d13e:	464b      	mov	r3, r9
 800d140:	f7f3 f814 	bl	800016c <__adddf3>
 800d144:	4652      	mov	r2, sl
 800d146:	465b      	mov	r3, fp
 800d148:	f7f3 f9c6 	bl	80004d8 <__aeabi_dmul>
 800d14c:	4622      	mov	r2, r4
 800d14e:	462b      	mov	r3, r5
 800d150:	f7f3 f80c 	bl	800016c <__adddf3>
 800d154:	4642      	mov	r2, r8
 800d156:	4606      	mov	r6, r0
 800d158:	460f      	mov	r7, r1
 800d15a:	464b      	mov	r3, r9
 800d15c:	4640      	mov	r0, r8
 800d15e:	4649      	mov	r1, r9
 800d160:	f7f3 f9ba 	bl	80004d8 <__aeabi_dmul>
 800d164:	4602      	mov	r2, r0
 800d166:	460b      	mov	r3, r1
 800d168:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d16c:	2200      	movs	r2, #0
 800d16e:	4b66      	ldr	r3, [pc, #408]	; (800d308 <__ieee754_pow+0x750>)
 800d170:	f7f2 fffc 	bl	800016c <__adddf3>
 800d174:	4632      	mov	r2, r6
 800d176:	463b      	mov	r3, r7
 800d178:	f7f2 fff8 	bl	800016c <__adddf3>
 800d17c:	2400      	movs	r4, #0
 800d17e:	460d      	mov	r5, r1
 800d180:	4622      	mov	r2, r4
 800d182:	460b      	mov	r3, r1
 800d184:	4640      	mov	r0, r8
 800d186:	4649      	mov	r1, r9
 800d188:	f7f3 f9a6 	bl	80004d8 <__aeabi_dmul>
 800d18c:	2200      	movs	r2, #0
 800d18e:	4680      	mov	r8, r0
 800d190:	4689      	mov	r9, r1
 800d192:	4620      	mov	r0, r4
 800d194:	4629      	mov	r1, r5
 800d196:	4b5c      	ldr	r3, [pc, #368]	; (800d308 <__ieee754_pow+0x750>)
 800d198:	f7f2 ffe6 	bl	8000168 <__aeabi_dsub>
 800d19c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d1a0:	f7f2 ffe2 	bl	8000168 <__aeabi_dsub>
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	460b      	mov	r3, r1
 800d1a8:	4630      	mov	r0, r6
 800d1aa:	4639      	mov	r1, r7
 800d1ac:	f7f2 ffdc 	bl	8000168 <__aeabi_dsub>
 800d1b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d1b4:	f7f3 f990 	bl	80004d8 <__aeabi_dmul>
 800d1b8:	4622      	mov	r2, r4
 800d1ba:	4606      	mov	r6, r0
 800d1bc:	460f      	mov	r7, r1
 800d1be:	462b      	mov	r3, r5
 800d1c0:	4650      	mov	r0, sl
 800d1c2:	4659      	mov	r1, fp
 800d1c4:	f7f3 f988 	bl	80004d8 <__aeabi_dmul>
 800d1c8:	4602      	mov	r2, r0
 800d1ca:	460b      	mov	r3, r1
 800d1cc:	4630      	mov	r0, r6
 800d1ce:	4639      	mov	r1, r7
 800d1d0:	f7f2 ffcc 	bl	800016c <__adddf3>
 800d1d4:	2400      	movs	r4, #0
 800d1d6:	4606      	mov	r6, r0
 800d1d8:	460f      	mov	r7, r1
 800d1da:	4602      	mov	r2, r0
 800d1dc:	460b      	mov	r3, r1
 800d1de:	4640      	mov	r0, r8
 800d1e0:	4649      	mov	r1, r9
 800d1e2:	f7f2 ffc3 	bl	800016c <__adddf3>
 800d1e6:	a33c      	add	r3, pc, #240	; (adr r3, 800d2d8 <__ieee754_pow+0x720>)
 800d1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	460d      	mov	r5, r1
 800d1f0:	f7f3 f972 	bl	80004d8 <__aeabi_dmul>
 800d1f4:	4642      	mov	r2, r8
 800d1f6:	464b      	mov	r3, r9
 800d1f8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	4629      	mov	r1, r5
 800d200:	f7f2 ffb2 	bl	8000168 <__aeabi_dsub>
 800d204:	4602      	mov	r2, r0
 800d206:	460b      	mov	r3, r1
 800d208:	4630      	mov	r0, r6
 800d20a:	4639      	mov	r1, r7
 800d20c:	f7f2 ffac 	bl	8000168 <__aeabi_dsub>
 800d210:	a333      	add	r3, pc, #204	; (adr r3, 800d2e0 <__ieee754_pow+0x728>)
 800d212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d216:	f7f3 f95f 	bl	80004d8 <__aeabi_dmul>
 800d21a:	a333      	add	r3, pc, #204	; (adr r3, 800d2e8 <__ieee754_pow+0x730>)
 800d21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d220:	4606      	mov	r6, r0
 800d222:	460f      	mov	r7, r1
 800d224:	4620      	mov	r0, r4
 800d226:	4629      	mov	r1, r5
 800d228:	f7f3 f956 	bl	80004d8 <__aeabi_dmul>
 800d22c:	4602      	mov	r2, r0
 800d22e:	460b      	mov	r3, r1
 800d230:	4630      	mov	r0, r6
 800d232:	4639      	mov	r1, r7
 800d234:	f7f2 ff9a 	bl	800016c <__adddf3>
 800d238:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d23a:	4b34      	ldr	r3, [pc, #208]	; (800d30c <__ieee754_pow+0x754>)
 800d23c:	4413      	add	r3, r2
 800d23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d242:	f7f2 ff93 	bl	800016c <__adddf3>
 800d246:	4680      	mov	r8, r0
 800d248:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d24a:	4689      	mov	r9, r1
 800d24c:	f7f3 f8da 	bl	8000404 <__aeabi_i2d>
 800d250:	4604      	mov	r4, r0
 800d252:	460d      	mov	r5, r1
 800d254:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d258:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d25a:	4b2d      	ldr	r3, [pc, #180]	; (800d310 <__ieee754_pow+0x758>)
 800d25c:	4413      	add	r3, r2
 800d25e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d262:	4642      	mov	r2, r8
 800d264:	464b      	mov	r3, r9
 800d266:	f7f2 ff81 	bl	800016c <__adddf3>
 800d26a:	4632      	mov	r2, r6
 800d26c:	463b      	mov	r3, r7
 800d26e:	f7f2 ff7d 	bl	800016c <__adddf3>
 800d272:	4622      	mov	r2, r4
 800d274:	462b      	mov	r3, r5
 800d276:	f7f2 ff79 	bl	800016c <__adddf3>
 800d27a:	2000      	movs	r0, #0
 800d27c:	4622      	mov	r2, r4
 800d27e:	462b      	mov	r3, r5
 800d280:	4682      	mov	sl, r0
 800d282:	468b      	mov	fp, r1
 800d284:	f7f2 ff70 	bl	8000168 <__aeabi_dsub>
 800d288:	4632      	mov	r2, r6
 800d28a:	463b      	mov	r3, r7
 800d28c:	f7f2 ff6c 	bl	8000168 <__aeabi_dsub>
 800d290:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d294:	f7f2 ff68 	bl	8000168 <__aeabi_dsub>
 800d298:	4602      	mov	r2, r0
 800d29a:	460b      	mov	r3, r1
 800d29c:	4640      	mov	r0, r8
 800d29e:	4649      	mov	r1, r9
 800d2a0:	e60b      	b.n	800ceba <__ieee754_pow+0x302>
 800d2a2:	2601      	movs	r6, #1
 800d2a4:	e69f      	b.n	800cfe6 <__ieee754_pow+0x42e>
 800d2a6:	bf00      	nop
 800d2a8:	4a454eef 	.word	0x4a454eef
 800d2ac:	3fca7e28 	.word	0x3fca7e28
 800d2b0:	93c9db65 	.word	0x93c9db65
 800d2b4:	3fcd864a 	.word	0x3fcd864a
 800d2b8:	a91d4101 	.word	0xa91d4101
 800d2bc:	3fd17460 	.word	0x3fd17460
 800d2c0:	518f264d 	.word	0x518f264d
 800d2c4:	3fd55555 	.word	0x3fd55555
 800d2c8:	db6fabff 	.word	0xdb6fabff
 800d2cc:	3fdb6db6 	.word	0x3fdb6db6
 800d2d0:	33333303 	.word	0x33333303
 800d2d4:	3fe33333 	.word	0x3fe33333
 800d2d8:	e0000000 	.word	0xe0000000
 800d2dc:	3feec709 	.word	0x3feec709
 800d2e0:	dc3a03fd 	.word	0xdc3a03fd
 800d2e4:	3feec709 	.word	0x3feec709
 800d2e8:	145b01f5 	.word	0x145b01f5
 800d2ec:	be3e2fe0 	.word	0xbe3e2fe0
 800d2f0:	7ff00000 	.word	0x7ff00000
 800d2f4:	43400000 	.word	0x43400000
 800d2f8:	0003988e 	.word	0x0003988e
 800d2fc:	000bb679 	.word	0x000bb679
 800d300:	0800fd30 	.word	0x0800fd30
 800d304:	3ff00000 	.word	0x3ff00000
 800d308:	40080000 	.word	0x40080000
 800d30c:	0800fd50 	.word	0x0800fd50
 800d310:	0800fd40 	.word	0x0800fd40
 800d314:	a39c      	add	r3, pc, #624	; (adr r3, 800d588 <__ieee754_pow+0x9d0>)
 800d316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d31a:	4640      	mov	r0, r8
 800d31c:	4649      	mov	r1, r9
 800d31e:	f7f2 ff25 	bl	800016c <__adddf3>
 800d322:	4622      	mov	r2, r4
 800d324:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d328:	462b      	mov	r3, r5
 800d32a:	4650      	mov	r0, sl
 800d32c:	4639      	mov	r1, r7
 800d32e:	f7f2 ff1b 	bl	8000168 <__aeabi_dsub>
 800d332:	4602      	mov	r2, r0
 800d334:	460b      	mov	r3, r1
 800d336:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d33a:	f7f3 fb5d 	bl	80009f8 <__aeabi_dcmpgt>
 800d33e:	2800      	cmp	r0, #0
 800d340:	f47f ae06 	bne.w	800cf50 <__ieee754_pow+0x398>
 800d344:	4aa2      	ldr	r2, [pc, #648]	; (800d5d0 <__ieee754_pow+0xa18>)
 800d346:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800d34a:	4293      	cmp	r3, r2
 800d34c:	f340 8100 	ble.w	800d550 <__ieee754_pow+0x998>
 800d350:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d354:	151b      	asrs	r3, r3, #20
 800d356:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d35a:	fa4a fa03 	asr.w	sl, sl, r3
 800d35e:	44b2      	add	sl, r6
 800d360:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800d364:	489b      	ldr	r0, [pc, #620]	; (800d5d4 <__ieee754_pow+0xa1c>)
 800d366:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d36a:	4108      	asrs	r0, r1
 800d36c:	ea00 030a 	and.w	r3, r0, sl
 800d370:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800d374:	f1c1 0114 	rsb	r1, r1, #20
 800d378:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d37c:	fa4a fa01 	asr.w	sl, sl, r1
 800d380:	2e00      	cmp	r6, #0
 800d382:	f04f 0200 	mov.w	r2, #0
 800d386:	4620      	mov	r0, r4
 800d388:	4629      	mov	r1, r5
 800d38a:	bfb8      	it	lt
 800d38c:	f1ca 0a00 	rsblt	sl, sl, #0
 800d390:	f7f2 feea 	bl	8000168 <__aeabi_dsub>
 800d394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d398:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d39c:	2400      	movs	r4, #0
 800d39e:	4642      	mov	r2, r8
 800d3a0:	464b      	mov	r3, r9
 800d3a2:	f7f2 fee3 	bl	800016c <__adddf3>
 800d3a6:	a37a      	add	r3, pc, #488	; (adr r3, 800d590 <__ieee754_pow+0x9d8>)
 800d3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	460d      	mov	r5, r1
 800d3b0:	f7f3 f892 	bl	80004d8 <__aeabi_dmul>
 800d3b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d3b8:	4606      	mov	r6, r0
 800d3ba:	460f      	mov	r7, r1
 800d3bc:	4620      	mov	r0, r4
 800d3be:	4629      	mov	r1, r5
 800d3c0:	f7f2 fed2 	bl	8000168 <__aeabi_dsub>
 800d3c4:	4602      	mov	r2, r0
 800d3c6:	460b      	mov	r3, r1
 800d3c8:	4640      	mov	r0, r8
 800d3ca:	4649      	mov	r1, r9
 800d3cc:	f7f2 fecc 	bl	8000168 <__aeabi_dsub>
 800d3d0:	a371      	add	r3, pc, #452	; (adr r3, 800d598 <__ieee754_pow+0x9e0>)
 800d3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d6:	f7f3 f87f 	bl	80004d8 <__aeabi_dmul>
 800d3da:	a371      	add	r3, pc, #452	; (adr r3, 800d5a0 <__ieee754_pow+0x9e8>)
 800d3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e0:	4680      	mov	r8, r0
 800d3e2:	4689      	mov	r9, r1
 800d3e4:	4620      	mov	r0, r4
 800d3e6:	4629      	mov	r1, r5
 800d3e8:	f7f3 f876 	bl	80004d8 <__aeabi_dmul>
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	460b      	mov	r3, r1
 800d3f0:	4640      	mov	r0, r8
 800d3f2:	4649      	mov	r1, r9
 800d3f4:	f7f2 feba 	bl	800016c <__adddf3>
 800d3f8:	4604      	mov	r4, r0
 800d3fa:	460d      	mov	r5, r1
 800d3fc:	4602      	mov	r2, r0
 800d3fe:	460b      	mov	r3, r1
 800d400:	4630      	mov	r0, r6
 800d402:	4639      	mov	r1, r7
 800d404:	f7f2 feb2 	bl	800016c <__adddf3>
 800d408:	4632      	mov	r2, r6
 800d40a:	463b      	mov	r3, r7
 800d40c:	4680      	mov	r8, r0
 800d40e:	4689      	mov	r9, r1
 800d410:	f7f2 feaa 	bl	8000168 <__aeabi_dsub>
 800d414:	4602      	mov	r2, r0
 800d416:	460b      	mov	r3, r1
 800d418:	4620      	mov	r0, r4
 800d41a:	4629      	mov	r1, r5
 800d41c:	f7f2 fea4 	bl	8000168 <__aeabi_dsub>
 800d420:	4642      	mov	r2, r8
 800d422:	4606      	mov	r6, r0
 800d424:	460f      	mov	r7, r1
 800d426:	464b      	mov	r3, r9
 800d428:	4640      	mov	r0, r8
 800d42a:	4649      	mov	r1, r9
 800d42c:	f7f3 f854 	bl	80004d8 <__aeabi_dmul>
 800d430:	a35d      	add	r3, pc, #372	; (adr r3, 800d5a8 <__ieee754_pow+0x9f0>)
 800d432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d436:	4604      	mov	r4, r0
 800d438:	460d      	mov	r5, r1
 800d43a:	f7f3 f84d 	bl	80004d8 <__aeabi_dmul>
 800d43e:	a35c      	add	r3, pc, #368	; (adr r3, 800d5b0 <__ieee754_pow+0x9f8>)
 800d440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d444:	f7f2 fe90 	bl	8000168 <__aeabi_dsub>
 800d448:	4622      	mov	r2, r4
 800d44a:	462b      	mov	r3, r5
 800d44c:	f7f3 f844 	bl	80004d8 <__aeabi_dmul>
 800d450:	a359      	add	r3, pc, #356	; (adr r3, 800d5b8 <__ieee754_pow+0xa00>)
 800d452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d456:	f7f2 fe89 	bl	800016c <__adddf3>
 800d45a:	4622      	mov	r2, r4
 800d45c:	462b      	mov	r3, r5
 800d45e:	f7f3 f83b 	bl	80004d8 <__aeabi_dmul>
 800d462:	a357      	add	r3, pc, #348	; (adr r3, 800d5c0 <__ieee754_pow+0xa08>)
 800d464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d468:	f7f2 fe7e 	bl	8000168 <__aeabi_dsub>
 800d46c:	4622      	mov	r2, r4
 800d46e:	462b      	mov	r3, r5
 800d470:	f7f3 f832 	bl	80004d8 <__aeabi_dmul>
 800d474:	a354      	add	r3, pc, #336	; (adr r3, 800d5c8 <__ieee754_pow+0xa10>)
 800d476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d47a:	f7f2 fe77 	bl	800016c <__adddf3>
 800d47e:	4622      	mov	r2, r4
 800d480:	462b      	mov	r3, r5
 800d482:	f7f3 f829 	bl	80004d8 <__aeabi_dmul>
 800d486:	4602      	mov	r2, r0
 800d488:	460b      	mov	r3, r1
 800d48a:	4640      	mov	r0, r8
 800d48c:	4649      	mov	r1, r9
 800d48e:	f7f2 fe6b 	bl	8000168 <__aeabi_dsub>
 800d492:	4604      	mov	r4, r0
 800d494:	460d      	mov	r5, r1
 800d496:	4602      	mov	r2, r0
 800d498:	460b      	mov	r3, r1
 800d49a:	4640      	mov	r0, r8
 800d49c:	4649      	mov	r1, r9
 800d49e:	f7f3 f81b 	bl	80004d8 <__aeabi_dmul>
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d4ac:	4620      	mov	r0, r4
 800d4ae:	4629      	mov	r1, r5
 800d4b0:	f7f2 fe5a 	bl	8000168 <__aeabi_dsub>
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	460b      	mov	r3, r1
 800d4b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4bc:	f7f3 f936 	bl	800072c <__aeabi_ddiv>
 800d4c0:	4632      	mov	r2, r6
 800d4c2:	4604      	mov	r4, r0
 800d4c4:	460d      	mov	r5, r1
 800d4c6:	463b      	mov	r3, r7
 800d4c8:	4640      	mov	r0, r8
 800d4ca:	4649      	mov	r1, r9
 800d4cc:	f7f3 f804 	bl	80004d8 <__aeabi_dmul>
 800d4d0:	4632      	mov	r2, r6
 800d4d2:	463b      	mov	r3, r7
 800d4d4:	f7f2 fe4a 	bl	800016c <__adddf3>
 800d4d8:	4602      	mov	r2, r0
 800d4da:	460b      	mov	r3, r1
 800d4dc:	4620      	mov	r0, r4
 800d4de:	4629      	mov	r1, r5
 800d4e0:	f7f2 fe42 	bl	8000168 <__aeabi_dsub>
 800d4e4:	4642      	mov	r2, r8
 800d4e6:	464b      	mov	r3, r9
 800d4e8:	f7f2 fe3e 	bl	8000168 <__aeabi_dsub>
 800d4ec:	4602      	mov	r2, r0
 800d4ee:	460b      	mov	r3, r1
 800d4f0:	2000      	movs	r0, #0
 800d4f2:	4939      	ldr	r1, [pc, #228]	; (800d5d8 <__ieee754_pow+0xa20>)
 800d4f4:	f7f2 fe38 	bl	8000168 <__aeabi_dsub>
 800d4f8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d4fc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d500:	da29      	bge.n	800d556 <__ieee754_pow+0x99e>
 800d502:	4652      	mov	r2, sl
 800d504:	f000 f874 	bl	800d5f0 <scalbn>
 800d508:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d50c:	f7ff bbfd 	b.w	800cd0a <__ieee754_pow+0x152>
 800d510:	4b32      	ldr	r3, [pc, #200]	; (800d5dc <__ieee754_pow+0xa24>)
 800d512:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800d516:	429f      	cmp	r7, r3
 800d518:	f77f af14 	ble.w	800d344 <__ieee754_pow+0x78c>
 800d51c:	4b30      	ldr	r3, [pc, #192]	; (800d5e0 <__ieee754_pow+0xa28>)
 800d51e:	440b      	add	r3, r1
 800d520:	4303      	orrs	r3, r0
 800d522:	d009      	beq.n	800d538 <__ieee754_pow+0x980>
 800d524:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d528:	2200      	movs	r2, #0
 800d52a:	2300      	movs	r3, #0
 800d52c:	f7f3 fa46 	bl	80009bc <__aeabi_dcmplt>
 800d530:	3800      	subs	r0, #0
 800d532:	bf18      	it	ne
 800d534:	2001      	movne	r0, #1
 800d536:	e452      	b.n	800cdde <__ieee754_pow+0x226>
 800d538:	4622      	mov	r2, r4
 800d53a:	462b      	mov	r3, r5
 800d53c:	f7f2 fe14 	bl	8000168 <__aeabi_dsub>
 800d540:	4642      	mov	r2, r8
 800d542:	464b      	mov	r3, r9
 800d544:	f7f3 fa4e 	bl	80009e4 <__aeabi_dcmpge>
 800d548:	2800      	cmp	r0, #0
 800d54a:	f43f aefb 	beq.w	800d344 <__ieee754_pow+0x78c>
 800d54e:	e7e9      	b.n	800d524 <__ieee754_pow+0x96c>
 800d550:	f04f 0a00 	mov.w	sl, #0
 800d554:	e720      	b.n	800d398 <__ieee754_pow+0x7e0>
 800d556:	4621      	mov	r1, r4
 800d558:	e7d6      	b.n	800d508 <__ieee754_pow+0x950>
 800d55a:	f04f 0b00 	mov.w	fp, #0
 800d55e:	f8df c078 	ldr.w	ip, [pc, #120]	; 800d5d8 <__ieee754_pow+0xa20>
 800d562:	f7ff bbb9 	b.w	800ccd8 <__ieee754_pow+0x120>
 800d566:	f04f 0b00 	mov.w	fp, #0
 800d56a:	f04f 0c00 	mov.w	ip, #0
 800d56e:	f7ff bbb3 	b.w	800ccd8 <__ieee754_pow+0x120>
 800d572:	4640      	mov	r0, r8
 800d574:	4649      	mov	r1, r9
 800d576:	f7ff bb3c 	b.w	800cbf2 <__ieee754_pow+0x3a>
 800d57a:	9200      	str	r2, [sp, #0]
 800d57c:	f7ff bb88 	b.w	800cc90 <__ieee754_pow+0xd8>
 800d580:	2300      	movs	r3, #0
 800d582:	f7ff bb72 	b.w	800cc6a <__ieee754_pow+0xb2>
 800d586:	bf00      	nop
 800d588:	652b82fe 	.word	0x652b82fe
 800d58c:	3c971547 	.word	0x3c971547
 800d590:	00000000 	.word	0x00000000
 800d594:	3fe62e43 	.word	0x3fe62e43
 800d598:	fefa39ef 	.word	0xfefa39ef
 800d59c:	3fe62e42 	.word	0x3fe62e42
 800d5a0:	0ca86c39 	.word	0x0ca86c39
 800d5a4:	be205c61 	.word	0xbe205c61
 800d5a8:	72bea4d0 	.word	0x72bea4d0
 800d5ac:	3e663769 	.word	0x3e663769
 800d5b0:	c5d26bf1 	.word	0xc5d26bf1
 800d5b4:	3ebbbd41 	.word	0x3ebbbd41
 800d5b8:	af25de2c 	.word	0xaf25de2c
 800d5bc:	3f11566a 	.word	0x3f11566a
 800d5c0:	16bebd93 	.word	0x16bebd93
 800d5c4:	3f66c16c 	.word	0x3f66c16c
 800d5c8:	5555553e 	.word	0x5555553e
 800d5cc:	3fc55555 	.word	0x3fc55555
 800d5d0:	3fe00000 	.word	0x3fe00000
 800d5d4:	fff00000 	.word	0xfff00000
 800d5d8:	3ff00000 	.word	0x3ff00000
 800d5dc:	4090cbff 	.word	0x4090cbff
 800d5e0:	3f6f3400 	.word	0x3f6f3400

0800d5e4 <fabs>:
 800d5e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d5e8:	4619      	mov	r1, r3
 800d5ea:	4770      	bx	lr
 800d5ec:	0000      	movs	r0, r0
	...

0800d5f0 <scalbn>:
 800d5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5f2:	4616      	mov	r6, r2
 800d5f4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d5f8:	4604      	mov	r4, r0
 800d5fa:	460d      	mov	r5, r1
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	b992      	cbnz	r2, 800d626 <scalbn+0x36>
 800d600:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d604:	4303      	orrs	r3, r0
 800d606:	d03c      	beq.n	800d682 <scalbn+0x92>
 800d608:	4b31      	ldr	r3, [pc, #196]	; (800d6d0 <scalbn+0xe0>)
 800d60a:	2200      	movs	r2, #0
 800d60c:	f7f2 ff64 	bl	80004d8 <__aeabi_dmul>
 800d610:	4b30      	ldr	r3, [pc, #192]	; (800d6d4 <scalbn+0xe4>)
 800d612:	4604      	mov	r4, r0
 800d614:	429e      	cmp	r6, r3
 800d616:	460d      	mov	r5, r1
 800d618:	da0f      	bge.n	800d63a <scalbn+0x4a>
 800d61a:	a329      	add	r3, pc, #164	; (adr r3, 800d6c0 <scalbn+0xd0>)
 800d61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d620:	f7f2 ff5a 	bl	80004d8 <__aeabi_dmul>
 800d624:	e006      	b.n	800d634 <scalbn+0x44>
 800d626:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800d62a:	42ba      	cmp	r2, r7
 800d62c:	d109      	bne.n	800d642 <scalbn+0x52>
 800d62e:	4602      	mov	r2, r0
 800d630:	f7f2 fd9c 	bl	800016c <__adddf3>
 800d634:	4604      	mov	r4, r0
 800d636:	460d      	mov	r5, r1
 800d638:	e023      	b.n	800d682 <scalbn+0x92>
 800d63a:	460b      	mov	r3, r1
 800d63c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d640:	3a36      	subs	r2, #54	; 0x36
 800d642:	f24c 3150 	movw	r1, #50000	; 0xc350
 800d646:	428e      	cmp	r6, r1
 800d648:	dd0e      	ble.n	800d668 <scalbn+0x78>
 800d64a:	a31f      	add	r3, pc, #124	; (adr r3, 800d6c8 <scalbn+0xd8>)
 800d64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d650:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800d654:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800d658:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800d65c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800d660:	481d      	ldr	r0, [pc, #116]	; (800d6d8 <scalbn+0xe8>)
 800d662:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800d666:	e7db      	b.n	800d620 <scalbn+0x30>
 800d668:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d66c:	4432      	add	r2, r6
 800d66e:	428a      	cmp	r2, r1
 800d670:	dceb      	bgt.n	800d64a <scalbn+0x5a>
 800d672:	2a00      	cmp	r2, #0
 800d674:	dd08      	ble.n	800d688 <scalbn+0x98>
 800d676:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d67a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d67e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d682:	4620      	mov	r0, r4
 800d684:	4629      	mov	r1, r5
 800d686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d688:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d68c:	da0c      	bge.n	800d6a8 <scalbn+0xb8>
 800d68e:	a30c      	add	r3, pc, #48	; (adr r3, 800d6c0 <scalbn+0xd0>)
 800d690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d694:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800d698:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800d69c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800d6a0:	480e      	ldr	r0, [pc, #56]	; (800d6dc <scalbn+0xec>)
 800d6a2:	f041 011f 	orr.w	r1, r1, #31
 800d6a6:	e7bb      	b.n	800d620 <scalbn+0x30>
 800d6a8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d6ac:	3236      	adds	r2, #54	; 0x36
 800d6ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d6b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	4629      	mov	r1, r5
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	4b08      	ldr	r3, [pc, #32]	; (800d6e0 <scalbn+0xf0>)
 800d6be:	e7af      	b.n	800d620 <scalbn+0x30>
 800d6c0:	c2f8f359 	.word	0xc2f8f359
 800d6c4:	01a56e1f 	.word	0x01a56e1f
 800d6c8:	8800759c 	.word	0x8800759c
 800d6cc:	7e37e43c 	.word	0x7e37e43c
 800d6d0:	43500000 	.word	0x43500000
 800d6d4:	ffff3cb0 	.word	0xffff3cb0
 800d6d8:	8800759c 	.word	0x8800759c
 800d6dc:	c2f8f359 	.word	0xc2f8f359
 800d6e0:	3c900000 	.word	0x3c900000

0800d6e4 <with_errno>:
 800d6e4:	b570      	push	{r4, r5, r6, lr}
 800d6e6:	4604      	mov	r4, r0
 800d6e8:	460d      	mov	r5, r1
 800d6ea:	4616      	mov	r6, r2
 800d6ec:	f7fb fe24 	bl	8009338 <__errno>
 800d6f0:	4629      	mov	r1, r5
 800d6f2:	6006      	str	r6, [r0, #0]
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	bd70      	pop	{r4, r5, r6, pc}

0800d6f8 <xflow>:
 800d6f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d6fa:	4615      	mov	r5, r2
 800d6fc:	461c      	mov	r4, r3
 800d6fe:	b180      	cbz	r0, 800d722 <xflow+0x2a>
 800d700:	4610      	mov	r0, r2
 800d702:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d706:	e9cd 0100 	strd	r0, r1, [sp]
 800d70a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d70e:	4628      	mov	r0, r5
 800d710:	4621      	mov	r1, r4
 800d712:	f7f2 fee1 	bl	80004d8 <__aeabi_dmul>
 800d716:	2222      	movs	r2, #34	; 0x22
 800d718:	b003      	add	sp, #12
 800d71a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d71e:	f7ff bfe1 	b.w	800d6e4 <with_errno>
 800d722:	4610      	mov	r0, r2
 800d724:	4619      	mov	r1, r3
 800d726:	e7ee      	b.n	800d706 <xflow+0xe>

0800d728 <__math_uflow>:
 800d728:	2200      	movs	r2, #0
 800d72a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d72e:	f7ff bfe3 	b.w	800d6f8 <xflow>

0800d732 <__math_oflow>:
 800d732:	2200      	movs	r2, #0
 800d734:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d738:	f7ff bfde 	b.w	800d6f8 <xflow>

0800d73c <__ieee754_sqrt>:
 800d73c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800d8e0 <__ieee754_sqrt+0x1a4>
 800d740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d744:	ea3c 0c01 	bics.w	ip, ip, r1
 800d748:	460b      	mov	r3, r1
 800d74a:	4606      	mov	r6, r0
 800d74c:	460d      	mov	r5, r1
 800d74e:	460a      	mov	r2, r1
 800d750:	4604      	mov	r4, r0
 800d752:	d10e      	bne.n	800d772 <__ieee754_sqrt+0x36>
 800d754:	4602      	mov	r2, r0
 800d756:	f7f2 febf 	bl	80004d8 <__aeabi_dmul>
 800d75a:	4602      	mov	r2, r0
 800d75c:	460b      	mov	r3, r1
 800d75e:	4630      	mov	r0, r6
 800d760:	4629      	mov	r1, r5
 800d762:	f7f2 fd03 	bl	800016c <__adddf3>
 800d766:	4606      	mov	r6, r0
 800d768:	460d      	mov	r5, r1
 800d76a:	4630      	mov	r0, r6
 800d76c:	4629      	mov	r1, r5
 800d76e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d772:	2900      	cmp	r1, #0
 800d774:	dc0d      	bgt.n	800d792 <__ieee754_sqrt+0x56>
 800d776:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800d77a:	ea5c 0c00 	orrs.w	ip, ip, r0
 800d77e:	d0f4      	beq.n	800d76a <__ieee754_sqrt+0x2e>
 800d780:	b139      	cbz	r1, 800d792 <__ieee754_sqrt+0x56>
 800d782:	4602      	mov	r2, r0
 800d784:	f7f2 fcf0 	bl	8000168 <__aeabi_dsub>
 800d788:	4602      	mov	r2, r0
 800d78a:	460b      	mov	r3, r1
 800d78c:	f7f2 ffce 	bl	800072c <__aeabi_ddiv>
 800d790:	e7e9      	b.n	800d766 <__ieee754_sqrt+0x2a>
 800d792:	1512      	asrs	r2, r2, #20
 800d794:	f000 8089 	beq.w	800d8aa <__ieee754_sqrt+0x16e>
 800d798:	2500      	movs	r5, #0
 800d79a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d79e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800d7a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7a6:	07d2      	lsls	r2, r2, #31
 800d7a8:	bf5c      	itt	pl
 800d7aa:	005b      	lslpl	r3, r3, #1
 800d7ac:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800d7b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d7b4:	bf58      	it	pl
 800d7b6:	0064      	lslpl	r4, r4, #1
 800d7b8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800d7bc:	0062      	lsls	r2, r4, #1
 800d7be:	2016      	movs	r0, #22
 800d7c0:	4629      	mov	r1, r5
 800d7c2:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800d7c6:	1076      	asrs	r6, r6, #1
 800d7c8:	190f      	adds	r7, r1, r4
 800d7ca:	429f      	cmp	r7, r3
 800d7cc:	bfde      	ittt	le
 800d7ce:	1bdb      	suble	r3, r3, r7
 800d7d0:	1939      	addle	r1, r7, r4
 800d7d2:	192d      	addle	r5, r5, r4
 800d7d4:	005b      	lsls	r3, r3, #1
 800d7d6:	3801      	subs	r0, #1
 800d7d8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d7dc:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d7e0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d7e4:	d1f0      	bne.n	800d7c8 <__ieee754_sqrt+0x8c>
 800d7e6:	4604      	mov	r4, r0
 800d7e8:	2720      	movs	r7, #32
 800d7ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800d7ee:	428b      	cmp	r3, r1
 800d7f0:	eb0c 0e00 	add.w	lr, ip, r0
 800d7f4:	dc02      	bgt.n	800d7fc <__ieee754_sqrt+0xc0>
 800d7f6:	d113      	bne.n	800d820 <__ieee754_sqrt+0xe4>
 800d7f8:	4596      	cmp	lr, r2
 800d7fa:	d811      	bhi.n	800d820 <__ieee754_sqrt+0xe4>
 800d7fc:	f1be 0f00 	cmp.w	lr, #0
 800d800:	eb0e 000c 	add.w	r0, lr, ip
 800d804:	da56      	bge.n	800d8b4 <__ieee754_sqrt+0x178>
 800d806:	2800      	cmp	r0, #0
 800d808:	db54      	blt.n	800d8b4 <__ieee754_sqrt+0x178>
 800d80a:	f101 0801 	add.w	r8, r1, #1
 800d80e:	1a5b      	subs	r3, r3, r1
 800d810:	4641      	mov	r1, r8
 800d812:	4596      	cmp	lr, r2
 800d814:	bf88      	it	hi
 800d816:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d81a:	eba2 020e 	sub.w	r2, r2, lr
 800d81e:	4464      	add	r4, ip
 800d820:	005b      	lsls	r3, r3, #1
 800d822:	3f01      	subs	r7, #1
 800d824:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d828:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d82c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d830:	d1dd      	bne.n	800d7ee <__ieee754_sqrt+0xb2>
 800d832:	4313      	orrs	r3, r2
 800d834:	d01b      	beq.n	800d86e <__ieee754_sqrt+0x132>
 800d836:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d8e4 <__ieee754_sqrt+0x1a8>
 800d83a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d8e8 <__ieee754_sqrt+0x1ac>
 800d83e:	e9da 0100 	ldrd	r0, r1, [sl]
 800d842:	e9db 2300 	ldrd	r2, r3, [fp]
 800d846:	f7f2 fc8f 	bl	8000168 <__aeabi_dsub>
 800d84a:	e9da 8900 	ldrd	r8, r9, [sl]
 800d84e:	4602      	mov	r2, r0
 800d850:	460b      	mov	r3, r1
 800d852:	4640      	mov	r0, r8
 800d854:	4649      	mov	r1, r9
 800d856:	f7f3 f8bb 	bl	80009d0 <__aeabi_dcmple>
 800d85a:	b140      	cbz	r0, 800d86e <__ieee754_sqrt+0x132>
 800d85c:	e9da 0100 	ldrd	r0, r1, [sl]
 800d860:	e9db 2300 	ldrd	r2, r3, [fp]
 800d864:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d868:	d126      	bne.n	800d8b8 <__ieee754_sqrt+0x17c>
 800d86a:	463c      	mov	r4, r7
 800d86c:	3501      	adds	r5, #1
 800d86e:	106b      	asrs	r3, r5, #1
 800d870:	0864      	lsrs	r4, r4, #1
 800d872:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d876:	07ea      	lsls	r2, r5, #31
 800d878:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d87c:	bf48      	it	mi
 800d87e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800d882:	4620      	mov	r0, r4
 800d884:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800d888:	e76d      	b.n	800d766 <__ieee754_sqrt+0x2a>
 800d88a:	0ae3      	lsrs	r3, r4, #11
 800d88c:	3915      	subs	r1, #21
 800d88e:	0564      	lsls	r4, r4, #21
 800d890:	2b00      	cmp	r3, #0
 800d892:	d0fa      	beq.n	800d88a <__ieee754_sqrt+0x14e>
 800d894:	02d8      	lsls	r0, r3, #11
 800d896:	d50a      	bpl.n	800d8ae <__ieee754_sqrt+0x172>
 800d898:	f1c2 0020 	rsb	r0, r2, #32
 800d89c:	fa24 f000 	lsr.w	r0, r4, r0
 800d8a0:	1e55      	subs	r5, r2, #1
 800d8a2:	4094      	lsls	r4, r2
 800d8a4:	4303      	orrs	r3, r0
 800d8a6:	1b4a      	subs	r2, r1, r5
 800d8a8:	e776      	b.n	800d798 <__ieee754_sqrt+0x5c>
 800d8aa:	4611      	mov	r1, r2
 800d8ac:	e7f0      	b.n	800d890 <__ieee754_sqrt+0x154>
 800d8ae:	005b      	lsls	r3, r3, #1
 800d8b0:	3201      	adds	r2, #1
 800d8b2:	e7ef      	b.n	800d894 <__ieee754_sqrt+0x158>
 800d8b4:	4688      	mov	r8, r1
 800d8b6:	e7aa      	b.n	800d80e <__ieee754_sqrt+0xd2>
 800d8b8:	f7f2 fc58 	bl	800016c <__adddf3>
 800d8bc:	e9da 8900 	ldrd	r8, r9, [sl]
 800d8c0:	4602      	mov	r2, r0
 800d8c2:	460b      	mov	r3, r1
 800d8c4:	4640      	mov	r0, r8
 800d8c6:	4649      	mov	r1, r9
 800d8c8:	f7f3 f878 	bl	80009bc <__aeabi_dcmplt>
 800d8cc:	b120      	cbz	r0, 800d8d8 <__ieee754_sqrt+0x19c>
 800d8ce:	1ca1      	adds	r1, r4, #2
 800d8d0:	bf08      	it	eq
 800d8d2:	3501      	addeq	r5, #1
 800d8d4:	3402      	adds	r4, #2
 800d8d6:	e7ca      	b.n	800d86e <__ieee754_sqrt+0x132>
 800d8d8:	3401      	adds	r4, #1
 800d8da:	f024 0401 	bic.w	r4, r4, #1
 800d8de:	e7c6      	b.n	800d86e <__ieee754_sqrt+0x132>
 800d8e0:	7ff00000 	.word	0x7ff00000
 800d8e4:	20000200 	.word	0x20000200
 800d8e8:	20000208 	.word	0x20000208

0800d8ec <_init>:
 800d8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ee:	bf00      	nop
 800d8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8f2:	bc08      	pop	{r3}
 800d8f4:	469e      	mov	lr, r3
 800d8f6:	4770      	bx	lr

0800d8f8 <_fini>:
 800d8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8fa:	bf00      	nop
 800d8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8fe:	bc08      	pop	{r3}
 800d900:	469e      	mov	lr, r3
 800d902:	4770      	bx	lr
